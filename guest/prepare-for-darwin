#/bin/sh
# Global variables
prefix=/usr
libdir_guest=$prefix/lib/gura/guest
make_option=-j3
failed=""
packages=""

labels="expat freetype fontconfig libusb pixman libpng"
labels="$labels cairo eigen fftw gmp jpegsrc liblinear libmtp libsvm onig sdl2 tiff wx yaml"

#---------------------------------------------------------------------------
function main() {
	if [ "$1" == "install" ] ; then
		mkdir -p $libdir_guest
		cp -v -a dylib/* $libdir_guest
		exit
	fi
	if [ $# -gt 0 ] ; then
		build_$1
		exit
	fi
	# Download packages
	for label in $labels
	do
		packages_$label
	done
	#download_packages
	# Build packages at first that are used by other packages
	for label in $labels
	do
		build_$label
	done
	# Prints a list of package names that have occcured errors
	if [ -n "$failed" ] ; then
		echo ======================================================================
		echo Error occured:$failed
		echo ======================================================================
	fi
}

#---------------------------------------------------------------------------
function download_packages() {
	for package in $packages
	do
		echo $package
		curl -O http://www.gura-lang.org/guest/$package
	done
}

#---------------------------------------------------------------------------
function setup_dylib() {
	local srcdir=$1
	local dstdir=$2
	for file in $srcdir/*.dylib
	do
		if [ ! -h $file ] ; then
			install_name_tool -id "@executable_path/../lib/gura/guest/`basename $file`" $file
		fi
		cp -a $file $dstdir
	done
}

#---------------------------------------------------------------------------
# depends on: fontconfig, freetype, pixman, libpng
function packages_cairo() {
	packages="$packages cairo-1.12.18.tar.xz"
}

function clean_cairo() {
	rm -rf cairo-1.12.18
}

function build_cairo() {
	tar xfz cairo-1.12.18.tar.xz
	pushd cairo-1.12.18
	./configure pixman_CFLAGS=-I`pwd`/../include/pixman pixman_LIBS="-L`pwd`/../lib -lpixman-1" PKG_CONFIG=../pkg-config-fake png_CFLAGS=-I`pwd`/../include/png png_LIBS="-L`pwd`/../lib -lpng16" FONTCONFIG_CFLAGS=-I`pwd`/../include/fontconfig FONTCONFIG_LDFLAGS="-L`pwd`/../dylib -lfontconfig" FREETYPE_CFLAGS=-I`pwd`/../include/freetype FREETYPE_LIBS="-L`pwd`/../lib -lfreetype -lbz2" --disable-xlib --disable-xcb --disable-gobject --disable-fc --disable-ps
	make $make_option || failed="$failed cairo"
	popd
	rm -f include/cairo
	ln -sf ../cairo-1.12.18/src/ include/cairo
	setup_dylib cairo-1.12.18/src/.libs dylib
}

#---------------------------------------------------------------------------
function packages_eigen() {
	packages="$packages eigen-eigen-5a0156e40feb.zip"
}

function clean_eigen() {
	rm -rf eigen-eigen-5a0156e40feb
}

function build_eigen() {
	unzip -o eigen-eigen-5a0156e40feb.zip
	ln -sf ../eigen-eigen-5a0156e40feb/Eigen include/Eigen
}

#---------------------------------------------------------------------------
function packages_expat() {
	packages="$packages expat-2.1.0.tar.gz"
}

function clean_expat() {
	rm -rf expat-2.1.0
}

function build_expat() {
	tar xfz expat-2.1.0.tar.gz
	pushd expat-2.1.0
	./configure
	make $make_option || failed="$failed expat"
	popd
	rm -f include/expat
	ln -sf ../expat-2.1.0/lib/ include/expat
	ln -sf ../expat-2.1.0/.libs/libexpat.a lib/libexpat.a
}

#---------------------------------------------------------------------------
function packages_fftw() {
	packages="$packages fftw-3.3.6-pl2.tar.gz"
}

function clean_fftw() {
	rm -rf fftw-3.3.6-pl2
}

function build_fftw() {
	tar xfz fftw-3.3.6-pl2.tar.gz
	pushd fftw-3.3.6-pl2
	./configure
	make
	popd
	rm -f include/fftw
	ln -sf ../fftw-3.3.6-pl2/api include/fftw
	ln -sf ../fftw-3.3.6-pl2/.libs/libfftw3.a lib/libfftw3.a
}

#---------------------------------------------------------------------------
# depends on: expat, freetype
function packages_fontconfig() {
	packages="$packages fontconfig-2.11.1.tar.bz2"
}

function clean_fontconfig() {
	rm -rf fontconfig-2.11.1
}

function build_fontconfig() {
	tar xfz fontconfig-2.11.1.tar.bz2
	pushd fontconfig-2.11.1
	./configure PKG_CONFIG=../pkg-config-fake FREETYPE_CFLAGS=-I../../include/freetype FREETYPE_LIBS="-L../../lib -lfreetype -lz -lbz2" EXPAT_CFLAGS=-I../../include/expat EXPAT_LIBS="-L../../lib -lexpat"
	make $make_option || failed="$failed fontconfig"
	popd
	rm -f include/fontconfig
	ln -sf ../fontconfig-2.11.1/ include/fontconfig
	setup_dylib fontconfig-2.11.1/src/.libs dylib
}

#---------------------------------------------------------------------------
function packages_freetype() {
	packages="$packages freetype-2.5.3.tar.bz2"
}

function clean_freetype() {
	rm -rf freetype-2.5.3
}

function build_freetype() {
	tar xfz freetype-2.5.3.tar.bz2
	pushd freetype-2.5.3
	./configure --with-png=no
	make $make_option || failed="$failed freetype"
	popd
	rm -f include/freetype
	ln -sf ../freetype-2.5.3/include/ include/freetype
	ln -sf ../freetype-2.5.3/objs/.libs/libfreetype.a lib/libfreetype.a
}

#---------------------------------------------------------------------------
function packages_gmp() {
	packages="$packages gmp-6.0.0a.tar.bz2"
}

function clean_gmp() {
	rm -rf gmp-6.0.0
}

function build_gmp() {
	tar xfz gmp-6.0.0a.tar.bz2
	pushd gmp-6.0.0
	./configure
	make $make_option || failed="$failed gmp"
	popd
	rm -f include/gmp
	ln -sf ../gmp-6.0.0/ include/gmp
	setup_dylib gmp-6.0.0/.libs dylib
}

#---------------------------------------------------------------------------
function packages_jpegsrc() {
	packages="$packages jpegsrc.v9a.tar.gz"
}

function clean_jpegsrc() {
	rm -rf jpeg-9a
}

function build_jpegsrc() {
	tar xfz jpegsrc.v9a.tar.gz
	pushd jpeg-9a
	./configure
	make $make_option || failed="$failed jpegsrc"
	popd
	rm -f include/jpeg
	ln -sf ../jpeg-9a/ include/jpeg
	ln -sf ../jpeg-9a/.libs/libjpeg.a lib/libjpeg.a
}

#---------------------------------------------------------------------------
function packages_liblinear() {
	packages="$packages liblinear-2.11.zip"
	packages="$packages liblinear-2.11-gurapatch.zip"
}

function clean_liblinear() {
	rm -rf liblinear-2.11
}

function build_liblinear() {
	unzip -o liblinear-2.11.zip
	unzip -o liblinear-2.11-gurapatch.zip
	pushd liblinear-2.11
	make lib
	popd
	rm -f include/liblinear
	ln -sf ../liblinear-2.11 include/liblinear
	setup_dylib liblinear-2.11 dylib
}

#---------------------------------------------------------------------------
# depends on: libusb
function packages_libmtp() {
	packages="$packages libmtp-1.1.15.tar.gz"
	packages="$packages libmtp-1.1.15-gurapatch.tar.gz"
}

function clean_libmtp() {
	rm -rf libmtp-1.1.15
}

function build_libmtp() {
	tar xfz libmtp-1.1.15.tar.gz
	tar xfz libmtp-1.1.15-gurapatch.tar.gz
	pushd libmtp-1.1.15
	./configure LIBUSB_CFLAGS=-I`pwd`/../libusb-1.0.22/libusb LIBUSB_LIBS="-L`pwd`/../libusb-1.0.22/libusb/.libs -lusb-1.0"
	make
	popd
	rm -f include/libmtp
	ln -sf ../libmtp-1.1.15/src include/libmtp
	ln -sf ../libmtp-1.1.15/src/.libs/libmtp.a lib/libmtp.a
}

#---------------------------------------------------------------------------
function packages_libpng() {
	packages="$packages libpng-1.6.12.tar.gz"
}

function clean_libpng() {
	rm -rf libpng-1.6.12
}

function build_libpng() {
	tar xfz libpng-1.6.12.tar.gz
	pushd libpng-1.6.12
	./configure
	make $make_option || failed="$failed libpng"
	popd
	rm -f include/png
	ln -sf ../libpng-1.6.12/ include/png
	ln -sf ../libpng-1.6.12/.libs/libpng16.a lib/libpng16.a
}

#---------------------------------------------------------------------------
function packages_libspectre() {
	packages="$packages libspectre-0.2.7.tar.gz"
}

function clean_libspectre() {
	rm -rf libspectre-0.2.7
}

function build_libspectre() {
	tar xfz libspectre-0.2.7.tar.gz
	pushd libspectre-0.2.7
	./configure 
	make $make_option || failed="$failed libspectre"
	popd
}

#---------------------------------------------------------------------------
function packages_libsvm() {
	packages="$packages libsvm-3.22.zip"
	packages="$packages libsvm-3.22-gurapatch.zip"
}

function clean_libsvm() {
	rm -rf libsvm-3.22
}

function build_libsvm() {
	unzip -o libsvm-3.22.zip
	unzip -o libsvm-3.22-gurapatch.zip
	pushd libsvm-3.22
	make lib
	popd
	rm -f include/libsvm
	ln -sf ../libsvm-3.22 include/libsvm
	setup_dylib libsvm-3.22 dylib
}

#---------------------------------------------------------------------------
function packages_libusb() {
	packages="$packages libusb-1.0.22.tar.bz2"
}

function clean_libusb() {
	rm -rf libusb-1.0.22
}

function build_libusb() {
	tar xfz libusb-1.0.22.tar.bz2
	pushd libusb-1.0.22
	./configure
	make
	popd
	rm -f include/libusb
	ln -sf ../libusb-1.0.22/libusb include/libusb
	ln -sf ../libusb-1.0.22/libusb/.libs/libusb-1.0.a lib/libusb.a
}

#---------------------------------------------------------------------------
function packages_llvm() {
	packages="$packages llvm-3.6.1.src.tar.xz"
}

function clean_llvm() {
	rm -rf llvm-3.6.1.src
}

function build_llvm() {
	tar xfJ llvm-3.6.1.src.tar.xz
	pushd llvm-3.6.1.src
	mkdir build
	cd build
	cmake ..
	make $make_option || failed="$failed llvm"
	popd
}

#---------------------------------------------------------------------------
function packages_onig() {
	packages="$packages onig-5.9.5.tar.gz"
}

function clean_onig() {
	rm -rf onig-5.9.5
}

function build_onig() {
	tar xfz onig-5.9.5.tar.gz
	pushd onig-5.9.5
	./configure
	make $make_option || failed="$failed onig"
	popd
	rm -f include/onig
	ln -sf ../onig-5.9.5/ include/onig
	ln -sf ../onig-5.9.5/.libs/libonig.a lib/libonig.a
}

#---------------------------------------------------------------------------
function packages_pixman() {
	packages="$packages pixman-0.34.0.tar.gz"
}

function clean_pixman() {
	rm -rf pixman-0.34.0
}

function build_pixman() {
	tar xfz pixman-0.34.0.tar.gz
	pushd pixman-0.34.0
	./configure
	make $make_option || failed="$failed pixman"
	popd
	rm -f include/pixman
	ln -sf ../pixman-0.34.0/pixman/ include/pixman
	ln -sf ../pixman-0.34.0/pixman/.libs/libpixman-1.a lib/libpixman-1.a
}

#---------------------------------------------------------------------------
function packages_sdl() {
	packages="$packages SDL-1.2.15.tar.gz"
}

function clean_sdl() {
	rm -rf SDL-1.2.15
}

function build_sdl() {
	tar xfz SDL-1.2.15.tar.gz
	pushd SDL-1.2.15
	./configure --disable-video-x11
	popd
}

#---------------------------------------------------------------------------
function packages_sdl2() {
	packages="$packages SDL2-2.0.4.tar.gz"
}

function clean_sdl2() {
	rm -rf SDL2-2.0.4
}

function build_sdl2() {
	tar xfz SDL2-2.0.4.tar.gz
	pushd SDL2-2.0.4
	./configure
	make $make_option || failed="$failed sdl2"
	popd
	rm -f include/SDL2
	ln -sf ../SDL2-2.0.4/include/ include/SDL2
	setup_dylib SDL2-2.0.4/build/.libs dylib
}

#---------------------------------------------------------------------------
function packages_tiff() {
	packages="$packages tiff-3.8.2.tar.gz"
}

function clean_tiff() {
	rm -rf tiff-3.8.2
}

function build_tiff() {
	tar xfz tiff-3.8.2.tar.gz
	pushd tiff-3.8.2
	./configure
	make $make_option || failed="$failed tiff"
	popd
	rm -f include/tiff
	ln -sf ../tiff-3.8.2/libtiff/ include/tiff
	ln -sf ../tiff-3.8.2/libtiff/.libs/libtiff.a lib/libtiff.a
}

#---------------------------------------------------------------------------
function packages_wx() {
	packages="$packages wxWidgets-3.1.1.tar.bz2"
}

function clean_wx() {
	rm -rf wxWidgets-3.1.1
}

function build_wx() {
	tar xfz wxWidgets-3.1.1.tar.bz2
	pushd wxWidgets-3.1.1
	./configure --with-macosx-version-min=10.9 --disable-shared
	make $make_option || failed="$failed wx"
	popd
	rm -f include/wx
	rm -f lib/wx
	ln -sf ../wxWidgets-3.1.1/include/ include/wx
	ln -sf ../wxWidgets-3.1.1/lib/ lib/wx
}

#---------------------------------------------------------------------------
function packages_yaml() {
	packages="$packages yaml-0.1.5.tar.gz"
}

function clean_yaml() {
	rm -rf yaml-0.1.5
}

function build_yaml() {
	tar xfz yaml-0.1.5.tar.gz
	pushd yaml-0.1.5
	./configure
	make $make_option || failed="$failed yaml"
	popd
	rm -f include/yaml
	ln -sf ../yaml-0.1.5/include/ include/yaml
	ln -sf ../yaml-0.1.5/src/.libs/libyaml.a lib/libyaml.a
}

main $*

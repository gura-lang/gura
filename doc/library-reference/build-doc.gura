#!/usr/bin/env gura
import(markdown)

fileNameTeX = 'gura-lib-e.tex'
dirName@html = 'html'

title = 'Gura Library Reference'
author = 'Yutaka Saito'
date = 'May 24th, 2015'

baseNames = [
	'basement' // this must come at first
	'guracore' // this must come at second
	'argopt'
	'base64'
	'bmp'
	'bzip2'
	'cairo'
	'calendar'
	//'canvas'
	'cbridge'
	'conio'
	'csv'
	'curl'
	'diff'
	//'emf'
	'example'
	'freetype'
	'fs'
	'gif'
	'glu'
	'glut'
	'gmp'
	'gurcbuild'
	//'guri'
	'gzip'
	'hash'
	'http'
	'jpeg'
	//'llvm'
	'markdown'
	'math'
	'midi'
	'modbuild'
	'moddoc'
	//'modgen'
	'msico'
	//'mswin'
	//'mysql'
	'opengl'
	'os'
	'path'
	'png'
	//'postgresql'
	'ppm'
	're'
	'show'
	//'sdl'
	'sdl2'
	'sqlite3'
	'sys'
	'tar'
	//'tcl'
	//'tester'
	'tiff'
	'tokenizer'
	'units'
	'uuid'
	'wav'
	'wx'
	'xml'
	'xpm'
	'yaml'
	'zip'
]

Renderer@html = class(markdown.Renderer@html) {
	headerForTOC:public = R'''
	---
	layout: page
	lang: en
	title: ${title}
	---

	<h1>${title}</h1>

	'''.embed()
	footerForTOC:public = R'''
	<p />
	'''
	headerForPage:public = R'''
	---
	layout: page
	lang: en
	title: ${title}
	---

	{% raw %}
	'''.embed()
	footerForPage:public = R'''
	<p />

	{% endraw %}
	'''
	__init__() = {|sys.stdout, true|
		this.out = nil
	}
	OnRenderItemPre(item:item) = {
		if (item.type == `h1) {
			this.out && this.out.print(footerForPage)
			fileName = path.join(dirName@html, 'chapter-%02d.md' % (this.indices[0] + 1))
			println('rendering ', path.filename(fileName))
			this.out = open(fileName, 'w')
			this.out.print(headerForPage)
		}
		true
	}
	OnRenderItemPost(item:item):void = {
		if (item.type == `root) {
			this.out && this.out.print(footerForPage)
			this.out = nil
		}
	}
}

makeDocument() = {
	doc = markdown.document()
	doc.read('Main.md')
	baseNames.each {|baseName|
		println('module: ', baseName)
		moduleName = baseName + '.doc'
		import(&moduleName).write(doc, `en)
	}
	doc
}

output@tex() = {
	doc = makeDocument()
	doc.render@tex(title, author, date, fileNameTeX)
	sys.stderr.println(fileNameTeX, ' was created.')
}

output@pdf() = {
	output@tex()
	repeat (2) { os.exec('platex', fileNameTeX) }
	os.exec('dvipdf', fileNameTeX.replace('.tex', '.dvi'))
}

output@html() = {
	doc = makeDocument()
	println('Output directory: ', dirName@html)
	!path.exists(dirName@html) && fs.mkdir(dirName@html)
	fileName = path.join(dirName@html, 'index.md')
	println('rendering ', path.filename(fileName))
	open(fileName, 'w') {|out|
		out.print(Renderer@html.headerForTOC)
		doc.render@toc {|level:number, indices[]:number, anchorName:string, text:string|
			if (level == 0) {
				out.printf(
						'<div><span class="toc-index-1">%d</span>' \
						'<a href="chapter-%02d.html#%s">%s</a>\</div>\n',
						indices[0], indices[0], anchorName, text)
			} elsif (level == 1 && indices[0] in [4, 6]) {
				out.printf(
						'<div><span class="toc-index-2">%d.%d</span>' \
						'<a href="chapter-%02d.html#%s">%s</a>\</div>\n',
						indices[0], indices[1], indices[0], anchorName, text)
			}
		}
	out.print(Renderer@html.footerForTOC)
	}
	Renderer@html().Render(doc)
}

usage() = {
	sys.stderr.println('usage: gura build-doc [tex|pdf|html]')
}

if (sys.argv.len() < 2) {
	usage()
} elsif (sys.argv[1] == 'tex') {
	output@tex()
} elsif (sys.argv[1] == 'pdf') {
	output@pdf()
} elsif (sys.argv[1] == 'html') {
	output@html()
} else {
	usage()
}

#!/usr/bin/env gura
import(markdown)

baseNames = [
	'basement'
	'base64'
	'bmp'
	'bzip2'
	'cairo'
	//'canvas'
	'conio'
	'csv'
	'curl'
	'emf'
	'example'
	'freetype'
	'fs'
	'gif'
	'glu'
	'glut'
	'gmp'
	'guri'
	'gzip'
	'hash'
	'http'
	'jpeg'
	'llvm'
	'markdown'
	'math'
	'midi'
	'msico'
	//'mswin'
	'mysql'
	'opengl'
	'os'
	'path'
	'png'
	'postgresql'
	'ppm'
	're'
	//'sdl'
	'sdl2'
	'sqlite3'
	'sys'
	'tar'
	//'tcl'
	'tester'
	'tiff'
	'uuid'
	'wav'
	'wx'
	'xml'
	'xpm'
	'yaml'
	'zip'
]
//baseNames = ['basement']
moduleNames = 'makedoc_' + baseNames
!path.exists('tmp') && fs.mkdir('tmp')
fs.copy('../src/module-' + baseNames + '/makedoc.gura', 'tmp/' + moduleNames + '.gura'):overwrite
sys.path.insert(0, 'tmp')
doc = markdown.document()
doc << R'''
# About This Reference

This reference explains about functions and classes that are shipped with Gura interpreter.
Refer to Gura Language Manual if you want information
about syntax and specifications of Gura language itself.

# Explanatory Note

Functions in this reference are described in a generic expression.
For example, if there is a reference `func(num:number)`,
it means that `func` function takes one argument named `num` with value type of `number`.
You can call it like `func(3)`.
	
If an argument is optional, the argument name is followed by a symbol `?`.
For example: `func(num?:number)`.
You can call it as `func(2)` or can omit the arugument like `func()`.
	
If the the arument name has `*` symbol followed, the arument takes zero or more values.
For a function that has a generic expression `func(args*:number)`,
it can be called like `func()`, `func(3)`, `func(3, 4)`, `func(3, 4, 2)`, and so on.
	
If the the arument name has `+` symbol followed, the arument takes one or more values.
For a function that has a generic expression `func(args+:number)`,
it can be called like `func(3)`, `func(3, 4)`, `func(3, 4, 2)`, and so on.
In difference with `*`, it must take at least one value.
	
An argument may have a default value.
The default value is described with `=>` operator like `func(num:number => 4)`.
In such a case, if `num` is omitted, the default value `4` shall be used.
'''
moduleNames.each {|moduleName|
	import(&moduleName)
	root.getprop!(moduleName).write(doc)
}
header = R'''
<html>
<head>
<meta charset="utf-8">
<title>Gura Library Reference</title>
<link rel="stylesheet" href="styles.css">
</head>
<body class="wrapper">
<div class="title">Gura Library Reference</div>
<div class="copyright">Copyright &copy; 2011-2015 ypsitau (<a href="ypsitau@nifty.com">ypsitau@nifty.com</a>)</div>
<div class="official-site">Official Site: <a href="http://www.gura-lang.org/">http://www.gura-lang.org/</a></div>
<hr />
'''
footer = R'''
</body>
</html>
'''
fileName = 'gura-lib-e.html'
doc.render@html(fileName, header, footer, true)
println(fileName, ' was created.')

#!/usr/bin/env gura
import(markdown)

DocInfo = struct(fileName:string, title:string)

//dirNameOut = path.dirname(sys.argv[0])
dirNameOut = 'tmp'

docInfos = @(DocInfo) {
	{'Introduction.md', 'Introduction'}
	{'Launch-Program.md', 'Launch Program'}
	{'Syntax.md', 'Syntax'}
	{'Data-Type.md', 'Data Type'}
	{'Operator.md', 'Operator'}
	{'Environment.md', 'Environment'}
	{'Interpreter.md', 'Interpreter'}
	{'Function.md', 'Function'}
	{'Flow-Control.md', 'Flow Control'}
	{'Object-Oriented-Programming.md', 'Object Oriented Programming'}
	{'Mapping-Process.md', 'Mapping Process'}
	{'Module.md', 'Module'}
	{'String-and-Binary.md', 'String and Binary'}
	{'Iterator-List-Operation.md', 'Iterator/divst Operation'}
	{'File-Operation.md', 'File Operation'}
	{'Network-Operation.md', 'Network Operation'}
	{'Image-Operation.md', 'Image Operation'}
	{'Graphical-User-Interface.md', 'Graphical User Interface'}
	{'Mathematic-Functions.md', 'Mathematic Functions'}
	{'Template-Engine.md', 'Template Engine'}
}

doc = markdown.document()

docInfos.each {|docInfo|
	println('module: ', docInfo.fileName)
	doc.read(docInfo.fileName)
}

headerForIndex = R'''
---
layout: page
lang: en
title: Gura Language Manual
---

<h1>Gura Language Manual</h1>

'''

footerForIndex = R'''
<p />
'''

headerForPage = R'''
---
layout: page
lang: en
title: Gura Language Manual
---

{% raw %}
'''

footerForPage = R'''
<p />

{% endraw %}
'''

Renderer@html = class(markdown.Renderer@html) {
	__init__() = {|sys.stdout, true|
		//this.out = nil
		fileName = path.join(dirNameOut, 'aa.md')
		this.out = open(fileName, 'w')
	}
	OnRenderItemPre(item:item) = {
		if (item.type == `h1) {
			this.out && this.out.print(footerForPage)
			fileName = path.join(dirNameOut, 'chapter-%02d.md' % (this.indices[0] + 1))
			println('rendering ', path.filename(fileName))
			this.out = open(fileName, 'w')
			this.out.print(headerForPage)
		}
		true
	}
	OnRenderItemPost(item:item):void = {
		if (item.type == `root) {
			this.out && this.out.print(footerForPage)
			this.out = nil
		}
	}
}

println('Output directory: ', dirNameOut)
fileName = path.join(dirNameOut, 'index.md')
println('rendering ', path.filename(fileName))
open(fileName, 'w') {|out|
	out.print(headerForIndex)
	doc.render@toc {|level:number, indices[]:number, anchorName:string, text:string|
		if (level == 0) {
			out.printf(
					'<div><span class="toc-index-1">%d</span><a href="chapter-%02d.html#%s">%s</a>\</div>\n',
					indices[0], indices[0], anchorName, text)
		} elsif (level == 1) {
			out.printf(
					'<div><span class="toc-index-2">%d.%d</span><a href="chapter-%02d.html#%s">%s</a>\</div>\n',
					indices[0], indices[1], indices[0], anchorName, text)
		}
	}
	out.print(footerForIndex)
}
Renderer@html().Render(doc)

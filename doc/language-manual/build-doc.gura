#!/usr/bin/env gura
import(markdown)

//dirNameOut = path.dirname(sys.argv[0])
dirNameOut = '../../../gura-lang.github.io/language-manual.t'

fileNames = [
	'Introduction.md'
	'Launch-Program.md'
	'Syntax.md'
	'Data-Type.md'
	'Operator.md'
	'Environment.md'
	'Interpreter.md'
	'Function.md'
	'Flow-Control.md'
	'Object-Oriented-Programming.md'
	'Mapping-Process.md'
	'Module.md'
	'String-and-Binary.md'
	'Iterator-List-Operation.md'
	'File-Operation.md'
	'Network-Operation.md'
	'Image-Operation.md'
	'Graphical-User-Interface.md'
	'Mathematic-Functions.md'
	'Template-Engine.md'
]

doc = markdown.document()

fileNames.each {|fileName|
	println('reading: ', fileName)
	doc.read(fileName)
}

headerForIndex = R'''
---
layout: page
lang: en
title: Gura Language Manual
---

<h1>Gura Language Manual</h1>

'''

footerForIndex = R'''
<p />
'''

headerForPage = R'''
---
layout: page
lang: en
title: Gura Language Manual
---

{% raw %}
'''

footerForPage = R'''
<p />

{% endraw %}
'''

Renderer@html = class(markdown.Renderer@html) {
	__init__() = {|sys.stdout, true|
		this.out = nil
	}
	OnRenderItemPre(item:item) = {
		if (item.type == `h1) {
			this.out && this.out.print(footerForPage)
			fileName = path.join(dirNameOut, 'chapter-%02d.md' % (this.indices[0] + 1))
			println('rendering ', path.filename(fileName))
			this.out = open(fileName, 'w')
			this.out.print(headerForPage)
		}
		true
	}
	OnRenderItemPost(item:item):void = {
		if (item.type == `root) {
			this.out && this.out.print(footerForPage)
			this.out = nil
		}
	}
}

println('Output directory: ', dirNameOut)
fileName = path.join(dirNameOut, 'index.md')
println('rendering ', path.filename(fileName))
open(fileName, 'w') {|out|
	out.print(headerForIndex)
	doc.render@toc {|level:number, indices[]:number, anchorName:string, text:string|
		if (level == 0) {
			out.printf(
					'<div><span class="toc-index-1">%d</span><a href="chapter-%02d.html#%s">%s</a>\</div>\n',
					indices[0], indices[0], anchorName, text)
		} elsif (level == 1) {
			out.printf(
					'<div><span class="toc-index-2">%d.%d</span><a href="chapter-%02d.html#%s">%s</a>\</div>\n',
					indices[0], indices[1], indices[0], anchorName, text)
		}
	}
	out.print(footerForIndex)
}
Renderer@html().Render(doc)

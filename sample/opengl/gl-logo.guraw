#!/usr/bin/env gura
import(glu) {*}
import(opengl) {*}

// Orignal source file is written in C and is available from the site below.
// http://www.sgi.com/products/software/opengl/examples/samples/
// logo.c

BL = 0x00
WH = 0xFF
RD = color(0xA4,0x00,0x00,0xFF)
WT = color(0xFF,0xFF,0xFF,0xFF)

plane = @{1.0, 0.0, -1.0, 0.0}

checkImageRaw = @{
	BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH,
	WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH,
	WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL,
	BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH,
	WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH,
	WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL,
	BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH,
	WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH,
	WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL,
	BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH,
	WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH,
	WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL,
}

brickImageRaw = @{
	RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD,
	RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD,
	RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD,
	RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD,
	WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT,
	RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD,
	RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD,
	RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD,
	RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD,
	WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT,
	RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD,
	RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD,
	RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD,
	RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD,
	WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT,
	RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD
}

stippleRaw = @{
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,

	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,

	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,
	0x00, 0x0F, 0xF0, 0x00,

	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
}

checkImage = image(`rgb, 8, 8)
cross (y in range(8), x in range(8)) {|i|
	j = i * 3
	checkImage.putpixel(x, y, color(checkImageRaw[j, j + 1, j + 2]*))
}

brickImage = image(`rgba, 16, 16)
cross (y in range(16), x in range(16)) {|i|
	brickImage.putpixel(x, y, brickImageRaw[i])
}

stipple = stippleRaw.pack('%dB' % stippleRaw.len())

tscp = @{
	{
	0.0, 0.0
	},
	{
	1.0, 0.0
	},
	{
	0.0, 0.125
	},
	{
	1.0, 0.125
	},
	{
	0.0, 0.250
	},
	{
	1.0, 0.25
	},
	{
	0.0, 0.375
	},
	{
	1.0, 0.375
	},
	{
	0.0, 0.50
	},
	{
	1.0, 0.50
	},
	{
	0.0, 0.625
	},
	{
	1.0, 0.625
	},
	{
	0.0, 0.75
	},
	{
	1.0, 0.75
	},
	{
	0.0, 0.875
	},
	{
	1.0, 0.875
	},
	{
	0.0, 1.0
	},
	{
	1.0, 1.0
	}
}
scp = @{
	{
	1.000000, 0.000000, 0.000000
	},
	{
	1.000000, 0.000000, 5.000000
	},
	{
	0.707107, 0.707107, 0.000000
	},
	{
	0.707107, 0.707107, 5.000000
	},
	{
	0.000000, 1.000000, 0.000000
	},
	{
	0.000000, 1.000000, 5.000000
	},
	{
	-0.707107, 0.707107, 0.000000
	},
	{
	-0.707107, 0.707107, 5.000000
	},
	{
	-1.000000, 0.000000, 0.000000
	},
	{
	-1.000000, 0.000000, 5.000000
	},
	{
	-0.707107, -0.707107, 0.000000
	},
	{
	-0.707107, -0.707107, 5.000000
	},
	{
	0.000000, -1.000000, 0.000000
	},
	{
	0.000000, -1.000000, 5.000000
	},
	{
	0.707107, -0.707107, 0.000000
	},
	{
	0.707107, -0.707107, 5.000000
	},
	{
	1.000000, 0.000000, 0.000000
	},
	{
	1.000000, 0.000000, 5.000000
	}
}
dcp = @{
	{
	1.000000, 0.000000, 0.000000
	},
	{
	1.000000, 0.000000, 7.000000
	},
	{
	0.707107, 0.707107, 0.000000
	},
	{
	0.707107, 0.707107, 7.000000
	},
	{
	0.000000, 1.000000, 0.000000
	},
	{
	0.000000, 1.000000, 7.000000
	},
	{
	-0.707107, 0.707107, 0.000000
	},
	{
	-0.707107, 0.707107, 7.000000
	},
	{
	-1.000000, 0.000000, 0.000000
	},
	{
	-1.000000, 0.000000, 7.000000
	},
	{
	-0.707107, -0.707107, 0.000000
	},
	{
	-0.707107, -0.707107, 7.000000
	},
	{
	0.000000, -1.000000, 0.000000
	},
	{
	0.000000, -1.000000, 7.000000
	},
	{
	0.707107, -0.707107, 0.000000
	},
	{
	0.707107, -0.707107, 7.000000
	},
	{
	1.000000, 0.000000, 0.000000
	},
	{
	1.000000, 0.000000, 7.000000
	}
}
ep = @{
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.707107, 0.707107, 0.000000
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 0.707107, 0.000000
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, -0.707107, 0.000000
	},
	{
		0.000000, -1.000000, 0.000000
	},
	{
		0.707107, -0.707107, 0.000000
	},
	{
		1.000000, 0.000000, 0.000000
	}
	},
	{
	{
		1.000000, 0.034074, 0.258819
	},
	{
		0.707107, 0.717087, 0.075806
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 0.717087, 0.075806
	},
	{
		-1.000000, 0.034074, 0.258819
	},
	{
		-0.707107, -0.648939, 0.441832
	},
	{
		0.000000, -0.931852, 0.517638
	},
	{
		0.707107, -0.648939, 0.441832
	},
	{
		1.000000, 0.034074, 0.258819
	}
	},
	{
	{
		1.000000, 0.133975, 0.500000
	},
	{
		0.707107, 0.746347, 0.146447
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 0.746347, 0.146447
	},
	{
		-1.000000, 0.133975, 0.500000
	},
	{
		-0.707107, -0.478398, 0.853553
	},
	{
		0.000000, -0.732051, 1.000000
	},
	{
		0.707107, -0.478398, 0.853553
	},
	{
		1.000000, 0.133975, 0.500000
	}
	},
	{
	{
		1.000000, 0.292893, 0.707107
	},
	{
		0.707107, 0.792893, 0.207107
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 0.792893, 0.207107
	},
	{
		-1.000000, 0.292893, 0.707107
	},
	{
		-0.707107, -0.207107, 1.207107
	},
	{
		0.000000, -0.414214, 1.414214
	},
	{
		0.707107, -0.207107, 1.207107
	},
	{
		1.000000, 0.292893, 0.707107
	}
	},
	{
	{
		1.000000, 0.500000, 0.866025
	},
	{
		0.707107, 0.853553, 0.253653
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 0.853553, 0.253653
	},
	{
		-1.000000, 0.500000, 0.866025
	},
	{
		-0.707107, 0.146447, 1.478398
	},
	{
		0.000000, 0.000000, 1.732051
	},
	{
		0.707107, 0.146447, 1.478398
	},
	{
		1.000000, 0.500000, 0.866025
	}
	},
	{
	{
		1.000000, 0.741181, 0.965926
	},
	{
		0.707107, 0.924194, 0.282913
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 0.924194, 0.282913
	},
	{
		-1.000000, 0.741181, 0.965926
	},
	{
		-0.707107, 0.558168, 1.648939
	},
	{
		0.000000, 0.482362, 1.931852
	},
	{
		0.707107, 0.558168, 1.648939
	},
	{
		1.000000, 0.741181, 0.965926
	}
	},
	{
	{
		1.000000, 1.000000, 1.000000
	},
	{
		0.707107, 1.000000, 0.292893
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 1.000000, 0.292893
	},
	{
		-1.000000, 1.000000, 1.000000
	},
	{
		-0.707107, 1.000000, 1.707107
	},
	{
		0.000000, 1.000000, 2.000000
	},
	{
		0.707107, 1.000000, 1.707107
	},
	{
		1.000000, 1.000000, 1.000000
	}
	}
}
en = @{
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.707107, 0.707107, 0.000000
	},
	{
		0.000000, 1.000000, 0.000000
	},
	{
		-0.707107, 0.707107, 0.000000
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, -0.707107, 0.000000
	},
	{
		0.000000, -1.000000, 0.000000
	},
	{
		0.707107, -0.707107, 0.000000
	},
	{
		1.000000, 0.000000, 0.000000
	}
	},
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.707107, 0.683013, -0.183013
	},
	{
		0.000000, 0.965926, -0.258819
	},
	{
		-0.707107, 0.683013, -0.183013
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, -0.683013, 0.183013
	},
	{
		0.000000, -0.965926, 0.258819
	},
	{
		0.707107, -0.683013, 0.183013
	},
	{
		1.000000, 0.000000, 0.000000
	}
	},
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.707107, 0.612372, -0.353553
	},
	{
		0.000000, 0.866025, -0.500000
	},
	{
		-0.707107, 0.612372, -0.353553
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, -0.612372, 0.353553
	},
	{
		0.000000, -0.866025, 0.500000
	},
	{
		0.707107, -0.612372, 0.353553
	},
	{
		1.000000, 0.000000, 0.000000
	}
	},
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.000000, 0.707107, -0.707107
	},
	{
		-0.707107, 0.500000, -0.500000
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, -0.500000, 0.500000
	},
	{
		0.000000, -0.707107, 0.707107
	},
	{
		0.707107, -0.500000, 0.500000
	},
	{
		1.000000, 0.000000, 0.000000
	},
	{
		1.000000, 0.000000, 0.000000	# added for Gura sample
	}
	},
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.707107, 0.353553, -0.612372
	},
	{
		0.000000, 0.500000, -0.866025
	},
	{
		-0.707107, 0.353553, -0.612372
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, -0.353553, 0.612372
	},
	{
		0.000000, -0.500000, 0.866025
	},
	{
		0.707107, -0.353553, 0.612372
	},
	{
		1.000000, 0.000000, 0.000000
	}
	},
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.707107, 0.183013, -0.683013
	},
	{
		0.000000, 0.258819, -0.965926
	},
	{
		-0.707107, 0.183013, -0.683013
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, -0.183013, 0.683013
	},
	{
		0.000000, -0.258819, 0.965926
	},
	{
		0.707107, -0.183013, 0.683013
	},
	{
		1.000000, 0.000000, 0.000000
	}
	},
	{
	{
		1.000000, 0.000000, 0.000000
	},
	{
		0.707107, 0.000000, -0.707107
	},
	{
		0.000000, 0.000000, -1.000000
	},
	{
		-0.707107, 0.000000, -0.707107
	},
	{
		-1.000000, 0.000000, 0.000000
	},
	{
		-0.707107, 0.000000, 0.707107
	},
	{
		0.000000, 0.000000, 1.000000
	},
	{
		0.707107, 0.000000, 0.707107
	},
	{
		1.000000, 0.000000, 0.000000
	}
	}
}
tep = @{
	{
	{
		0,	 0.0
	},
	{
		0.125, 0.0
	},
	{
		0.25,  0.0
	},
	{
		0.375, 0.0
	},
	{
		0.5,   0.0
	},
	{
		0.625, 0.0
	},
	{
		0.75,  0.0
	},
	{
		0.875, 0.0
	},
	{
		1.0,   0.0
	}
	},
	{
	{
		0,	 0.16667
	},
	{
		0.125, 0.16667
	},
	{
		0.25,  0.16667
	},
	{
		0.375, 0.16667
	},
	{
		0.5,   0.16667
	},
	{
		0.625, 0.16667
	},
	{
		0.75,  0.16667
	},
	{
		0.875, 0.16667
	},
	{
		1.0,   0.16667
	}
	},
	{
	{
		0,	 0.33333
	},
	{
		0.125, 0.33333
	},
	{
		0.25,  0.33333
	},
	{
		0.375, 0.33333
	},
	{
		0.5,   0.33333
	},
	{
		0.625, 0.33333
	},
	{
		0.75,  0.33333
	},
	{
		0.875, 0.33333
	},
	{
		1.0,   0.33333
	}
	},
	{
	{
		0,	 0.5
	},
	{
		0.125, 0.5
	},
	{
		0.25,  0.5
	},
	{
		0.375, 0.5
	},
	{
		0.5,   0.5
	},
	{
		0.625, 0.5
	},
	{
		0.75,  0.5
	},
	{
		0.875, 0.5
	},
	{
		1.0,   0.5
	}
	},
	{
	{
		0,	 0.6667
	},
	{
		0.125, 0.6667
	},
	{
		0.25,  0.6667
	},
	{
		0.375, 0.6667
	},
	{
		0.5,   0.6667
	},
	{
		0.625, 0.6667
	},
	{
		0.75,  0.6667
	},
	{
		0.875, 0.6667
	},
	{
		1.0,   0.6667
	}
	},
	{
	{
		0,	 0.83333
	},
	{
		0.125, 0.83333
	},
	{
		0.25,  0.83333
	},
	{
		0.375, 0.83333
	},
	{
		0.5,   0.83333
	},
	{
		0.625, 0.83333
	},
	{
		0.75,  0.83333
	},
	{
		0.875, 0.83333
	},
	{
		1.0,   0.83333
	}
	},
	{
	{
		0,	 1.0
	},
	{
		0.125, 1.0
	},
	{
		0.25,  1.0
	},
	{
		0.375, 1.0
	},
	{
		0.5,   1.0
	},
	{
		0.625, 1.0
	},
	{
		0.75,  1.0
	},
	{
		0.875, 1.0
	},
	{
		1.0,   1.0
	}
	}
}


BendForward() = {
	glTranslatef(0.0, 1.0, 0.0)
	glRotatef(90.0, 1, 0, 0)
	glTranslatef(0.0, -1.0, 0.0)
}

BendLeft() = {
	glRotatef(-90.0, 0, 0, 1)
	glTranslatef(0.0, 1.0, 0.0)
	glRotatef(90.0, 1, 0, 0)
	glTranslatef(0.0, -1.0, 0.0)
}

BendRight() = {
	glRotatef(90.0, 0, 0, 1)
	glTranslatef(0.0, 1.0, 0.0)
	glRotatef(90.0, 1, 0, 0)
	glTranslatef(0.0, -1.0, 0.0)
}

BuildSingleCylinder() = {
	singleCylinder = glGenLists(1)
	glNewList(singleCylinder, GL_COMPILE) {
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(scp[0]); glTexCoord2fv(tscp[0]); glVertex3fv(scp[0])
			glNormal3fv(scp[0]); glTexCoord2fv(tscp[1]); glVertex3fv(scp[1])
			glNormal3fv(scp[2]); glTexCoord2fv(tscp[2]); glVertex3fv(scp[2])
			glNormal3fv(scp[2]); glTexCoord2fv(tscp[3]); glVertex3fv(scp[3])
			glNormal3fv(scp[4]); glTexCoord2fv(tscp[4]); glVertex3fv(scp[4])
			glNormal3fv(scp[4]); glTexCoord2fv(tscp[5]); glVertex3fv(scp[5])
			glNormal3fv(scp[6]); glTexCoord2fv(tscp[6]); glVertex3fv(scp[6])
			glNormal3fv(scp[6]); glTexCoord2fv(tscp[7]); glVertex3fv(scp[7])
			glNormal3fv(scp[8]); glTexCoord2fv(tscp[8]); glVertex3fv(scp[8])
			glNormal3fv(scp[8]); glTexCoord2fv(tscp[9]); glVertex3fv(scp[9])
			glNormal3fv(scp[10]); glTexCoord2fv(tscp[10]); glVertex3fv(scp[10])
			glNormal3fv(scp[10]); glTexCoord2fv(tscp[11]); glVertex3fv(scp[11])
			glNormal3fv(scp[12]); glTexCoord2fv(tscp[12]); glVertex3fv(scp[12])
			glNormal3fv(scp[12]); glTexCoord2fv(tscp[13]); glVertex3fv(scp[13])
			glNormal3fv(scp[14]); glTexCoord2fv(tscp[14]); glVertex3fv(scp[14])
			glNormal3fv(scp[14]); glTexCoord2fv(tscp[15]); glVertex3fv(scp[15])
			glNormal3fv(scp[16]); glTexCoord2fv(tscp[16]); glVertex3fv(scp[16])
			glNormal3fv(scp[16]); glTexCoord2fv(tscp[17]); glVertex3fv(scp[17])
		}
	}
	singleCylinder
}

BuildDoubleCylinder() = {
	doubleCylinder = glGenLists(1)
	glNewList(doubleCylinder, GL_COMPILE) {
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(dcp[0]); glTexCoord2fv(tscp[0]); glVertex3fv(dcp[0])
			glNormal3fv(dcp[0]); glTexCoord2fv(tscp[1]); glVertex3fv(dcp[1])
			glNormal3fv(dcp[2]); glTexCoord2fv(tscp[2]); glVertex3fv(dcp[2])
			glNormal3fv(dcp[2]); glTexCoord2fv(tscp[3]); glVertex3fv(dcp[3])
			glNormal3fv(dcp[4]); glTexCoord2fv(tscp[4]); glVertex3fv(dcp[4])
			glNormal3fv(dcp[4]); glTexCoord2fv(tscp[5]); glVertex3fv(dcp[5])
			glNormal3fv(dcp[6]); glTexCoord2fv(tscp[6]); glVertex3fv(dcp[6])
			glNormal3fv(dcp[6]); glTexCoord2fv(tscp[7]); glVertex3fv(dcp[7])
			glNormal3fv(dcp[8]); glTexCoord2fv(tscp[8]); glVertex3fv(dcp[8])
			glNormal3fv(dcp[8]); glTexCoord2fv(tscp[9]); glVertex3fv(dcp[9])
			glNormal3fv(dcp[10]); glTexCoord2fv(tscp[10]); glVertex3fv(dcp[10])
			glNormal3fv(dcp[10]); glTexCoord2fv(tscp[11]); glVertex3fv(dcp[11])
			glNormal3fv(dcp[12]); glTexCoord2fv(tscp[12]); glVertex3fv(dcp[12])
			glNormal3fv(dcp[12]); glTexCoord2fv(tscp[13]); glVertex3fv(dcp[13])
			glNormal3fv(dcp[14]); glTexCoord2fv(tscp[14]); glVertex3fv(dcp[14])
			glNormal3fv(dcp[14]); glTexCoord2fv(tscp[15]); glVertex3fv(dcp[15])
			glNormal3fv(dcp[16]); glTexCoord2fv(tscp[16]); glVertex3fv(dcp[16])
			glNormal3fv(dcp[16]); glTexCoord2fv(tscp[17]); glVertex3fv(dcp[17])
		}
	}
	doubleCylinder
}

BuildElbow() = {
	elbow = glGenLists(1)
	glNewList(elbow, GL_COMPILE) {
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(en[0][0]); glTexCoord2fv(tep[0][0]); glVertex3fv(ep[0][0])
			glNormal3fv(en[1][0]); glTexCoord2fv(tep[1][0]); glVertex3fv(ep[1][0])
			glNormal3fv(en[0][1]); glTexCoord2fv(tep[0][1]); glVertex3fv(ep[0][1])
			glNormal3fv(en[1][1]); glTexCoord2fv(tep[1][1]); glVertex3fv(ep[1][1])
			glNormal3fv(en[0][2]); glTexCoord2fv(tep[0][2]); glVertex3fv(ep[0][2])
			glNormal3fv(en[1][2]); glTexCoord2fv(tep[1][2]); glVertex3fv(ep[1][2])
			glNormal3fv(en[0][3]); glTexCoord2fv(tep[0][3]); glVertex3fv(ep[0][3])
			glNormal3fv(en[1][3]); glTexCoord2fv(tep[1][3]); glVertex3fv(ep[1][3])
			glNormal3fv(en[0][4]); glTexCoord2fv(tep[0][4]); glVertex3fv(ep[0][4])
			glNormal3fv(en[1][4]); glTexCoord2fv(tep[1][4]); glVertex3fv(ep[1][4])
			glNormal3fv(en[0][5]); glTexCoord2fv(tep[0][5]); glVertex3fv(ep[0][5])
			glNormal3fv(en[1][5]); glTexCoord2fv(tep[1][5]); glVertex3fv(ep[1][5])
			glNormal3fv(en[0][6]); glTexCoord2fv(tep[0][6]); glVertex3fv(ep[0][6])
			glNormal3fv(en[1][6]); glTexCoord2fv(tep[1][6]); glVertex3fv(ep[1][6])
			glNormal3fv(en[0][7]); glTexCoord2fv(tep[0][7]); glVertex3fv(ep[0][7])
			glNormal3fv(en[1][7]); glTexCoord2fv(tep[1][7]); glVertex3fv(ep[1][7])
			glNormal3fv(en[0][8]); glTexCoord2fv(tep[0][8]); glVertex3fv(ep[0][8])
			glNormal3fv(en[1][8]); glTexCoord2fv(tep[1][8]); glVertex3fv(ep[1][8])
		}
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(en[1][0]); glTexCoord2fv(tep[1][0]); glVertex3fv(ep[1][0])
			glNormal3fv(en[2][0]); glTexCoord2fv(tep[2][0]); glVertex3fv(ep[2][0])
			glNormal3fv(en[1][1]); glTexCoord2fv(tep[1][1]); glVertex3fv(ep[1][1])
			glNormal3fv(en[2][1]); glTexCoord2fv(tep[2][1]); glVertex3fv(ep[2][1])
			glNormal3fv(en[1][2]); glTexCoord2fv(tep[1][2]); glVertex3fv(ep[1][2])
			glNormal3fv(en[2][2]); glTexCoord2fv(tep[2][2]); glVertex3fv(ep[2][2])
			glNormal3fv(en[1][3]); glTexCoord2fv(tep[1][3]); glVertex3fv(ep[1][3])
			glNormal3fv(en[2][3]); glTexCoord2fv(tep[2][3]); glVertex3fv(ep[2][3])
			glNormal3fv(en[1][4]); glTexCoord2fv(tep[1][4]); glVertex3fv(ep[1][4])
			glNormal3fv(en[2][4]); glTexCoord2fv(tep[2][4]); glVertex3fv(ep[2][4])
			glNormal3fv(en[1][5]); glTexCoord2fv(tep[1][5]); glVertex3fv(ep[1][5])
			glNormal3fv(en[2][5]); glTexCoord2fv(tep[2][5]); glVertex3fv(ep[2][5])
			glNormal3fv(en[1][6]); glTexCoord2fv(tep[1][6]); glVertex3fv(ep[1][6])
			glNormal3fv(en[2][6]); glTexCoord2fv(tep[2][6]); glVertex3fv(ep[2][6])
			glNormal3fv(en[1][7]); glTexCoord2fv(tep[1][7]); glVertex3fv(ep[1][7])
			glNormal3fv(en[2][7]); glTexCoord2fv(tep[2][7]); glVertex3fv(ep[2][7])
			glNormal3fv(en[1][8]); glTexCoord2fv(tep[1][8]); glVertex3fv(ep[1][8])
			glNormal3fv(en[2][8]); glTexCoord2fv(tep[2][8]); glVertex3fv(ep[2][8])
		}
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(en[2][0]); glTexCoord2fv(tep[2][0]); glVertex3fv(ep[2][0])
			glNormal3fv(en[3][0]); glTexCoord2fv(tep[3][0]); glVertex3fv(ep[3][0])
			glNormal3fv(en[2][1]); glTexCoord2fv(tep[2][1]); glVertex3fv(ep[2][1])
			glNormal3fv(en[3][1]); glTexCoord2fv(tep[3][1]); glVertex3fv(ep[3][1])
			glNormal3fv(en[2][2]); glTexCoord2fv(tep[2][2]); glVertex3fv(ep[2][2])
			glNormal3fv(en[3][2]); glTexCoord2fv(tep[3][2]); glVertex3fv(ep[3][2])
			glNormal3fv(en[2][3]); glTexCoord2fv(tep[2][3]); glVertex3fv(ep[2][3])
			glNormal3fv(en[3][3]); glTexCoord2fv(tep[3][3]); glVertex3fv(ep[3][3])
			glNormal3fv(en[2][4]); glTexCoord2fv(tep[2][4]); glVertex3fv(ep[2][4])
			glNormal3fv(en[3][4]); glTexCoord2fv(tep[3][4]); glVertex3fv(ep[3][4])
			glNormal3fv(en[2][5]); glTexCoord2fv(tep[2][5]); glVertex3fv(ep[2][5])
			glNormal3fv(en[3][5]); glTexCoord2fv(tep[3][5]); glVertex3fv(ep[3][5])
			glNormal3fv(en[2][6]); glTexCoord2fv(tep[2][6]); glVertex3fv(ep[2][6])
			glNormal3fv(en[3][6]); glTexCoord2fv(tep[3][6]); glVertex3fv(ep[3][6])
			glNormal3fv(en[2][7]); glTexCoord2fv(tep[2][7]); glVertex3fv(ep[2][7])
			glNormal3fv(en[3][7]); glTexCoord2fv(tep[3][7]); glVertex3fv(ep[3][7])
			glNormal3fv(en[2][8]); glTexCoord2fv(tep[2][8]); glVertex3fv(ep[2][8])
			glNormal3fv(en[3][8]); glTexCoord2fv(tep[3][8]); glVertex3fv(ep[3][8])
		}
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(en[3][0]); glTexCoord2fv(tep[3][0]); glVertex3fv(ep[3][0])
			glNormal3fv(en[4][0]); glTexCoord2fv(tep[4][0]); glVertex3fv(ep[4][0])
			glNormal3fv(en[3][1]); glTexCoord2fv(tep[3][1]); glVertex3fv(ep[3][1])
			glNormal3fv(en[4][1]); glTexCoord2fv(tep[4][1]); glVertex3fv(ep[4][1])
			glNormal3fv(en[3][2]); glTexCoord2fv(tep[3][2]); glVertex3fv(ep[3][2])
			glNormal3fv(en[4][2]); glTexCoord2fv(tep[4][2]); glVertex3fv(ep[4][2])
			glNormal3fv(en[3][3]); glTexCoord2fv(tep[3][3]); glVertex3fv(ep[3][3])
			glNormal3fv(en[4][3]); glTexCoord2fv(tep[4][3]); glVertex3fv(ep[4][3])
			glNormal3fv(en[3][4]); glTexCoord2fv(tep[3][4]); glVertex3fv(ep[3][4])
			glNormal3fv(en[4][4]); glTexCoord2fv(tep[4][4]); glVertex3fv(ep[4][4])
			glNormal3fv(en[3][5]); glTexCoord2fv(tep[3][5]); glVertex3fv(ep[3][5])
			glNormal3fv(en[4][5]); glTexCoord2fv(tep[4][5]); glVertex3fv(ep[4][5])
			glNormal3fv(en[3][6]); glTexCoord2fv(tep[3][6]); glVertex3fv(ep[3][6])
			glNormal3fv(en[4][6]); glTexCoord2fv(tep[4][6]); glVertex3fv(ep[4][6])
			glNormal3fv(en[3][7]); glTexCoord2fv(tep[3][7]); glVertex3fv(ep[3][7])
			glNormal3fv(en[4][7]); glTexCoord2fv(tep[4][7]); glVertex3fv(ep[4][7])
			glNormal3fv(en[3][8]); glTexCoord2fv(tep[3][8]); glVertex3fv(ep[3][8])
			glNormal3fv(en[4][8]); glTexCoord2fv(tep[4][8]); glVertex3fv(ep[4][8])
		}
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(en[4][0]); glTexCoord2fv(tep[4][0]); glVertex3fv(ep[4][0])
			glNormal3fv(en[5][0]); glTexCoord2fv(tep[5][0]); glVertex3fv(ep[5][0])
			glNormal3fv(en[4][1]); glTexCoord2fv(tep[4][1]); glVertex3fv(ep[4][1])
			glNormal3fv(en[5][1]); glTexCoord2fv(tep[5][1]); glVertex3fv(ep[5][1])
			glNormal3fv(en[4][2]); glTexCoord2fv(tep[4][2]); glVertex3fv(ep[4][2])
			glNormal3fv(en[5][2]); glTexCoord2fv(tep[5][2]); glVertex3fv(ep[5][2])
			glNormal3fv(en[4][3]); glTexCoord2fv(tep[4][3]); glVertex3fv(ep[4][3])
			glNormal3fv(en[5][3]); glTexCoord2fv(tep[5][3]); glVertex3fv(ep[5][3])
			glNormal3fv(en[4][4]); glTexCoord2fv(tep[4][4]); glVertex3fv(ep[4][4])
			glNormal3fv(en[5][4]); glTexCoord2fv(tep[5][4]); glVertex3fv(ep[5][4])
			glNormal3fv(en[4][5]); glTexCoord2fv(tep[4][5]); glVertex3fv(ep[4][5])
			glNormal3fv(en[5][5]); glTexCoord2fv(tep[5][5]); glVertex3fv(ep[5][5])
			glNormal3fv(en[4][6]); glTexCoord2fv(tep[4][6]); glVertex3fv(ep[4][6])
			glNormal3fv(en[5][6]); glTexCoord2fv(tep[5][6]); glVertex3fv(ep[5][6])
			glNormal3fv(en[4][7]); glTexCoord2fv(tep[4][7]); glVertex3fv(ep[4][7])
			glNormal3fv(en[5][7]); glTexCoord2fv(tep[5][7]); glVertex3fv(ep[5][7])
			glNormal3fv(en[4][8]); glTexCoord2fv(tep[4][8]); glVertex3fv(ep[4][8])
			glNormal3fv(en[5][8]); glTexCoord2fv(tep[5][8]); glVertex3fv(ep[5][8])
		}
		glBegin(GL_TRIANGLE_STRIP) {
			glNormal3fv(en[5][0]); glTexCoord2fv(tep[5][0]); glVertex3fv(ep[5][0])
			glNormal3fv(en[6][0]); glTexCoord2fv(tep[6][0]); glVertex3fv(ep[6][0])
			glNormal3fv(en[5][1]); glTexCoord2fv(tep[5][1]); glVertex3fv(ep[5][1])
			glNormal3fv(en[6][1]); glTexCoord2fv(tep[6][1]); glVertex3fv(ep[6][1])
			glNormal3fv(en[5][2]); glTexCoord2fv(tep[5][2]); glVertex3fv(ep[5][2])
			glNormal3fv(en[6][2]); glTexCoord2fv(tep[6][2]); glVertex3fv(ep[6][2])
			glNormal3fv(en[5][3]); glTexCoord2fv(tep[5][3]); glVertex3fv(ep[5][3])
			glNormal3fv(en[6][3]); glTexCoord2fv(tep[6][3]); glVertex3fv(ep[6][3])
			glNormal3fv(en[5][4]); glTexCoord2fv(tep[5][4]); glVertex3fv(ep[5][4])
			glNormal3fv(en[6][4]); glTexCoord2fv(tep[6][4]); glVertex3fv(ep[6][4])
			glNormal3fv(en[5][5]); glTexCoord2fv(tep[5][5]); glVertex3fv(ep[5][5])
			glNormal3fv(en[6][5]); glTexCoord2fv(tep[6][5]); glVertex3fv(ep[6][5])
			glNormal3fv(en[5][6]); glTexCoord2fv(tep[5][6]); glVertex3fv(ep[5][6])
			glNormal3fv(en[6][6]); glTexCoord2fv(tep[6][6]); glVertex3fv(ep[6][6])
			glNormal3fv(en[5][7]); glTexCoord2fv(tep[5][7]); glVertex3fv(ep[5][7])
			glNormal3fv(en[6][7]); glTexCoord2fv(tep[6][7]); glVertex3fv(ep[6][7])
			glNormal3fv(en[5][8]); glTexCoord2fv(tep[5][8]); glVertex3fv(ep[5][8])
			glNormal3fv(en[6][8]); glTexCoord2fv(tep[6][8]); glVertex3fv(ep[6][8])
		}
	}
	elbow
}

BuildLogo(singleCylinder:number, doubleCylinder:number, elbow:number) = {
	logo = glGenLists(1)
	glNewList(logo, GL_COMPILE) {
		glTranslatef(5.5, -3.5, 4.5)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -5.0)
		glCallList(singleCylinder)
		BendRight()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -5.0)
		glCallList(singleCylinder)
		BendLeft()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -5.0)
		glCallList(singleCylinder)
		BendRight()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -5.0)
		glCallList(singleCylinder)
		BendLeft()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -5.0)
		glCallList(singleCylinder)
		BendRight()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -7.0)
		glCallList(doubleCylinder)
		BendForward()
		glCallList(elbow)
		glTranslatef(0.0, 0.0, -5.0)
		glCallList(singleCylinder)
		BendLeft()
		glCallList(elbow)
	}
	logo
}

Init() = {
	ambient = @{0.1, 0.1, 0.1, 1.0}
	diffuse = @{0.5, 1.0, 1.0, 1.0}
	position = @{90.0, 90.0, 150.0, 0.0}
	front_mat_shininess = @{30.0}
	front_mat_specular = @{0.2, 0.2, 0.2, 1.0}
	front_mat_diffuse = @{0.5, 0.28, 0.38, 1.0}
	back_mat_shininess = @{50.0}
	back_mat_specular = @{0.5, 0.5, 0.2, 1.0}
	back_mat_diffuse = @{1.0, 1.0, 0.2, 1.0}
	lmodel_ambient = @{1.0, 1.0, 1.0, 1.0}
	lmodel_twoside = @{GL_TRUE}
	glClearColor(0.0, 0.0, 0.0, 0.0)
	glFrontFace(GL_CW)
	glEnable(GL_DEPTH_TEST)
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient)
	glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, lmodel_twoside)
	glLightfv(GL_LIGHT0, GL_AMBIENT, ambient)
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse)
	glLightfv(GL_LIGHT0, GL_POSITION, position)
	glEnable(GL_LIGHTING)
	glEnable(GL_LIGHT0)
	glMaterialfv(GL_FRONT, GL_SHININESS, front_mat_shininess)
	glMaterialfv(GL_FRONT, GL_SPECULAR, front_mat_specular)
	glMaterialfv(GL_FRONT, GL_DIFFUSE, front_mat_diffuse)
	glMaterialfv(GL_BACK, GL_SHININESS, back_mat_shininess)
	glMaterialfv(GL_BACK, GL_SPECULAR, back_mat_specular)
	glMaterialfv(GL_BACK, GL_DIFFUSE, back_mat_diffuse)
	glEnable(GL_CLIP_PLANE0)
	glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, [GL_DECAL])
	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, [GL_REPEAT])
	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, [GL_REPEAT])
	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, [GL_NEAREST])
	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, [GL_NEAREST])
	glTexImage2D(GL_TEXTURE_2D, 0, 3, 0, checkImage)
	//glTexImage2D(GL_TEXTURE_2D, 0, 4, 0, brickImage)
	glEnable(GL_TEXTURE_2D)
	glCullFace(GL_BACK)
	glEnable(GL_CULL_FACE)
	BuildLogo(BuildSingleCylinder(), BuildDoubleCylinder(), BuildElbow())
}

Reshape(width:number, height:number) = {
	glViewport(0, 0, width, height)
	glMatrixMode(GL_PROJECTION)
	glLoadIdentity()
	gluPerspective(90, 1.0, 1.0, 200.0)
	glMatrixMode(GL_MODELVIEW)
}

Draw(logo:number, yRotation:number, zTranslation:number) = {
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
	glPushMatrix()
	glTranslatef(0, 0, zTranslation)
	glRotatef(30.0, 1, 0, 0)
	glRotatef(yRotation, 0, 1, 0)
	glClipPlane(GL_CLIP_PLANE0, plane)
	glCallList(logo)
	glPopMatrix()
	glFlush()
}

scope {
	import(sdl2, sdl)
	import(glapp)
	logo = nil
	yRotation = 30.0
	zTranslation = -15.0
	dithering = true
	shade = true
	doStipple = true
	polyMode = GL_BACK
	App = class(glapp.App) {
		OnInit() = {
			extern(logo)
			logo = Init()
		}
		OnResize(width:number, height:number) = {
			Reshape(width, height)
		}
		OnDraw() = {
			Draw(logo, yRotation, zTranslation)
			this.SwapWindow()
		}
		OnKeyDown(event:sdl.Event) = {
			if (event.scancode == sdl.SCANCODE_UP) {
				plane[3] += 2
			} elsif (event.scancode == sdl.SCANCODE_DOWN) {
				plane[3] -= 2
			} elsif (event.scancode == sdl.SCANCODE_A) {
				glEnable(GL_TEXTURE_2D)
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, [GL_REPEAT])
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, [GL_REPEAT])
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, [GL_NEAREST])
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, [GL_NEAREST])
				glTexImage2D(GL_TEXTURE_2D, 0, 3, 0, checkImage)
			} elsif (event.scancode == sdl.SCANCODE_S) {
				glEnable(GL_TEXTURE_2D)
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, [GL_REPEAT])
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, [GL_REPEAT])
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, [GL_NEAREST])
				glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, [GL_NEAREST])
				glTexImage2D(GL_TEXTURE_2D, 0, 4, 0, brickImage)
			} elsif (event.scancode == sdl.SCANCODE_D) {
				glDisable(GL_TEXTURE_2D)
			} elsif (event.scancode == sdl.SCANCODE_F) {
				glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, [GL_DECAL])
			} elsif (event.scancode == sdl.SCANCODE_G) {
				glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, [GL_MODULATE])
			} elsif (event.scancode == sdl.SCANCODE_Q) {
				glDisable(GL_CULL_FACE)
			} elsif (event.scancode == sdl.SCANCODE_W) {
				glEnable(GL_CULL_FACE)
				glCullFace(GL_FRONT)
			} elsif (event.scancode == sdl.SCANCODE_E) {
				glEnable(GL_CULL_FACE)
				glCullFace(GL_BACK)
			} elsif (event.scancode == sdl.SCANCODE_R) {
				glFrontFace(GL_CW)
			} elsif (event.scancode == sdl.SCANCODE_T) {
				glFrontFace(GL_CCW)
			} elsif (event.scancode == sdl.SCANCODE_Y) {
				glPixelStorei(GL_UNPACK_ALIGNMENT, 1)
				glPixelStorei(GL_UNPACK_LSB_FIRST, 0)
				glPolygonStipple(stipple)
			} elsif (event.scancode == sdl.SCANCODE_U) {
				glPixelStorei(GL_UNPACK_ALIGNMENT, 1)
				glPixelStorei(GL_UNPACK_LSB_FIRST, 1)
				glPolygonStipple(stipple)
			} elsif (event.scancode == sdl.SCANCODE_Z) {
				if ((sdl.GetModState() & sdl.KMOD_SHIFT) != 0) {
					zTranslation += .1
				} else {
					zTranslation -= .1
				}
			} elsif (event.scancode == sdl.SCANCODE_1) {
				glPolygonMode(polyMode, GL_POINT)
			} elsif (event.scancode == sdl.SCANCODE_2) {
				glPolygonMode(polyMode, GL_LINE)
			} elsif (event.scancode == sdl.SCANCODE_3) {
				glPolygonMode(polyMode, GL_FILL)
			} elsif (event.scancode == sdl.SCANCODE_4) {
				if (polyMode == GL_BACK) {
					polyMode = GL_FRONT
				} elsif (polyMode == GL_FRONT) {
					polyMode = GL_FRONT_AND_BACK
				} elsif (polyMode == GL_FRONT_AND_BACK) {
					polyMode = GL_BACK
				}
			} elsif (event.scancode == sdl.SCANCODE_5) {
				glHint(GL_POLYGON_SMOOTH_HINT, GL_NICEST)
			} elsif (event.scancode == sdl.SCANCODE_6) {
				glEnable(GL_POLYGON_SMOOTH)
				glBlendFunc(GL_SRC_ALPHA, GL_ONE)
				glEnable(GL_BLEND)
				glDisable(GL_DEPTH_TEST)
			} elsif (event.scancode == sdl.SCANCODE_7) {
				glDisable(GL_POLYGON_SMOOTH)
				glBlendFunc(GL_ONE, GL_ZERO)
				glDisable(GL_BLEND)
				glEnable(GL_DEPTH_TEST)
			} elsif (event.scancode == sdl.SCANCODE_8) {
				dithering = !dithering
				if (dithering) { glEnable(GL_DITHER) } else { glDisable(GL_DITHER) }
			} elsif (event.scancode == sdl.SCANCODE_9) {
				doStipple = !doStipple
				if (doStipple) {
					glPolygonStipple(stipple)
					glEnable(GL_POLYGON_STIPPLE)
				} else {
					glDisable(GL_POLYGON_STIPPLE)
				}
			} elsif (event.scancode == sdl.SCANCODE_0) {
				shade = !shade
				if (shade) { glShadeModel(GL_SMOOTH) } else { glShadeModel(GL_FLAT) }
			}
			Draw(logo, yRotation, zTranslation)
			this.SwapWindow()
		}
		OnIdle() = {
			if (this.CheckKeyboardState(sdl.SCANCODE_LEFT)) {
				extern(yRotation)
				yRotation += .5
			}
			if (this.CheckKeyboardState(sdl.SCANCODE_RIGHT)) {
				extern(yRotation)
				yRotation -= .5
			}
			Draw(logo, yRotation, zTranslation)
			this.SwapWindow()
		}
	}
	app = App()
	app.MainLoop(nil, 300, 300, 0)
}

#!/usr/bin/env gura

// Orignal source file is written in C and is available from the site below.
// http://www.sgi.com/products/software/opengl/examples/samples/
// depth.c

import(glu) {*}
import(opengl) {*}

antiAlias = false
stipple = false

stippleBits = @{
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
	0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
}

Init() = {
	glClearColor(0.0, 0.0, 0.0, 0.0)
	glClearIndex(0.0)
	glPolygonStipple(stippleBits)
}

Reshape(width:number, height:number) = {
	glViewport(0, 0, width, height)
	glMatrixMode(GL_PROJECTION)
	glLoadIdentity()
	glOrtho(-1.0, 1.0, -1.0, 1.0, -0.5, 1000.0)
	glMatrixMode(GL_MODELVIEW)
}

Draw() = {
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
	if (antiAlias) {
		glBlendFunc(GL_SRC_ALPHA, GL_ONE)
		glEnable(GL_BLEND)
		glEnable(GL_POLYGON_SMOOTH)
		glDisable(GL_DEPTH_TEST)
	} else {
		glDisable(GL_BLEND)
		glDisable(GL_POLYGON_SMOOTH)
		glEnable(GL_DEPTH_TEST)
	}
	if (stipple) {
		glEnable(GL_POLYGON_STIPPLE)
	} else {
		glDisable(GL_POLYGON_STIPPLE)
	}
	glBegin(GL_TRIANGLES) {
		glColor3f(0.0, 0.0, 1.0)
		glVertex3f( 0.9, -0.9, -30.0)
		glVertex3f( 0.9,  0.9, -30.0)
		glVertex3f(-0.9,  0.0, -30.0)
		glColor3f(0.0, 1.0, 0.0)
		glVertex3f(-0.9, -0.9, -40.0)
		glVertex3f(-0.9,  0.9, -40.0)
		glVertex3f( 0.9,  0.0, -25.0)
	}
	glFlush()
}

scope {
	import(sdl2, sdl)
	import(glapp)
	App = class(glapp.App) {
		OnInit() = {
			Init()
		}
		OnResize(width:number, height:number) = {
			Reshape(width, height)
		}
		OnDraw() = {
			Draw()
			this.SwapWindow()
		}
		OnMouseDown(event:sdl.Event) = {
			x:extern = event.x
			y:extern = event.y
		}
		OnKeyDown(event:sdl.Event) = {
			if (event.sym == sdl.K_1) {
				antiAlias:extern = !antiAlias
			} elsif (event.sym == sdl.K_2) {
				stipple:extern = !stipple
			}
			Draw()
			this.SwapWindow()
		}
	}
	app = App()
	app.MainLoop(nil, 300, 300, 0)
}

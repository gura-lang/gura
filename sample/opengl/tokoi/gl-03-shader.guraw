#!/usr/bin/env gura

// Orignal source file is written in C and is available from the site below:
// http://marina.sys.wakayama-u.ac.jp/~tokoi/oglarticles.html

import(opengl) {*}
import(glut) {*}

printShaderInfoLog(shader:number) = {
	infoLog = glGetShaderInfoLog(shader)
	!infoLog.isempty() && sys.stderr.printf('InfoLog:\n%s\n\n', infoLog)
}

printProgramInfoLog(program:number) = {
	infoLog = glGetProgramInfoLog(program)
	!infoLog.isempty() && sys.stderr.printf('InfoLog:\n%s\n\n', infoLog)
}

vertShader = nil
fragShader = nil
gl2Program = nil

display() = {
	glClear(GL_COLOR_BUFFER_BIT)
	glFlush()
}

keyboard(code:number, x:number, y:number) = {
	if (code == 27) {
		sys.exit(0)
	}
}

src_simple_vert = R'''
#version 120
//
// simple.vert
//
invariant gl_Position;
attribute vec2 position;

void main(void)
{
	gl_Position = vec4(position, 0.0, 1.0);
}
'''

src_simple_frag = R'''
#version 120
//
// simple.frag
//

void main(void)
{
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
'''

init() = {
	glClearColor(1.0, 1.0, 1.0, 1.0)
	vertShader:extern = glCreateShader(GL_VERTEX_SHADER)
	fragShader:extern = glCreateShader(GL_FRAGMENT_SHADER)
	glShaderSource(vertShader, src_simple_vert.eachline())
	glShaderSource(fragShader, src_simple_frag.eachline())
	glCompileShader(vertShader)
	compiled = (glGetShaderiv(vertShader, GL_COMPILE_STATUS) == 1)
	printShaderInfoLog(vertShader)
	if (!compiled) {
		sys.stderr.println('Compile error in vertex shader.')
		sys.exit(1)
	}
	glCompileShader(fragShader)
	compiled = (glGetShaderiv(fragShader, GL_COMPILE_STATUS) == 1)
	printShaderInfoLog(fragShader)
	if (!compiled) {
		sys.stderr.println('Compile error in fragment shader.')
		sys.exit(1)
	}
	gl2Program = glCreateProgram()
	glAttachShader(gl2Program, vertShader)
	glAttachShader(gl2Program, fragShader)
	glDeleteShader(vertShader)
	glDeleteShader(fragShader)

	glBindAttribLocation(gl2Program, 0, 'position')

	glLinkProgram(gl2Program)
	linked = (glGetProgramiv(gl2Program, GL_LINK_STATUS) == 1)
	printProgramInfoLog(gl2Program)
	if (!linked) {
		sys.stderr.println('Link error.')
		sys.exit(1)
	}

	[buffer] = glGenBuffers(1)
	println(buffer)
	glBindBuffer(GL_ARRAY_BUFFER, buffer)
	glBufferData(GL_ARRAY_BUFFER, 4 * 2 * 4, nil, GL_STATIC_DRAW)
}

main() = {
	glutInit(sys.argv)
	glutInitDisplayMode(GLUT_RGB)
	glutCreateWindow(sys.argv[0])
	glutDisplayFunc(display)
	glutKeyboardFunc(keyboard);
	init()
	glutMainLoop()
}

main()

#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/sutfgrid.c

/**
 * surfgrid.c - simple test of polygon offset
 *
 * GLUT distribution version  $Revision: 1.7 $
 *
 * usage:
 *	surfgrid [-f]
 *
 * options:
 *	-f	run on full screen
 *
 * keys:
 *	p	toggle polygon offset
 *      F       increase polygon offset factor
 *      f       decrease polygon offset factor
 *      B       increase polygon offset bias
 *      b       decrease polygon offset bias
 *	g	toggle grid drawing
 *	s	toggle smooth/flat shading
 *	n	toggle whether to use GL evaluators or GLU nurbs
 *	u	decr number of segments in U direction
 *	U	incr number of segments in U direction
 *	v	decr number of segments in V direction
 *	V	incr number of segments in V direction
 *	escape	quit
 */

import(opengl) {*}
import(glu) {*}
import(glut) {*}
import(arrayutil)

W = 600
H = 600

z_axis = \
@{0.0, 0.0, 1.0};

norm(v[]:number) = {
	r = math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
	v[0] /= r;
	v[1] /= r;
	v[2] /= r;
}

cross(v1[]:number, v2[]:number, result[]:number) = {
	result[0] = v1[1] * v2[2] - v1[2] * v2[1];
	result[1] = v1[2] * v2[0] - v1[0] * v2[2];
	result[2] = v1[0] * v2[1] - v1[1] * v2[0];
}

length(v[]:number) = {
	math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}

winwidth = W, winheight = H;
nobj = nil;
surflist = 0, gridlist = 0;

useglunurbs = false;
smooth = true;
tracking = GL_FALSE;
showgrid = true;
showsurf = true;
fullscreen = false;
modelmatrix = dim(16) {0};
factor = 0.5;
bias = 0.002;
usegments = 4;
vsegments = 4;

spindx = 0, spindy = 0;
startx = 0, starty = 0;
curx = 0, cury = 0;
prevx = 0, prevy = 0;       /* to get good deltas using glut */

/* Control points of the torus in Bezier form.  Can be rendered
   using OpenGL evaluators. */
torusbezierpts:array@float = \
@{
   4.0, 0.0, 0.0, 4.0, 2.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 2.0,
   3.0, 0.0, 1.0, 2.0, 4.0, 0.0, 1.0, 2.0, 8.0, 0.0, 0.0, 4.0,
   8.0, 0.0, 0.0, 4.0, 4.0, 0.0,-1.0, 2.0, 3.0, 0.0,-1.0, 2.0,
   3.0, 0.0,-1.0, 2.0, 2.0, 0.0,-1.0, 2.0, 4.0, 0.0, 0.0, 4.0,
   2.0,-2.0, 0.0, 2.0, 1.0,-1.0, 0.5, 1.0, 1.5,-1.5, 0.5, 1.0,
   1.5,-1.5, 0.5, 1.0, 2.0,-2.0, 0.5, 1.0, 4.0,-4.0, 0.0, 2.0,
   4.0,-4.0, 0.0, 2.0, 2.0,-2.0,-0.5, 1.0, 1.5,-1.5,-0.5, 1.0,
   1.5,-1.5,-0.5, 1.0, 1.0,-1.0,-0.5, 1.0, 2.0,-2.0, 0.0, 2.0,
   0.0,-2.0, 0.0, 2.0, 0.0,-1.0, 0.5, 1.0, 0.0,-1.5, 0.5, 1.0,
   0.0,-1.5, 0.5, 1.0, 0.0,-2.0, 0.5, 1.0, 0.0,-4.0, 0.0, 2.0,
   0.0,-4.0, 0.0, 2.0, 0.0,-2.0,-0.5, 1.0, 0.0,-1.5,-0.5, 1.0,
   0.0,-1.5,-0.5, 1.0, 0.0,-1.0,-0.5, 1.0, 0.0,-2.0, 0.0, 2.0,
   0.0,-2.0, 0.0, 2.0, 0.0,-1.0, 0.5, 1.0, 0.0,-1.5, 0.5, 1.0,
   0.0,-1.5, 0.5, 1.0, 0.0,-2.0, 0.5, 1.0, 0.0,-4.0, 0.0, 2.0,
   0.0,-4.0, 0.0, 2.0, 0.0,-2.0,-0.5, 1.0, 0.0,-1.5,-0.5, 1.0,
   0.0,-1.5,-0.5, 1.0, 0.0,-1.0,-0.5, 1.0, 0.0,-2.0, 0.0, 2.0,
  -2.0,-2.0, 0.0, 2.0,-1.0,-1.0, 0.5, 1.0,-1.5,-1.5, 0.5, 1.0,
  -1.5,-1.5, 0.5, 1.0,-2.0,-2.0, 0.5, 1.0,-4.0,-4.0, 0.0, 2.0,
  -4.0,-4.0, 0.0, 2.0,-2.0,-2.0,-0.5, 1.0,-1.5,-1.5,-0.5, 1.0,
  -1.5,-1.5,-0.5, 1.0,-1.0,-1.0,-0.5, 1.0,-2.0,-2.0, 0.0, 2.0,
  -4.0, 0.0, 0.0, 4.0,-2.0, 0.0, 1.0, 2.0,-3.0, 0.0, 1.0, 2.0,
  -3.0, 0.0, 1.0, 2.0,-4.0, 0.0, 1.0, 2.0,-8.0, 0.0, 0.0, 4.0,
  -8.0, 0.0, 0.0, 4.0,-4.0, 0.0,-1.0, 2.0,-3.0, 0.0,-1.0, 2.0,
  -3.0, 0.0,-1.0, 2.0,-2.0, 0.0,-1.0, 2.0,-4.0, 0.0, 0.0, 4.0,
  -4.0, 0.0, 0.0, 4.0,-2.0, 0.0, 1.0, 2.0,-3.0, 0.0, 1.0, 2.0,
  -3.0, 0.0, 1.0, 2.0,-4.0, 0.0, 1.0, 2.0,-8.0, 0.0, 0.0, 4.0,
  -8.0, 0.0, 0.0, 4.0,-4.0, 0.0,-1.0, 2.0,-3.0, 0.0,-1.0, 2.0,
  -3.0, 0.0,-1.0, 2.0,-2.0, 0.0,-1.0, 2.0,-4.0, 0.0, 0.0, 4.0,
  -2.0, 2.0, 0.0, 2.0,-1.0, 1.0, 0.5, 1.0,-1.5, 1.5, 0.5, 1.0,
  -1.5, 1.5, 0.5, 1.0,-2.0, 2.0, 0.5, 1.0,-4.0, 4.0, 0.0, 2.0,
  -4.0, 4.0, 0.0, 2.0,-2.0, 2.0,-0.5, 1.0,-1.5, 1.5,-0.5, 1.0,
  -1.5, 1.5,-0.5, 1.0,-1.0, 1.0,-0.5, 1.0,-2.0, 2.0, 0.0, 2.0,
   0.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.5, 1.0, 0.0, 1.5, 0.5, 1.0,
   0.0, 1.5, 0.5, 1.0, 0.0, 2.0, 0.5, 1.0, 0.0, 4.0, 0.0, 2.0,
   0.0, 4.0, 0.0, 2.0, 0.0, 2.0,-0.5, 1.0, 0.0, 1.5,-0.5, 1.0,
   0.0, 1.5,-0.5, 1.0, 0.0, 1.0,-0.5, 1.0, 0.0, 2.0, 0.0, 2.0,
   0.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.5, 1.0, 0.0, 1.5, 0.5, 1.0,
   0.0, 1.5, 0.5, 1.0, 0.0, 2.0, 0.5, 1.0, 0.0, 4.0, 0.0, 2.0,
   0.0, 4.0, 0.0, 2.0, 0.0, 2.0,-0.5, 1.0, 0.0, 1.5,-0.5, 1.0,
   0.0, 1.5,-0.5, 1.0, 0.0, 1.0,-0.5, 1.0, 0.0, 2.0, 0.0, 2.0,
   2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.5, 1.0, 1.5, 1.5, 0.5, 1.0,
   1.5, 1.5, 0.5, 1.0, 2.0, 2.0, 0.5, 1.0, 4.0, 4.0, 0.0, 2.0,
   4.0, 4.0, 0.0, 2.0, 2.0, 2.0,-0.5, 1.0, 1.5, 1.5,-0.5, 1.0,
   1.5, 1.5,-0.5, 1.0, 1.0, 1.0,-0.5, 1.0, 2.0, 2.0, 0.0, 2.0,
   4.0, 0.0, 0.0, 4.0, 2.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 2.0,
   3.0, 0.0, 1.0, 2.0, 4.0, 0.0, 1.0, 2.0, 8.0, 0.0, 0.0, 4.0,
   8.0, 0.0, 0.0, 4.0, 4.0, 0.0,-1.0, 2.0, 3.0, 0.0,-1.0, 2.0,
   3.0, 0.0,-1.0, 2.0, 2.0, 0.0,-1.0, 2.0, 4.0, 0.0, 0.0, 4.0,
};

/* Control points of a torus in NURBS form.  Can be rendered using
   the GLU NURBS routines. */
torusnurbpts = \
@{
   4.0, 0.0, 0.0, 4.0, 2.0, 0.0, 1.0, 2.0, 4.0, 0.0, 1.0, 2.0,
   8.0, 0.0, 0.0, 4.0, 4.0, 0.0,-1.0, 2.0, 2.0, 0.0,-1.0, 2.0,
   4.0, 0.0, 0.0, 4.0, 2.0,-2.0, 0.0, 2.0, 1.0,-1.0, 0.5, 1.0,
   2.0,-2.0, 0.5, 1.0, 4.0,-4.0, 0.0, 2.0, 2.0,-2.0,-0.5, 1.0,
   1.0,-1.0,-0.5, 1.0, 2.0,-2.0, 0.0, 2.0,-2.0,-2.0, 0.0, 2.0,
  -1.0,-1.0, 0.5, 1.0,-2.0,-2.0, 0.5, 1.0,-4.0,-4.0, 0.0, 2.0,
  -2.0,-2.0,-0.5, 1.0,-1.0,-1.0,-0.5, 1.0,-2.0,-2.0, 0.0, 2.0,
  -4.0, 0.0, 0.0, 4.0,-2.0, 0.0, 1.0, 2.0,-4.0, 0.0, 1.0, 2.0,
  -8.0, 0.0, 0.0, 4.0,-4.0, 0.0,-1.0, 2.0,-2.0, 0.0,-1.0, 2.0,
  -4.0, 0.0, 0.0, 4.0,-2.0, 2.0, 0.0, 2.0,-1.0, 1.0, 0.5, 1.0,
  -2.0, 2.0, 0.5, 1.0,-4.0, 4.0, 0.0, 2.0,-2.0, 2.0,-0.5, 1.0,
  -1.0, 1.0,-0.5, 1.0,-2.0, 2.0, 0.0, 2.0, 2.0, 2.0, 0.0, 2.0,
   1.0, 1.0, 0.5, 1.0, 2.0, 2.0, 0.5, 1.0, 4.0, 4.0, 0.0, 2.0,
   2.0, 2.0,-0.5, 1.0, 1.0, 1.0,-0.5, 1.0, 2.0, 2.0, 0.0, 2.0,
   4.0, 0.0, 0.0, 4.0, 2.0, 0.0, 1.0, 2.0, 4.0, 0.0, 1.0, 2.0,
   8.0, 0.0, 0.0, 4.0, 4.0, 0.0,-1.0, 2.0, 2.0, 0.0,-1.0, 2.0,
   4.0, 0.0, 0.0, 4.0,
};

move(x:number, y:number) = {
	prevx:extern = curx;
	prevy:extern = cury;
	curx:extern = x;
	cury:extern = y;
	if (curx != startx || cury != starty) {
		glutPostRedisplay();
		startx:extern = curx;
		starty:extern = cury;
	}
}

button(button:number, state:number, x:number, y:number) = {
	if (button != GLUT_LEFT_BUTTON) {
		return;
	}
	if (state == GLUT_DOWN) {
		prevx:extern = curx:extern = startx:extern = x;
		prevy:extern = cury:extern = starty:extern = y;
		spindx:extern = 0;
		spindy:extern = 0;
		tracking:extern = GL_TRUE;
	} elsif (state == GLUT_UP) {
		/* 
		* If user released the button while moving the mouse, keep
		* spinning.
		*/
		if (x != prevx || y != prevy) {
			spindx:extern = x - prevx;
			spindy:extern = y - prevy;
		}
		tracking:extern = GL_FALSE;
	}
}

/* Maintain a square window when resizing */
reshape(width:number, height:number) = {
	size = min(width, height)
	glViewport((width - size) / 2, (height - size) / 2, size, size);
	glutReshapeWindow(size, size);
	glutPostRedisplay();
}

gridmaterials() = {
	front_mat_diffuse = \
		@{1.0, 1.0, 0.4, 1.0};
	front_mat_ambient = \
		@{0.1, 0.1, 0.1, 1.0};
	back_mat_diffuse = \
		@{1.0, 0.0, 0.0, 1.0};
	back_mat_ambient = \
		@{0.1, 0.1, 0.1, 1.0};

	glMaterialfv(GL_FRONT, GL_DIFFUSE, front_mat_diffuse);
	glMaterialfv(GL_FRONT, GL_AMBIENT, front_mat_ambient);
	glMaterialfv(GL_BACK, GL_DIFFUSE, back_mat_diffuse);
	glMaterialfv(GL_BACK, GL_AMBIENT, back_mat_ambient);
}

surfacematerials() = {
	front_mat_diffuse = \
		@{0.2, 0.7, 0.4, 1.0};
	front_mat_ambient = \
		@{0.1, 0.1, 0.1, 1.0};
	back_mat_diffuse = \
		@{1.0, 1.0, 0.2, 1.0};
	back_mat_ambient = \
		@{0.1, 0.1, 0.1, 1.0};

	glMaterialfv(GL_FRONT, GL_DIFFUSE, front_mat_diffuse);
	glMaterialfv(GL_FRONT, GL_AMBIENT, front_mat_ambient);
	glMaterialfv(GL_BACK, GL_DIFFUSE, back_mat_diffuse);
	glMaterialfv(GL_BACK, GL_AMBIENT, back_mat_ambient);
}

init() = {
	ambient = \
		@{0.0, 0.0, 0.0, 1.0};
	diffuse = \
		@{1.0, 1.0, 1.0, 1.0};
	position = \
		@{90.0, 90.0, -150.0, 0.0};
	lmodel_ambient = \
		@{1.0, 1.0, 1.0, 1.0};

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(40.0, 1.0, 2.0, 200.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	modelmatrix:extern = glGetFloatv(GL_MODELVIEW_MATRIX);

	glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);
	glLightfv(GL_LIGHT0, GL_POSITION, position);
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_AUTO_NORMAL);
	glFrontFace(GL_CCW);

	glEnable(GL_MAP2_VERTEX_4);
	glClearColor(0.25, 0.25, 0.5, 0.0);

	nobj:extern = gluNewNurbsRenderer();
	gluNurbsProperty(nobj, GLU_SAMPLING_METHOD, GLU_DOMAIN_DISTANCE);

	surflist:extern = glGenLists(1);
	gridlist:extern = glGenLists(1);
	createlists();
}

drawmesh() = {
	up2p = 4;
	uorder = 3, vorder = 3;
	nu = 4, nv = 4;
	vp2p = up2p * uorder * nu;

	repeat(nv) {|j|
		repeat(nu) {|i|
			p = torusbezierpts.offset((j * vp2p * vorder) + (i * up2p * uorder));
			glMap2f(GL_MAP2_VERTEX_4, 0.0, 1.0, up2p, 3, 0.0, 1.0, vp2p, 3,
					p);
			if (showsurf) {
				surfacematerials();
				glEvalMesh2(GL_FILL, 0, usegments, 0, vsegments);
			}
			if (showgrid) {
				gridmaterials();
				glEvalMesh2(GL_LINE, 0, usegments, 0, vsegments);
			}
		}
	}
}

redraw() = {
	v = dim(3) {0}, rot = dim(3) {0};
	
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glColor3f(1, 0, 0);

	if (tracking) {
		dx = curx - startx;
		dy = cury - starty;
	} else {
		dx = spindx;
		dy = spindy;
	}
	if (dx != 0 || dy != 0) {
		dy = -dy;
		v[0] = dx;
		v[1] = dy;
		v[2] = 0;

		len = length(v);
		ang = -len / 600 * 360;
		norm(v);
		cross(v, z_axis, rot);

		/* This is certainly not recommended for programs that care
		about performance or numerical stability: we concatenate
		the rotation onto the current modelview matrix and read
		the matrix back, thus saving ourselves from writing our
		own matrix manipulation routines.  */
		glLoadIdentity();
		glRotatef(ang, rot[0], rot[1], rot[2]);
		glMultMatrixf(modelmatrix);
		modelmatrix:extern = glGetFloatv(GL_MODELVIEW_MATRIX);
	}
	glLoadIdentity();
	glTranslatef(0.0, 0.0, -10.0);
	glMultMatrixf(modelmatrix);

	if (useglunurbs) {
		if (showsurf) {
			glCallList(surflist);
		}
		if (showgrid) {
			glCallList(gridlist);
		}
	} else {
		glMapGrid2f(usegments, 0.0, 1.0, vsegments, 0.0, 1.0);
		drawmesh();
	}

	glutSwapBuffers();
}

usage() = {
	printf("usage: surfgrid [-f]\n");
	sys.exit(1);
}

/* what to do when a menu item is selected. This function also handles
   keystroke events.  */
menu(item:number) = {
	item = chr(item)
	if (item == 'F') {
		factor:extern += 0.1;
		printf("factor: %8.4f\n", factor);
	} elsif (item == 'f') {
		factor:extern -= 0.1;
		printf("factor: %8.4f\n", factor);
	} elsif (item == 'B') {
		bias:extern += 0.0001;
		printf("bias:  %8.4f\n", bias);
	} elsif (item == 'b') {
		bias:extern -= 0.0001;
		printf("bias:  %8.4f\n", bias);
	} elsif (item == 'g') {
		showgrid:extern = !showgrid;
	} elsif (item == 'n') {
		useglunurbs:extern = !useglunurbs;
	} elsif (item == 's') {
		smooth:extern = !smooth;
		if (smooth) {
			glShadeModel(GL_SMOOTH);
		} else {
			glShadeModel(GL_FLAT);
		}
	} elsif (item == 't') {
		showsurf:extern = !showsurf;
	} elsif (item == 'u') {
		usegments:extern = cond(usegments < 2, 1, usegments - 1);
		createlists();
	} elsif (item == 'U') {
		usegments:extern += 1;
		createlists();
	} elsif (item == 'v') {
		vsegments:extern = cond(vsegments < 2, 1, vsegments - 1);
		createlists();
	} elsif (item == 'V') {
		vsegments:extern += 1;
		createlists();
	} elsif (item == '\033') {         /* ESC key: quit */
		sys.exit(0);
	}
	glutPostRedisplay();
}

key(key:number, x:number, y:number) = {
	menu(key);
}

animate() = {
	if (!tracking && (spindx != 0 || spindy != 0)) {
		glutPostRedisplay();
	}
}

main() = {
	argv = glutInit(sys.argv);  /* initialize glut, processing
	                             arguments */
	argv.offset(1) {|arg|
		if (arg[0] == '-') {
			if (arg[1] == 'f') {
				fullscreen:extern = true;
			} else {
				usage();
				break
			}
		} else { 
			usage();
		}
	}

	glutInitWindowSize(winwidth, winheight);
	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);
	glutCreateWindow("surfgrid");

	/* create a menu for the right mouse button */
	glutCreateMenu(menu);
	glutAddMenuEntry("F: increase factor", ord('F'));
	glutAddMenuEntry("f: decrease factor", ord('f'));
	glutAddMenuEntry("B: increase bias", ord('B'));
	glutAddMenuEntry("b: decrease bias", ord('b'));
	glutAddMenuEntry("g: toggle grid", ord('g'));
	glutAddMenuEntry("s: toggle smooth shading", ord('s'));
	glutAddMenuEntry("t: toggle surface", ord('t'));
	glutAddMenuEntry("n: toggle GL evalutators/GLU nurbs", ord('n'));
	glutAddMenuEntry("u: decrement u segments", ord('u'));
	glutAddMenuEntry("U: increment u segments", ord('U'));
	glutAddMenuEntry("v: decrement v segments", ord('v'));
	glutAddMenuEntry("V: increment v segments", ord('V'));
	glutAddMenuEntry("<esc>: exit program", ord('\033'));
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	/* set callbacks */
	glutKeyboardFunc(key);
	glutDisplayFunc(redraw);
	glutReshapeFunc(reshape);
	glutMouseFunc(button);
	glutMotionFunc(move);
	glutIdleFunc(animate);
	
	init();
	glutMainLoop();
}

circleknots = \
@{0.0, 0.0, 0.0, 0.25, 0.50, 0.50, 0.75, 1.0, 1.0, 1.0};

createlists() = {
	gluNurbsProperty(nobj, GLU_U_STEP, (usegments - 1) * 4);
	gluNurbsProperty(nobj, GLU_V_STEP, (vsegments - 1) * 4);

	gluNurbsProperty(nobj, GLU_DISPLAY_MODE, GLU_FILL);
	glNewList(surflist, GL_COMPILE);
	surfacematerials();
	gluBeginSurface(nobj);
	gluNurbsSurface(nobj, circleknots, circleknots,
					4, 28, torusnurbpts, 3, 3, GL_MAP2_VERTEX_4);
	gluEndSurface(nobj);
	glEndList();

	gluNurbsProperty(nobj, GLU_DISPLAY_MODE, GLU_OUTLINE_POLYGON);
	glNewList(gridlist, GL_COMPILE);
	gridmaterials();
	gluBeginSurface(nobj);
	gluNurbsSurface(nobj, circleknots, circleknots,
					4, 28, torusnurbpts, 3, 3, GL_MAP2_VERTEX_4);
	gluEndSurface(nobj);
	glEndList();
}

main()

#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/halomagic.c

/* Copyright (c) Mark J. Kilgard, 1994, 1997.  */

/* This program is freely distributable without licensing fees 
   and is provided without guarantee or warrantee expressed or 
   implied. This program is -not- in the public domain. */

/* dinoshade.c with an added "magic halo" effect when you hit the
   space bar.  You can use an overlaid or blended halo (blending is
   slower). */

/* Example for PC game developers to show how to *combine* texturing,
   reflections, and projected shadows all in real-time with OpenGL.
   Robust reflections use stenciling.  Robust projected shadows
   use both stenciling and polygon offset.  PC game programmers
   should realize that neither stenciling nor polygon offset are 
   supported by Direct3D, so these real-time rendering algorithms
   are only really viable with OpenGL. 
   
   The program has modes for disabling the stenciling and polygon
   offset uses.  It is worth running this example with these features
   toggled off so you can see the sort of artifacts that result.
   
   Notice that the floor texturing, reflections, and shadowing
   all co-exist properly. */

/* When you run this program:  Left mouse button controls the
   view.  Middle mouse button controls light position (left &
   right rotates light around dino; up & down moves light
   position up and down).  Right mouse button pops up menu. */

/* Check out the comments in the "redraw" routine to see how the
   reflection blending and surface stenciling is done.  You can
   also see in "redraw" how the projected shadows are rendered,
   including the use of stenciling and polygon offset. */

/* This program is derived from glutdino.c */

/* Compile: cc -o halomagic halomagic.c -lglut -lGLU -lGL -lXmu -lXext -lX11 -lm */

import(opengl) {*}
import(glu) {*}
import(glut) {*}

M_PI = 3.14159265

/* Variable controlling various rendering modes. */
stencilReflection = true, stencilShadow = true, offsetShadow = true;
renderShadow = false, renderDinosaur = true, renderReflection = false;
linearFiltering = false, useMipmaps = false, useTexture = false;
reportSpeed = false;
animation = false;
lightSwitch = GL_TRUE;
directionalLight = true;
forceExtension = false;
haloMagic = false, blendedHalo = false;
haloScale = 1.0, haloTime = 0.0;

/* Time varying or user-controled variables. */
jump = 0.0;
lightAngle = 0.0, lightHeight = 20;
angle = -150;   /* in degrees */
angle2 = 30;   /* in degrees */

moving = false, startx = 0, starty = 0;
lightMoving = false, lightStartX = 0, lightStartY = 0;

[
	MISSING, EXTENSION, ONE_DOT_ONE
] = 0..
polygonOffsetVersion = 0;

bodyWidth = 3.0;
/* *INDENT-OFF* */
body = @{ {0, 3}, {1, 1}, {5, 1}, {8, 4}, {10, 4}, {11, 5},
  {11, 11.5}, {13, 12}, {13, 13}, {10, 13.5}, {13, 14}, {13, 15}, {11, 16},
  {8, 16}, {7, 15}, {7, 13}, {8, 12}, {7, 11}, {6, 6}, {4, 3}, {3, 2},
  {1, 2} };
arm = @{ {8, 10}, {9, 9}, {10, 9}, {13, 8}, {14, 9}, {16, 9},
  {15, 9.5}, {16, 10}, {15, 10}, {15.5, 11}, {14.5, 10}, {14, 11}, {14, 10},
  {13, 9}, {11, 11}, {9, 11} };
leg = @{ {8, 6}, {8, 4}, {9, 3}, {9, 2}, {8, 1}, {8, 0.5}, {9, 0},
  {12, 0}, {10, 1}, {10, 2}, {12, 4}, {11, 6}, {10, 7}, {9, 7} };
eye = @{ {8.75, 15}, {9, 14.7}, {9.6, 14.7}, {10.1, 15},
  {9.6, 15.25}, {9, 15.25} };
lightPosition = dim(4) {0}
lightColor = @{0.8, 1.0, 0.8, 1.0}; /* green-tinted */
skinColor = @{0.1, 1.0, 0.1, 1.0}, eyeColor = @{1.0, 0.2, 0.2, 1.0};
/* *INDENT-ON* */

/* Nice floor texture tiling pattern. */
circles = @{
  "....xxxx........",
  "..xxxxxxxx......",
  ".xxxxxxxxxx.....",
  ".xxx....xxx.....",
  "xxx......xxx....",
  "xxx......xxx....",
  "xxx......xxx....",
  "xxx......xxx....",
  ".xxx....xxx.....",
  ".xxxxxxxxxx.....",
  "..xxxxxxxx......",
  "....xxxx........",
  "................",
  "................",
  "................",
  "................",
};

makeFloorTexture() = {
	floorTexture= array@uchar.zeros(16 * 16 * 3)

  /* Setup RGB image for the texture. */
	i = 0
	repeat(16) {|t|
		repeat(16) {|s|
			if (circles[t][s] == 'x') {
				/* Nice blue. */
				floorTexture[i, i + 1, i + 2] = [0x1f, 0x1f, 0x8f]
			} else {
				/* Light gray. */
				floorTexture[i, i + 1, i + 2] = [0xca, 0xca, 0xca]
			}
			i += 3
		}
	}

	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

	if (useMipmaps) {
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
						GL_LINEAR_MIPMAP_LINEAR);
		gluBuild2DMipmaps(GL_TEXTURE_2D, 3, 16, 16,
						  GL_RGB, GL_UNSIGNED_BYTE, floorTexture);
	} else {
		if (linearFiltering) {
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		} else {
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		}
		glTexImage2D(GL_TEXTURE_2D, 0, 3, 16, 16, 0,
					 GL_RGB, GL_UNSIGNED_BYTE, floorTexture);
	}
}

[
	X, Y, Z, W
] = 0..;
[
  A, B, C, D
] = 0..;

/* Create a matrix that will project the desired shadow. */
shadowMatrix(shadowMat[],
			 groundplane[]:number,
			 lightpos[]:number) = {
  /* Find dot product between light position vector and ground plane normal. */
	dot = groundplane[X] * lightpos[X] + \
	    groundplane[Y] * lightpos[Y] + \
	    groundplane[Z] * lightpos[Z] + \
	    groundplane[W] * lightpos[W];

	shadowMat[0][0] = dot - lightpos[X] * groundplane[X];
	shadowMat[1][0] = 0. - lightpos[X] * groundplane[Y];
	shadowMat[2][0] = 0. - lightpos[X] * groundplane[Z];
	shadowMat[3][0] = 0. - lightpos[X] * groundplane[W];

	shadowMat[X][1] = 0. - lightpos[Y] * groundplane[X];
	shadowMat[1][1] = dot - lightpos[Y] * groundplane[Y];
	shadowMat[2][1] = 0. - lightpos[Y] * groundplane[Z];
	shadowMat[3][1] = 0. - lightpos[Y] * groundplane[W];
	
	shadowMat[X][2] = 0. - lightpos[Z] * groundplane[X];
	shadowMat[1][2] = 0. - lightpos[Z] * groundplane[Y];
	shadowMat[2][2] = dot - lightpos[Z] * groundplane[Z];
	shadowMat[3][2] = 0. - lightpos[Z] * groundplane[W];
	
	shadowMat[X][3] = 0. - lightpos[W] * groundplane[X];
	shadowMat[1][3] = 0. - lightpos[W] * groundplane[Y];
	shadowMat[2][3] = 0. - lightpos[W] * groundplane[Z];
	shadowMat[3][3] = dot - lightpos[W] * groundplane[W];
	
}

/* Find the plane equation given 3 points. */
findPlane(plane[]:number, v0[]:number, v1[]:number, v2[]:number) = {
	vec0 = dim(3) {0}, vec1 = dim(3) {0}
	
	/* Need 2 vectors to find cross product. */
	vec0[X] = v1[X] - v0[X];
	vec0[Y] = v1[Y] - v0[Y];
	vec0[Z] = v1[Z] - v0[Z];

	vec1[X] = v2[X] - v0[X];
	vec1[Y] = v2[Y] - v0[Y];
	vec1[Z] = v2[Z] - v0[Z];

	/* find cross product to get A, B, and C of plane equation */
	plane[A] = vec0[Y] * vec1[Z] - vec0[Z] * vec1[Y];
	plane[B] = -(vec0[X] * vec1[Z] - vec0[Z] * vec1[X]);
	plane[C] = vec0[X] * vec1[Y] - vec0[Y] * vec1[X];

	plane[D] = -(plane[A] * v0[X] + plane[B] * v0[Y] + plane[C] * v0[Z]);
}

tobj = nil;
extrudeSolidFromPolygon(data[]:list, thickness:number, side:number, edge:number, whole:number) = {
	vertex = dim(3) {0}
	count = data.len()

	if (tobj == nil) {
		tobj:extern = gluNewTess();  /* create and initialize a GLU
                             polygon tesselation object */
		gluTessCallback(tobj, GLU_BEGIN, glBegin);
		gluTessCallback(tobj, GLU_VERTEX, glVertex2fv);  /* semi-tricky */
		gluTessCallback(tobj, GLU_END, glEnd);
	}
	glNewList(side, GL_COMPILE) {
		glShadeModel(GL_SMOOTH);  /* smooth minimizes seeing
                               tessellation */
		gluBeginPolygon(tobj) {
			repeat(count) {|i|
				vertex[0] = data[i][0];
				vertex[1] = data[i][1];
				vertex[2] = 0;
				gluTessVertex(tobj, vertex, data[i]);
			}
		}
	}
	glNewList(edge, GL_COMPILE) {
		glShadeModel(GL_FLAT);  /* flat shade keeps angular hands
                             from being "smoothed" */
		glBegin(GL_QUAD_STRIP) {
			repeat(count + 1) {|i|
				/* mod function handles closing the edge */
				glVertex3f(data[i % count][0], data[i % count][1], 0.0);
				glVertex3f(data[i % count][0], data[i % count][1], thickness);
				/* Calculate a unit normal by dividing by Euclidean
				distance. We * could be lazy and use
				glEnable(GL_NORMALIZE) so we could pass in * arbitrary
				normals for a very slight performance hit. */
				dx = data[(i + 1) % count][1] - data[i % count][1];
				dy = data[i % count][0] - data[(i + 1) % count][0];
				len = math.sqrt(dx * dx + dy * dy);
				glNormal3f(dx / len, dy / len, 0.0);
			}
		}
	}
	glNewList(whole, GL_COMPILE) {
		glFrontFace(GL_CW);
		glCallList(edge);
		glNormal3f(0.0, 0.0, -1.0);  /* constant normal for side */
		glCallList(side);
		glPushMatrix {
			glTranslatef(0.0, 0.0, thickness);
			glFrontFace(GL_CCW);
			glNormal3f(0.0, 0.0, 1.0);  /* opposite normal for other side */
			glCallList(side);
		}
	}
}

/* Enumerants for refering to display lists. */
[
  RESERVED, BODY_SIDE, BODY_EDGE, BODY_WHOLE, ARM_SIDE, ARM_EDGE, ARM_WHOLE,
  LEG_SIDE, LEG_EDGE, LEG_WHOLE, EYE_SIDE, EYE_EDGE, EYE_WHOLE
] = 0.. // displayLists;

makeDinosaur() = {
  extrudeSolidFromPolygon(body, bodyWidth,
						  BODY_SIDE, BODY_EDGE, BODY_WHOLE);
  extrudeSolidFromPolygon(arm, bodyWidth / 4,
						  ARM_SIDE, ARM_EDGE, ARM_WHOLE);
  extrudeSolidFromPolygon(leg, bodyWidth / 2,
						  LEG_SIDE, LEG_EDGE, LEG_WHOLE);
  extrudeSolidFromPolygon(eye, bodyWidth + 0.2,
						  EYE_SIDE, EYE_EDGE, EYE_WHOLE);
}

drawDinosaur() = {
	glPushMatrix {
		/* Translate the dinosaur to be at (0,8,0). */
		glTranslatef(-8, -8, -bodyWidth / 2);
		glTranslatef(0.0, jump, 0.0);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, skinColor);
		glCallList(BODY_WHOLE);
		glTranslatef(0.0, 0.0, bodyWidth);
		glCallList(ARM_WHOLE);
		glCallList(LEG_WHOLE);
		glTranslatef(0.0, 0.0, -bodyWidth - bodyWidth / 4);
		glCallList(ARM_WHOLE);
		glTranslatef(0.0, 0.0, -bodyWidth / 4);
		glCallList(LEG_WHOLE);
		glTranslatef(0.0, 0.0, bodyWidth / 2 - 0.1);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, eyeColor);
		glCallList(EYE_WHOLE);
	}
}

[
	MOD_DINO, MOD_SPHERE, MOD_CUBE, MOD_ICO
] = 0..

currentModel = MOD_DINO;

blueMaterial = @{0.0, 0.2, 1.0, 1.0},
redMaterial = @{0.6, 0.1, 0.0, 1.0},
purpleMaterial = @{0.3, 0.0, 0.3, 1.0},
greenMaterial = @{1.0, 0.2, 0.0, 1.0};

drawModel() = {
	if (currentModel == MOD_DINO) {
		drawDinosaur();
	} elsif (currentModel == MOD_SPHERE) {
		glMaterialfv(GL_FRONT, GL_DIFFUSE, blueMaterial);
		glutSolidSphere(6.0, 15, 15);
	} elsif (currentModel == MOD_CUBE) {
		glMaterialfv(GL_FRONT, GL_DIFFUSE, redMaterial);
		glutSolidCube(6.0);
	} elsif (currentModel == MOD_ICO) {
		glMaterialfv(GL_FRONT, GL_DIFFUSE, purpleMaterial);
		glPushMatrix {
			glEnable(GL_NORMALIZE);
			glScalef(7.0, 7.0, 7.0);
			glutSolidIcosahedron();
			glDisable(GL_NORMALIZE);
		}
	}
}

drawBox(xsize:number, ysize:number, zsize:number) = {
	n = @{
		{-1.0, 0.0, 0.0},
		{0.0, 1.0, 0.0},
		{1.0, 0.0, 0.0},
		{0.0, -1.0, 0.0},
		{0.0, 0.0, 1.0},
		{0.0, 0.0, -1.0}
	};
	faces = @{
		{0, 1, 2, 3},
		{3, 2, 6, 7},
		{7, 6, 5, 4},
		{4, 5, 1, 0},
		{5, 6, 2, 1},
		{7, 4, 0, 3}
	};
	v = dim(8, 3) {0}

	v[0][0] = v[1][0] = v[2][0] = v[3][0] = -xsize / 2;
	v[4][0] = v[5][0] = v[6][0] = v[7][0] = xsize / 2;
	v[0][1] = v[1][1] = v[4][1] = v[5][1] = -ysize / 2;
	v[2][1] = v[3][1] = v[6][1] = v[7][1] = ysize / 2;
	v[0][2] = v[3][2] = v[4][2] = v[7][2] = -zsize / 2;
	v[1][2] = v[2][2] = v[5][2] = v[6][2] = zsize / 2;
	
	repeat(6) {|i|
		glBegin(GL_QUADS) {
			glNormal3fv(n[i]);
			glVertex3fv(v[faces[i][0]]);
			glVertex3fv(v[faces[i][1]]);
			glVertex3fv(v[faces[i][2]]);
			glVertex3fv(v[faces[i][3]]);
		}
	}
}

drawPillar() = {
	glEnable(GL_NORMALIZE);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, greenMaterial);
	glPushMatrix {
		glTranslatef(8.0, 4.01, 8.0);
		drawBox(2.0, 8.0, 2.0);
		glutSolidCube(2.0);
	}
	glDisable(GL_NORMALIZE);
}

floorVertices = @{
	{ -20.0, 0.0, 20.0 },
	{ 20.0, 0.0, 20.0 },
	{ 20.0, 0.0, -20.0 },
	{ -20.0, 0.0, -20.0 },
};

/* Draw a floor (possibly textured). */
drawFloor() = {
	glDisable(GL_LIGHTING);

	if (useTexture) {
		glEnable(GL_TEXTURE_2D);
	}

	glBegin(GL_QUADS) {
		glTexCoord2f(0.0, 0.0);
		glVertex3fv(floorVertices[0]);
		glTexCoord2f(0.0, 16.0);
		glVertex3fv(floorVertices[1]);
		glTexCoord2f(16.0, 16.0);
		glVertex3fv(floorVertices[2]);
		glTexCoord2f(16.0, 0.0);
		glVertex3fv(floorVertices[3]);
	}

	if (useTexture) {
		glDisable(GL_TEXTURE_2D);
	}

	glEnable(GL_LIGHTING);
}

floorPlane = dim(4) {0}
floorShadow = dim(4, 4) {0}

redraw() = {
	if (reportSpeed) {
		start = glutGet(GLUT_ELAPSED_TIME);
	}

	/* Clear; default stencil clears to zero. */
	if ((stencilReflection && renderReflection) || (stencilShadow && renderShadow) || (haloScale > 1.0)) {
		glStencilMask(0xffffffff);
		glClearStencil(0x4);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
	} else {
		/* Avoid clearing stencil when not using it. */
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	}

	/* Reposition the light source. */
	lightPosition[0] = 15 * math.cos(lightAngle);
	lightPosition[1] = lightHeight;
	lightPosition[2] = 15 * math.sin(lightAngle);
	if (directionalLight) {
		lightPosition[3] = 0.0;
	} else {
		lightPosition[3] = 1.0;
	}

	shadowMatrix(floorShadow, floorPlane, lightPosition);

	glPushMatrix {
		/* Perform scene rotations based on user mouse input. */
		glRotatef(angle2, 1.0, 0.0, 0.0);
		glRotatef(angle, 0.0, 1.0, 0.0);
		
		/* Tell GL new light source position. */
		glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
		
		if (renderReflection) {
			if (stencilReflection) {
				/* We can eliminate the visual "artifact" of seeing the "flipped"
  				model underneath the floor by using stencil.  The idea is
				draw the floor without color or depth update but so that 
				a stencil value of one is where the floor will be.  Later when
				rendering the model reflection, we will only update pixels
				with a stencil value of 1 to make sure the reflection only
				lives on the floor, not below the floor. */
				
				/* Don't update color or depth. */
				glDisable(GL_DEPTH_TEST);
				glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
				
				/* Draw 1 into the stencil buffer. */
				glEnable(GL_STENCIL_TEST);
				glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);
				glStencilFunc(GL_ALWAYS, 1, 0x1);
				glStencilMask(0x1);
				
				/* Now render floor; floor pixels just get their stencil set to 1. */
				drawFloor();
				
				/* Re-enable update of color and depth. */ 
				glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
				glEnable(GL_DEPTH_TEST);
				
				/* Now, only render where stencil is set to 1. */
				glStencilFunc(GL_EQUAL, 1, 0x1);  /* draw if ==1 */
				glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
			}
			
			glPushMatrix {
				
				/* The critical reflection step: Reflect 3D model through the floor
				(the Y=0 plane) to make a relection. */
				glScalef(1.0, -1.0, 1.0);
				
				/* Reflect the light position. */
				glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
				
				/* To avoid our normals getting reversed and hence botched lighting
				on the reflection, turn on normalize.  */
				glEnable(GL_NORMALIZE);
				glCullFace(GL_FRONT);
				
				/* Draw the reflected model. */
				glPushMatrix {
					glTranslatef(0, 8.01, 0);
					drawModel();
				}
				drawPillar();
				
				/* Disable noramlize again and re-enable back face culling. */
				glDisable(GL_NORMALIZE);
				glCullFace(GL_BACK);
			}
			
			/* Switch back to the unreflected light position. */
			glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
			
			if (stencilReflection) {
				glDisable(GL_STENCIL_TEST);
			}
		}
		
		/* Back face culling will get used to only draw either the top or the
		bottom floor.  This let's us get a floor with two distinct
		appearances.  The top floor surface is reflective and kind of red.
		The bottom floor surface is not reflective and blue. */
		
		/* Draw "bottom" of floor in blue. */
		glFrontFace(GL_CW);  /* Switch face orientation. */
		glColor4f(0.1, 0.1, 0.7, 1.0);
		drawFloor();
		glFrontFace(GL_CCW);

		if (renderShadow && stencilShadow) {
			/* Draw the floor with stencil value 2.  This helps us only 
			draw the shadow once per floor pixel (and only on the
			floor pixels). */
			glEnable(GL_STENCIL_TEST);
			glStencilFunc(GL_ALWAYS, 0x2, 0x2);
			glStencilMask(0x2);
			glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);
		}
		
		/* Draw "top" of floor.  Use blending to blend in reflection. */
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glColor4f(1.0, 1.0, 1.0, 0.3);
		drawFloor();
		glDisable(GL_BLEND);
		
		if (renderShadow && stencilShadow) {
			glDisable(GL_STENCIL_TEST);
		}
		
		if (renderDinosaur) {
			drawPillar();
			
			if (haloScale > 1.0) {
				/* If halo effect is enabled, draw the model with its stencil set to 6
				(arbitary value); later, we'll make sure not to update pixels tagged
				as 6. */
				glEnable(GL_STENCIL_TEST);
				glStencilFunc(GL_ALWAYS, 0x0, 0x4);
				glStencilMask(0x4);
				glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);
			}
			
			/* Draw "actual" dinosaur (or other model), not its reflection. */
			glPushMatrix {
				glTranslatef(0, 8.01, 0);
				drawModel();
			}
		}
		
		/* Begin shadow render. */
		if (renderShadow) {
			
			/* Render the projected shadow. */
			
			if (stencilShadow) {
				
				/* Now, only render where stencil is set above 5 (ie, 6 where
				the top floor is).  Update stencil with 2 where the shadow
				gets drawn so we don't redraw (and accidently reblend) the
				shadow). */
				glEnable(GL_STENCIL_TEST);
				glStencilFunc(GL_NOTEQUAL, 0x0, 0x2);
				glStencilMask(0x2);
				glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);
			}
			
			/* To eliminate depth buffer artifacts, we use polygon offset
			to raise the depth of the projected shadow slightly so
			that it does not depth buffer alias with the floor. */
			if (offsetShadow) {
				if (polygonOffsetVersion == ONE_DOT_ONE) {
					glEnable(GL_POLYGON_OFFSET_FILL);
				} elsif (polygonOffsetVersion == MISSING) {
					/* Oh well. */
				}
			}
			
			/* Render 50% black shadow color on top of whatever the
			floor appareance is. */
			glEnable(GL_BLEND);
			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
			glDisable(GL_LIGHTING);  /* Force the 50% black. */
			glColor4f(0.0, 0.0, 0.0, 0.5);
			
			glPushMatrix {
				/* Project the shadow. */
				glMultMatrixf(floorShadow.flat():list);
				glPushMatrix {
					glTranslatef(0, 8.01, 0);
					drawModel();
				}
				drawPillar();
			}
			
			glDisable(GL_BLEND);
			glEnable(GL_LIGHTING);
			
			if (offsetShadow) {
				if (polygonOffsetVersion == ONE_DOT_ONE) {
					glDisable(GL_POLYGON_OFFSET_FILL);
				} elsif (polygonOffsetVersion == MISSING) {
					/* Oh well. */
				}
			}
			if (stencilShadow) {
				glDisable(GL_STENCIL_TEST);
			}
		} /* End shadow render. */
		
		/* Begin light source location render. */
		glPushMatrix {
			glDisable(GL_LIGHTING);
			glColor3f(1.0, 1.0, 0.0);
			if (directionalLight) {
				/* Draw an arrowhead. */
				glDisable(GL_CULL_FACE);
				glTranslatef(lightPosition[0], lightPosition[1], lightPosition[2]);
				glRotatef(lightAngle * (-180.0) / M_PI, 0, 1, 0);
				glRotatef(math.atan(lightHeight / 12) * 180.0 / M_PI, 0, 0, 1);
				glBegin(GL_TRIANGLE_FAN) {
  					glVertex3f(0, 0, 0);
					glVertex3f(2, 1, 1);
					glVertex3f(2, -1, 1);
					glVertex3f(2, -1, -1);
					glVertex3f(2, 1, -1);
					glVertex3f(2, 1, 1);
				}
				/* Draw a white line from light direction. */
				glColor3f(1.0, 1.0, 1.0);
				glBegin(GL_LINES) {
					glVertex3f(0.1, 0, 0);
					glVertex3f(5, 0, 0);
				}
				glEnable(GL_CULL_FACE);
			} else {
				/* Draw a yellow ball at the light source. */
				glTranslatef(lightPosition[0], lightPosition[1], lightPosition[2]);
				glutSolidSphere(1.0, 5, 5);
			}
			glEnable(GL_LIGHTING);
		}
		/* End light source location render. */

		/* Add a halo effect around the 3D model. */
		if (haloScale > 1.0) {
			
			glDisable(GL_LIGHTING);
			
			if (blendedHalo) {
				/* If we are doing a nice blended halo, enable blending and
				make sure we only blend a halo pixel once and that we do
				not draw to pixels tagged as 6 (where the model is). */
				glEnable(GL_BLEND);
				glEnable(GL_STENCIL_TEST);
				glColor4f(0.8, 0.8, 0.0, 0.3);  /* 30% sorta yellow. */
				glStencilFunc(GL_EQUAL, 0x4, 0x4);
				glStencilMask(0x4);
				glStencilOp(GL_KEEP, GL_KEEP, GL_INVERT);
			} else {
				/* Be cheap; no blending.  Just draw yellow halo but not updating
				pixels where the model is.  We don't update stencil at all. */
				glDisable(GL_BLEND);
				glEnable(GL_STENCIL_TEST);
				glColor3f(0.5, 0.5, 0.0);  /* Half yellow. */
				glStencilFunc(GL_EQUAL, 0x4, 0x4);
				glStencilMask(0x4);
				glStencilOp(GL_KEEP, GL_KEEP, GL_INVERT);
			}
			
			glPushMatrix {
				glTranslatef(0, 8.01, 0);
				glScalef(haloScale, haloScale, haloScale);
				drawModel();
			}
			
			if (blendedHalo) {
				glDisable(GL_BLEND);
			}
			glDisable(GL_STENCIL_TEST);
			glEnable(GL_LIGHTING);
		}
		/* End halo effect render. */
	}


	if (reportSpeed) {
		glFinish();
		end = glutGet(GLUT_ELAPSED_TIME);
		printf("Speed %.3g frames/sec (%d ms)\n", 1000.0 / (end - start), end - start);
		sys.stdout.flush()
	}

	glutSwapBuffers();
}

mouse(button:number, state:number, x:number, y:number) = {
	if (button == GLUT_LEFT_BUTTON) {
		if (state == GLUT_DOWN) {
			moving:extern = true;
			startx:extern = x;
			starty:extern = y;
		}
		if (state == GLUT_UP) {
			moving:extern = false;
		}
	}
	if (button == GLUT_MIDDLE_BUTTON) {
		if (state == GLUT_DOWN) {
			lightMoving:extern = true;
			lightStartX:extern = x;
			lightStartY:extern = y;
		}
		if (state == GLUT_UP) {
			lightMoving:extern = false;
		}
	}
}

/* ARGSUSED1 */
motion(x:number, y:number) = {
	if (moving) {
		angle:extern = angle + (x - startx);
		angle2:extern = angle2 + (y - starty);
		startx:extern = x;
		starty:extern = y;
		glutPostRedisplay();
	}
	if (lightMoving) {
		lightAngle:extern += (x - lightStartX)/40.0;
		lightHeight:extern += (lightStartY - y)/20.0;
		lightStartX:extern = x;
		lightStartY:extern = y;
		glutPostRedisplay();
	}
}

maxHalo = @{ 0.2, 0.35, 0.3, 0.5 };

/* Advance time varying state when idle callback registered. */
time = 0.0;
idle() = {

	if (animation) {
		time:extern = glutGet(GLUT_ELAPSED_TIME) / 500.0;

		jump:extern = 4.0 * math.abs(math.sin(time) * 0.8);
		if (!lightMoving) {
			lightAngle:extern += 0.03;
		}
	}
	if (haloMagic) {
		haloTime:extern += 0.1;
		haloScale:extern = 1.0 + maxHalo[currentModel] * math.sin(haloTime);
		if (haloScale <= 1.0) {
			haloMagic:extern = 0;
			if (!animation) {
				glutIdleFunc(nil);
			}
		}
	}
	glutPostRedisplay();
}

[
  M_NONE, M_BLENDED_HALO, M_SHOW_HALO, M_SWITCH_MODEL, M_MOTION, M_LIGHT,
  M_TEXTURE, M_SHADOWS, M_REFLECTION, M_DINOSAUR,
  M_STENCIL_REFLECTION, M_STENCIL_SHADOW, M_OFFSET_SHADOW,
  M_POSITIONAL, M_DIRECTIONAL, M_PERFORMANCE
] = 0..;

controlLights(value:number) = {
	if (value == M_NONE) {
		return;
	} elsif (value == M_SWITCH_MODEL) {
		currentModel:extern = (currentModel + 1) % 4;
	} elsif (value == M_SHOW_HALO) {
		haloScale:extern = 1.0 + maxHalo[currentModel];
	} elsif (value == M_BLENDED_HALO) {
		blendedHalo:extern = !blendedHalo;
	} elsif (value == M_MOTION) {
		animation:extern = !animation;
		if (animation || haloMagic) {
			glutIdleFunc(idle);
		} else {
			glutIdleFunc(nil);
		}
	} elsif (value == M_LIGHT) {
		lightSwitch:extern = !lightSwitch;
		if (lightSwitch) {
			glEnable(GL_LIGHT0);
		} else {
			glDisable(GL_LIGHT0);
		}
	} elsif (value == M_TEXTURE) {
		useTexture:extern = !useTexture;
	} elsif (value == M_SHADOWS) {
		renderShadow:extern = !renderShadow;
	} elsif (value == M_REFLECTION) {
		renderReflection:extern = !renderReflection;
	} elsif (value == M_DINOSAUR) {
		renderDinosaur:extern = !renderDinosaur;
	} elsif (value == M_STENCIL_REFLECTION) {
		stencilReflection:extern = !stencilReflection;
	} elsif (value == M_STENCIL_SHADOW) {
		stencilShadow:extern = !stencilShadow;
	} elsif (value == M_OFFSET_SHADOW) {
		offsetShadow:extern = !offsetShadow;
	} elsif (value == M_POSITIONAL) {
		directionalLight:extern = false;
	} elsif (value == M_DIRECTIONAL) {
		directionalLight:extern = true;
	} elsif (value == M_PERFORMANCE) {
		reportSpeed:extern = !reportSpeed;
	}
	glutPostRedisplay();
}

/* When not visible, stop animating.  Restart when visible again. */
visible(vis:number) = {
	if (vis == GLUT_VISIBLE) {
		if (animation || haloMagic) {
			glutIdleFunc(idle);
		}
	} else {
		if (!animation && !haloMagic) {
			glutIdleFunc(nil);
		}
	}
}

/* Press any key to redraw; good when motion stopped and
   performance reporting on. */
key(c:number, x:number, y:number) = {
	if (c == 27) {
		sys.exit(0);  /* IRIS GLism, Escape quits. */
	}
	if (c == ord(' ')) {
		haloMagic:extern = true;
		haloTime:extern = 0.0;
		glutIdleFunc(idle);
	}
	glutPostRedisplay();
}

/* Press any key to redraw; good when motion stopped and
   performance reporting on. */
special(k:number, x:number, y:number) = {
	glutPostRedisplay();
}

supportsOneDotOne() = {
	true
}

main() = {
	argv = glutInit(sys.argv);

	if (argv.find("-linear")) {
		linearFiltering:extern = true;
	}
	if (argv.find("-mipmap")) {
		useMipmaps:extern = true;
	}
	if (argv.find("-ext")) {
		forceExtension:extern = true;
    }

	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH | GLUT_STENCIL | GLUT_MULTISAMPLE);

	/* In GLUT 4.0, you'll be able to do this an be sure to
     get 2 bits of stencil if the machine has it for you. */
	glutInitDisplayString("samples stencil>=3 rgb double depth");

	glutCreateWindow("OpenGL Halo Magic (hit Space)");

	if (glutGet(GLUT_WINDOW_STENCIL_SIZE) < 3) {
		printf("halomagic: Sorry, I need at least 3 bits of stencil.\n");
		sys.exit(1);
	}

	/* Register GLUT callbacks. */
	glutDisplayFunc(redraw);
	glutMouseFunc(mouse);
	glutMotionFunc(motion);
	glutVisibilityFunc(visible);
	glutKeyboardFunc(key);
	glutSpecialFunc(special);

	glutCreateMenu(controlLights);

	glutAddMenuEntry("Toggle halo blending", M_BLENDED_HALO);
	glutAddMenuEntry("Show halo", M_SHOW_HALO);
	glutAddMenuEntry("Switch model", M_SWITCH_MODEL);
	glutAddMenuEntry("Toggle motion", M_MOTION);
	glutAddMenuEntry("-----------------------", M_NONE);
	glutAddMenuEntry("Toggle light", M_LIGHT);
	glutAddMenuEntry("Toggle texture", M_TEXTURE);
	glutAddMenuEntry("Toggle shadows", M_SHADOWS);
	glutAddMenuEntry("Toggle reflection", M_REFLECTION);
	glutAddMenuEntry("Toggle object", M_DINOSAUR);
	glutAddMenuEntry("-----------------------", M_NONE);
	glutAddMenuEntry("Toggle reflection stenciling", M_STENCIL_REFLECTION);
	glutAddMenuEntry("Toggle shadow stenciling", M_STENCIL_SHADOW);
	glutAddMenuEntry("Toggle shadow offset", M_OFFSET_SHADOW);
	glutAddMenuEntry("----------------------", M_NONE);
	glutAddMenuEntry("Positional light", M_POSITIONAL);
	glutAddMenuEntry("Directional light", M_DIRECTIONAL);
	glutAddMenuEntry("-----------------------", M_NONE);
	glutAddMenuEntry("Toggle performance", M_PERFORMANCE);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	makeDinosaur();

	if (supportsOneDotOne() && !forceExtension) {
		polygonOffsetVersion = ONE_DOT_ONE;
		glPolygonOffset(-2.0, -1.0);
	} else {
		polygonOffsetVersion = MISSING;
	}
    printf("\ndinoshine: Missing polygon offset.\n");
    printf("           Expect shadow depth aliasing artifacts.\n\n");

	glEnable(GL_CULL_FACE);
	glEnable(GL_DEPTH_TEST);
	glLineWidth(3.0);

	glMatrixMode(GL_PROJECTION);
	gluPerspective( /* field of view in degree */ 40.0,
				   /* aspect ratio */ 1.0,
				   /* Z near */ 20.0, /* Z far */ 100.0);
	glMatrixMode(GL_MODELVIEW);
	gluLookAt(0.0, 8.0, 60.0,  /* eye is at (0,0,30) */
			  0.0, 8.0, 0.0,      /* center is at (0,0,0) */
			  0.0, 1.0, 0.);      /* up is in postivie Y direction */

	glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, 1);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightColor);
	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 0.1);
	glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION, 0.05);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHTING);

	makeFloorTexture();

	/* Setup floor plane for projected shadow calculations. */
	findPlane(floorPlane, floorVertices[1], floorVertices[2], floorVertices[3]);

	glutMainLoop();
}

main()

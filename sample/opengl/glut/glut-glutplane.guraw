#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/glutplane.c

/* Copyright (c) Mark J. Kilgard, 1994. */

/* This program is freely distributable without licensing fees 
   and is provided without guarantee or warrantee expressed or 
   implied. This program is -not- in the public domain. */

import(opengl) {*}
import(glu) {*}
import(glut) {*}

M_PI = 3.14159265
M_PI_2 = 1.57079632

moving = GL_FALSE;

MAX_PLANES = 15

Plane = struct(speed:number,	/* zero speed means not flying */
			   red:number, green:number, blue:number,
			   theta:number, x:number, y:number, z:number, angle:number)

planes = dim(MAX_PLANES) {Plane(0, 0, 0, 0, 0, 0, 0, 0, 0)}

v3f = glVertex3f  /* v3f was the short IRIS GL name for
                           glVertex3f */

draw() = {
	glClear(GL_DEPTH_BUFFER_BIT);
	/* paint black to blue smooth shaded polygon for background */
	glDisable(GL_DEPTH_TEST);
	glShadeModel(GL_SMOOTH);
	glBegin(GL_POLYGON) {
		glColor3f(0.0, 0.0, 0.0);
		v3f(-20, 20, -19);
		v3f(20, 20, -19);
		glColor3f(0.0, 0.0, 1.0);
		v3f(20, -20, -19);
		v3f(-20, -20, -19);
	}
	/* paint planes */
	glEnable(GL_DEPTH_TEST);
	glShadeModel(GL_FLAT);
	planes.each {|plane|
		if (plane.speed != 0.0) {
			glPushMatrix {
				glTranslatef(plane.x, plane.y, plane.z);
				glRotatef(290.0, 1.0, 0.0, 0.0);
				glRotatef(plane.angle, 0.0, 0.0, 1.0);
				glScalef(1.0 / 3.0, 1.0 / 4.0, 1.0 / 4.0);
				glTranslatef(0.0, -4.0, -1.5);
				glBegin(GL_TRIANGLE_STRIP) {
					/* left wing */
					v3f(-7.0, 0.0, 2.0);
					v3f(-1.0, 0.0, 3.0);
					glColor3f(red = plane.red, green = plane.green, blue = plane.blue);
					v3f(-1.0, 7.0, 3.0);
					/* left side */
					glColor3f(0.6 * red, 0.6 * green, 0.6 * blue);
					v3f(0.0, 0.0, 0.0);
					v3f(0.0, 8.0, 0.0);
					/* right side */
					v3f(1.0, 0.0, 3.0);
					v3f(1.0, 7.0, 3.0);
					/* final tip of right wing */
					glColor3f(red, green, blue);
					v3f(7.0, 0.0, 2.0);
				}
			}
		}
		glutSwapBuffers();
	}
}

tick_per_plane(i:number) = {
	theta = planes[i].theta += planes[i].speed;
	planes[i].z = -9 + 4 * math.cos(theta);
	planes[i].x = 4 * math.sin(2 * theta);
	planes[i].y = math.sin(theta / 3.4) * 3;
	planes[i].angle = ((math.atan(2.0) + M_PI_2) * math.sin(theta) - M_PI_2) * 180 / M_PI;
  	if (planes[i].speed < 0.0) {
		planes[i].angle += 180;
	}
}

add_plane() = {
	planes.each {|plane, i|
	    if (plane.speed == 0) {
			SET_COLOR(r,g,b) = {
				plane.red = r; plane.green = g; plane.blue = b;
			}
			rnd = rand(6)
			if (rnd == 0) {
				SET_COLOR(1.0, 0.0, 0.0);  /* red */
			} elsif (rnd == 1) {
				SET_COLOR(1.0, 1.0, 1.0);  /* white */
			} elsif (rnd == 2) {
				SET_COLOR(0.0, 1.0, 0.0);  /* green */
			} elsif (rnd == 3) {
				SET_COLOR(1.0, 0.0, 1.0);  /* magenta */
			} elsif (rnd == 4) {
				SET_COLOR(1.0, 1.0, 0.0);  /* yellow */
			} elsif (rnd == 5) {
				SET_COLOR(0.0, 1.0, 1.0);  /* cyan */
			}
			plane.speed = rand(20) * 0.001 + 0.02;
			if (rand(2) == 1) {
				plane.speed *= -1;
			}
			plane.theta = rand(257) * 0.1111;
			tick_per_plane(i);
			if (!moving) {
				glutPostRedisplay();
			}
			return;
		}
	}
}

remove_plane() = {
	planes.reverse {|plane|
	    if (plane.speed != 0) {
			plane.speed = 0;
			if (!moving) {
				glutPostRedisplay();
			}
			return;
		}
	}
}

tick() = {
	planes.each {|plane, i|
    	if (plane.speed != 0.0) {
			tick_per_plane(i);
		}
	}
}

animate() = {
	tick();
	glutPostRedisplay();
}

visible(state:number) = {
	if (state == GLUT_VISIBLE) {
		if (moving) {
			glutIdleFunc(animate);
		}
	} else {
		if (moving) {
			glutIdleFunc(nil);
		}
	}
}

/* ARGSUSED1 */
keyboard(ch:number, x:number, y:number) = {
	ch = chr(ch)
	if (ch == ' ') {
		if (!moving) {
			tick();
			glutPostRedisplay();
		}
	} elsif (ch == '\x1b') { /* ESC */
		sys.exit(0);
	}
}

ADD_PLANE		= 1
REMOVE_PLANE	= 2
MOTION_ON		= 3
MOTION_OFF		= 4
QUIT			= 5

menu(item:number) = {
	if (item == ADD_PLANE) {
		add_plane();
	} elsif (item == REMOVE_PLANE) {
		remove_plane();
	} elsif (item == MOTION_ON) {
		moving = GL_TRUE;
		glutChangeToMenuEntry(3, "Motion off", MOTION_OFF);
		glutIdleFunc(animate);
	} elsif (item == MOTION_OFF) {
		moving = GL_FALSE;
		glutChangeToMenuEntry(3, "Motion", MOTION_ON);
		glutIdleFunc(NULL);
	} elsif (item == QUIT) {
		sys.exit(0);
	}
}

main() = {
	argv = glutInit(sys.argv);
	/* use multisampling if available */
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH | GLUT_MULTISAMPLE);
	glutCreateWindow("glutplane");
	glutDisplayFunc(draw);
	glutKeyboardFunc(keyboard);
	glutVisibilityFunc(visible);
	glutCreateMenu(menu);
	glutAddMenuEntry("Add plane", ADD_PLANE);
	glutAddMenuEntry("Remove plane", REMOVE_PLANE);
	glutAddMenuEntry("Motion", MOTION_ON);
	glutAddMenuEntry("Quit", QUIT);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	/* setup OpenGL state */
	glClearDepth(1.0);
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glFrustum(-1.0, 1.0, -1.0, 1.0, 1.0, 20);
	glMatrixMode(GL_MODELVIEW);
	/* add three initial random planes */
	randseed(os.clock());
	add_plane();
	add_plane();
	add_plane();
	/* start event processing */
	glutMainLoop();
}

main()

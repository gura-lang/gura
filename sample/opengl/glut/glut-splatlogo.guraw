#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/splatlogo.c

/* Copyright (c) Mark J. Kilgard, 1996. */

/* This program is freely distributable without licensing fees 
   and is provided without guarantee or warrantee expressed or 
   implied. This program is -not- in the public domain. */

import(opengl) {*}
import(glu) {*}
import(glut) {*}
import(logo) {*}

MAX_SPLATS = 100

SplatInfo = struct(x:number => 0, y:number => 0,
				   alphaTest:boolean => GL_TRUE,
				   xScale:number => 1.0, yScale:number => 1.0,
				   scale[]:number => [1.0, 1.0, 1.0],
				   bias[]:number => [0, 0, 0])

winHeight = 0;
numSplats = 0;
splatConfig = SplatInfo()
splatList = dim(MAX_SPLATS) {nil}

reshape(w:number, h:number) = {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, w, 0, h);
	glMatrixMode(GL_MODELVIEW);
	winHeight:extern = h;
}

renderSplat(splat:SplatInfo):map:void = {
	println(splat)
    glRasterPos2i(splat.x, splat.y);
    if (splat.yScale >= 0) {
		glBitmap(0, 0, 0, 0, 0, -logo_height * splat.yScale, nil);
	}
    if (splat.xScale < 0) {
		glBitmap(0, 0, 0, 0, logo_width * (-splat.xScale), 0, nil);
	}
    glPixelZoom(splat.xScale, splat.yScale);
    glPixelTransferf(GL_RED_SCALE, splat.scale[0]);
    glPixelTransferf(GL_GREEN_SCALE, splat.scale[1]);
    glPixelTransferf(GL_BLUE_SCALE, splat.scale[2]);
    glPixelTransferf(GL_RED_BIAS, splat.bias[0]);
    glPixelTransferf(GL_GREEN_BIAS, splat.bias[1]);
    glPixelTransferf(GL_BLUE_BIAS, splat.bias[2]);
    if (splat.alphaTest) {
		glEnable(GL_ALPHA_TEST);
    } else {
		glDisable(GL_ALPHA_TEST);
	}
    glDrawPixels(logo_width, logo_height, GL_RGBA,
				 GL_UNSIGNED_BYTE, logo_image);
}

display() = {
	println(numSplats)
	glClear(GL_COLOR_BUFFER_BIT);
	
	renderSplat(splatList.head(numSplats))
	glutSwapBuffers();
}

mouse(button:number, state:number, x:number, y:number) = {
	if (button == GLUT_LEFT_BUTTON) {
		if (state == GLUT_DOWN) {
			if (numSplats < MAX_SPLATS) {
				splatConfig:extern = SplatInfo()
				splatConfig.x = x;
				splatConfig.y = winHeight - y;
				renderSplat(splatConfig);
				splatList[numSplats] = splatConfig;
				numSplats:extern += 1;
				glutSwapBuffers();
			} else {
				printf("out of splats!\n");
			}
		}
	}
}

mainSelect(value:number) = {
	if (value == 0) {
		numSplats:extern = 0;
		glutPostRedisplay();
	} elsif (value == 1) {
		splatConfig:extern = SplatInfo()
	} elsif (value == 2) {
		splatConfig.xScale *= 1.25;
		splatConfig.yScale *= 1.25;
	} elsif (value == 3) {
		splatConfig.xScale *= 0.75;
		splatConfig.yScale *= 0.75;
	} elsif (value == 4) {
		splatConfig.xScale *= -1.0;
	} elsif (value == 5) {
		splatConfig.yScale *= -1.0;
	} elsif (value == 6) {
		splatConfig.alphaTest = GL_TRUE;
	} elsif (value == 7) {
		splatConfig.alphaTest = GL_FALSE;
	} elsif (value == 411) {
		rpos = glGetFloatv(GL_CURRENT_RASTER_POSITION);
		[valid] = glGetBooleanv(GL_CURRENT_RASTER_POSITION_VALID);
		printf("Raster position (%g,%g) is %s\n",
			   rpos[0], rpos[1], cond(valid, "valid", "INVALID"));
	} elsif (value == 666) {
		sys.exit(0);
	}
	display()
}

scaleBiasSelect(value:number) = {
	color = value >> 4;
	option = value & 0xf;

	if (option == 1) {
		splatConfig.bias[color] += 0.25;
	} elsif (option == 2) {
		splatConfig.bias[color] -= 0.25;
	} elsif (option == 3) {
		splatConfig.scale[color] *= 2.0;
	} elsif (option == 4) {
		splatConfig.scale[color] *= 0.75;
	}
	display()
}

glutScaleBiasMenu(mask:number) = {
	menu = glutCreateMenu(scaleBiasSelect);
	glutAddMenuEntry("+25% bias", mask | 1);
	glutAddMenuEntry("-25% bias", mask | 2);
	glutAddMenuEntry("+25% scale", mask | 3);
	glutAddMenuEntry("-25% scale", mask | 4);
	menu;
}

main() = {
	glutInitWindowSize(680, 440);
	argv = glutInit(sys.argv);
	splatConfig:extern = SplatInfo()

	glutCreateWindow("splatlogo");

	glutReshapeFunc(reshape);
	glutDisplayFunc(display);
	glutMouseFunc(mouse);

	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
	glAlphaFunc(GL_GEQUAL, 0.5);
	glDisable(GL_ALPHA_TEST);
	glEnable(GL_DITHER);
	glClearColor(1.0, 1.0, 1.0, 0.0);

	redMenu = glutScaleBiasMenu(0 << 4);
	greenMenu = glutScaleBiasMenu(1 << 4);
	blueMenu = glutScaleBiasMenu(2 << 4);

	mainMenu = glutCreateMenu(mainSelect);
	glutAddMenuEntry("Reset splays", 0);
	glutAddMenuEntry("Reset splat config", 1);
	glutAddSubMenu("Red control", redMenu);
	glutAddSubMenu("Green control", greenMenu);
	glutAddSubMenu("Blue control", blueMenu);
	glutAddMenuEntry("+25% zoom", 2);
	glutAddMenuEntry("-25% zoom", 3);
	glutAddMenuEntry("X flip", 4);
	glutAddMenuEntry("Y flip", 5);
	glutAddMenuEntry("Enable alpha test", 6);
	glutAddMenuEntry("Disable alpha test", 7);
	glutSetMenu(mainMenu);
	glutAddMenuEntry("Query raster position", 411);
	glutAddMenuEntry("Quit", 666);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutMainLoop();
}

main()

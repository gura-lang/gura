#!/usr/bin/env gura
// Gura version of the following program:
//   https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/ch06/optimizer_compare_naive.py
import(helper.test) {*}
import(arrayt)
import(plotter)

func(g:plotter.Graph, opt:optimizer) = {
	opt.reset()
	arr = array {-7, 2}
	arrs = []
	arrs.add([arr[0], arr[1]])
	repeat (30) {
		f = arr[0] * arr[0] / 20 + arr[1] * arr[1]
		arr_grad = array {arr[0] / 10 , 2 * arr[1]}
		opt.update(arr, arr_grad)
		arrs.add([arr[0], arr[1]])
	}
	g.attr (markerStyle => `cross) {
		g.marker([0], [0])
	}
	g.linedMarker(arrs::get(0), arrs::get(1))
	g.minX = -10, g.maxX = 3
	g.minY = -5, g.maxY = 5
}

plotter.canvas {|cv|
	cv.graph {|g|
		g.title = 'gradient_descent (learning_rate = 0.95)'
		func(g, optimizer@gradient_descent(0.95))
	}
	cv.graph {|g|
		g.title = 'momentum (learning_rate = 0.1, momentum = 0.9)'
		func(g, optimizer@momentum(.1, .9))
	}
	cv.graph {|g|
		g.title = 'adagrad (learning_rate = 1.5)'
		func(g, optimizer@adagrad(1.3))
	}
	cv.show()
}

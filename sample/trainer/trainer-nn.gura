#!/usr/bin/env gura
import(helper.test) {*}
import(arrayt)
import(ml.mnist)

CalcMeanSquaredError(y:array, t:array) = ((y - t) ** 2).sum() / 2
CalcCrossEntropyError(y:array, t:array) = -(t * math.log(y + 1e-7)).sum()

db = ml.mnist.Database('../../sample/resource/mnist')

if (true) {
	model = `((x |.| weight + bias) |*| filter@softmax())
	weight = array@float.rands@normal([784, 10], 0, .1)
	bias = array@float.rands@normal([1, 10], 0, .1)
} else {
	model = `(((x |.| weight1 + bias1) |*| filter@sigmoid() |.| weight2 + bias2) |*| filter@softmax())
	weight1 = array@float.rands@normal([784, 100], 0, .1)
	weight2 = array@float.rands@normal([100, 10], 0, .1)
	bias1 = array@float.rands@normal([1, 100], 0, .1)
	bias2 = array@float.rands@normal([1, 10], 0, .1)
}

scope {
	nTraining = 100
	arrImage = db.train.imageSet.toarray(`flat).elemcast(`float)
	arrLabel = db.train.labelSet.toarray().elemcast(`float)
	trainer(model, `x) {|tr|
		repeat (nTraining) {|iRepeat|
			repeat (1000) {|i|
				x = arrImage[i].reshape([1, nil])
				t = arrLabel[i].reshape([1, nil])
				tr.train(t)
			}
			printf('#%d error=%f\n', iRepeat + 1, CalcCrossEntropyError(tr.result, t))
		}
	}
}
scope {
	// evaluation
	nTests = 1000
	arrImage = db.test.imageSet.toarray(`flat).elemcast(`float)
	arrLabel = db.test.labelSet.toarray().elemcast(`float)
	nCorrects = 0
	repeat (nTests) {|i|
		x = arrImage[i]
		t = arrLabel[i]
		y = model.eval() |*| filter@softmax()
		if (y.argmax() == t.argmax()) {
			printf(' "%d" .. correct with likelihood %.1f%%\n', y.argmax(), y[y.argmax()] * 100)
			nCorrects += 1
		} else {
			print(ml.mnist.toascii(x))
			printf(' "%d" .. wrong. correct is "%d"\n', y.argmax(), t.argmax())
		}
		println('-' * 70)
	}
	printf('accuracy: %d/%d (%.1f%%)\n', nCorrects, nTests, nCorrects / nTests * 100)
}

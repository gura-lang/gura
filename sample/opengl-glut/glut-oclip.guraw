#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/oclip.c

/* Copyright (c) Mark J. Kilgard, 1994. */

/**
 * (c) Copyright 1993, 1994, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED 
 * Permission to use, copy, modify, and distribute this software for 
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that 
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission. 
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
 * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 * 
 * US Government Users Restricted Rights 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
 * (c)(1)(ii) of the Rights in Technical Data and Computer Software
 * clause at DFARS 252.227-7013 and/or in similar or successor
 * clauses in the FAR or the DOD or NASA FAR Supplement.
 * Unpublished-- rights reserved under the copyright laws of the
 * United States.  Contractor/manufacturer is Silicon Graphics,
 * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
 *
 * OpenGL(TM) is a trademark of Silicon Graphics, Inc.
 */
/*----------------------------------------------------------------------------
 *
 * oclip.c : openGL (motif) example showing how to use arbitrary clipping plane.
 *
 * Author : Yusuf Attarwala
 *          SGI - Applications
 * Date   : Mar 93
 *
 *    note : the main intent of this program is to demo the arbitrary
 *           clipping functionality, hence the rendering is kept
 *           simple (wireframe) and only one clipping plane is used.
 *
 *    press  left   button to move object 
 *           right  button to move clipping plane
 *
 *
 *---------------------------------------------------------------------------*/
import(opengl) {*}
import(glu) {*}
import(glut) {*}

/* global variables */

ax = 0, ay = 0, az = 0;       /* angles for animation */
quadObj = nil; /* used in drawscene */
planeEqn = \
@{0.707, 0.707, 0.0, 0.0};  /* initial clipping plane eqn */

count = 0;
clip_count = 0;

menu(choice:number) = {
	if (choice == 1) {
		count:extern = 90;
		glutIdleFunc(animation);
	} elsif (choice == 2) {
		animateClipPlane();
	}
}

main() = {
	argv = glutInit(sys.argv);

	quadObj:extern = gluNewQuadric();  /* this will be used in drawScene 
                               			*/
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutCreateWindow("Arbitrary clip plane");

	ax:extern = 10.0;
	ay:extern = -10.0;
	az:extern = 0.0;

	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyboard);
	glutCreateMenu(menu);
	glutAddMenuEntry("Rotate", 1);
	glutAddMenuEntry("Move clip plane", 2);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutMainLoop();
}

drawScene() = {
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);

	glPushMatrix {
		gluQuadricDrawStyle(quadObj, GLU_LINE);
		glColor3f(1.0, 1.0, 0.0);
		glRotatef(ax, 1.0, 0.0, 0.0);
		glRotatef(-ay, 0.0, 1.0, 0.0);

		glClipPlane(GL_CLIP_PLANE0, planeEqn);  /* define clipping
				                               plane */
		glEnable(GL_CLIP_PLANE0);  /* and enable it */

		gluCylinder(quadObj, 2.0, 5.0, 10.0, 20, 8);  /* draw a cone */

		glDisable(GL_CLIP_PLANE0);
	}

	glutSwapBuffers();
}

setMatrix() = {
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-15.0, 15.0, -15.0, 15.0, -10.0, 10.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

_sign = 1;
animation() = {
	if (count != 0) {
		ax:extern += 5.0;
		ay:extern -= 2.0;
		az:extern += 5.0
		if (ax >= 360) {
			ax:extern = 0.0;
		}
		if (ay <= -360) {
			ay:extern = 0.0;
		}
		if (az >= 360) {
			az:extern = 0.0;
		}
		glutPostRedisplay();
		count:extern -= 1;
	}
	if (clip_count != 0) {
		planeEqn[3] += _sign * 0.5;
		if (planeEqn[3] > 4.0) {
			_sign:extern = -1;
		} elsif (planeEqn[3] < -4.0) {
			_sign:extern = 1;
		}
		glutPostRedisplay();
		clip_count:extern -= 1;
	}
	if (count <= 0 && clip_count <= 0) {
		glutIdleFunc(nil);
	}
}

animateClipPlane() = {
	clip_count:extern = 5;
	glutIdleFunc(animation);
}

keyboard(c:number, x:number, y:number) = {
	if (c == 27) {
		sys.exit(0)
	}
}

resize(w:number, h:number) = {
	glViewport(0, 0, w, h);
	setMatrix();
}

main()

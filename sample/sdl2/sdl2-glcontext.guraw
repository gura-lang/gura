#!/usr/bin/env gura
// This Gura program has been ported from the original C++ code below:
// https://github.com/crust/sdl2-examples/blob/master/glcontext.cpp

import(sdl2, sdl)
import(opengl) {*}

main() = {

	sdl.Init(sdl.INIT_VIDEO); // Init SDL2
  
	// Create a window. Window mode MUST include SDL_WINDOW_OPENGL for use with OpenGL.
	window = sdl.CreateWindow(
			"SDL2/OpenGL Demo", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
			640, 480, sdl.WINDOW_OPENGL | sdl.WINDOW_RESIZABLE
			);
  
	// Create an OpenGL context associated with the window.
	glcontext = sdl.GL_CreateContext(window);

	// Now, regular OpenGL functions ...
	glMatrixMode(GL_PROJECTION|GL_MODELVIEW);
	glLoadIdentity();
	glOrtho(-320,320,240,-240,0,1);
 
	// ... can be used alongside SDL2.
	x = 0.0, y = 30.0;
  
	repeat {
		e = sdl.PollEvent()   // Check for events.
		if (e && (e.type == sdl.KEYDOWN || e.type == sdl.QUIT)) { break }
    
		glClearColor(0, 0, 0, 1);          // Draw with OpenGL.
		glClear(GL_COLOR_BUFFER_BIT);   
		glRotatef(10.0, 0.0, 0.0, 1.0);     
		// Note that the glBegin() ... glEnd() OpenGL style used below is actually 
		// obsolete, but it will do for example purposes. For more information, see
		// SDL_GL_GetProcAddress() or find an OpenGL extension loading library.
		glBegin(GL_TRIANGLES) {
			glColor3f(1.0, 0.0, 0.0); glVertex2f(x, y + 90.0);
			glColor3f(0.0, 1.0, 0.0); glVertex2f(x + 90.0, y - 90.0);
			glColor3f(0.0, 0.0, 1.0); glVertex2f(x - 90.0, y - 90.0);
		}
    
		sdl.GL_SwapWindow(window);  // Swap the window/buffer to display the result.
		sdl.Delay(10);              // Pause briefly before moving on to the next cycle.
    
	} 

	// Once finished with OpenGL functions, the SDL_GLContext can be deleted.
	sdl.GL_DeleteContext(glcontext);  
  
	// Done! Close the window, clean-up and exit the program. 
	sdl.DestroyWindow(window);
	sdl.Quit();
}

main()

#!/usr/bin/env gura

Card = struct(suit:symbol, rank:number):map {
	suits:public = [`spade, `heart, `diamond, `club]
	ranks:public = [1..13]
	suitMarks:public = %{
		`spade => '$', `heart => '@', `diamond => '#', `club => '*'
	}
	rankMarks:public = %{
		1 => 'A', 2 => '2', 3 => '3', 4 => '4', 5 => '5', 6 => '6', 7 => '7',
		8 => '8', 9 => '9', 10 => '10', 11 => 'J', 12 => 'Q', 13 => 'K'
	}
	__str__() = format('%s%-2s', suitMarks[this.suit], rankMarks[this.rank])
}

Deck = class {
	public {
		cards
	}
	__init__() = {
		this.cards = cross(suit in Card.suits, rank in Card.ranks):list {
			Card(suit, rank)
		}
	}
}

list.issame() = (this == this[0]).and()

PokerHand = class {
	__init__(cards[]:Card) = {
		cards = cards.sort(`ascend, cards::rank):list
		flushFlag = cards::suit.issame()
		this.cardsHand = []
		this.cardsNone = []
		this.symbol = `none
		if ((cards::rank == [1, 10, 11, 12, 13]).and()) {
			this.cardsHand = cards[1, 2, 3, 4, 0]
			this.symbol = cond(flushFlag, `RoyalStraightFlush, `Straight)
		} elsif ([cards::rank - (0..)].issame()) {
			this.cardsHand = cards
			this.symbol = cond(flushFlag, `StraightFlush, `Straight)
		} elsif (cards[0..3]::rank.issame()) {
			this.cardsHand = cards.get([0..3])
			this.cardsNone = cards.get([4])
			this.symbol = `FourOfKind
		} elsif (cards[1..4]::rank.issame()) {
			this.cardsHand = cards.get([1..4])
			this.cardsNone = cards.get([0])
			this.symbol = `FourOfKind
		} elsif (cards[0, 1, 2]::rank.issame() && cards[3, 4]::rank.issame()) {
			this.cardsHand = cards
			this.symbol = `FullHouse
		} elsif (cards[0, 1]::rank.issame() && cards[2, 3, 4]::rank.issame()) {
			this.cardsHand = cards[2, 3, 4, 0, 1]
			this.symbol = `FullHouse
		} elsif (cards[0, 1, 2]::rank.issame()) {
			this.cardsHand = cards.get([0, 1, 2])
			this.cardsNone = cards.get([3, 4])
			this.symbol = `ThreeOfKind
		} elsif (cards[1, 2, 3]::rank.issame()) {
			this.cardsHand = cards.get([1, 2, 3])
			this.cardsNone = cards.get([0, 4])
			this.symbol = `ThreeOfKind
		} elsif (cards[2, 3, 4]::rank.issame()) {
			this.cardsHand = cards.get([2, 3, 4])
			this.cardsNone = cards.get([0, 1])
			this.symbol = `ThreeOfKind
		} elsif (flushFlag) {
			this.cardsHand = cards
			this.symbol = `Flush
		} else {
			pairFlag1 = cards[0, 1]::rank.issame()
			pairFlag2 = cards[1, 2]::rank.issame()
			pairFlag3 = cards[2, 3]::rank.issame()
			pairFlag4 = cards[3, 4]::rank.issame()
			if (pairFlag1 && pairFlag3) {
				this.cardsHand = cards.get([0, 1, 2, 3])
				this.cardsNone = cards.get([4])
				this.symbol = `TwoPair
			} elsif (pairFlag1 && pairFlag4) {
				this.cardsHand = cards.get([0, 1, 3, 4])
				this.cardsNone = cards.get([2])
				this.symbol = `TwoPair
			} elsif (pairFlag2 && pairFlag4) {
				this.cardsHand = cards.get([1, 2, 3, 4])
				this.cardsNone = cards.get([0])
				this.symbol = `TwoPair
			} elsif (pairFlag1) {
				this.cardsHand = cards.get([0, 1])
				this.cardsNone = cards.get([2, 3, 4])
				this.symbol = `OnePair
			} elsif (pairFlag2) {
				this.cardsHand = cards.get([1, 2])
				this.cardsNone = cards.get([0, 3, 4])
				this.symbol = `OnePair
			} elsif (pairFlag3) {
				this.cardsHand = cards.get([2, 3])
				this.cardsNone = cards.get([0, 1, 4])
				this.symbol = `OnePair
			} elsif (pairFlag4) {
				this.cardsHand = cards.get([3, 4])
				this.cardsNone = cards.get([0, 1, 2])
				this.symbol = `OnePair
			} else {
				this.cardsHand = []
				this.cardsNone = cards
				this.symbol = `none
			}
		}
	}
	Print() = {
		printf('%-20s|%-20s .. %s\n', this.cardsHand.join(' '),
								this.cardsNone.join(' '), this.symbol)
	}
}

main() = {
	println('Test for StraightFlush')
	cross (suit in Card.suits, n in 0..9) {
		pokerHand = PokerHand(Card(suit, range(n, n + 5) % 13 + 1))
		pokerHand.Print()
	}
	println('Test with random pattern')
	deck = Deck()
	randseed(os.clock())
	repeat {
		pokerHand = PokerHand(deck.cards.shuffle().head(5))
		pokerHand.Print()
	}
}

main()

#!/usr/bin/env gura

Card = struct(suit:symbol, rank:number):map {
	suits:public = [`spade, `heart, `diamond, `club]
	ranks:public = [1..13]
	suitMarks:public = %{
		`spade => '$', `heart => '@', `diamond => '#', `club => '*'
	}
	rankMarks:public = %{
		1 => 'A', 2 => '2', 3 => '3', 4 => '4', 5 => '5', 6 => '6', 7 => '7',
		8 => '8', 9 => '9', 10 => '10', 11 => 'J', 12 => 'Q', 13 => 'K'
	}
	__str__() = format('%s%-2s', suitMarks[this.suit], rankMarks[this.rank])
}
Deck = class {
	public {
		cards
	}
	__init__() = {
		this.cards = cross(suit in Card.suits, rank in Card.ranks):list {
			Card(suit, rank)
		}
	}
}
list.equals() = (this == this[0]).and()
CheckPokerHand(cards[]:Card) = {
	cards = cards.sort(`ascend, cards::rank):list
	flushFlag = cards::suit.equals()
	cardsNone = []
	pokerHand = if ((cards::rank == [1, 10, 11, 12, 13]).and()) {
		cardsHand = cards[1, 2, 3, 4, 0]
		cond(flushFlag, `RoyalStraightFlush, `Straight)
	} elsif ([cards::rank - (0..)].equals()) {
		cardsHand = cards
		cond(flushFlag, `StraightFlush, `Straight)
	} elsif (cards[0..3]::rank.equals()) {
		cardsHand = cards.get([0..3])
		cardsNone = cards.get([4])
		`FourOfKind
	} elsif (cards[1..4]::rank.equals()) {
		cardsHand = cards.get([1..4])
		cardsNone = cards.get([0])
		`FourOfKind
	} elsif (cards[0, 1, 2]::rank.equals() && cards[3, 4]::rank.equals()) {
		cardsHand = cards
		`FullHouse
	} elsif (cards[0, 1]::rank.equals() && cards[2, 3, 4]::rank.equals()) {
		cardsHand = cards[2, 3, 4, 0, 1]
		`FullHouse
	} elsif (cards[0, 1, 2]::rank.equals()) {
		cardsHand = cards.get([0, 1, 2])
		cardsNone = cards.get([3, 4])
		`ThreeOfKind
	} elsif (cards[1, 2, 3]::rank.equals()) {
		cardsHand = cards.get([1, 2, 3])
		cardsNone = cards.get([0, 4])
		`ThreeOfKind
	} elsif (cards[2, 3, 4]::rank.equals()) {
		cardsHand = cards.get([2, 3, 4])
		cardsNone = cards.get([0, 1])
		`ThreeOfKind
	} elsif (flushFlag) {
		cardsHand = cards
		`Flush
	} else {
		pairFlag1 = cards[0, 1]::rank.equals()
		pairFlag2 = cards[1, 2]::rank.equals()
		pairFlag3 = cards[2, 3]::rank.equals()
		pairFlag4 = cards[3, 4]::rank.equals()
		if (pairFlag1 && pairFlag3) {
			cardsHand = cards.get([0, 1, 2, 3])
			cardsNone = cards.get([4])
			`TwoPair
		} elsif (pairFlag1 && pairFlag4) {
			cardsHand = cards.get([0, 1, 3, 4])
			cardsNone = cards.get([2])
			`TwoPair
		} elsif (pairFlag2 && pairFlag4) {
			cardsHand = cards.get([1, 2, 3, 4])
			cardsNone = cards.get([0])
			`TwoPair
		} elsif (pairFlag1) {
			cardsHand = cards.get([0, 1])
			cardsNone = cards.get([2, 3, 4])
			`OnePair
		} elsif (pairFlag2) {
			cardsHand = cards.get([1, 2])
			cardsNone = cards.get([0, 3, 4])
			`OnePair
		} elsif (pairFlag3) {
			cardsHand = cards.get([2, 3])
			cardsNone = cards.get([0, 1, 4])
			`OnePair
		} elsif (pairFlag4) {
			cardsHand = cards.get([3, 4])
			cardsNone = cards.get([0, 1, 2])
			`OnePair
		} else {
			cardsHand = []
			cardsNone = cards
			`none
		}
	}
	[pokerHand, cardsHand, cardsNone]
}
PrintPokerHand(cards[]:Card) = {
	[pokerHand, cardsHand, cardsNone] = CheckPokerHand(cards)
	printf('%-20s|%-20s .. %s\n', cardsHand.join(' '), cardsNone.join(' '), pokerHand)
}
deck = Deck()
randseed(os.clock())
repeat {
	cards = deck.cards.shuffle().head(5)
	cards = cards.sort(`ascend, cards::rank)
	[pokerHand, cardsHand, cardsNone] = CheckPokerHand(cards)
	printf('%-20s|%-20s .. %s\n', cardsHand.join(' '), cardsNone.join(' '), pokerHand)
}
/*
cross (suit in Card.suits, n in 1..9) {
	PrintPokerHand(Card(suit, range(n, n + 5)))
}
for (suit in Card.suits) {
	PrintPokerHand(Card(suit, [10, 11, 12, 13, 1]))
}
*/

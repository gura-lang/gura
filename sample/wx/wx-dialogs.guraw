#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        dialogs.cpp
// Purpose:     Common dialogs demo
// Author:      Julian Smart
// Modified by: ABX (2004) - adjustements for conditional building + new menu
// Created:     04/01/98
// RCS-ID:      $Id: dialogs.cpp 43016 2006-11-04 10:57:24Z VZ $
// Copyright:   (c) Julian Smart
// Licence:     wxWindows license
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

// Menu IDs
[
	DIALOGS_CHOOSE_COLOUR,
	DIALOGS_CHOOSE_COLOUR_GENERIC,
	DIALOGS_CHOOSE_FONT,
	DIALOGS_CHOOSE_FONT_GENERIC,
	DIALOGS_MESSAGE_BOX,
	DIALOGS_SINGLE_CHOICE,
	DIALOGS_MULTI_CHOICE,
	DIALOGS_TEXT_ENTRY,
	DIALOGS_PASSWORD_ENTRY,
	DIALOGS_FILE_OPEN,
	DIALOGS_FILE_OPEN2,
	DIALOGS_FILES_OPEN,
	DIALOGS_FILE_SAVE,
	DIALOGS_FILE_OPEN_GENERIC,
	DIALOGS_FILES_OPEN_GENERIC,
	DIALOGS_FILE_SAVE_GENERIC,
	DIALOGS_DIR_CHOOSE,
	DIALOGS_DIRNEW_CHOOSE,
	DIALOGS_GENERIC_DIR_CHOOSE,
	DIALOGS_TIP,
	DIALOGS_NUM_ENTRY,
	DIALOGS_LOG_DIALOG,
	DIALOGS_MODAL,
	DIALOGS_MODELESS,
	DIALOGS_CENTRE_SCREEN,
	DIALOGS_CENTRE_PARENT,
	DIALOGS_MODELESS_BTN,
	DIALOGS_PROGRESS,
	DIALOGS_ABOUTDLG_SIMPLE,
	DIALOGS_ABOUTDLG_FANCY,
	DIALOGS_ABOUTDLG_FULL,
	DIALOGS_ABOUTDLG_CUSTOM,
	DIALOGS_BUSYINFO,
	DIALOGS_FIND,
	DIALOGS_REPLACE,
	DIALOGS_REQUEST,
	DIALOGS_PROPERTY_SHEET,
	DIALOGS_PROPERTY_SHEET_TOOLBOOK,
	DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK
] = wx.ID_HIGHEST..

myCanvas = nil

MyApp = class(wx.App) {
	OnInit() = {
		wx.InitAllImageHandlers()
		this.m_canvasTextColour:public = wx.BLACK
		this.m_canvasFont:public = wx.NORMAL_FONT
		// Create the main frame window
		frame = MyFrame(nil, 'wxWidgets dialogs example')
		// Make a menubar
		menuDlg = wx.Menu()
		menuDlg.Append(DIALOGS_MESSAGE_BOX, '&Message box\tCtrl-M')
		choices_menu = wx.Menu()
		choices_menu.Append(DIALOGS_CHOOSE_COLOUR, '&Choose colour')
		choices_menu.Append(DIALOGS_CHOOSE_FONT, 'Choose &font')
		choices_menu.Append(DIALOGS_SINGLE_CHOICE, '&Single choice\tCtrl-C')
		choices_menu.Append(DIALOGS_MULTI_CHOICE, 'M&ultiple choice\tCtrl-U')
		choices_menu.AppendSeparator()
		choices_menu.Append(DIALOGS_CHOOSE_COLOUR_GENERIC, '&Choose colour (generic)')
		choices_menu.Append(DIALOGS_CHOOSE_FONT_GENERIC, 'Choose &font (generic)')
		choices_menu.Enable([
			DIALOGS_CHOOSE_COLOUR_GENERIC, DIALOGS_CHOOSE_FONT_GENERIC
		], false)
		menuDlg.AppendMenu(wx.ID_ANY, '&Choices and selectors', choices_menu)
		entry_menu = wx.Menu()
		entry_menu.Append(DIALOGS_TEXT_ENTRY, 'Text &entry\tCtrl-E')
		entry_menu.Append(DIALOGS_PASSWORD_ENTRY, '&Password entry\tCtrl-P')
		entry_menu.Append(DIALOGS_NUM_ENTRY, '&Numeric entry\tCtrl-N')
		menuDlg.AppendMenu(wx.ID_ANY, '&Entry dialogs', entry_menu)
		filedlg_menu = wx.Menu()
		filedlg_menu.Append(DIALOGS_FILE_OPEN, '&Open file\tCtrl-O')
		filedlg_menu.Append(DIALOGS_FILE_OPEN2, '&Second open file\tCtrl-2')
		filedlg_menu.Append(DIALOGS_FILES_OPEN, 'Open &files\tCtrl-Q')
		filedlg_menu.Append(DIALOGS_FILE_SAVE, 'Sa&ve file\tCtrl-S')
		filedlg_menu.AppendSeparator()
		filedlg_menu.Append(DIALOGS_FILE_OPEN_GENERIC, '&Open file (generic)')
		filedlg_menu.Append(DIALOGS_FILES_OPEN_GENERIC, 'Open &files (generic)')
		filedlg_menu.Append(DIALOGS_FILE_SAVE_GENERIC, 'Sa&ve file (generic)')
		filedlg_menu.Enable([
			DIALOGS_FILE_OPEN_GENERIC, DIALOGS_FILES_OPEN_GENERIC, DIALOGS_FILE_SAVE_GENERIC
		], false)
		menuDlg.AppendMenu(wx.ID_ANY, '&File operations', filedlg_menu)
		dir_menu = wx.Menu()
		dir_menu.Append(DIALOGS_DIR_CHOOSE, '&Choose a directory\tCtrl-D')
		dir_menu.Append(DIALOGS_DIRNEW_CHOOSE, 'Choose a directory (with \"Ne&w\" button)\tShift-Ctrl-D')
		menuDlg.AppendMenu(wx.ID_ANY, '&Directory operations', dir_menu)
		dir_menu.AppendSeparator()
		dir_menu.Append(DIALOGS_GENERIC_DIR_CHOOSE, '&Choose a directory (generic)')
		dir_menu.Enable([
			DIALOGS_GENERIC_DIR_CHOOSE
		], false)
		info_menu = wx.Menu()
		info_menu.Append(DIALOGS_TIP, '&Tip of the day\tCtrl-T')
		info_menu.Append(DIALOGS_PROGRESS, 'Pro&gress dialog\tCtrl-G')
		info_menu.Append(DIALOGS_BUSYINFO, '&Busy info dialog\tCtrl-B')
		info_menu.Append(DIALOGS_LOG_DIALOG, '&Log dialog\tCtrl-L')
		menuDlg.AppendMenu(wx.ID_ANY, '&Informative dialogs', info_menu)
		find_menu = wx.Menu()
		find_menu.AppendCheckItem(DIALOGS_FIND, '&Find dialog\tCtrl-F')
		find_menu.AppendCheckItem(DIALOGS_REPLACE, 'Find and &replace dialog\tShift-Ctrl-F')
		menuDlg.AppendMenu(wx.ID_ANY, '&Searching', find_menu)
		dialogs_menu = wx.Menu()
		dialogs_menu.Append(DIALOGS_MODAL, '&Modal dialog\tCtrl-W')
		dialogs_menu.AppendCheckItem(DIALOGS_MODELESS, 'Mode&less dialog\tCtrl-Z')
		dialogs_menu.Append(DIALOGS_CENTRE_SCREEN, 'Centered on &screen\tShift-Ctrl-1')
		dialogs_menu.Append(DIALOGS_CENTRE_PARENT, 'Centered on &parent\tShift-Ctrl-2')
		menuDlg.AppendMenu(wx.ID_ANY, '&Generic dialogs', dialogs_menu)
		sheet_menu = wx.Menu()
		sheet_menu.Append(DIALOGS_PROPERTY_SHEET, '&Standard property sheet\tShift-Ctrl-P')
		sheet_menu.Append(DIALOGS_PROPERTY_SHEET_TOOLBOOK, '&Toolbook sheet\tShift-Ctrl-T')
		menuDlg.AppendMenu(wx.ID_ANY, '&Property sheets', sheet_menu)
		menuDlg.Append(DIALOGS_REQUEST, '&Request user attention\tCtrl-R')
		menuDlg.AppendSeparator()
		menuDlg.Append(wx.ID_EXIT, 'E&xit\tAlt-X')
		menuHelp = wx.Menu()
		menuHelp.Append(DIALOGS_ABOUTDLG_SIMPLE, '&About (simple)...\tF1')
		menuHelp.Append(DIALOGS_ABOUTDLG_FANCY, 'About (&fancy)...\tShift-F1')
		menuHelp.Append(DIALOGS_ABOUTDLG_FULL, 'About (f&ull)...\tCtrl-F1')
		menuHelp.Append(DIALOGS_ABOUTDLG_CUSTOM, 'About (&custom)...\tCtrl-Shift-F1')
		menuHelp.Enable([
			DIALOGS_ABOUTDLG_CUSTOM
		], false)
		menubar = wx.MenuBar()
		menubar.Append(menuDlg, '&Dialogs')
		menubar.Append(menuHelp, '&Help')
		frame.SetMenuBar(menubar)
		myCanvas:extern = MyCanvas(frame)
		myCanvas.SetBackgroundColour(wx.WHITE)
		frame.Centre(wx.BOTH)
		// Show the frame
		frame.Show(true)
		this.SetTopWindow(frame)
		true
	}
}

/*
// a trivial example of a custom dialog class
MyAboutDialog = class(wx.GenericAboutDialog) {
	__init__(info:wx.AboutDialogInfo) = {
		this.Create(info)
	}
	// add some custom controls
	DoAddCustomControls() = {
		this.AddControl(wx.StaticLine(this), wx.SizerFlags().Expand())
		this.AddText('Some custom text')
		this.AddControl(wx.StaticLine(this), wx.SizerFlags().Expand())
	}
}
*/

MyFrame = class(wx.Frame) {
	__init__(parent:wx.Window:nil, title:string) = {|parent, wx.ID_ANY, title|
		this.EventTable()
		this.m_findData = wx.FindReplaceData()
		this.m_clrData = wx.ColourData()
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		this.m_dialog = nil
		this.m_dlgFind = this.m_dlgReplace = nil
		this.m_clrData.SetChooseFull(true)
		repeat(16) {|i|
			this.m_clrData.SetCustomColour(
				i,
				wx.Colour(
					i * 16,
					i * 16,
					i * 16
				)
			)
		}
		this.CreateStatusBar()
	}
	EventTable() = {
		this.Bind(wx.EVT_MENU, DIALOGS_MESSAGE_BOX) {|event| this.MessageBox(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_COLOUR) {|event| this.ChooseColour(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_FONT) {|event| this.ChooseFont(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_LOG_DIALOG) {|event| this.LogDialog(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_TEXT_ENTRY) {|event| this.TextEntry(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_PASSWORD_ENTRY) {|event| this.PasswordEntry(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_NUM_ENTRY) {|event| this.NumericEntry(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_SINGLE_CHOICE) {|event| this.SingleChoice(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_MULTI_CHOICE) {|event| this.MultiChoice(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_FILE_OPEN) {|event| this.FileOpen(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_FILE_OPEN2) {|event| this.FileOpen2(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_FILES_OPEN) {|event| this.FilesOpen(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_FILE_SAVE) {|event| this.FileSave(event) }
		//this.Bind(wx.EVT_MENU, DIALOGS_FILE_OPEN_GENERIC) {|event| this.FileOpenGeneric(event) }
		//this.Bind(wx.EVT_MENU, DIALOGS_FILES_OPEN_GENERIC) {|event| this.FilesOpenGeneric(event) }
		//this.Bind(wx.EVT_MENU, DIALOGS_FILE_SAVE_GENERIC) {|event| this.FileSaveGeneric(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_DIR_CHOOSE) {|event| this.DirChoose(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_DIRNEW_CHOOSE) {|event| this.DirChooseNew(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_MODAL) {|event| this.ModalDlg(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_MODELESS) {|event| this.ModelessDlg(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_CENTRE_SCREEN) {|event| this.DlgCenteredScreen(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_CENTRE_PARENT) {|event| this.DlgCenteredParent(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_TIP) {|event| this.ShowTip(event) }
		//this.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_FONT_GENERIC) {|event| this.ChooseFontGeneric(event) }
		//this.Bind(wx.EVT_MENU, DIALOGS_GENERIC_DIR_CHOOSE) {|event| this.GenericDirChoose(event) }
		//this.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_COLOUR_GENERIC) {|event| this.ChooseColourGeneric(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_PROGRESS) {|event| this.ShowProgress(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_SIMPLE) {|event| this.ShowSimpleAboutDialog(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_FANCY) {|event| this.ShowFancyAboutDialog(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_FULL) {|event| this.ShowFullAboutDialog(event) }
		//this.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_CUSTOM) {|event| this.ShowCustomAboutDialog(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_BUSYINFO) {|event| this.ShowBusyInfo(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_FIND) {|event| this.ShowFindDialog(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_REPLACE) {|event| this.ShowReplaceDialog(event) }
		this.Bind(wx.EVT_FIND) {|event| this.OnFindDialog(event) }
		this.Bind(wx.EVT_FIND_NEXT) {|event| this.OnFindDialog(event) }
		this.Bind(wx.EVT_FIND_REPLACE) {|event| this.OnFindDialog(event) }
		this.Bind(wx.EVT_FIND_REPLACE_ALL) {|event| this.OnFindDialog(event) }
		this.Bind(wx.EVT_FIND_CLOSE) {|event| this.OnFindDialog(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_PROPERTY_SHEET) {|event| this.OnPropertySheet(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_PROPERTY_SHEET_TOOLBOOK) {|event| this.OnPropertySheet(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK) {|event| this.OnPropertySheet(event) }
		this.Bind(wx.EVT_MENU, DIALOGS_REQUEST) {|event| this.OnRequestUserAttention(event) }
		this.Bind(wx.EVT_MENU, wx.ID_EXIT) {|event| this.OnExit(event) }
	}
	ChooseColour(event:wx.CommandEvent) = {
		this.m_clrData.SetColour(myCanvas.GetBackgroundColour())
		dialog = wx.ColourDialog(this, this.m_clrData)
		dialog.SetTitle('Choose the background colour')
		if (dialog.ShowModal() == wx.ID_OK) {
			this.m_clrData = dialog.GetColourData()
			myCanvas.SetBackgroundColour(this.m_clrData.GetColour())
			myCanvas.ClearBackground()
			myCanvas.Refresh()
		}
	}
	/*
	ChooseColourGeneric(event:wx.CommandEvent) = {
		this.m_clrData.SetColour(myCanvas.GetBackgroundColour())
		//FIXME:TODO:This has no effect...
		this.m_clrData.SetChooseFull(true)
		repeat(16) {|i|
			colour = wx.Colour(
				i * 16,
				i * 16,
				i * 16
			)
			this.m_clrData.SetCustomColour(i, colour)
		}
		dialog = wx.GenericColourDialog(this, this.m_clrData)
		if (dialog.ShowModal() == wx.ID_OK) {
			this.m_clrData = dialog.GetColourData()
			myCanvas.SetBackgroundColour(this.m_clrData.GetColour())
			myCanvas.ClearBackground()
			myCanvas.Refresh()
		}
		dialog.Destroy()
	}
	*/
	ChooseFont(event:wx.CommandEvent) = {
		data = wx.FontData()
		data.SetInitialFont(wx.GetApp().m_canvasFont)
		data.SetColour(wx.GetApp().m_canvasTextColour)
		// you might also do this:
		//
		//  wxFontDialog dialog
		//  if ( !dialog.Create(this, data) { ... error ... }
		//
		dialog = wx.FontDialog(this, data)
		if (dialog.ShowModal() == wx.ID_OK) {
			retData = dialog.GetFontData()
			wx.GetApp().m_canvasFont = retData.GetChosenFont()
			wx.GetApp().m_canvasTextColour = retData.GetColour()
			myCanvas.Refresh()
		}
		//else: cancelled by the user, don't change the font
	}
	/*
	ChooseFontGeneric(event:wx.CommandEvent) = {
		data = wx.FontData()
		data.SetInitialFont(wx.GetApp().m_canvasFont)
		data.SetColour(wx.GetApp().m_canvasTextColour)
		dialog = wx.GenericFontDialog(this, data)
		if (dialog.ShowModal() == wx.ID_OK) {
			retData = dialog.GetFontData()
			wx.GetApp().m_canvasFont = retData.GetChosenFont()
			wx.GetApp().m_canvasTextColour = retData.GetColour()
			myCanvas.Refresh()
		}
		dialog.Destroy()
	}
	*/
	LogDialog(event:wx.CommandEvent) = {
		// calling wxYield() (as ~wxBusyCursor does) shouldn't result in messages
		// being flushed -- test it
		wx.BusyCursor {
			wx.LogMessage('This is some message - everything is ok so far.')
			wx.LogMessage('Another message...\n... this one is on multiple lines')
			wx.LogWarning('And then something went wrong!')
			// and if ~wxBusyCursor doesn't do it, then call it manually
			wx.Yield()
		}
		wx.LogError('Intermediary error handler decided to abort.')
		wx.LogError('The top level caller detected an unrecoverable error.')
		wx.Log.FlushActive()
		wx.LogMessage('And this is the same dialog but with only one message.')
	}
	MessageBox(event:wx.CommandEvent) = {
		dialog = wx.MessageDialog(nil, 'This is a message box\nA long, long string to test out the message box properly',
			'Message box text', wx.NO_DEFAULT | wx.YES_NO | wx.CANCEL | wx.ICON_INFORMATION)
		ret = dialog.ShowModal()
		if (ret == wx.ID_YES) {
			wx.LogStatus('You pressed "Yes"')
		} elsif(ret == wx.ID_NO) {
			wx.LogStatus('You pressed "No"')
		} elsif(ret == wx.ID_CANCEL) {
			wx.LogStatus('You pressed "Cancel"')
		} else {
			wx.LogError('Unexpected wxMessageDialog return code!')
		}
	}
	NumericEntry(event:wx.CommandEvent) = {
		res = wx.GetNumberFromUser('This is some text, actually a lot of text.\n' \
									'Even two rows of text.',
									'Enter a number:', 'Numeric input test',
									50, 0, 100, this)
		if (res == -1) {
			msg = 'Invalid number entered or dialog cancelled.'
			icon = wx.ICON_HAND
		} else {
			msg = format("You've entered %lu", res)
			icon = wx.ICON_INFORMATION
		}
		wx.MessageBox(msg, 'Numeric test result', wx.OK | icon, this)
	}
	PasswordEntry(event:wx.CommandEvent) = {
		pwd = wx.GetPasswordFromUser('Enter password:',
									'Password entry dialog',
									wx.EmptyString,
									this)
		if (!pwd.isempty()) {
			wx.MessageBox(format("Your password is '%s'", pwd),
						'Got password', wx.OK | wx.ICON_INFORMATION, this)
		}
	}
	TextEntry(event:wx.CommandEvent) = {
		dialog = wx.TextEntryDialog(this,
								'This is a small sample\n' \
								'A long, long string to test out the text entrybox',
								'Please enter a string',
								'Default value',
								wx.OK | wx.CANCEL)
		if (dialog.ShowModal() == wx.ID_OK) {
			wx.MessageBox(dialog.GetValue(), 'Got string', wx.OK | wx.ICON_INFORMATION, this)
		}
	}
	SingleChoice(event:wx.CommandEvent) = {
		choices = ['One', 'Two', 'Three', 'Four', 'Five']
		dialog = wx.SingleChoiceDialog(this,
									'This is a small sample\n' \
									'A single-choice convenience dialog',
									'Please select a value',
									choices)
		dialog.SetSelection(2)
		if (dialog.ShowModal() == wx.ID_OK) {
			dialog2 = wx.MessageDialog(this, dialog.GetStringSelection(), 'Got string')
			dialog2.ShowModal()
		}
	}
	MultiChoice(event:wx.CommandEvent) = {
		choices = [
			'One', 'Two', 'Three', 'Four', 'Five',
			'Six', 'Seven', 'Eight', 'Nine', 'Ten',
			'Eleven', 'Twelve', 'Seventeen',
		]
		selections = wx.GetMultipleChoices('This is a small sample\n' \
										'A multi-choice convenience dialog',
										'Please select a value',
										choices,
										this)
		if (!selections.isempty()) {
			msg = format('You selected %u items:\n', selections.len())
			msg += format('\t%u: %u (%s)\n',
							0.., selections,
							choices[selections]).join()
			wx.LogMessage(msg)
		}
		//else: cancelled or nothing selected
	}
	FileOpen(event:wx.CommandEvent) = {
		dialog = wx.FileDialog(
						this,
						'Testing open file dialog',
						wx.EmptyString,
						wx.EmptyString,
						'C++ files (*.cpp;*.h)|*.cpp;*.h'
					)
		dialog.CentreOnParent()
		dialog.SetDirectory(wx.GetHomeDir())
		if (dialog.ShowModal() == wx.ID_OK) {
			info = format('Full file name: %s\n' \
						'Path: %s\n' \
						'Name: %s',
						dialog.GetPath(),
						dialog.GetDirectory(),
						dialog.GetFilename())
			dialog2 = wx.MessageDialog(this, info, 'Selected file')
			dialog2.ShowModal()
		}
	}
	s_extDef = ''
	FileOpen2(event:wx.CommandEvent) = {
		res = wx.FileSelector(
							'Select the file to load',
							wx.EmptyString, wx.EmptyString,
							s_extDef,
							format(
								'Waveform (*.wav)|*.wav|Plain text (*.txt)|*.txt|All files (%s)|%s',
								wx.FileSelectorDefaultWildcardStr,
								wx.FileSelectorDefaultWildcardStr
							),
							wx.FD_OPEN | wx.FD_CHANGE_DIR | wx.FD_PREVIEW,
							this
						)
		if (res.isempty()) {
			return
		}
		// it is just a sample, would use wxSplitPath in real program
		s_extDef = path.splitext(res)[1]
		wx.LogMessage("You selected the file '%s', remembered extension '%s'",
					res, s_extDef)
	}
	FilesOpen(event:wx.CommandEvent) = {
		wildcards = format(
						'All files (%s)|%s|C++ files (*.cpp;*.h)|*.cpp;*.h',
						wx.FileSelectorDefaultWildcardStr,
						wx.FileSelectorDefaultWildcardStr
					)
		dialog = wx.FileDialog(this, 'Testing open multiple file dialog',
						wx.EmptyString, wx.EmptyString, wildcards,
						wx.FD_OPEN | wx.FD_MULTIPLE)
		if (dialog.ShowModal() == wx.ID_OK) {
			paths = dialog.GetPaths()
			filenames = dialog.GetFilenames()
			count = paths.len()
			msg = format('File %d: %s (%s)\n', 0.., paths, filenames).join()
			s = format('Filter index: %d', dialog.GetFilterIndex())
			msg += s
			dialog2 = wx.MessageDialog(this, msg, 'Selected files')
			dialog2.ShowModal()
		}
	}
	FileSave(event:wx.CommandEvent) = {
		dialog = wx.FileDialog(this,
							'Testing save file dialog',
							wx.EmptyString,
							'myletter.doc',
							'Text files (*.txt)|*.txt|Document files (*.doc)|*.doc',
							wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
		dialog.SetFilterIndex(1)
		if (dialog.ShowModal() == wx.ID_OK) {
			wx.LogMessage('%s, filter %d',
						dialog.GetPath(), dialog.GetFilterIndex())
		}
	}
	/*
	FileOpenGeneric(event:wx.CommandEvent) = {
		dialog = wx.GenericFileDialog(this,
	  						'Testing open file dialog',
							wx.EmptyString,
							wx.EmptyString,
							'C++ files (*.cpp;*.h)|*.cpp;*.h'
						 )
		dialog.SetDirectory(wx.GetHomeDir())
		if (dialog.ShowModal() == wx.ID_OK) {
			info = format('Full file name: %s\n' \
						'Path: %s\n' \
						'Name: %s',
						dialog.GetPath(),
						dialog.GetDirectory(),
						dialog.GetFilename())
			dialog2 = wx.MessageDialog(this, info, 'Selected file')
			dialog2.ShowModal()
		}
	}
	*/
	/*
	FilesOpenGeneric(event:wx.CommandEvent) = {
		// On PocketPC you can disable OK-only dialogs policy using system option
		buttons = wx.SystemOptions.GetOptionInt('wince.dialog.real-ok-cancel')
		wx.SystemOptions.SetOption('wince.dialog.real-ok-cancel', 1)
		wildcards = 'All files (*.*)|*.*|C++ files (*.cpp;*.h)|*.cpp;*.h'
		dialog = wx.GenericFileDialog(this, 'Testing open multiple file dialog',
							wx.EmptyString, wx.EmptyString, wildcards,
							wx.FD_MULTIPLE)
		if (dialog.ShowModal() == wx.ID_OK) {
			paths = dialog.GetPaths()
			filenames = dialog.GetFilenames()
			msg = format('File %d: %s (%s)\n', 0.., paths, filenames).join()
			s = format('Filter index: %d', dialog.GetFilterIndex())
			msg += s
			dialog2 = wx.MessageDialog(this, msg, 'Selected files')
			dialog2.ShowModal()
		}
		// restore system option
		wx.SystemOptions.SetOption('wince.dialog.real-ok-cancel', buttons)
	}
	*/
	/*
	FileSaveGeneric(event:wx.CommandEvent) = {
		dialog = wx.GenericFileDialog(this,
							'Testing save file dialog',
							wx.EmptyString,
							'myletter.doc',
							'Text files (*.txt)|*.txt|Document files (*.doc)|*.doc',
							wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
		dialog.SetFilterIndex(1)
		if (dialog.ShowModal() == wx.ID_OK) {
			wx.LogMessage('%s, filter %d',
						 dialog.GetPath(), dialog.GetFilterIndex())
		}
	}
	*/
	DoDirChoose(style:number) = {
		// pass some initial dir to wxDirDialog
		dirHome = wx.GetHomeDir()
		dialog = wx.DirDialog(this, 'Testing directory picker', dirHome, style)
		if (dialog.ShowModal() == wx.ID_OK) {
			wx.LogMessage('Selected path: %s', dialog.GetPath())
		}
	}
	DirChoose(event:wx.CommandEvent) = {
		this.DoDirChoose(wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST)
	}
	DirChooseNew(event:wx.CommandEvent) = {
		this.DoDirChoose(wx.DD_DEFAULT_STYLE & ~wx.DD_DIR_MUST_EXIST)
	}
	/*
	GenericDirChoose(event:wx.CommandEvent) = {
		// pass some initial dir to wxDirDialog
		dirHome = wx.GetHomeDir()
		dialog = wx.GenericDirDialog(this, 'Testing generic directory picker', dirHome)
		if (dialog.ShowModal() == wx.ID_OK) {
			dialog2 = wx.MessageDialog(this, dialog.GetPath(), 'Selected path')
			dialog2.ShowModal()
		}
	}
	*/
	ModalDlg(event:wx.CommandEvent) = {
		dlg = MyModalDialog(this)
		dlg.ShowModal()
	}
	ModelessDlg(event:wx.CommandEvent) = {
		show = this.GetMenuBar().IsChecked(event.GetId())
		if (show) {
			if (!this.m_dialog) {
				this.m_dialog = MyModelessDialog(this)
			}
			this.m_dialog.Show(true)
		} else { // hide
			// If m_dialog is NULL, then possibly the system
			// didn't report the checked menu item status correctly.
			// It should be true just after the menu item was selected,
			// if there was no modeless dialog yet.
			//wx.ASSERT(this.m_dialog != nil)
			if (this.m_dialog) {
				this.m_dialog.Hide()
			}
		}
	}
	DlgCenteredScreen(event:wx.CommandEvent) = {
		dlg = wx.Dialog(this, wx.ID_ANY, 'Dialog centered on screen',
					wx.DefaultPosition, wx.Size(200, 100))
		wx.Button(dlg, wx.ID_OK, 'Close').Centre()
		dlg.CentreOnScreen()
		dlg.ShowModal()
	}
	DlgCenteredParent(event:wx.CommandEvent) = {
		dlg = wx.Dialog(this, wx.ID_ANY, 'Dialog centered on parent',
					 wx.DefaultPosition, wx.Size(200, 100))
		wx.Button(dlg, wx.ID_OK, 'Close').Centre()
		dlg.CentreOnParent()
		dlg.ShowModal()
	}
	s_index = -1
	ShowTip(event:wx.CommandEvent) = {
		if (s_index == -1) {
			// this is completely bogus, we don't know how many lines are there
			// in the file, but who cares, it's a demo only...
			s_index = rand(5)
		}
		tipProvider = wx.CreateFileTipProvider('tips.txt', s_index)
		showAtStartup = wx.ShowTip(this, tipProvider)
		if (showAtStartup) {
			wx.MessageBox('Will show tips on startup', 'Tips dialog',
						wx.OK | wx.ICON_INFORMATION, this)
		}
		s_index = tipProvider.GetCurrentTip()
		tipProvider = nil
	}
	OnPropertySheet(event:wx.CommandEvent) = {
		dialog = SettingsDialog(this, event.GetId())
		dialog.ShowModal()
	}
	OnRequestUserAttention(event:wx.CommandEvent) = {
		wx.LogStatus('Sleeping for 3 seconds to allow you to switch to another window')
		wx.Sleep(3)
		this.RequestUserAttention(wx.USER_ATTENTION_ERROR)
	}
	OnExit(event:wx.CommandEvent) = {
		this.Close(true)
	}
	max = 100
	ShowProgress(event:wx.CommandEvent) = {
		dialog = wx.ProgressDialog('Progress dialog example',
				'An informative message',
				this.max,	// range
				this,		// parent
				wx.PD_CAN_ABORT | \
				wx.PD_CAN_SKIP | \
				wx.PD_APP_MODAL | \
				/* wxPD_AUTO_HIDE | -- try this as well */ \
				wx.PD_ELAPSED_TIME | \
				wx.PD_ESTIMATED_TIME | \
				wx.PD_REMAINING_TIME \
				| wx.PD_SMOOTH // - makes indeterminate mode bar on WinXP very small
			)
		cont = true
		i = 0
		repeat(this.max) {
			wx.MilliSleep(200)
			// test both modes of wxProgressDialog behaviour: start in
			// indeterminate mode but switch to the determinate one later
			determinate = (i > this.max / 2)
			if (i == this.max) {
				msg = "That's all, folks!"
			} elsif (!determinate) {
				msg = 'Testing indeterminate mode'
			} elsif (determinate) {
				msg = 'Now in standard determinate mode'
			}
			// will be set to true if "Skip" button was pressed
			skip = false
			if (determinate) {
				[cont, skip] = dialog.Update(i, msg)
			} else {
				[cont, skip] = dialog.Pulse(msg)
			}
			// each skip will move progress about quarter forward
			if (skip) {
				i += this.max / 4
			}
			if (!cont) {
				if (wx.MessageBox('Do you really want to cancel?',
								  'Progress dialog question',  // caption
								  wx.YES_NO | wx.ICON_QUESTION) == wx.YES) {
					break
				}
				cont = true
				dialog.Resume()
			}
			i += 1
		}
		if (!cont) {
			wx.LogStatus('Progress dialog aborted!')
		} else {
			wx.LogStatus('Countdown from %d finished', this.max)
		}
		dialog.Destroy()
	}
	ShowSimpleAboutDialog(event:wx.CommandEvent) = {
		info = wx.AboutDialogInfo()
		InitAboutInfoMinimal(info)
		wx.AboutBox(info)
	}
	ShowFancyAboutDialog(event:wx.CommandEvent) = {
		info = wx.AboutDialogInfo()
		InitAboutInfoWebsite(info)
		wx.AboutBox(info)
	}
	ShowFullAboutDialog(event:wx.CommandEvent) = {
		info = wx.AboutDialogInfo()
		InitAboutInfoAll(info)
		wx.AboutBox(info)
	}
	ShowCustomAboutDialog(event:wx.CommandEvent) = {
		info = wx.AboutDialogInfo()
		InitAboutInfoAll(info)
		dlg = MyAboutDialog(info)
		dlg.ShowModal()
	}
	ShowBusyInfo(event:wx.CommandEvent) = {
		wx.WindowDisabler() {
			wx.BusyInfo('Working, please wait...', this) {
				repeat(18) {|i|
					//wx.Usleep(100)
					wx.GetApp().Yield()
				}
				wx.Sleep(2)
				//wx.WakeUpIdle()
			}
		}
	}
	ShowReplaceDialog(event:wx.CommandEvent) = {
		if (this.m_dlgReplace) {
			this.m_dlgReplace.Destroy()
			this.m_dlgReplace = nil
		} else {
			this.m_dlgReplace = wx.FindReplaceDialog(
								this,
								this.m_findData,
								'Find and replace dialog',
								wx.FR_REPLACEDIALOG
							)
			this.m_dlgReplace.Show(true)
		}
	}
	ShowFindDialog(event:wx.CommandEvent) = {
		if (this.m_dlgFind) {
			this.m_dlgFind.Destroy()
			this.m_dlgFind = nil
		} else {
			this.m_dlgFind = wx.FindReplaceDialog(
								this,
								this.m_findData,
								'Find dialog',
								// just for testing
								wx.FR_NOWHOLEWORD
							)
			this.m_dlgFind.Show(true)
		}
	}
	OnFindDialog(event:wx.FindDialogEvent) = {
		type = event.GetEventType()
		if (type == wx.EVT_FIND.GetEventType() || \
					type == wx.EVT_FIND_NEXT.GetEventType()) {
			wx.LogMessage("Find %s'%s' (flags: %s)",
						cond(type == wx.EVT_FIND_NEXT.GetEventType(), 'next ', ''),
						event.GetFindString(),
						DecodeFindDialogEventFlags(event.GetFlags()))
		} elsif (type == wx.EVT_FIND_REPLACE.GetEventType() || \
					type == wx.EVT_FIND_REPLACE_ALL.GetEventType()) {
			wx.LogMessage("Replace %s'%s' with '%s' (flags: %s)",
						cond(type == wx.EVT_FIND_REPLACE_ALL.GetEventType(), 'all ', ''),
						event.GetFindString(),
						event.GetReplaceString(),
						DecodeFindDialogEventFlags(event.GetFlags()))
		} elsif (type == wx.EVT_FIND_CLOSE.GetEventType()) {
			dlg = event.GetDialog()
			if (dlg == this.m_dlgFind ) {
				txt = 'Find'
				idMenu = DIALOGS_FIND
				this.m_dlgFind = nil
			} elsif (dlg == this.m_dlgReplace) {
				txt = 'Replace'
				idMenu = DIALOGS_REPLACE
				this.m_dlgReplace = nil
			} else {
				txt = 'Unknown'
				idMenu = wx.ID_ANY
				wx.FAIL_MSG('unexpected event')
			}
			wx.LogMessage('%s dialog is being closed.', txt)
			if (idMenu != wx.ID_ANY) {
				this.GetMenuBar().Check(idMenu, false)
			}
			dlg.Destroy()
		} else {
			wx.LogError('Unknown find dialog event!')
		}
	}
}

// ----------------------------------------------------------------------------
// MyCanvas
// ----------------------------------------------------------------------------

MyCanvas = class(wx.ScrolledWindow) {
	__init__(parent:wx.Window) = {|parent, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.NO_FULL_REPAINT_ON_RESIZE|
		this.EventTable()
	}
	EventTable() = {
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event) }
	}
	OnPaint(event:wx.PaintEvent) = {
		wx.PaintDC(this) {|dc|
			dc.SetFont(wx.GetApp().m_canvasFont)
			dc.SetTextForeground(wx.GetApp().m_canvasTextColour)
			dc.SetBackgroundMode(wx.TRANSPARENT)
			dc.DrawText('wxWidgets common dialogs' \
						' test application', 10, 10)
		}
	}
}

// ----------------------------------------------------------------------------
// MyModelessDialog
// ----------------------------------------------------------------------------

MyModelessDialog = class(wx.Dialog) {
	__init__(parent:wx.Window) = {|parent, wx.ID_ANY, 'Modeless dialog'|
		this.EventTable()
		sizerTop = wx.BoxSizer(wx.VERTICAL)
		btn = wx.Button(this, DIALOGS_MODELESS_BTN, 'Press me')
		check = wx.CheckBox(this, wx.ID_ANY, 'Should be disabled')
		check.Disable()
		sizerTop.Add(btn, wx.SizerFlags(1).Expand().Border(wx.ALL, 5))
		sizerTop.Add(check, wx.SizerFlags(1).Expand().Border(wx.ALL, 5))
		this.SetSizer(sizerTop)
		sizerTop.SetSizeHints(this)
		sizerTop.Fit(this)
	}
	EventTable() = {
		this.Bind(wx.EVT_BUTTON, DIALOGS_MODELESS_BTN) {|event| this.OnButton(event) }
		this.Bind(wx.EVT_CLOSE) {|event| this.OnClose(event) }
	}
	OnButton(event:wx.CommandEvent) = {
		wx.MessageBox('Button pressed in modeless dialog', 'Info',
						wx.OK | wx.ICON_INFORMATION, this)
	}
	OnClose(event:wx.CloseEvent) = {
		if (event.CanVeto()) {
			wx.MessageBox('Use the menu item to close this dialog',
						'Modeless dialog',
						wx.OK | wx.ICON_INFORMATION, this)
			event.Veto()
		}
	}
}

// ----------------------------------------------------------------------------
// MyModalDialog
// ----------------------------------------------------------------------------

MyModalDialog = class(wx.Dialog) {
	__init__(parent:wx.Window) = {|parent, wx.ID_ANY, 'Modal dialog'|
		this.EventTable()
		sizerTop = wx.BoxSizer(wx.HORIZONTAL)
		this.m_btnModal = wx.Button(this, wx.ID_ANY, '&Modal dialog...')
		this.m_btnModeless = wx.Button(this, wx.ID_ANY, 'Mode&less dialog')
		this.m_btnDelete = wx.Button(this, wx.ID_ANY, '&Delete button')
		btnOk = wx.Button(this, wx.ID_CANCEL, '&Close')
		sizerTop.Add(this.m_btnModal, wx.SizerFlags(0).Align(wx.ALIGN_CENTER).Border(wx.ALL, 5))
		sizerTop.Add(this.m_btnModeless, wx.SizerFlags(0).Align(wx.ALIGN_CENTER).Border(wx.ALL, 5))
		sizerTop.Add(this.m_btnDelete, wx.SizerFlags(0).Align(wx.ALIGN_CENTER).Border(wx.ALL, 5))
		sizerTop.Add(btnOk, wx.SizerFlags(0).Align(wx.ALIGN_CENTER).Border(wx.ALL, 5))
		this.SetSizer(sizerTop)
		sizerTop.SetSizeHints(this)
		sizerTop.Fit(this)
		this.m_btnModal.SetFocus()
		this.m_btnModal.SetDefault()
	}
	EventTable() = {
		this.Bind(wx.EVT_BUTTON) {|event| this.OnButton(event) }
	}
	OnButton(event:wx.CommandEvent) = {
		if (event.GetEventObject() == this.m_btnDelete) {
			this.m_btnModal.Destroy()
			this.m_btnModal = nil
			this.m_btnDelete.Disable()
		} elsif (event.GetEventObject() == this.m_btnModal) {
			wx.GetTextFromUser('Dummy prompt',
							'Modal dialog called from dialog',
							wx.EmptyString, this)
		} elsif (event.GetEventObject() == this.m_btnModeless) {
			MyModelessDialog(this).Show()
		} else {
			event.Skip()
		}
	}
}

// ----------------------------------------------------------------------------
// SettingsDialog
// ----------------------------------------------------------------------------

SettingsDialog = class(wx.PropertySheetDialog) {
	[
		ID_SHOW_TOOLTIPS,
		ID_AUTO_SAVE,
		ID_AUTO_SAVE_MINS,
		ID_LOAD_LAST_PROJECT,
		ID_APPLY_SETTINGS_TO,
		ID_BACKGROUND_STYLE,
		ID_FONT_SIZE
	] = 100..
	__init__(parent:wx.Window, dialogType:number) = \
			{|parent, wx.ID_ANY, 'Preferences', wx.DefaultPosition, wx.DefaultSize,
			  (wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER)|
		this.SetExtraStyle(wx.DIALOG_EX_CONTEXTHELP | wx.WS_EX_VALIDATE_RECURSIVELY)
		tabImage1 = -1
		tabImage2 = -1
		useToolBook = (dialogType == DIALOGS_PROPERTY_SHEET_TOOLBOOK || dialogType == DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK)
		resizeBorder = wx.RESIZE_BORDER
		if (useToolBook) {
			resizeBorder = 0
			tabImage1 = 0
			tabImage2 = 1
			sheetStyle = wx.PROPSHEET_SHRINKTOFIT
			if (dialogType == DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK) {
				sheetStyle |= wx.PROPSHEET_BUTTONTOOLBOOK
			} else {
				sheetStyle |= wx.PROPSHEET_TOOLBOOK
			}
			this.SetSheetStyle(sheetStyle)
			this.SetSheetInnerBorder(0)
			this.SetSheetOuterBorder(0)
			// create a dummy image list with a few icons
			imageSize = wx.Size(32, 32)
			this.m_imageList = wx.ImageList(imageSize.GetWidth(), imageSize.GetHeight())
			this.m_imageList.Add(wx.ArtProvider.GetBitmap(wx.ART_INFORMATION, wx.ART_OTHER, imageSize))
			this.m_imageList.Add(wx.ArtProvider.GetBitmap(wx.ART_QUESTION, wx.ART_OTHER, imageSize))
			this.m_imageList.Add(wx.ArtProvider.GetBitmap(wx.ART_WARNING, wx.ART_OTHER, imageSize))
			this.m_imageList.Add(wx.ArtProvider.GetBitmap(wx.ART_ERROR, wx.ART_OTHER, imageSize))
		} else {
			this.m_imageList = nil
		}
		// If using a toolbook, also follow Mac style and don't create buttons
		if (!useToolBook) {
			this.CreateButtons(wx.OK | wx.CANCEL | wx.HELP)
		}
		notebook = this.GetBookCtrl()
		notebook.SetImageList(this.m_imageList)
		generalSettings = this.CreateGeneralSettingsPage(notebook)
		aestheticSettings = this.CreateAestheticSettingsPage(notebook)
		notebook.AddPage(generalSettings, 'General', true, tabImage1)
		notebook.AddPage(aestheticSettings, 'Aesthetics', false, tabImage2)
		this.LayoutDialog()
	}
	CreateGeneralSettingsPage(parent:wx.Window) = {
		panel = wx.Panel(parent, wx.ID_ANY)
		topSizer = wx.BoxSizer(wx.VERTICAL)
		item0 = wx.BoxSizer(wx.VERTICAL)
		//// LOAD LAST FILE
		itemSizer3 = wx.BoxSizer(wx.HORIZONTAL)
		checkBox3 = wx.CheckBox(panel, ID_LOAD_LAST_PROJECT, '&Load last project on startup', wx.DefaultPosition, wx.DefaultSize)
		itemSizer3.Add(checkBox3, wx.SizerFlags(0).Align(wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		item0.Add(itemSizer3, wx.SizerFlags(0).Expand().Border(wx.ALL, 0))
		//// AUTOSAVE
		autoSaveLabel = '&Auto-save every'
		minsLabel = 'mins'
		itemSizer12 = wx.BoxSizer(wx.HORIZONTAL)
		checkBox12 = wx.CheckBox(panel, ID_AUTO_SAVE, autoSaveLabel, wx.DefaultPosition, wx.DefaultSize)
		spinCtrl12 = wx.SpinCtrl(panel, ID_AUTO_SAVE_MINS, wx.EmptyString,
			wx.DefaultPosition, wx.Size(40, wx.DefaultCoord), wx.SP_ARROW_KEYS, 1, 60, 1)
		itemSizer12.Add(checkBox12, wx.SizerFlags(0).Align(wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		itemSizer12.Add(spinCtrl12, wx.SizerFlags(0).Align(wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		itemSizer12.Add(wx.StaticText(panel, wx.ID_STATIC, minsLabel), wx.SizerFlags(0).Align(wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		item0.Add(itemSizer12, wx.SizerFlags(0).Expand().Border(wx.ALL, 0))
		//// TOOLTIPS
		itemSizer8 = wx.BoxSizer(wx.HORIZONTAL)
		checkBox6 = wx.CheckBox(panel, ID_SHOW_TOOLTIPS, 'Show &tooltips', wx.DefaultPosition, wx.DefaultSize)
		itemSizer8.Add(checkBox6, wx.SizerFlags(0).Align(wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		item0.Add(itemSizer8, wx.SizerFlags(0).Expand().Border(wx.ALL, 0))
		topSizer.Add(item0, wx.SizerFlags(1).Expand().Align(wx.ALIGN_CENTRE).Border(wx.ALL, 5))
		panel.SetSizer(topSizer)
		topSizer.Fit(panel)
		panel
	}
	CreateAestheticSettingsPage(parent:wx.Window) = {
		panel = wx.Panel(parent, wx.ID_ANY)
		topSizer = wx.BoxSizer(wx.VERTICAL)
		item0 = wx.BoxSizer(wx.VERTICAL)
		//// PROJECT OR GLOBAL
		globalOrProjectChoices = [
			'&New projects',
			'&This project'
		]
		projectOrGlobal = wx.RadioBox(panel, ID_APPLY_SETTINGS_TO, '&Apply settings to:',
			wx.DefaultPosition, wx.DefaultSize, globalOrProjectChoices)
		item0.Add(projectOrGlobal, wx.SizerFlags(0).Expand().Border(wx.ALL, 5))
		projectOrGlobal.SetSelection(0)
		//// BACKGROUND STYLE
		backgroundStyleChoices = [
			'Colour',
			'Image'
		]
		staticBox3 = wx.StaticBox(panel, wx.ID_ANY, 'Background style:')
		styleSizer = wx.StaticBoxSizer(staticBox3, wx.VERTICAL)
		item0.Add(styleSizer, wx.SizerFlags(0).Expand().Border(wx.ALL, 5))
		itemSizer2 = wx.BoxSizer(wx.HORIZONTAL)
		choice2 = wx.Choice(panel, ID_BACKGROUND_STYLE, wx.DefaultPosition, wx.DefaultSize, backgroundStyleChoices)
		itemSizer2.Add(wx.StaticText(panel, wx.ID_ANY, '&Window:'), wx.SizerFlags(0).Align(wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		itemSizer2.AddSpacer(5, 5, 1, wx.ALL, 0)
		itemSizer2.Add(choice2, wx.SizerFlags(0).Align(wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		styleSizer.Add(itemSizer2, wx.SizerFlags(0).Expand().Border(wx.ALL, 5))
		//// FONT SIZE SELECTION
		staticBox1 = wx.StaticBox(panel, wx.ID_ANY, 'Tile font size:')
		itemSizer5 = wx.StaticBoxSizer(staticBox1, wx.HORIZONTAL)
		spinCtrl = wx.SpinCtrl(panel, ID_FONT_SIZE, wx.EmptyString, wx.DefaultPosition,
			wx.Size(80, wx.DefaultCoord))
		itemSizer5.Add(spinCtrl, wx.SizerFlags(0).Align(wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL).Border(wx.ALL, 5))
		item0.Add(itemSizer5, wx.SizerFlags(0).Expand().Border(wx.LEFT | wx.RIGHT, 5))
		topSizer.Add(item0, wx.SizerFlags(1).Expand().Align(wx.ALIGN_CENTRE).Border(wx.ALL, 5))
		topSizer.AddSpacer(5)
		panel.SetSizer(topSizer)
		topSizer.Fit(panel)
		panel
	}
}

// ----------------------------------------------------------------------------
// utility functions
// ----------------------------------------------------------------------------

InitAboutInfoMinimal(info:wx.AboutDialogInfo) = {
	info.SetName('Dialogs Sample')
	info.SetVersion(wx.VERSION_NUM_DOT_STRING)
	info.SetDescription('This sample shows different wxWidgets dialogs')
	info.SetCopyright('(C) 1998-2006 wxWidgets dev team')
	info.AddDeveloper('Vadim Zeitlin')
}

InitAboutInfoWebsite(info:wx.AboutDialogInfo) = {
	InitAboutInfoMinimal(info)
	info.SetWebSite('http://www.wxwidgets.org/', 'wxWidgets web site')
}

InitAboutInfoAll(info:wx.AboutDialogInfo) = {
	InitAboutInfoMinimal(info)
	// we can add a second developer
	info.AddDeveloper('A.N. Other')
	// or we can add several persons at once like this
	docwriters = [
		'First D. Writer',
		'Second One',
	]
	info.SetDocWriters(docwriters)
	info.SetLicence(R'''
				wxWindows Library Licence, Version 3.1
				======================================

  Copyright (c) 1998-2005 Julian Smart, Robert Roebling et al

  Everyone is permitted to copy and distribute verbatim copies
  of this licence document, but changing it is not allowed.

					   WXWINDOWS LIBRARY LICENCE
	 TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

					...and so on and so forth...
'''
	)
	info.AddTranslator('Wun Ngo Wen (Martian)')
}

DecodeFindDialogEventFlags(flags:number) = {
	cond((flags & wx.FR_DOWN) != 0, 'down', 'up') + ', ' \
	+ cond((flags & wx.FR_WHOLEWORD) != 0, 'whole words only, ', '') \
	+ cond((flags & wx.FR_MATCHCASE) != 0, '', 'not ') \
	+ 'case sensitive'
}

wx.IMPLEMENT_APP(MyApp)

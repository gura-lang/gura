#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        splitter.cpp
// Purpose:     wxSplitterWindow sample
// Author:      Julian Smart
// Modified by:
// Created:     04/01/98
// RCS-ID:      $Id: splitter.cpp 61458 2009-07-18 22:46:26Z PC $
// Copyright:   (c) Julian Smart
// Licence:     wxWindows license
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

// ----------------------------------------------------------------------------
// constants
// ----------------------------------------------------------------------------

// ID for the menu commands
[
SPLIT_QUIT,
SPLIT_HORIZONTAL,
SPLIT_VERTICAL,
SPLIT_UNSPLIT,
SPLIT_LIVE,
SPLIT_SETPOSITION,
SPLIT_SETMINSIZE,
SPLIT_SETGRAVITY,
SPLIT_REPLACE
] = 1..

// ----------------------------------------------------------------------------
// MyApp
// ----------------------------------------------------------------------------

MyApp = class(wx.App) {
	OnInit() = {
		frame = MyFrame()
		frame.Show()
		true
	}
}

// ----------------------------------------------------------------------------
// MyFrame
// ----------------------------------------------------------------------------

MyFrame = class(wx.Frame) {
	__init__() = {|nil, wx.ID_ANY, 'wxSplitterWindow sample',
					wx.DefaultPosition, wx.Size(420, 300),
					(wx.DEFAULT_FRAME_STYLE | wx.NO_FULL_REPAINT_ON_RESIZE)|
		this.EventHandler()
		this.CreateStatusBar(2)
		// Make a menubar
		splitMenu = wx.Menu()
		splitMenu.Append(SPLIT_VERTICAL,
						'Split &Vertically\tCtrl-V',
						'Split vertically')
		splitMenu.Append(SPLIT_HORIZONTAL,
						'Split &Horizontally\tCtrl-H',
						'Split horizontally')
		splitMenu.Append(SPLIT_UNSPLIT,
						'&Unsplit\tCtrl-U',
						'Unsplit')
		splitMenu.AppendSeparator()
		splitMenu.AppendCheckItem(SPLIT_LIVE,
								'&Live update\tCtrl-L',
								'Toggle live update mode')
		splitMenu.Append(SPLIT_SETPOSITION,
						'Set splitter &position\tCtrl-P',
						'Set the splitter position')
		splitMenu.Append(SPLIT_SETMINSIZE,
						'Set &min size\tCtrl-M',
						'Set minimum pane size')
		splitMenu.Append(SPLIT_SETGRAVITY,
						'Set &gravity\tCtrl-G',
						'Set gravity of sash')
		splitMenu.AppendSeparator()
		splitMenu.Append(SPLIT_REPLACE,
						'&Replace right window',
						'Replace right window')
		splitMenu.AppendSeparator()
		splitMenu.Append(SPLIT_QUIT, 'E&xit\tAlt-X', 'Exit')
		menuBar = wx.MenuBar()
		menuBar.Append(splitMenu, '&Splitter')
		this.SetMenuBar(menuBar)
		menuBar.Check(SPLIT_LIVE, true)
		this.m_splitter = MySplitterWindow(this)
		this.m_splitter.SetSashGravity(1.0)
		this.m_left = MyCanvas(this.m_splitter, true)
		this.m_left.SetBackgroundColour(wx.RED)
		this.m_left.SetScrollbars(20, 20, 5, 5)
		this.m_left.SetCursor(wx.StockCursor(wx.CURSOR_MAGNIFIER))
		this.m_right = MyCanvas(this.m_splitter, false)
		this.m_right.SetBackgroundColour(wx.CYAN)
		this.m_right.SetScrollbars(20, 20, 5, 5)
		// you can also do this to start with a single window
		// you can also try -100
		this.m_splitter.SplitVertically(this.m_left, this.m_right, 100)
		this.SetStatusText('Min pane size = 0', 1)
		this.m_replacewindow = nil
	}
	EventHandler() = {
		this.Bind(wx.EVT_MENU, SPLIT_VERTICAL) {|event| this.SplitVertical(event) }
		this.Bind(wx.EVT_MENU, SPLIT_HORIZONTAL) {|event| this.SplitHorizontal(event) }
		this.Bind(wx.EVT_MENU, SPLIT_UNSPLIT) {|event| this.Unsplit(event) }
		this.Bind(wx.EVT_MENU, SPLIT_LIVE) {|event| this.ToggleLive(event) }
		this.Bind(wx.EVT_MENU, SPLIT_SETPOSITION) {|event| this.SetPosition(event) }
		this.Bind(wx.EVT_MENU, SPLIT_SETMINSIZE) {|event| this.SetMinSize(event) }
		this.Bind(wx.EVT_MENU, SPLIT_SETGRAVITY) {|event| this.SetGravity(event) }
		this.Bind(wx.EVT_MENU, SPLIT_REPLACE) {|event| this.Replace(event) }
		this.Bind(wx.EVT_MENU, SPLIT_QUIT) {|event| this.Quit(event) }
		this.Bind(wx.EVT_UPDATE_UI, SPLIT_VERTICAL) {|event| this.UpdateUIVertical(event) }
		this.Bind(wx.EVT_UPDATE_UI, SPLIT_HORIZONTAL) {|event| this.UpdateUIHorizontal(event) }
		this.Bind(wx.EVT_UPDATE_UI, SPLIT_UNSPLIT) {|event| this.UpdateUIUnsplit(event) }
	}
	// Menu commands
	Quit(event:wx.CommandEvent) = {
		this.Close(true)
	}
	SplitHorizontal(event:wx.CommandEvent) = {
		if (this.m_splitter.IsSplit()) {
			this.m_splitter.Unsplit()
		}
		this.m_left.Show(true)
		this.m_right.Show(true)
		this.m_splitter.SplitHorizontally(this.m_left, this.m_right)
		this.m_replacewindow = nil
		this.SetStatusText('Splitter split horizontally', 1)
	}
	SplitVertical(event:wx.CommandEvent) = {
		if (this.m_splitter.IsSplit()) {
			this.m_splitter.Unsplit()
		}
		this.m_left.Show(true)
		this.m_right.Show(true)
		this.m_splitter.SplitVertically(this.m_left, this.m_right)
		this.m_replacewindow = nil
		this.SetStatusText('Splitter split vertically', 1)
	}
	Unsplit(event:wx.CommandEvent) = {
		if (this.m_splitter.IsSplit()) {
			this.m_splitter.Unsplit()
		}
		this.SetStatusText('No splitter')
	}
	ToggleLive(event:wx.CommandEvent) = {
		style = this.m_splitter.GetWindowStyleFlag()
		if (event.IsChecked()) {
			style |= wx.SP_LIVE_UPDATE
		} else {
			style &= ~wx.SP_LIVE_UPDATE
		}
		this.m_splitter.SetWindowStyleFlag(style)
	}
	SetPosition(event:wx.CommandEvent) = {
	    str = format('%d', this.m_splitter.GetSashPosition())
	    str = wx.GetTextFromUser('Enter splitter position:', '', str, this)
	    if (str.isempty()) {
			return
		}
		try {
			pos = int(str)
		} except {
			wx.LogError('The splitter position should be an integer.')
			return
		}
		this.m_splitter.SetSashPosition(pos)
		wx.LogStatusEx(this, 'Splitter position set to %ld', pos)
	}
	SetMinSize(event:wx.CommandEvent) = {
		str = format('%d', this.m_splitter.GetMinimumPaneSize())
		str = wx.GetTextFromUser('Enter minimal size for panes:', '', str, this)
		if (str.isempty()) {
			return
		}
		try {
			minsize = int(str)
		} except {
			return
		}
		this.m_splitter.SetMinimumPaneSize(minsize)
		str = format('Min pane size = %d', minsize)
		this.SetStatusText(str, 1)
	}
	SetGravity(event:wx.CommandEvent) = {
		str = format('%g', this.m_splitter.GetSashGravity())
		str = wx.GetTextFromUser('Enter sash gravity (0,1):', '', str, this)
		if (str.isempty()) {
			return
		}
		gravity = str.tonumber()
		!gravity && return
		this.m_splitter.SetSashGravity(gravity)
		str = format('Gravity = %g', gravity)
		this.SetStatusText(str, 1)
	}
	Replace(event:wx.CommandEvent) = {
		if (this.m_replacewindow == nil) {
			this.m_replacewindow = this.m_splitter.GetWindow2()
			this.m_splitter.ReplaceWindow(this.m_replacewindow, wx.Panel(this.m_splitter, wx.ID_ANY))
			this.m_replacewindow.Hide()
		} else {
			empty = this.m_splitter.GetWindow2()
			this.m_splitter.ReplaceWindow(empty, this.m_replacewindow)
			this.m_replacewindow.Show()
			this.m_replacewindow = nil
			empty.Destroy()
		}
	}
	// Menu command update functions
	UpdateUIHorizontal(event:wx.UpdateUIEvent) = {
		event.Enable((!this.m_splitter.IsSplit()) || (this.m_splitter.GetSplitMode() != wx.SPLIT_HORIZONTAL))
	}
	UpdateUIVertical(event:wx.UpdateUIEvent) = {
		event.Enable(((!this.m_splitter.IsSplit()) || (this.m_splitter.GetSplitMode() != wx.SPLIT_VERTICAL)))
	}
	UpdateUIUnsplit(event:wx.UpdateUIEvent) = {
		event.Enable(this.m_splitter.IsSplit())
	}
}

// ----------------------------------------------------------------------------
// MySplitterWindow
// ----------------------------------------------------------------------------

MySplitterWindow = class(wx.SplitterWindow) {
	__init__(parent:wx.Frame) = {|parent, wx.ID_ANY,
								wx.DefaultPosition, wx.DefaultSize,
								(wx.SP_3D | wx.SP_LIVE_UPDATE | \
								 wx.CLIP_CHILDREN /* | wx.SP_NO_XP_THEME */)|
		this.m_frame = parent
		this.EventHandler()
	}
	EventHandler() = {
		this.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, wx.ID_ANY) {|event| this.OnPositionChanged(event) }
		this.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGING, wx.ID_ANY) {|event| this.OnPositionChanging(event) }
		this.Bind(wx.EVT_SPLITTER_DCLICK, wx.ID_ANY) {|event| this.OnDClick(event) }
		this.Bind(wx.EVT_SPLITTER_UNSPLIT, wx.ID_ANY) {|event| this.OnUnsplitEvent(event) }
	}
	// event handlers
	OnPositionChanged(event:wx.SplitterEvent) = {
		wx.LogStatusEx(this.m_frame, 'Position has changed, now = %d (or %d)',
					event.GetSashPosition(), this.GetSashPosition())
		event.Skip()
	}
	OnPositionChanging(event:wx.SplitterEvent) = {
		wx.LogStatusEx(this.m_frame, 'Position is changing, now = %d (or %d)',
					event.GetSashPosition(), this.GetSashPosition())
		event.Skip()
	}
	OnDClick(event:wx.SplitterEvent) = {
		this.m_frame.SetStatusText('Splitter double clicked', 1)
		event.Skip()
	}
	OnUnsplitEvent(event:wx.SplitterEvent) = {
		this.m_frame.SetStatusText('Splitter unsplit', 1)
		event.Skip()
	}
}

// ----------------------------------------------------------------------------
// MyCanvas
// ----------------------------------------------------------------------------

MyCanvas = class(wx.ScrolledWindow) {
	__init__(parent:wx.Window, mirror:boolean) = {|parent, wx.ID_ANY,
				wx.DefaultPosition, wx.DefaultSize,
				(wx.HSCROLL | wx.VSCROLL | wx.NO_FULL_REPAINT_ON_RESIZE)|
		this.m_mirror = mirror
	}
	OnDraw(dcOrig:wx.DC) = {
		dc = wx.MirrorDC(dcOrig, this.m_mirror)
		dc.SetPen(wx.BLACK_PEN)
		dc.DrawLine(0, 0, 100, 200)
		dc.SetBackgroundMode(wx.TRANSPARENT)
		dc.DrawText('Testing', 50, 50)
		dc.SetPen(wx.RED_PEN)
		dc.SetBrush(wx.GREEN_BRUSH)
		dc.DrawRectangle(120, 120, 100, 80)
	}
}

wx.IMPLEMENT_APP(MyApp)

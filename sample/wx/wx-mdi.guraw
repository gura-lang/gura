#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        mdi.cpp
// Purpose:     MDI sample
// Author:      Julian Smart
// Modified by:
// Created:     04/01/98
// RCS-ID:      $Id: mdi.cpp 43480 2006-11-18 00:08:27Z VZ $
// Copyright:   (c) Julian Smart
// Licence:     wxWindows license
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

MDI_QUIT = wx.ID_EXIT,
[
MDI_NEW_WINDOW,
MDI_REFRESH,
MDI_CHANGE_TITLE,
MDI_CHANGE_POSITION,
MDI_CHANGE_SIZE,
MDI_CHILD_QUIT,
] = 101..
MDI_ABOUT = wx.ID_ABOUT

// ---------------------------------------------------------------------------
// global variables
// ---------------------------------------------------------------------------

frame = nil
my_children = []

// For drawing lines in a canvas
xpos = -1
ypos = -1

gs_nFrames = 0

// ---------------------------------------------------------------------------
// MyApp
// ---------------------------------------------------------------------------

MyApp = class(wx.App) {
	OnInit() = {
		extern(frame)
	    // Create the main frame window
		frame = MyFrame(nil, wx.ID_ANY, 'MDI Demo',
							wx.DefaultPosition, wx.Size(500, 400),
							wx.DEFAULT_FRAME_STYLE | wx.HSCROLL | wx.VSCROLL)
		// Give it an icon
		frame.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		// Make a menubar
		file_menu = wx.Menu()
		file_menu.Append(MDI_NEW_WINDOW, '&New window\tCtrl-N', 'Create a new child window')
		file_menu.Append(MDI_QUIT, '&Exit\tAlt-X', 'Quit the program')
		help_menu = wx.Menu()
		help_menu.Append(MDI_ABOUT, '&About\tF1')
		menu_bar = wx.MenuBar()
		menu_bar.Append(file_menu, '&File')
		menu_bar.Append(help_menu, '&Help')
		// Associate the menu bar with the frame
		frame.SetMenuBar(menu_bar)
		frame.CreateStatusBar()
		frame.Show(true)
		this.SetTopWindow(frame)
		true
	}
}

// ---------------------------------------------------------------------------
// MyFrame
// ---------------------------------------------------------------------------

MyFrame = class(wx.MDIParentFrame) {
	__init__(parent:wx.Window, id:number, title:string,
					pos:wx.Point, size:wx.Size, style:number) = \
			{|parent, id, title, pos, size, style|
		this.EventTable()
		this.textWindow = wx.TextCtrl(this, wx.ID_ANY, 'A help window',
									wx.DefaultPosition, wx.DefaultSize,
									wx.TE_MULTILINE | wx.SUNKEN_BORDER)
		this.CreateToolBar(wx.NO_BORDER | wx.TB_FLAT | wx.TB_HORIZONTAL)
		this.InitToolBar(this.GetToolBar())
		// Accelerators
		entries = @(wx.AcceleratorEntry) {
			{wx.ACCEL_CTRL, 'N', MDI_NEW_WINDOW },
			{wx.ACCEL_CTRL, 'X', MDI_QUIT },
			{wx.ACCEL_CTRL, 'A', MDI_ABOUT },
		}
		accel = wx.AcceleratorTable(entries)
		this.SetAcceleratorTable(accel)
	}
	EventTable() = {
		this.Bind(wx.EVT_MENU, MDI_ABOUT) {|event| this.OnAbout(event) }
		this.Bind(wx.EVT_MENU, MDI_NEW_WINDOW) {|event| this.OnNewWindow(event) }
		this.Bind(wx.EVT_MENU, MDI_QUIT) {|event| this.OnQuit(event) }
		this.Bind(wx.EVT_CLOSE) {|event| this.OnClose(event) }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
	}
	OnClose(event:wx.CloseEvent) = {
		if (event.CanVeto() && (gs_nFrames > 0)) {
			msg = format('%d windows still open, close anyhow?', gs_nFrames)
			if (wx.MessageBox(msg, 'Please confirm',
							  wx.ICON_QUESTION | wx.YES_NO) != wx.YES ) {
				event.Veto()
				return
			}
		}
		event.Skip()
	}
	OnQuit(event:wx.CommandEvent) = {
		this.Close()
	}
	OnAbout(event:wx.CommandEvent) = {
		wx.MessageBox('wxWidgets 2.0 MDI Demo\n' \
						'Author: Julian Smart (c) 1997\n' \
						'Usage: mdi.exe', 'About MDI Demo')
	}
	OnNewWindow(event:wx.CommandEvent) = {
		// Make another frame, containing a canvas
		subframe = MyChild(frame, 'Canvas Frame')
		gs_nFrames += 1
		title = format('Canvas Frame %d', gs_nFrames)
		subframe.SetTitle(title)
		// Give it an icon
		subframe.SetIcon(wx.IconFromXPMData(resource.chart_xpm))
		// Make a menubar
		file_menu = wx.Menu()
		file_menu.Append(MDI_NEW_WINDOW, '&New window')
		file_menu.Append(MDI_CHILD_QUIT, '&Close child', 'Close this window')
		file_menu.Append(MDI_QUIT, '&Exit')
		option_menu = wx.Menu()
		option_menu.Append(MDI_REFRESH, '&Refresh picture')
		option_menu.Append(MDI_CHANGE_TITLE, 'Change &title...\tCtrl-T')
		option_menu.AppendSeparator()
		option_menu.Append(MDI_CHANGE_POSITION, 'Move frame\tCtrl-M')
		option_menu.Append(MDI_CHANGE_SIZE, 'Resize frame\tCtrl-S')
		option_menu.AppendSeparator()
		option_menu.Append(wx.ID_PASTE, 'Copy text from clipboard\tCtrl-V')
		help_menu = wx.Menu()
		help_menu.Append(MDI_ABOUT, '&About')
		menu_bar = wx.MenuBar()
		menu_bar.Append(file_menu, '&File')
		menu_bar.Append(option_menu, '&Child')
		menu_bar.Append(help_menu, '&Help')
		// Associate the menu bar with the frame
		subframe.SetMenuBar(menu_bar)
		subframe.CreateStatusBar()
		subframe.SetStatusText(title)
		[width, height] = subframe.GetClientSizeWH()
		canvas = MyCanvas(subframe, wx.Point(0, 0), wx.Size(width, height))
		//canvas.SetCursor(wx.StockCursor(wx.CURSOR_PENCIL))
		subframe.canvas = canvas
		// Give it scrollbars
		canvas.SetScrollbars(20, 20, 50, 50)
		subframe.Show(true)
	}
	OnSize(event:wx.SizeEvent) = {
		try {
			[w, h] = this.GetClientSizeWH()
			this.textWindow.SetDimensions(0, 0, 200, h)
			this.GetClientWindow().SetDimensions(200, 0, w - 200, h)
		} catch {}
		event.Skip()
	}
	InitToolBar(toolBar:wx.ToolBar) = {
		bitmaps = wx.BitmapFromXPMData([
			resource.new_xpm
			resource.open_xpm
			resource.save_xpm
			resource.copy_xpm
			resource.cut_xpm
			resource.paste_xpm
			resource.print_xpm
			resource.help_xpm
		])
		toolBar.AddTool(MDI_NEW_WINDOW, 'New', bitmaps[0], nil, nil, 'New file')
		toolBar.AddTool(1, 'Open', bitmaps[1], nil, nil, 'Open file')
		toolBar.AddTool(2, 'Save', bitmaps[2], nil, nil, 'Save file')
		toolBar.AddSeparator()
		toolBar.AddTool(3, 'Copy', bitmaps[3], nil, nil, 'Copy')
		toolBar.AddTool(4, 'Cut', bitmaps[4], nil, nil, 'Cut')
		toolBar.AddTool(5, 'Paste', bitmaps[5], nil, nil, 'Paste')
		toolBar.AddSeparator()
		toolBar.AddTool(6, 'Print', bitmaps[6], nil, nil, 'Print')
		toolBar.AddSeparator()
		toolBar.AddTool(MDI_ABOUT, 'About', bitmaps[7], nil, nil, 'Help')
		toolBar.Realize()
	}
}

// ---------------------------------------------------------------------------
// MyCanvas
// ---------------------------------------------------------------------------

MyCanvas = class(wx.ScrolledWindow) {
	__init__(parent:wx.Window, pos:wx.Point, size:wx.Size) = \
			{|parent, wx.ID_ANY, pos, size,
							(wx.SUNKEN_BORDER | \
							wx.NO_FULL_REPAINT_ON_RESIZE | \
							wx.VSCROLL | wx.HSCROLL)|
		this.EventTable()
		this.SetBackgroundColour(wx.NamedColour('WHITE'))
		this.m_text = ''
		this.m_dirty = false
	}
	EventTable() = {
		this.Bind(wx.EVT_MOUSE_EVENTS) {|event| this.OnEvent(event) }
	}
	OnDraw(dc:wx.DC) = {
		if (!this.m_text.isempty()) {
			dc.DrawText(this.m_text, 10, 10)
		}
		dc.SetFont(wx.SWISS_FONT)
		dc.SetPen(wx.GREEN_PEN)
		dc.DrawLine(0, 0, 200, 200)
		dc.DrawLine(200, 0, 0, 200)
		dc.SetBrush(wx.CYAN_BRUSH)
		dc.SetPen(wx.RED_PEN)
		dc.DrawRectangle(100, 100, 100, 50)
		dc.DrawRoundedRectangle(150, 150, 100, 50, 20)
		dc.DrawEllipse(250, 250, 100, 50)
		dc.DrawSpline(@(wx.Point) {{50, 200}, {50, 100}, {200, 10}})
		dc.DrawLine(50, 230, 200, 230)
		dc.DrawText('This is a test string', 50, 230)
		points = dim(3) { wx.Point() }
		points[0].x = 200; points[0].y = 300
		points[1].x = 100; points[1].y = 400
		points[2].x = 300; points[2].y = 400
		dc.DrawPolygon(points)
	}
	IsDirty() = { this.m_dirty }
	OnEvent(event:wx.MouseEvent) = {
		extern(xpos, ypos)
		dc = wx.ClientDC(this)
		this.PrepareDC(dc)
		pt = event.GetLogicalPosition(dc)
		if (xpos > -1 && ypos > -1 && event.Dragging()) {
			dc.SetPen(wx.BLACK_PEN)
			dc.DrawLine(xpos, ypos, pt.x, pt.y)
			this.m_dirty = true
		}
		xpos = pt.x
		ypos = pt.y
	}
	SetText(text:string) = { this.m_text = text; this.Refresh() }
}

// ---------------------------------------------------------------------------
// MyChild
// ---------------------------------------------------------------------------

MyChild = class(wx.MDIChildFrame) {
	//MyCanvas *canvas
	__init__(parent:wx.MDIParentFrame, title:string) = \
			{|parent, wx.ID_ANY, title, wx.DefaultPosition, wx.DefaultSize,
						(wx.DEFAULT_FRAME_STYLE | wx.NO_FULL_REPAINT_ON_RESIZE)|
		this.EventTable()
		this.canvas = nil
		my_children.append(this)
		// this should work for MDI frames as well as for normal ones
		this.SetSizeHints(100, 100)
	}
	__del__() = {
		idx = my_chilren.find(this)
		idx && my_chilren.erase(idx)
	}
	EventTable() = {
		this.Bind(wx.EVT_MENU, MDI_CHILD_QUIT) {|event| this.OnQuit(event) }
		this.Bind(wx.EVT_MENU, MDI_REFRESH) {|event| this.OnRefresh(event) }
		this.Bind(wx.EVT_MENU, MDI_CHANGE_TITLE) {|event| this.OnChangeTitle(event) }
		this.Bind(wx.EVT_MENU, MDI_CHANGE_POSITION) {|event| this.OnChangePosition(event) }
		this.Bind(wx.EVT_MENU, MDI_CHANGE_SIZE) {|event| this.OnChangeSize(event) }
		this.Bind(wx.EVT_MENU, wx.ID_PASTE) {|event| this.OnPaste(event) }
		this.Bind(wx.EVT_UPDATE_UI, wx.ID_PASTE) {|event| this.OnUpdatePaste(event) }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
		this.Bind(wx.EVT_MOVE) {|event| this.OnMove(event) }
		this.Bind(wx.EVT_CLOSE) {|event| this.OnClose(event) }
	}
	OnQuit(event:wx.CommandEvent) = {
		this.Close(true)
	}
	OnRefresh(event:wx.CommandEvent) = {
		if (this.canvas) {
			this.canvas.Refresh()
		}
	}
	OnChangePosition(event:wx.CommandEvent) = {
		this.MoveXY(10, 10)
	}
	OnChangeSize(event:wx.CommandEvent) = {
		this.SetClientSizeWH(100, 100)
	}
	s_title = 'Canvas Frame'
	OnChangeTitle(event:wx.CommandEvent) = {
		title = wx.GetTextFromUser('Enter the new title for MDI child',
										'MDI sample question',
										s_title,
										this.GetParent().GetParent())
		if (!title) {
			return
		}
		s_title = title
		this.SetTitle(s_title)
	}
	OnActivate(event:wx.ActivateEvent) = {
		if (event.GetActive() && this.canvas) {
			this.canvas.SetFocus()
		}
	}
	OnMove(event:wx.MoveEvent) = {
		// VZ: here everything is totally wrong under MSW, the positions are
		//	 different and both wrong (pos2 is off by 2 pixels for me which seems
		//	 to be the width of the MDI canvas border)
		pos1 = event.GetPosition()
		pos2 = this.GetPosition()
		wx.LogStatus('position from event: (%d, %d), from frame (%d, %d)',
					pos1.x, pos1.y, pos2.x, pos2.y)
		event.Skip()
	}
	OnSize(event:wx.SizeEvent) = {
		// VZ: under MSW the size event carries the client size (quite
		//	 unexpectedly) *except* for the very first one which has the full
		//	 size... what should it really be? TODO: check under wxGTK
		size1 = event.GetSize(),
		size2 = this.GetSize(),
		size3 = this.GetClientSize()
		wx.LogStatus('size from event: %dx%d, from frame %dx%d, client %dx%d',
					size1.x, size1.y, size2.x, size2.y, size3.x, size3.y)
		event.Skip()
	}
	OnClose(event:wx.CloseEvent) = {
		if (this.canvas && this.canvas.IsDirty()) {
			if (wx.MessageBox('Really close?', 'Please confirm',
							wx.ICON_QUESTION | wx.YES_NO) != wx.YES) {
				event.Veto()
				return
			}
		}
		gs_nFrames -= 1
		event.Skip()
	}
	OnPaste(event:wx.CommandEvent) = {
		wx.ClipboardLocker {
			data = wx.TextDataObject()
			this.canvas.SetText(if (wx.TheClipboard.GetData(data)) \
							{ data.GetText() } else {'No text on clipboard'})
		}
	}
	OnUpdatePaste(event:wx.UpdateUIEvent) = {
		event.Enable(wx.TheClipboard.IsSupported(wx.DF_TEXT))
	}
}

wx.IMPLEMENT_APP(MyApp)

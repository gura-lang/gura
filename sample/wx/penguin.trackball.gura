#!/usr/bin/env gura
/*
 * (c) Copyright 1993, 1994, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED
 * Permission to use, copy, modify, and distribute this software for
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission.
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
 * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * US Government Users Restricted Rights
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
 * (c)(1)(ii) of the Rights in Technical Data and Computer Software
 * clause at DFARS 252.227-7013 and/or in similar or successor
 * clauses in the FAR or the DOD or NASA FAR Supplement.
 * Unpublished-- rights reserved under the copyright laws of the
 * United States.  Contractor/manufacturer is Silicon Graphics,
 * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
 *
 * OpenGL(TM) is a trademark of Silicon Graphics, Inc.
 */
/*
 * Trackball code:
 *
 * Implementation of a virtual trackball.
 * Implemented by Gavin Bell, lots of ideas from Thant Tessman and
 *   the August '88 issue of Siggraph's "Computer Graphics," pp. 121-129.
 *
 * Vector manip code:
 *
 * Original code from:
 * David M. Ciemiewicz, Mark Grossman, Henry Moreton, and Paul Haeberli
 *
 * Much mucking with by:
 * Gavin Bell
 */
// This Gura script has been ported from the original above by Yutaka SAITO.

TRACKBALLSIZE = 0.8

vzero() = {
	[0.0, 0.0, 0.0, 0.0]
}

vset(x:number, y:number, z:number) = {
	[x, y, z, 0.0]
}

vsub(src1[]:number, src2[]:number) = {
	src1 - src2
}

vcopy(v1[]:number) = {
	v1.clone()
}

vcross(v1[]:number, v2[]:number) = {
	[
		(v1[1] * v2[2]) - (v1[2] * v2[1])
		(v1[2] * v2[0]) - (v1[0] * v2[2])
		(v1[0] * v2[1]) - (v1[1] * v2[0])
		0.0
	]
}

vlength(v[]:number) = {
	math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2])
}

vscale(v[]:number, div:number) = {
	v * div
}

vnormal(v[]:number) = {
	vscale(v, 1.0 / vlength(v))
}
vdot(v1[]:number, v2[]:number) = {
	v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]
}

vadd(src1[]:number, src2[]:number) = {
	src1 + src2
}

/*
 * Ok, simulate a track-ball.  Project the points onto the virtual
 * trackball, then figure out the axis of rotation, which is the cross
 * product of P1 P2 and O P1 (O is the center of the ball, 0,0,0)
 * Note:  This is a deformed trackball-- is a trackball in the center,
 * but is deformed into a hyperbolic sheet of rotation away from the
 * center.  This particular function was chosen after trying out
 * several variations.
 *
 * It is assumed that the arguments to this routine are in the range
 * (-1.0 ... 1.0)
 */
trackball(p1x:number, p1y:number, p2x:number, p2y:number) = {
	if (p1x == p2x && p1y == p2y) {
		/* Zero rotation */
		q = vzero()
		q[3] = 1.0
		return(q)
	}
	/*
	 * First, figure out z-coordinates for projection of P1 and P2 to
	 * deformed sphere
	 */
	p1 = vset(p1x, p1y, tb_project_to_sphere(TRACKBALLSIZE, p1x, p1y))
	p2 = vset(p2x, p2y, tb_project_to_sphere(TRACKBALLSIZE, p2x, p2y))
	/*
	 *  Now, we want the cross product of P1 and P2
	 */
	a = vcross(p2, p1)
	/*
	 *  Figure out how much to rotate around that axis.
	 */
	d = vsub(p1, p2)
	t = vlength(d) / (2.0 * TRACKBALLSIZE)
	/*
	 * Avoid problems with out-of-control values...
	 */
	if (t > 1.0) { t = 1.0 }
	if (t < -1.0) { t = -1.0 }
	phi = 2.0 * math.asin(t)
	axis_to_quat(a, phi)
}

axis_to_quat(a[]:number, phi:number) = {
	a = vnormal(a)
	q = vscale(a, math.sin(phi / 2.0))
	q[3] = math.cos(phi / 2.0)
	q
}

tb_project_to_sphere(r:number, x:number, y:number) = {
	d = math.sqrt(x * x + y * y)
	if (d < r * 0.70710678118654752440) {	/* Inside sphere */
		z = math.sqrt(r * r - d * d)
	} else {			/* On hyperbola */
		t = r / 1.41421356237309504880
		z = t * t / d
	}
	z
}

/*
 * Given two rotations, e1 and e2, expressed as quaternion rotations,
 * figure out the equivalent single rotation and stuff it into dest.
 *
 * This routine also normalizes the result every RENORMCOUNT times it is
 * called, to keep error from creeping in.
 *
 * NOTE: This routine is written so that q1 or q2 may be the same
 * as dest (or each other).
 */

RENORMCOUNT = 97

count = 0

add_quats(q1[]:number, q2[]:number) = {
	t1 = vscale(q1, q2[3])
	t2 = vscale(q2, q1[3])
	t3 = vcross(q2, q1)
	tf = vadd(t1, t2)
	tf = vadd(t3, tf)
	tf[3] = q1[3] * q2[3] - vdot(q1, q2)
	dest = tf
	count += 1
	if (count > RENORMCOUNT) {
		count = 0
		dest = normalize_quat(tf)
	}
	dest
}

/*
 * Quaternions always obey:  a^2 + b^2 + c^2 + d^2 = 1.0
 * If they don't add up to 1.0, dividing by their magnitued will
 * renormalize them.
 *
 * Note: See the following for more information on quaternions:
 *
 * - Shoemake, K., Animating rotation with quaternion curves, Computer
 *   Graphics 19, No 3 (Proc. SIGGRAPH'85), 245-254, 1985.
 * - Pletinckx, D., Quaternion calculus as a basic tool in computer
 *   graphics, The Visual Computer 5, 2-13, 1989.
 */
normalize_quat(q[]:number) = {
	mag = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3])
	q / mag
}

/*
 * Build a rotation matrix, given a quaternion rotation.
 *
 */
build_rotmatrix(q[]:number) = {
	m = dim(4, 4) {0}
	m[0][0] = 1.0 - 2.0 * (q[1] * q[1] + q[2] * q[2])
	m[0][1] = 2.0 * (q[0] * q[1] - q[2] * q[3])
	m[0][2] = 2.0 * (q[2] * q[0] + q[1] * q[3])
	m[0][3] = 0.0
	m[1][0] = 2.0 * (q[0] * q[1] + q[2] * q[3])
	m[1][1]= 1.0 - 2.0 * (q[2] * q[2] + q[0] * q[0])
	m[1][2] = 2.0 * (q[1] * q[2] - q[0] * q[3])
	m[1][3] = 0.0
	m[2][0] = 2.0 * (q[2] * q[0] - q[1] * q[3])
	m[2][1] = 2.0 * (q[1] * q[2] + q[0] * q[3])
	m[2][2] = 1.0 - 2.0 * (q[1] * q[1] + q[0] * q[0])
	m[2][3] = 0.0
	m[3][0] = 0.0
	m[3][1] = 0.0
	m[3][2] = 0.0
	m[3][3] = 1.0
	m.flatten():list
}

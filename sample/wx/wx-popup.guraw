#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        minimal.cpp
// Purpose:     Popup wxWidgets sample
// Author:      Robert Roebling
// Modified by:
// Created:     2005-02-04
// RCS-ID:      $Id: popup.cpp 41547 2006-10-02 05:36:31Z PC $
// Copyright:   (c) 2005 Robert Roebling
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

// ----------------------------------------------------------------------------
// constants
// ----------------------------------------------------------------------------

// IDs for the controls and the menu commands
Minimal_Quit = wx.ID_EXIT,
[Minimal_About,
Minimal_TestDialog,
Minimal_StartSimplePopup,
Minimal_StartScrolledPopup,
Minimal_LogWindow,
Minimal_PopupButton,
Minimal_PopupSpinctrl] = wx.ID_ABOUT..

//----------------------------------------------------------------------------
// SimpleTransientPopup
//----------------------------------------------------------------------------
SimpleTransientPopup = class(wx.PopupTransientWindow) {
	__init__(parent:wx.Window) = {|parent|
		this.m_panel = wx.ScrolledWindow(this, wx.ID_ANY)
		this.m_panel.SetBackgroundColour(wx.LIGHT_GREY)
		// Keep this code to verify if mouse events work, they're required if 
		// you're making a control like a combobox where the items are highlighted
		// under the cursor, the m_panel is set focus in the Popup() function
		this.m_panel.Bind(wx.EVT_MOTION) {|event| this.OnMouse(event) }
		text = wx.StaticText(this.m_panel, wx.ID_ANY,
							'wx.PopupTransientWindow is a\n' \
							'wx.PopupWindow which disappears\n' \
							'automatically when the user\n' \
							'clicks the mouse outside it or if it\n' \
							'(or its first child) loses focus in \n' \
							'any other way.')
		this.m_button = wx.Button(this.m_panel, Minimal_PopupButton, 'Press Me')
		this.m_spinCtrl = wx.SpinCtrl(this.m_panel, Minimal_PopupSpinctrl, 'Hello')
		this.m_mouseText = wx.StaticText(this.m_panel, wx.ID_ANY, 
									   '<- Test Mouse ->')
		topSizer = wx.BoxSizer(wx.VERTICAL)
		topSizer.Add(text, wx.SizerFlags(0).Border(wx.ALL, 5))
		topSizer.Add(this.m_button, wx.SizerFlags(0).Border(wx.ALL, 5))
		topSizer.Add(this.m_spinCtrl, wx.SizerFlags(0).Border(wx.ALL, 5))
		topSizer.Add(this.m_mouseText, wx.SizerFlags(0).Centre().Border(wx.ALL, 5))
		this.m_panel.SetAutoLayout(true)
		this.m_panel.SetSizer(topSizer)
		topSizer.Fit(this.m_panel)
		topSizer.Fit(this)
		this.EventTable()
	}
	EventTable() = {
		this.Bind(wx.EVT_MOUSE_EVENTS) {|event| this.OnMouse(event) }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
		this.Bind(wx.EVT_SET_FOCUS) {|event| this.OnSetFocus(event) }
		this.Bind(wx.EVT_KILL_FOCUS) {|event| this.OnKillFocus(event) }
		this.Bind(wx.EVT_BUTTON, Minimal_PopupButton) {|event| this.OnButton(event) }
		this.Bind(wx.EVT_SPINCTRL, Minimal_PopupSpinctrl) {|event| this.OnSpinCtrl(event) }
	}
	// wxPopupTransientWindow virtual methods are all overridden to log them
	Popup(focus:wx.Window => nil) = {
		wx.LogMessage('%s SimpleTransientPopup::Popup', this)
		super(this).Popup(if (focus) {focus} else {this.m_panel})
	}
	OnDismiss() = {
		wx.LogMessage('%s SimpleTransientPopup::OnDismiss', this)
		super(this).OnDismiss()
	}
	ProcessLeftDown(event:wx.MouseEvent) = {
	    wx.LogMessage('%s SimpleTransientPopup::ProcessLeftDown pos(%d, %d)', this, event.GetX(), event.GetY())
		super(this).ProcessLeftDown(event)
	}
	Show(show:boolean => true) = {
		wx.LogMessage('%s SimpleTransientPopup::Show %d', this, show)
		super(this).Show(show)
	}
	OnSize(event:wx.SizeEvent) = {
		wx.LogMessage('%s SimpleTransientPopup::OnSize', this)
		event.Skip()
	}
	OnSetFocus(event:wx.FocusEvent) = {
		wx.LogMessage('%s SimpleTransientPopup::OnSetFocus', this)
		event.Skip()
	}
	OnKillFocus(event:wx.FocusEvent) = {
		wx.LogMessage('%s SimpleTransientPopup::OnKillFocus', this)
		event.Skip()
	}
	OnMouse(event:wx.MouseEvent) = {
		rect = this.m_mouseText.GetRect().clone()
		rect.SetX(-100000)
		rect.SetWidth(1000000)
		colour = wx.LIGHT_GREY
		if (rect.Contains(event.GetPosition())) {
			colour = wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHT)
			wx.LogMessage('%s SimpleTransientPopup::OnMouse pos(%d, %d)', event.GetEventObject(), event.GetX(), event.GetY())
		}
		if (colour != this.m_mouseText.GetBackgroundColour()) {
			this.m_mouseText.SetBackgroundColour(colour)
			this.m_mouseText.Refresh()
		}
		event.Skip()
	}
	OnButton(event:wx.CommandEvent) = {
		wx.LogMessage('%s SimpleTransientPopup::OnButton ID %d', this, event.GetId())
		button = this.m_button
		if (button.GetLabel() == 'Press Me') {
			button.SetLabel('Pressed')
		} else {
			button.SetLabel('Press Me')
		}
		event.Skip()
	}
	OnSpinCtrl(event:wx.SpinEvent) = {
		wx.LogMessage('%s SimpleTransientPopup::OnSpinCtrl ID %d Value %d', this, event.GetId(), event.GetInt())
		event.Skip()
	}
	GetChild() = { this.m_panel }
}

// ----------------------------------------------------------------------------
// private classes
// ----------------------------------------------------------------------------

MyApp = class(wx.App) {
	OnInit() = {
		// create the main application window
		this.m_frame = MyFrame('Popup wxWidgets App')
		// and show it (the frames, unlike simple controls, are not shown when
		// created initially)
		this.m_frame.Show(true)
		// success: wxApp::OnRun() will be called which will enter the main message
		// loop and the application will run. If we returned false here, the
		// application would exit immediately.
		true
	}
}

// ----------------------------------------------------------------------------
// main frame
// ----------------------------------------------------------------------------

MyFrame = class(wx.Frame) {
	__init__(title:string) = {|nil, wx.ID_ANY, title|
		this.m_simplePopup = this.m_scrolledPopup = nil
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		menuFile = wx.Menu()
		// the "About" item should be in the help menu
		helpMenu = wx.Menu()
		helpMenu.Append(Minimal_About, '&About...\tF1', 'Show about dialog')
		menuFile.Append(Minimal_TestDialog, '&Test dialog\tAlt-T', 'Test dialog')
		menuFile.Append(Minimal_Quit, 'E&xit\tAlt-X', 'Quit this program')
		// now append the freshly created menu to the menu bar...
		menuBar = wx.MenuBar()
		menuBar.Append(menuFile, '&File')
		menuBar.Append(helpMenu, '&Help')
		// ... and attach this menu bar to the frame
		this.SetMenuBar(menuBar)
		// create a status bar just for fun (by default with 1 pane only)
		this.CreateStatusBar(2)
		this.SetStatusText('Welcome to wxWidgets!')
		panel = wx.Panel(this, -1)
		this.m_button1 = wx.Button(panel, Minimal_StartSimplePopup, 'Show simple popup', wx.Point(20,20))
		this.m_button2 = wx.Button(panel, Minimal_StartScrolledPopup, 'Show scrolled popup', wx.Point(20,70))
		this.m_logWin = wx.TextCtrl(panel, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition,
								wx.DefaultSize, wx.TE_MULTILINE)
		this.m_logWin.SetEditable(false)
		logger = wx.LogTextCtrl(this.m_logWin)
		this.m_logOld = wx.LogTextCtrl.SetActiveTarget(logger)
		try {
			// avoid error under gtk
			wx.LogTextCtrl.SetTimestamp(nil)
		} catch {}
		topSizer = wx.BoxSizer(wx.VERTICAL)
		topSizer.Add(this.m_button1, wx.SizerFlags(0).Border(wx.ALL, 5))
		topSizer.Add(this.m_button2, wx.SizerFlags(0).Border(wx.ALL, 5))
		topSizer.Add(this.m_logWin, wx.SizerFlags(1).Expand().Border(wx.ALL, 5))
		panel.SetAutoLayout(true)
		panel.SetSizer(topSizer)
		// event handler
		this.Bind(wx.EVT_MENU, Minimal_Quit) {|event| this.OnQuit(event) }
		this.Bind(wx.EVT_MENU, Minimal_About) {|event| this.OnAbout(event) }
		this.Bind(wx.EVT_MENU, Minimal_TestDialog) {|event| this.OnTestDialog(event) }
		this.Bind(wx.EVT_BUTTON, Minimal_StartSimplePopup) {|event| this.OnStartSimplePopup(event) }
		this.Bind(wx.EVT_BUTTON, Minimal_StartScrolledPopup) {|event| this.OnStartScrolledPopup(event) }
	}
	OnStartSimplePopup(event:wx.CommandEvent) = {
		wx.LogMessage('================================================')
		this.m_simplePopup && this.m_simplePopup.Destroy()
		this.m_simplePopup = SimpleTransientPopup(this)
		btn = this.m_button1
		pos = btn.ClientToScreen(wx.Point(0, 0))
		sz = btn.GetSize()
		this.m_simplePopup.Position(pos, sz)
		wx.LogMessage('%s Simple Popup Shown pos(%d, %d) size(%d, %d)', this.m_simplePopup, pos.x, pos.y, sz.x, sz.y )
		this.m_simplePopup.Popup()
	}
	OnStartScrolledPopup(event:wx.CommandEvent) = {
		wx.LogMessage('================================================')
		this.m_scrolledPopup && this.m_scrolledPopup.Destroy()
		this.m_scrolledPopup = SimpleTransientPopup(this)
		this.m_scrolledPopup.GetChild().SetScrollbars(1, 1, 1000, 1000)
		btn = this.m_button2
		pos = btn.ClientToScreen(wx.Point(0, 0))
		sz = btn.GetSize()
		this.m_scrolledPopup.Position(pos, sz)
		wx.LogMessage('%s Scrolled Popup Shown pos(%d, %d) size(%d, %d)', this.m_scrolledPopup, pos.x, pos.y, sz.x, sz.y )
		this.m_scrolledPopup.Popup()
	}
	OnTestDialog(event:wx.CommandEvent) = {
		dialog = MyDialog(this, 'Test')
		dialog.ShowModal()
	}
	OnQuit(event:wx.CommandEvent) = {
		// true is to force the frame to close
		this.Close(true)
	}
	OnAbout(event:wx.CommandEvent) = {
		msg = format('This is the About dialog of the popup sample.\n' \
					'Welcome to %s', wx.VERSION_STRING)
		wx.MessageBox(msg, 'About Popup', wx.OK | wx.ICON_INFORMATION, this)
	}
}

// ----------------------------------------------------------------------------
// test dialog
// ----------------------------------------------------------------------------

MyDialog = class(wx.Dialog) {
	__init__(parent:wx.Window, title:string) = {|parent, wx.ID_ANY, title, wx.Point(50, 50), wx.Size(400, 300)|
		this.m_simplePopup = this.m_scrolledPopup = nil
		panel = wx.Panel(this, -1)
		this.m_button1 = wx.Button(panel, Minimal_StartSimplePopup, 'Show simple popup', wx.Point(20, 20))
		this.m_button2 = wx.Button(panel, Minimal_StartScrolledPopup, 'Show scrolled popup', wx.Point(20, 60))
		okButton = wx.Button(panel, wx.ID_OK, 'OK', wx.Point(20, 200))
		topSizer = wx.BoxSizer(wx.VERTICAL)
		topSizer.Add(this.m_button1, wx.SizerFlags(0).Border(wx.ALL, 5))
		topSizer.Add(this.m_button2, wx.SizerFlags(0).Border(wx.ALL, 5))
		topSizer.AddSpacer(40)
		topSizer.Add(okButton, wx.SizerFlags(0).Border(wx.ALL, 5))
		panel.SetAutoLayout(true)
		panel.SetSizer(topSizer)
		topSizer.Fit(this)
		// event handler
		this.Bind(wx.EVT_BUTTON, Minimal_StartSimplePopup) {|event| this.OnStartSimplePopup(event) }
		this.Bind(wx.EVT_BUTTON, Minimal_StartScrolledPopup) {|event| this.OnStartScrolledPopup(event) }
	}
	OnStartSimplePopup(event:wx.CommandEvent) = {
		wx.LogMessage('================================================')
		this.m_simplePopup && this.m_simplePopup.Destroy()
		this.m_simplePopup = SimpleTransientPopup(this)
		btn = this.m_button1
		pos = btn.ClientToScreen(wx.Point(0, 0))
		sz = btn.GetSize()
		this.m_simplePopup.Position(pos, sz)
		wx.LogMessage('%s Dialog Simple Popup Shown pos(%d, %d) size(%d, %d)', this.m_simplePopup, pos.x, pos.y, sz.x, sz.y)
		this.m_simplePopup.Popup()
	}
	OnStartScrolledPopup(event:wx.CommandEvent) = {
		wx.LogMessage('================================================')
		this.m_scrolledPopup && this.m_scrolledPopup.Destroy()
		this.m_scrolledPopup = SimpleTransientPopup(this)
		this.m_scrolledPopup.GetChild().SetScrollbars(1, 1, 1000, 1000)
		btn = this.m_button2
		pos = btn.ClientToScreen(wx.Point(0, 0))
		sz = btn.GetSize()
		this.m_scrolledPopup.Position(pos, sz)
		wx.LogMessage('%s Dialog Scrolled Popup Shown pos(%d, %d) size(%d, %d)', this.m_scrolledPopup, pos.x, pos.y, sz.x, sz.y)
		this.m_scrolledPopup.Popup()
	}
}

wx.IMPLEMENT_APP(MyApp)

#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        griddemo.cpp
// Purpose:     Grid control wxWidgets sample
// Author:      Michael Bedward
// Modified by: Santiago Palacios
// RCS-ID:      $Id: griddemo.cpp 57655 2008-12-30 11:14:12Z VZ $
// Copyright:   (c) Michael Bedward, Julian Smart, Vadim Zeitlin
// Licence:     wxWindows license
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

[
	ID_TOGGLEROWLABELS,
	ID_TOGGLECOLLABELS,
	ID_TOGGLEEDIT,
	ID_TOGGLEROWSIZING,
	ID_TOGGLECOLSIZING,
	ID_TOGGLECOLMOVING,
	ID_TOGGLEGRIDSIZING,
	ID_TOGGLEGRIDDRAGCELL,
	ID_TOGGLEGRIDLINES,
	ID_AUTOSIZECOLS,
	ID_CELLOVERFLOW,
	ID_RESIZECELL,
	ID_SETLABELCOLOUR,
	ID_SETLABELTEXTCOLOUR,
	ID_SETLABEL_FONT,
	ID_ROWLABELALIGN,
	ID_ROWLABELHORIZALIGN,
	ID_ROWLABELVERTALIGN,
	ID_COLLABELALIGN,
	ID_COLLABELHORIZALIGN,
	ID_COLLABELVERTALIGN,
	ID_GRIDLINECOLOUR,
	ID_INSERTROW,
	ID_INSERTCOL,
	ID_DELETEROW,
	ID_DELETECOL,
	ID_CLEARGRID,
	ID_CHANGESEL,
	ID_SELCELLS,
	ID_SELROWS,
	ID_SELCOLS,
	ID_SET_CELL_FG_COLOUR,
	ID_SET_CELL_BG_COLOUR,
	ID_VTABLE,
	ID_BUGS_TABLE,
	ID_SMALL_GRID,
	ID_SELECT_UNSELECT,
	ID_SHOW_SELECTION,
	ID_SELECT_ALL,
	ID_SELECT_ROW,
	ID_SELECT_COL,
	ID_SELECT_CELL,
	ID_DESELECT_ALL,
	ID_DESELECT_ROW,
	ID_DESELECT_COL,
	ID_DESELECT_CELL,
	ID_SET_HIGHLIGHT_WIDTH,
	ID_SET_RO_HIGHLIGHT_WIDTH,
	ID_TESTFUNC
] = 100..

// ----------------------------------------------------------------------------
// GridApp
// ----------------------------------------------------------------------------

GridApp = class(wx.App) {
	OnInit() = {
		frame = GridFrame()
		frame.Show(true)
		true
	}
}

// ----------------------------------------------------------------------------
// GridFrame
// ----------------------------------------------------------------------------

GridFrame = class(wx.Frame) {
	__init__() = {|nil, wx.ID_ANY, 'wxWidgets grid class demo', wx.DefaultPosition, wx.DefaultSize|
		self.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		fileMenu = wx.Menu()
		fileMenu.Append(ID_VTABLE, '&Virtual table test\tCtrl-V')
		fileMenu.Append(ID_BUGS_TABLE, '&Bugs table test\tCtrl-B')
		fileMenu.Append(ID_SMALL_GRID, '&Small Grid test\tCtrl-S')
		fileMenu.AppendSeparator()
		fileMenu.Append(wx.ID_EXIT, 'E&xit\tAlt-X')
		viewMenu = wx.Menu()
		viewMenu.Append(ID_TOGGLEROWLABELS,  '&Row labels', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLECOLLABELS,  '&Col labels', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLEEDIT,  '&Editable', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLEROWSIZING, 'Ro&w drag-resize', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLECOLSIZING, 'C&ol drag-resize', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLECOLMOVING, 'Col drag-&move', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLEGRIDSIZING, '&Grid drag-resize', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLEGRIDDRAGCELL, '&Grid drag-cell', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_TOGGLEGRIDLINES, '&Grid Lines', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_SET_HIGHLIGHT_WIDTH, '&Set Cell Highlight Width...')
		viewMenu.Append(ID_SET_RO_HIGHLIGHT_WIDTH, '&Set Cell RO Highlight Width...')
		viewMenu.Append(ID_AUTOSIZECOLS, '&Auto-size cols')
		viewMenu.Append(ID_CELLOVERFLOW, '&Overflow cells', wx.EmptyString, wx.ITEM_CHECK)
		viewMenu.Append(ID_RESIZECELL, '&Resize cell (7,1)', wx.EmptyString, wx.ITEM_CHECK)
		rowLabelMenu = wx.Menu()
		viewMenu.AppendMenu(ID_ROWLABELALIGN, 'R&ow label alignment',
		                  rowLabelMenu,
		                  'Change alignment of row labels')
		rowLabelMenu.Append(ID_ROWLABELHORIZALIGN, '&Horizontal')
		rowLabelMenu.Append(ID_ROWLABELVERTALIGN, '&Vertical')
		colLabelMenu = wx.Menu()
		viewMenu.AppendMenu(ID_COLLABELALIGN, 'Col l&abel alignment',
		                  colLabelMenu,
		                  'Change alignment of col labels')
		colLabelMenu.Append(ID_COLLABELHORIZALIGN, '&Horizontal')
		colLabelMenu.Append(ID_COLLABELVERTALIGN, '&Vertical')
		colMenu = wx.Menu()
		colMenu.Append(ID_SETLABELCOLOUR, 'Set &label colour...')
		colMenu.Append(ID_SETLABELTEXTCOLOUR, 'Set label &text colour...')
		colMenu.Append(ID_SETLABEL_FONT, 'Set label fo&nt...')
		colMenu.Append(ID_GRIDLINECOLOUR, '&Grid line colour...')
		colMenu.Append(ID_SET_CELL_FG_COLOUR, 'Set cell &foreground colour...')
		colMenu.Append(ID_SET_CELL_BG_COLOUR, 'Set cell &background colour...')
		editMenu = wx.Menu()
		editMenu.Append(ID_INSERTROW, 'Insert &row')
		editMenu.Append(ID_INSERTCOL, 'Insert &column')
		editMenu.Append(ID_DELETEROW, 'Delete selected ro&ws')
		editMenu.Append(ID_DELETECOL, 'Delete selected co&ls')
		editMenu.Append(ID_CLEARGRID, 'Cl&ear grid cell contents')
		selectMenu = wx.Menu()
		selectMenu.Append(ID_SELECT_UNSELECT, 'Add new cells to the selection',
		                    'When off, old selection is deselected before ' + \
		                    'selecting the new cells', wx.ITEM_CHECK)
		selectMenu.Append(ID_SHOW_SELECTION,
		                    '&Show current selection\tCtrl-Alt-S')
		selectMenu.AppendSeparator()
		selectMenu.Append(ID_SELECT_ALL, 'Select all')
		selectMenu.Append(ID_SELECT_ROW, 'Select row 2')
		selectMenu.Append(ID_SELECT_COL, 'Select col 2')
		selectMenu.Append(ID_SELECT_CELL, 'Select cell (3, 1)')
		selectMenu.AppendSeparator()
		selectMenu.Append(ID_DESELECT_ALL, 'Deselect all')
		selectMenu.Append(ID_DESELECT_ROW, 'Deselect row 2')
		selectMenu.Append(ID_DESELECT_COL, 'Deselect col 2')
		selectMenu.Append(ID_DESELECT_CELL, 'Deselect cell (3, 1)')
		selectionMenu = wx.Menu()
		selectMenu.AppendMenu(ID_CHANGESEL, 'Change &selection mode',
		                  selectionMenu,
		                  'Change selection mode')
		selectionMenu.Append(ID_SELCELLS, 'Select &Cells')
		selectionMenu.Append(ID_SELROWS, 'Select &Rows')
		selectionMenu.Append(ID_SELCOLS, 'Select C&ols')
		helpMenu = wx.Menu()
		helpMenu.Append(wx.ID_ABOUT, '&About wxGrid demo')
		menuBar = wx.MenuBar()
		menuBar.Append(fileMenu, '&File')
		menuBar.Append(viewMenu, '&View')
		menuBar.Append(colMenu,  '&Colours')
		menuBar.Append(editMenu, '&Edit')
		menuBar.Append(selectMenu, '&Select')
		menuBar.Append(helpMenu, '&Help')
		self.SetMenuBar(menuBar)
		self.m_addToSel = false
		grid = wx.Grid(self, wx.ID_ANY, wx.Point(0, 0), wx.Size(400, 300))
		gridW = 600, gridH = 300
		logW = gridW, logH = 100
		logWin = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString,
				wx.Point(0, gridH + 20), wx.Size(logW, logH), wx.TE_MULTILINE)
		logger = wx.LogTextCtrl(logWin)
		self.m_logOld = wx.Log.SetActiveTarget(logger)
		try {
			// avoid error under gtk
			wx.Log.SetTimestamp(nil)
		} except {}
		// this will create a grid and, by default, an associated grid
		// table for strings
		grid.CreateGrid(0, 0)
		grid.AppendRows(100)
		grid.AppendCols(100)
		ir = grid.GetNumberRows()
		grid.DeleteRows(0, ir)
		grid.AppendRows(ir)
		grid.SetRowSize(0, 60)
		grid.SetCellValue(0, 0, 'Ctrl+Home\nwill go to\nthis cell')
		grid.SetCellValue(0, 1, 'A long piece of text to demonstrate wrapping.')
		grid.SetCellRenderer(0, 1, wx.GridCellAutoWrapStringRenderer())
		grid.SetCellEditor(0, 1, wx.GridCellAutoWrapStringEditor())
		grid.SetCellValue(0, 2, 'Blah')
		grid.SetCellValue(0, 3, 'Read only')
		grid.SetReadOnly(0, 3)
		grid.SetCellValue(0, 4, 'Can veto edit this cell')
		grid.SetCellValue(0, 5, 'Press\nCtrl+arrow\nto skip over\ncells')
		grid.SetRowSize(99, 60)
		grid.SetCellValue(99, 99, 'Ctrl+End\nwill go to\nthis cell')
		grid.SetCellValue(1, 0, 'This default cell will overflow into neighboring cells, but not if you turn overflow off.')
		grid.SetCellTextColour(1, 2, wx.RED)
		grid.SetCellBackgroundColour(1, 2, wx.GREEN)
		grid.SetCellValue(1, 4, "I'm in the middle")
		grid.SetCellValue(2, 2, 'red')
		grid.SetCellTextColour(2, 2, wx.RED)
		grid.SetCellValue(3, 3, 'green on grey')
		grid.SetCellTextColour(3, 3, wx.GREEN)
		grid.SetCellBackgroundColour(3, 3, wx.LIGHT_GREY)
		grid.SetCellValue(4, 4, 'a weird looking cell')
		grid.SetCellAlignment(4, 4, wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
		grid.SetCellRenderer(4, 4, MyGridCellRenderer())
		grid.SetCellRenderer(3, 0, wx.GridCellBoolRenderer())
		grid.SetCellEditor(3, 0, wx.GridCellBoolEditor())
		attr = wx.GridCellAttrEmpty()
		attr.SetTextColour(wx.BLUE)
		grid.SetColAttr(5, attr)
		attr = wx.GridCellAttrEmpty()
		attr.SetBackgroundColour(wx.RED)
		grid.SetRowAttr(5, attr)
		grid.SetCellValue(2, 4, 'a wider column')
		grid.SetColSize(4, 120)
		grid.SetColMinimalWidth(4, 120)
		grid.SetCellTextColour(5, 8, wx.GREEN)
		grid.SetCellValue(5, 8, 'Bg from row attr\nText col from cell attr')
		grid.SetCellValue(5, 5, "Bg from row attr Text col from col attr and this text is so long that it covers over many many empty cells but is broken by one that isn't")
		grid.SetColFormatFloat(6)
		grid.SetCellValue(0, 6, '3.1415')
		grid.SetCellValue(1, 6, '1415')
		grid.SetCellValue(2, 6, '12345.67890')
		grid.SetColFormatFloat(7, 6, 2)
		grid.SetCellValue(0, 7, '3.1415')
		grid.SetCellValue(1, 7, '1415')
		grid.SetCellValue(2, 7, '12345.67890')
		choices = [
			'Please select a choice',
			'This takes two cells',
			'Another choice',
		]
		grid.SetCellEditor(4, 0, wx.GridCellChoiceEditor(choices))
		grid.SetCellSize(4, 0, 1, 2)
		grid.SetCellValue(4, 0, choices[0])
		grid.SetCellOverflow(4, 0, false)
		grid.SetCellSize(7, 1, 3, 4)
		grid.SetCellAlignment(7, 1, wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
		grid.SetCellValue(7, 1, 'Big box!')
		topSizer = wx.BoxSizer(wx.VERTICAL)
		topSizer.Add(grid, wx.SizerFlags(1).Expand())
		topSizer.Add(logWin, wx.SizerFlags().Expand())
		self.SetAutoLayout(true)
		self.SetSizer(topSizer)
		topSizer.Fit(self)
		self.Centre()
		self.SetDefaults()
		self.grid = grid
		self.EventTable()
	}
	EventTable() = {
		self.Bind(wx.EVT_MENU, ID_TOGGLEROWLABELS) {|ev| self.ToggleRowLabels(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLECOLLABELS) {|ev| self.ToggleColLabels(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLEEDIT) {|ev| self.ToggleEditing(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLEROWSIZING) {|ev| self.ToggleRowSizing(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLECOLSIZING) {|ev| self.ToggleColSizing(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLECOLMOVING) {|ev| self.ToggleColMoving(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLEGRIDSIZING) {|ev| self.ToggleGridSizing(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLEGRIDDRAGCELL) {|ev| self.ToggleGridDragCell(ev) }
		self.Bind(wx.EVT_MENU, ID_TOGGLEGRIDLINES) {|ev| self.ToggleGridLines(ev) }
		self.Bind(wx.EVT_MENU, ID_AUTOSIZECOLS) {|ev| self.AutoSizeCols(ev) }
		self.Bind(wx.EVT_MENU, ID_CELLOVERFLOW) {|ev| self.CellOverflow(ev) }
		self.Bind(wx.EVT_MENU, ID_RESIZECELL) {|ev| self.ResizeCell(ev) }
		self.Bind(wx.EVT_MENU, ID_SETLABELCOLOUR) {|ev| self.SetLabelColour(ev) }
		self.Bind(wx.EVT_MENU, ID_SETLABELTEXTCOLOUR) {|ev| self.SetLabelTextColour(ev) }
		self.Bind(wx.EVT_MENU, ID_SETLABEL_FONT) {|ev| self.SetLabelFont(ev) }
		self.Bind(wx.EVT_MENU, ID_ROWLABELHORIZALIGN) {|ev| self.SetRowLabelHorizAlignment(ev) }
		self.Bind(wx.EVT_MENU, ID_ROWLABELVERTALIGN) {|ev| self.SetRowLabelVertAlignment(ev) }
		self.Bind(wx.EVT_MENU, ID_COLLABELHORIZALIGN) {|ev| self.SetColLabelHorizAlignment(ev) }
		self.Bind(wx.EVT_MENU, ID_COLLABELVERTALIGN) {|ev| self.SetColLabelVertAlignment(ev) }
		self.Bind(wx.EVT_MENU, ID_GRIDLINECOLOUR) {|ev| self.SetGridLineColour(ev) }
		self.Bind(wx.EVT_MENU, ID_INSERTROW) {|ev| self.InsertRow(ev) }
		self.Bind(wx.EVT_MENU, ID_INSERTCOL) {|ev| self.InsertCol(ev) }
		self.Bind(wx.EVT_MENU, ID_DELETEROW) {|ev| self.DeleteSelectedRows(ev) }
		self.Bind(wx.EVT_MENU, ID_DELETECOL) {|ev| self.DeleteSelectedCols(ev) }
		self.Bind(wx.EVT_MENU, ID_CLEARGRID) {|ev| self.ClearGrid(ev) }
		self.Bind(wx.EVT_MENU, ID_SELCELLS) {|ev| self.SelectCells(ev) }
		self.Bind(wx.EVT_MENU, ID_SELROWS) {|ev| self.SelectRows(ev) }
		self.Bind(wx.EVT_MENU, ID_SELCOLS) {|ev| self.SelectCols(ev) }
		self.Bind(wx.EVT_MENU, ID_SET_CELL_FG_COLOUR) {|ev| self.SetCellFgColour(ev) }
		self.Bind(wx.EVT_MENU, ID_SET_CELL_BG_COLOUR) {|ev| self.SetCellBgColour(ev) }
		self.Bind(wx.EVT_MENU, wx.ID_ABOUT) {|ev| self.About(ev) }
		self.Bind(wx.EVT_MENU, wx.ID_EXIT) {|ev| self.OnQuit(ev) }
		self.Bind(wx.EVT_MENU, ID_VTABLE) {|ev| self.OnVTable(ev) }
		self.Bind(wx.EVT_MENU, ID_BUGS_TABLE) {|ev| self.OnBugsTable(ev) }
		self.Bind(wx.EVT_MENU, ID_SMALL_GRID) {|ev| self.OnSmallGrid(ev) }
		self.Bind(wx.EVT_MENU, ID_DESELECT_CELL) {|ev| self.DeselectCell(ev) }
		self.Bind(wx.EVT_MENU, ID_DESELECT_COL) {|ev| self.DeselectCol(ev) }
		self.Bind(wx.EVT_MENU, ID_DESELECT_ROW) {|ev| self.DeselectRow(ev) }
		self.Bind(wx.EVT_MENU, ID_DESELECT_ALL) {|ev| self.DeselectAll(ev) }
		self.Bind(wx.EVT_MENU, ID_SELECT_CELL) {|ev| self.SelectCell(ev) }
		self.Bind(wx.EVT_MENU, ID_SELECT_COL) {|ev| self.SelectCol(ev) }
		self.Bind(wx.EVT_MENU, ID_SELECT_ROW) {|ev| self.SelectRow(ev) }
		self.Bind(wx.EVT_MENU, ID_SELECT_ALL) {|ev| self.SelectAll(ev) }
		self.Bind(wx.EVT_MENU, ID_SELECT_UNSELECT) {|ev| self.OnAddToSelectToggle(ev) }
		self.Bind(wx.EVT_MENU, ID_SHOW_SELECTION) {|ev| self.OnShowSelection(ev) }
		self.Bind(wx.EVT_MENU, ID_SET_HIGHLIGHT_WIDTH) {|ev| self.OnSetHighlightWidth(ev) }
		self.Bind(wx.EVT_MENU, ID_SET_RO_HIGHLIGHT_WIDTH) {|ev| self.OnSetROHighlightWidth(ev) }
		self.Bind(wx.EVT_GRID_LABEL_LEFT_CLICK) {|ev| self.OnLabelLeftClick(ev) }
		self.Bind(wx.EVT_GRID_CELL_LEFT_CLICK) {|ev| self.OnCellLeftClick(ev) }
		self.Bind(wx.EVT_GRID_ROW_SIZE) {|ev| self.OnRowSize(ev) }
		self.Bind(wx.EVT_GRID_COL_SIZE) {|ev| self.OnColSize(ev) }
		self.Bind(wx.EVT_GRID_SELECT_CELL) {|ev| self.OnSelectCell(ev) }
		self.Bind(wx.EVT_GRID_RANGE_SELECT) {|ev| self.OnRangeSelected(ev) }
		self.Bind(wx.EVT_GRID_CELL_CHANGE) {|ev| self.OnCellValueChanged(ev) }
		//self.Bind(wx.EVT_GRID_CELL_BEGIN_DRAG) {|ev| self.OnCellBeginDrag(ev) }
		self.Bind(wx.EVT_GRID_EDITOR_SHOWN) {|ev| self.OnEditorShown(ev) }
		self.Bind(wx.EVT_GRID_EDITOR_HIDDEN) {|ev| self.OnEditorHidden(ev) }
	}
	SetDefaults() = {
		self.GetMenuBar().Check(ID_TOGGLEROWLABELS, true)
		self.GetMenuBar().Check(ID_TOGGLECOLLABELS, true)
		self.GetMenuBar().Check(ID_TOGGLEEDIT, true)
		self.GetMenuBar().Check(ID_TOGGLEROWSIZING, true)
		self.GetMenuBar().Check(ID_TOGGLECOLSIZING, true)
		self.GetMenuBar().Check(ID_TOGGLECOLMOVING, false)
		self.GetMenuBar().Check(ID_TOGGLEGRIDSIZING, true)
		self.GetMenuBar().Check(ID_TOGGLEGRIDDRAGCELL, false)
		self.GetMenuBar().Check(ID_TOGGLEGRIDLINES, true)
		self.GetMenuBar().Check(ID_CELLOVERFLOW, true)
	}
	ToggleRowLabels(ev:wx.CommandEvent) = {
		if (self.GetMenuBar().IsChecked(ID_TOGGLEROWLABELS)) {
			self.grid.SetRowLabelSize(self.grid.GetDefaultRowLabelSize())
		} else {
			self.grid.SetRowLabelSize(0)
		}
	}
	ToggleColLabels(ev:wx.CommandEvent) = {
		if (self.GetMenuBar().IsChecked(ID_TOGGLECOLLABELS)) {
			self.grid.SetColLabelSize(self.grid.GetDefaultColLabelSize())
		} else {
			self.grid.SetColLabelSize(0)
		}
	}
	ToggleEditing(ev:wx.CommandEvent) = {
		self.grid.EnableEditing(self.GetMenuBar().IsChecked(ID_TOGGLEEDIT))
	}
	ToggleRowSizing(ev:wx.CommandEvent) = {
		self.grid.EnableDragRowSize(self.GetMenuBar().IsChecked(ID_TOGGLEROWSIZING))
	}
	ToggleColSizing(ev:wx.CommandEvent) = {
		self.grid.EnableDragColSize(self.GetMenuBar().IsChecked(ID_TOGGLECOLSIZING))
	}
	ToggleColMoving(ev:wx.CommandEvent) = {
		self.grid.EnableDragColMove(self.GetMenuBar().IsChecked(ID_TOGGLECOLMOVING))
	}
	ToggleGridSizing(ev:wx.CommandEvent) = {
		self.grid.EnableDragGridSize(self.GetMenuBar().IsChecked(ID_TOGGLEGRIDSIZING))
	}
	ToggleGridDragCell(ev:wx.CommandEvent) = {
		self.grid.EnableDragCell(self.GetMenuBar().IsChecked(ID_TOGGLEGRIDDRAGCELL))
	}
	ToggleGridLines(ev:wx.CommandEvent) = {
		self.grid.EnableGridLines(self.GetMenuBar().IsChecked(ID_TOGGLEGRIDLINES))
	}
	OnSetHighlightWidth(ev:wx.CommandEvent) = {
		choices = format('%d', 0..10):list
		dlg = wx.SingleChoiceDialog(self, 'Choose the thickness of the highlight pen:',
				'Pen Width', choices)
		current = self.grid.GetCellHighlightPenWidth()
		dlg.SetSelection(current)
		if (dlg.ShowModal() == wx.ID_OK) {
			self.grid.SetCellHighlightPenWidth(dlg.GetSelection())
		}
	}
	OnSetROHighlightWidth(ev:wx.CommandEvent) = {
		choices = format('%d', 0..10):list
		dlg = wx.SingleChoiceDialog(self, 'Choose the thickness of the highlight pen:',
				'Pen Width', choices)
		current = self.grid.GetCellHighlightROPenWidth()
		dlg.SetSelection(current)
		if (dlg.ShowModal() == wx.ID_OK) {
			self.grid.SetCellHighlightROPenWidth(dlg.GetSelection())
		}
	}
	AutoSizeCols(ev:wx.CommandEvent) = {
		self.grid.AutoSizeColumns()
		self.grid.Refresh()
	}
	CellOverflow(ev:wx.CommandEvent) = {
		self.grid.SetDefaultCellOverflow(ev.IsChecked())
		self.grid.Refresh()
	}
	ResizeCell(ev:wx.CommandEvent) = {
		if (ev.IsChecked()) {
			self.grid.SetCellSize(7, 1, 5, 5)
		} else {
			self.grid.SetCellSize(7, 1, 1, 5)
		}
    	self.grid.Refresh()
    }
	SetLabelColour(ev:wx.CommandEvent) = {
		dlg = wx.ColourDialog(nil)
		if (dlg.ShowModal() == wx.ID_OK) {
			retData = dlg.GetColourData()
			colour = retData.GetColour()
			self.grid.SetLabelBackgroundColour(colour)
		}
	}
	SetLabelTextColour(ev:wx.CommandEvent) = {
		dlg = wx.ColourDialog(nil)
		if (dlg.ShowModal() == wx.ID_OK) {
			retData = dlg.GetColourData()
			colour = retData.GetColour()
			self.grid.SetLabelTextColour(colour)
		}
	}
	SetLabelFont(ev:wx.CommandEvent) = {
		font = wx.GetFontFromUser(self)
		if (font.IsOk()) {
			self.grid.SetLabelFont(font)
		}
	}
	SetRowLabelHorizAlignment(ev:wx.CommandEvent) = {
		[horiz, vert] = self.grid.GetRowLabelAlignment()
		if (horiz == wx.ALIGN_LEFT) {
			horiz = wx.ALIGN_CENTRE
		} elsif (horiz = wx.ALIGN_CENTRE) {
			horiz = wx.ALIGN_RIGHT
		} elsif (horiz == wx.ALIGN_RIGHT) {
			horiz = wx.ALIGN_LEFT
		}
		self.grid.SetRowLabelAlignment(horiz, vert)
	}
	SetRowLabelVertAlignment(ev:wx.CommandEvent) = {
		[horiz, vert] = self.grid.GetRowLabelAlignment()
		if (vert == wx.ALIGN_TOP) {
			vert = wx.ALIGN_CENTRE
		} elsif (vert = wx.ALIGN_CENTRE) {
			vert = wx.ALIGN_BOTTOM
		} elsif (vert == wx.ALIGN_BOTTOM) {
			vert = wx.ALIGN_TOP
		}
		self.grid.SetRowLabelAlignment(horiz, vert)
	}
	SetColLabelHorizAlignment(ev:wx.CommandEvent) = {
		[horiz, vert] = self.grid.GetColLabelAlignment()
		if (horiz == wx.ALIGN_LEFT) {
			horiz = wx.ALIGN_CENTRE
		} elsif (horiz = wx.ALIGN_CENTRE) {
			horiz = wx.ALIGN_RIGHT
		} elsif (horiz == wx.ALIGN_RIGHT) {
			horiz = wx.ALIGN_LEFT
		}
		self.grid.SetColLabelAlignment(horiz, vert)
	}
	SetColLabelVertAlignment(ev:wx.CommandEvent) = {
		[horiz, vert] = self.grid.GetColLabelAlignment()
		if (vert == wx.ALIGN_TOP) {
			vert = wx.ALIGN_CENTRE
		} elsif (vert = wx.ALIGN_CENTRE) {
			vert = wx.ALIGN_BOTTOM
		} elsif (vert == wx.ALIGN_BOTTOM) {
			vert = wx.ALIGN_TOP
		}
		self.grid.SetColLabelAlignment(horiz, vert)
	}
	SetGridLineColour(ev:wx.CommandEvent) = {
		dlg = wx.ColourDialog(nil)
		if (dlg.ShowModal() == wx.ID_OK) {
			retData = dlg.GetColourData()
			colour = retData.GetColour()
			self.grid.SetGridLineColour(colour)
		}
	}
	InsertRow(ev:wx.CommandEvent) = {
		self.grid.InsertRows(self.grid.GetGridCursorRow(), 1)
	}
	InsertCol(ev:wx.CommandEvent) = {
		self.grid.InsertCols(self.grid.GetGridCursorCol(), 1)
	}
	DeleteSelectedRows(ev:wx.CommandEvent) = {
		if (self.grid.IsSelection()) {
			self.grid.BeginBatch()
			n = 0
			while (n < self.grid.GetNumberRows()) {
				if (self.grid.IsInSelection(n, 0)) {
					self.grid.DeleteRows(n, 1)
				} else {
					n += 1
				}
			}
			self.grid.EndBatch()
		}
	}
	DeleteSelectedCols(ev:wx.CommandEvent) = {
		if (self.grid.IsSelection()) {
			self.grid.BeginBatch()
			n = 0
			while (n < self.grid.GetNumberCols()) {
				if (self.grid.IsInSelection(0, n)) {
					self.grid.DeleteCols(n, 1)
				} else {
					n += 1
				}
			}
			self.grid.EndBatch()
		}
	}
	ClearGrid(ev:wx.CommandEvent) = {
		self.grid.ClearGrid()
	}
	SelectCells(ev:wx.CommandEvent) = {
		self.grid.SetSelectionMode(wx.Grid.wxGridSelectCells)
	}
	SelectRows(ev:wx.CommandEvent) = {
		self.grid.SetSelectionMode(wx.Grid.wxGridSelectRows)
	}
	SelectCols(ev:wx.CommandEvent) = {
		self.grid.SetSelectionMode(wx.Grid.wxGridSelectColumns)
	}
	SetCellFgColour(ev:wx.CommandEvent) = {
		col = wx.GetColourFromUser(self)
		if (col.IsOk()) {
			self.grid.SetDefaultCellTextColour(col)
			self.grid.Refresh()
		}
	}
	SetCellBgColour(ev:wx.CommandEvent) = {
		col = wx.GetColourFromUser(self)
		if (col.IsOk()) {
			// Check the new Refresh function by passing it a rectangle
			// which exactly fits the grid.
			pt = wx.Point(0, 0)
			size = self.grid.GetSize()
			r = wx.Rect(pt.x, pt.y, size.GetWidth(), size.GetHeight())
			self.grid.SetDefaultCellBackgroundColour(col)
			self.grid.Refresh(true, r)
		}
	}
	DeselectCell(ev:wx.CommandEvent) = {
		self.grid.DeselectCell(3, 1)
	}
	DeselectCol(ev:wx.CommandEvent) = {
		self.grid.DeselectCol(2)
	}
	DeselectRow(ev:wx.CommandEvent) = {
		self.grid.DeselectRow(2)
	}
	DeselectAll(ev:wx.CommandEvent) = {
		self.grid.ClearSelection()
	}
	SelectCell(ev:wx.CommandEvent) = {
		self.grid.SelectBlock(3, 1, 3, 1, self.m_addToSel)
	}
	SelectCol(ev:wx.CommandEvent) = {
		self.grid.SelectCol(2, self.m_addToSel)
	}
	SelectRow(ev:wx.CommandEvent) = {
		self.grid.SelectRow(2, self.m_addToSel)
	}
	SelectAll(ev:wx.CommandEvent) = {
		self.grid.SelectAll()
	}
	OnAddToSelectToggle(ev:wx.CommandEvent) = {
		self.m_addToSel = ev.IsChecked()
	}
	OnLabelLeftClick(ev:wx.GridEvent) = {
		logBuf = ''
		if (ev.GetRow() != -1) {
			logBuf += 'Left click on row label ' + ev.GetRow()
		} elsif (ev.GetCol() != -1) {
			logBuf += 'Left click on col label ' + ev.GetCol()
		} else {
			logBuf += 'Left click on corner label'
		}
		if (ev.ShiftDown()) {
			logBuf += ' (shift down)'
		}
		if (ev.ControlDown()) {
			logBuf += ' (control down)'
		}
		wx.LogMessage('%s', logBuf)
		// you must call event skip if you want default grid processing
		//
		ev.Skip()
	}
	OnCellLeftClick(ev:wx.GridEvent) = {
		wx.LogMessage('Left click at row %d, col %d', ev.GetRow(), ev.GetCol())
		// you must call event skip if you want default grid processing
		// (cell highlighting etc.)
		//
		ev.Skip()
	}
	OnRowSize(ev:wx.GridSizeEvent) = {
		wx.LogMessage('Resized row %d', ev.GetRowOrCol())
		ev.Skip()
	}
	OnColSize(ev:wx.GridSizeEvent) = {
		wx.LogMessage('Resized col %d', ev.GetRowOrCol())
		ev.Skip()
	}
	OnShowSelection(ev:wx.CommandEvent) = {
		// max number of elements to dump -- otherwise it can take too much time
		countMax = 100
		rows = false
		mode = self.grid.GetSelectionMode()
		if (mode == wx.Grid.wxGridSelectCells) {
			cells = wxGridCellCoordsArray(self.grid.GetSelectedCells())
			count = cells.size()
			wx.LogMessage('%lu cells selected:', count)
			if (count > countMax) {
				wx.LogMessage('[too many selected cells, ' \
                                 'showing only the first %lu',
							countMax)
				count = countMax
			}
			repeat (count) {|n|
				c = cells[n]
				wx.LogMessage('  selected cell %lu: (%d, %d)',
		                                 n, c.GetCol(), c.GetRow())
			}
		} elsif (mode == wx.Grid.wxGridSelectRows || \
									mode == wx.Grid.wxGridSelectColumns) {
			rows = (mode == wx.Grid.wxGridSelectRows)
			if (rows) {
				plural = 'rows'
				single = 'row'
			} else { // columns
				plural = 'columns'
				single = 'column'
			}
			sels = if (rows) {
				self.grid.GetSelectedRows()
			} else {
				self.grid.GetSelectedCols()
			}
			count = sels.size()
			wx.LogMessage('%lu %s selected:', count, plural)
			if (count > countMax) {
				wx.LogMessage('[too many selected %s, ' \
								'showing only the first %lu]',
							plural, countMax)
				count = countMax
			}
			repeat (count) {|n|
				wx.LogMessage('  selected %s %lu: %d',
										single, n, sels[n])
			}
		} else {
			wx.FAIL_MSG('unknown wxGrid selection mode')
		}
    }
	OnSelectCell(ev:wx.GridEvent) = {
		logBuf = ''
		if (ev.Selecting()) {
			logBuf += 'Selected '
		} else {
			logBuf += 'Deselected '
		}
		logBuf += 'cell at row ' + ev.GetRow() \
				+ ' col ' + ev.GetCol() \
				+ ' ( ControlDown: ' + if (ev.ControlDown()) {'T'} else {'F'} \
				+ ', ShiftDown: ' + if (ev.ShiftDown()) {'T'} else {'F'} \
				+ ', AltDown: ' + if (ev.AltDown()) {'T'} else {'F'} \
				+ ', MetaDown: ' + if (ev.MetaDown()) {'T'} else {'F'} + ' )'
		//Indicate whether this column was moved
		if (self.grid.GetColPos(ev.GetCol()) != ev.GetCol()) {
			logBuf += ' *** Column moved, current position: ' + self.grid.GetColPos(ev.GetCol())
		}
		wx.LogMessage('%s', logBuf)
		// you must call Skip() if you want the default processing
		// to occur in wxGrid
		ev.Skip()
	}
	OnRangeSelected(ev:wx.GridRangeSelectEvent) = {
		logBuf = ''
		if (ev.Selecting()) {
			logBuf += 'Selected '
		} else {
			logBuf += 'Deselected '
		}
		logBuf += 'cells from row ' + ev.GetTopRow() \
				+ ' col ' + ev.GetLeftCol() \
				+ ' to row ' + ev.GetBottomRow() \
				+ ' col ' + ev.GetRightCol() \
				+ ' ( ControlDown: ' + if (ev.ControlDown()) {'T'} else {'F'} \
				+ ', ShiftDown: ' + if (ev.ShiftDown()) {'T'} else {'F'} \
				+ ', AltDown: ' + if (ev.AltDown()) {'T'} else {'F'} \
				+ ', MetaDown: ' + if (ev.MetaDown()) {'T'} else {'F'} + ' )'
		wx.LogMessage('%s', logBuf)
		ev.Skip()
	}
	OnCellValueChanged(ev:wx.GridEvent) = {
		row = ev.GetRow(),
		col = ev.GetCol()
		wx.LogMessage('Value changed for cell at row %d, col %d: now \"%s\"',
					row, col, self.grid.GetCellValue(row, col))
		ev.Skip()
	}
	OnCellBeginDrag(ev:wx.GridEvent) = {
		wx.LogMessage('Got request to drag cell at row %d, col %d',
					ev.GetRow(), ev.GetCol())
		ev.Skip()
	}
	OnEditorShown(ev:wx.GridEvent) = {
		if ((ev.GetCol() == 4) && \
			(ev.GetRow() == 0) && \
			(wx.MessageBox('Are you sure you wish to edit this cell',
                   'Checking', wx.YES_NO) == wx.NO)) {
			ev.Veto()
			return
		}
		wx.LogMessage('Cell editor shown.')
		ev.Skip()
	}
	OnEditorHidden(ev:wx.GridEvent) = {
		if ((ev.GetCol() == 4) && \
			(ev.GetRow() == 0) && \
			(wx.MessageBox('Are you sure you wish to finish editing this cell',
					'Checking', wx.YES_NO) == wx.NO)) {
			ev.Veto()
			return
		}
		wx.LogMessage('Cell editor hidden.')
		ev.Skip()
	}
	About(ev:wx.CommandEvent) = {
		wx.MessageBox('\n\nwxGrid demo \n\n' \
						'Michael Bedward, Julian Smart, Vadim Zeitlin',
						'About',
						wx.OK)
	}
	OnQuit(ev:wx.CommandEvent) = {
		self.Close(true)
	}
	OnBugsTable(ev:wx.CommandEvent) = {
		frame = BugsGridFrame()
		frame.Show(true)
	}
	OnSmallGrid(ev:wx.CommandEvent) = {
		frame = wx.Frame(nil, wx.ID_ANY, 'A Small Grid',
                                 wx.DefaultPosition, wx.Size(640, 480))
		panel = wx.Panel(frame, wx.ID_ANY)
		grid = wx.Grid(panel, wx.ID_ANY, wx.Point(10,10), wx.Size(400, 400),
								wx.WANTS_CHARS | wx.SIMPLE_BORDER)
		grid.CreateGrid(3, 3)
		frame.Show(true)
	}
	s_sizeGrid = 10000
	OnVTable(ev:wx.CommandEvent) = {
		GridFrame.s_sizeGrid = wx.GetNumberFromUser('Size of the table to create',
									'Size: ',
									'wxGridDemo question',
									GridFrame.s_sizeGrid,
									0, 32000, self)
		if (GridFrame.s_sizeGrid != -1) {
			win = BigGridFrame(s_sizeGrid)
			win.Show(true)
		}
    }
}

// ----------------------------------------------------------------------------
// MyGridCellRenderer
// ----------------------------------------------------------------------------

// do something that the default renderer doesn't here just to show that it is
// possible to alter the appearance of the cell beyond what the attributes
// allow
MyGridCellRenderer = class(wx.GridCellStringRenderer) {
	Draw(grid:wx.Grid, attr:wx.GridCellAttr, dc:wx.DC, rect:wx.Rect, row:number, col:number, isSelected:boolean) = {
		super(self).Draw(grid, attr, dc, rect, row, col, isSelected)
		dc.SetPen(wx.GREEN_PEN)
		dc.SetBrush(wx.TRANSPARENT_BRUSH)
		dc.DrawEllipseRect(rect)
	}
}

// ----------------------------------------------------------------------------
// MyGridCellAttrProvider
// ----------------------------------------------------------------------------

MyGridCellAttrProvider = class(wx.GridCellAttrProvider) {
	__init__() = {
		self.m_attrForOddRows = wx.GridCellAttrEmpty()
		self.m_attrForOddRows.SetBackgroundColour(wx.LIGHT_GREY)
	}
	__del__() = {
		self.m_attrForOddRows.DecRef()
	}
	GetAttr(row:number, col:number, kind:number) = {
		attr = super(self).GetAttr(row, col, kind)
		if (row % 2 == 1) {
			if (!attr) {
				attr = self.m_attrForOddRows
				attr.IncRef()
			} else {
				if (!attr.HasBackgroundColour()) {
					attrNew = attr.clone()
					attr.DecRef()
					attr = attrNew
					attr.SetBackgroundColour(wx.LIGHT_GREY)
				}
			}
		}
		attr
	}
}

// ============================================================================
// BigGridFrame and BigGridTable:  Sample of a non-standard table
// ============================================================================

BigGridTable = class(wx.GridTableBase) {
	__init__(sizeGrid:number) = {
		self.m_sizeGrid = sizeGrid
	}
	GetNumberRows() = {
		self.m_sizeGrid
	}
	GetNumberCols() = {
		self.m_sizeGrid
	}
	GetValue(row:number, col:number) = {
		format('(%d, %d)', row, col)
	}
	SetValue(row:number, col:number, value:string) = { /* ignore */ }
	IsEmptyCell(row:number, col:number) = {
		false
	}
}

BigGridFrame = class(wx.Frame) {
	__init__(sizeGrid:number) = {|nil, wx.ID_ANY, 'Plugin Virtual Table', \
										wx.DefaultPosition, wx.Size(500, 450)|
		self.m_grid = wx.Grid(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize)
		self.m_table = BigGridTable(sizeGrid)
		// VZ: I don't understand why this slows down the display that much,
		//     must profile it...
		//self.m_table.SetAttrProvider(MyGridCellAttrProvider())
		self.m_grid.SetTable(self.m_table, true)
	}
}

// ============================================================================
// BugsGridFrame: a "realistic" table
// ============================================================================

// ----------------------------------------------------------------------------
// bugs table data
// ----------------------------------------------------------------------------
[Col_Id,
Col_Summary,
Col_Severity,
Col_Priority,
Col_Platform,
Col_Opened,
Col_Max] = 0..

[Sev_Wish,
Sev_Minor,
Sev_Normal,
Sev_Major,
Sev_Critical,
Sev_Max] = 0..

severities = [
	'wishlist',
	'minor',
	'normal',
	'major',
	'critical',
]

BugsGridData = struct(id:number, summary:string, severity:number,
							prio:number, platform:string, opened:boolean)

gs_dataBugsGrid = @(BugsGridData) {
	{ 18, 'foo doesn\'t work', Sev_Major, 1, 'wxMSW', true },
	{ 27, 'bar crashes', Sev_Critical, 1, 'all', false },
	{ 45, 'printing is slow', Sev_Minor, 3, 'wxMSW', true },
	{ 68, 'Rectangle() fails', Sev_Normal, 1, 'wxMSW', false },
}

headers = [
	'Id',
	'Summary',
	'Severity',
	'Priority',
	'Platform',
	'Opened?',
]

// ----------------------------------------------------------------------------
// BugsGridTable
// ----------------------------------------------------------------------------

BugsGridTable = class(wx.GridTableBase) {
	GetTypeName(row:number, col:number) = {
		if (col == Col_Id || col == Col_Priority) {
			return(wx.GRID_VALUE_NUMBER)
		} elsif (col == Col_Severity || col == Col_Summary) {
			return(format('%s:80', wx.GRID_VALUE_STRING))
		} elsif (col == Col_Platform) {
			return(format('%s:all,MSW,GTK,other', wx.GRID_VALUE_CHOICE))
		} elsif (col == Col_Opened) {
			return(wx.GRID_VALUE_BOOL)
	    }
		wx.FAIL_MSG('unknown column')
		wx.EmptyString
	}
	GetNumberRows() = {
		gs_dataBugsGrid.len()
	}
	GetNumberCols() = {
		Col_Max
	}
	IsEmptyCell(row:number, col:number) = {
		false
	}
	GetValue(row:number, col:number) = {
		gd = gs_dataBugsGrid[row]
		if (col == Col_Id) {
			return(format('%d', gd.id))
		} elsif (col == Col_Priority) {
			return(format('%d', gd.prio))
		} elsif (col == Col_Opened) {
			return(if (gd.opened) {'1'} else {'0'})
		} elsif (col == Col_Severity) {
			return(severities[gd.severity])
		} elsif (col == Col_Summary) {
			return(gd.summary)
		} elsif (col == Col_Platform) {
			return(gd.platform)
		}
		wx.EmptyString
	}
	SetValue(row:number, col:number, value:string) = {
		gd = gs_dataBugsGrid[row]
		if (col in [Col_Id, Col_Priority, Col_Opened]) {
			wx.FAIL_MSG('unexpected column')
		} elsif (col == Col_Severity) {
			n = severities.find(value)
			if (n) {
				gd.severity = n
			} else {
				wx.LogWarning("Invalid severity value '%s'.", value)
				gd.severity = Sev_Normal
			}
		} elsif (col == Col_Summary) {
			gd.summary = value
		} elsif (col == Col_Platform) {
			gd.platform = value
		}
	}
	CanGetValueAs(row:number, col:number, typeName:string) = {
		if (typeName == wx.GRID_VALUE_STRING) {
			true
		} elsif (typeName == wx.GRID_VALUE_BOOL) {
			col == Col_Opened
		} elsif (typeName == wx.GRID_VALUE_NUMBER) {
			col in [Col_Id, Col_Priority, Col_Severity]
		} else {
			false
		}
	}
	CanSetValueAs(row:number, col:number, typeName:string) = {
		self.CanGetValueAs(row, col, typeName)
	}
	GetValueAsLong(row:number, col:number) = {
		gd = gs_dataBugsGrid[row]
		if (col == Col_Id) {
			gd.id
		} elsif (col == Col_Priority) {
			gd.prio
		} elsif (col == Col_Severity) {
			gd.severity
		} else {
			wx.FAIL_MSG('unexpected column')
			-1
		}
	}
	GetValueAsBool(row:number, col:number) = {
		if (col == Col_Opened) {
			gs_dataBugsGrid[row].opened
		} else {
			wx.FAIL_MSG('unexpected column')
			false
		}
	}
	SetValueAsLong(row:number, col:number, value:number) = {
		gd = gs_dataBugsGrid[row]
		if (col == Col_Priority) {
			gd.prio = value
		} else {
			wx.FAIL_MSG('unexpected column')
		}
	}
	SetValueAsBool(row:number, col:number, value:boolean) = {
		if (col == Col_Opened) {
			gs_dataBugsGrid[row].opened = value
		} else {
			wx.FAIL_MSG('unexpected column')
		}
	}
	GetColLabelValue(col:number) = {
		headers[col]
	}
}

// ----------------------------------------------------------------------------
// BugsGridFrame
// ----------------------------------------------------------------------------

BugsGridFrame = class(wx.Frame) {
	__init__() = {|nil, wx.ID_ANY, 'Bugs table'|
		grid = wx.Grid(self, wx.ID_ANY, wx.DefaultPosition)
		table = BugsGridTable()
		table.SetAttrProvider(MyGridCellAttrProvider())
		grid.SetTable(table, true)
		attrRO = wx.GridCellAttrEmpty()
		attrRangeEditor = wx.GridCellAttrEmpty()
		attrCombo = wx.GridCellAttrEmpty()
		attrRO.SetReadOnly()
		attrRangeEditor.SetEditor(wx.GridCellNumberEditor(1, 5))
		attrCombo.SetEditor(wx.GridCellChoiceEditor(severities))
		grid.SetColAttr(Col_Id, attrRO)
		grid.SetColAttr(Col_Priority, attrRangeEditor)
		grid.SetColAttr(Col_Severity, attrCombo)
		grid.Fit()
		self.SetClientSize(grid.GetSize())
	}
}

wx.IMPLEMENT_APP(GridApp)

#!/usr/bin/env gura
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

EditorCtrl = class(wx.StyledTextCtrl) {
	__init__(args*) = {|args*|
		// StyleSetFont(styleNum:number, font:wx.Font):void
		// styleNum:
		// - wx.STC_STYLE_DEFAUT
		// - wx.STC_STYLE_LINENUMBER
		// - wx.STC_STYLE_BRACELIGHT
		// - wx.STC_STYLE_BRACEBAD
		// - wx.STC_STYLE_CONTROLCHAR
		// - wx.STC_STYLE_INDENTGUIDE
		// - wx.STC_STYLE_CALLTIP
		// - wx.STC_STYLE_LASTPREDEFINED
		//this.StyleSetFont(wx.STC_STYLE_DEFAULT,
		//				  wx.Font(14, wx.FONTFAMILY_TELETYPE,
		//						  wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		// SetMarginType(margin:number, marginType:number):void
		// margin
		// 0 to 4: By default:
		// - 0 for NUMBER, given 0 pixel
		// - 1 for non-folding SYMBOL, given 16 pixels
		// - 2 for folding SYMBOL, given 0 pixel
		// marginType
		// - wx.STC_MARGIN_SYMBOL
		// - wx.STC_MARGIN_NUMBER
		// - wx.STC_MARGIN_BACK
		// - wx.STC_MARGIN_FORE
		// - wx.STC_MARGIN_TEXT
		// - wx.STC_MARGIN_RTEXT
		// SetMarginWidth(margin:number, pixelWidth:number):void
		this.SetMarginWidth(0, 50)
		this.SetMarginWidth(2, 20)
		this.SetMarginWidth(3, 20)
		this.SetMarginWidth(4, 20)


		// StyleSetSpec(styleNum:number, spec:string):void
		// styleNum
		// - wx.STC_STYLE_DEFAULT
		// - wx.STC_STYLE_LINENUMBER
		// - wx.STC_STYLE_BRACELIGHT
		// - wx.STC_STYLE_BRACEBAD
		// - wx.STC_STYLE_CONTROLCHAR
		// - wx.STC_STYLE_INDENTGUIDE
		// - wx.STC_STYLE_CALLTIP
		// - wx.STC_STYLE_LASTPREDEFINED
		if (sys.platform == `mswin) {
			this.StyleSetSpec(wx.STC_STYLE_DEFAULT,
						  'fore:#888800,back:#ffffff,face:Courier,size:12')
		} elsif (sys.platform == `darwin) {
			this.StyleSetSpec(wx.STC_STYLE_DEFAULT,
						  'fore:#888800,back:#ffffff,face:Menlo,size:12')
		}
		this.StyleSetSpec(wx.STC_STYLE_LINENUMBER, 'fore:#888888,back:#444444')
		// ConvertEOLs(eolMode:number):void
		// eolMode
		// - wx.STC_EOL_CRLF
		// - wx.STC_EOL_CR
		// - wx.STC_EOL_LF
		this.ConvertEOLs(wx.STC_EOL_LF)
		// SetIndentationGuides(indentView:number):void
		// indentView
		// - wx.STC_IV_NONE
		// - wx.STC_IV_REAL
		// - wx.STC_IV_LOOKFORWARD
		// - wx.STC_IV_LOOKBOTH
		this.SetIndentationGuides(wx.STC_IV_REAL)
		// SetViewEOL(visible:boolean):void
		this.SetViewEOL(false)
		// SetTabWidth(tabWidth:number):void
		this.SetTabWidth(4)
		// SetLexer(lexer:number):void
		// lexer
		// - wx.STC_LEX_CONTAINER
		// - wx.STC_LEX_NULL
		// - wx.STC_LEX_PYTHON
		// - wx.STC_LEX_CPP
		// - wx.STC_LEX_HTML
		// - wx.STC_LEX_XML
		// - wx.STC_LEX_PERL
		// - wx.STC_LEX_SQL
		// - wx.STC_LEX_VB
		// - wx.STC_LEX_PROPERTIES
		// - wx.STC_LEX_ERRORLIST
		// - wx.STC_LEX_MAKEFILE
		// - wx.STC_LEX_BATCH
		// - wx.STC_LEX_XCODE
		// - wx.STC_LEX_LATEX
		// - wx.STC_LEX_LUA
		// - wx.STC_LEX_DIFF
		// - wx.STC_LEX_CONF
		// - wx.STC_LEX_PASCAL
		// - wx.STC_LEX_AVE
		// - wx.STC_LEX_ADA
		// - wx.STC_LEX_LISP
		// - wx.STC_LEX_RUBY
		// - wx.STC_LEX_EIFFEL
		// - wx.STC_LEX_EIFFELKW
		// - wx.STC_LEX_TCL
		// - wx.STC_LEX_NNCRONTAB
		// - wx.STC_LEX_BULLANT
		// - wx.STC_LEX_VBSCRIPT
		// - wx.STC_LEX_BAAN
		// - wx.STC_LEX_MATLAB
		// - wx.STC_LEX_SCRIPTOL
		// - wx.STC_LEX_ASM
		// - wx.STC_LEX_CPPNOCASE
		// - wx.STC_LEX_FORTRAN
		// - wx.STC_LEX_F77
		// - wx.STC_LEX_CSS
		// - wx.STC_LEX_POV
		// - wx.STC_LEX_LOUT
		// - wx.STC_LEX_ESCRIPT
		// - wx.STC_LEX_PS
		// - wx.STC_LEX_NSIS
		// - wx.STC_LEX_MMIXAL
		// - wx.STC_LEX_CLW
		// - wx.STC_LEX_CLWNOCASE
		// - wx.STC_LEX_LOT
		// - wx.STC_LEX_YAML
		// - wx.STC_LEX_TEX
		// - wx.STC_LEX_METAPOST
		// - wx.STC_LEX_POWERBASIC
		// - wx.STC_LEX_FORTH
		// - wx.STC_LEX_ERLANG
		// - wx.STC_LEX_OCTAVE
		// - wx.STC_LEX_MSSQL
		// - wx.STC_LEX_VERILOG
		// - wx.STC_LEX_KIX
		// - wx.STC_LEX_GUI4CLI
		// - wx.STC_LEX_SPECMAN
		// - wx.STC_LEX_AU3
		// - wx.STC_LEX_APDL
		// - wx.STC_LEX_BASH
		// - wx.STC_LEX_ASN1
		// - wx.STC_LEX_VHDL
		// - wx.STC_LEX_CAML
		// - wx.STC_LEX_BLITZBASIC
		// - wx.STC_LEX_PUREBASIC
		// - wx.STC_LEX_HASKELL
		// - wx.STC_LEX_PHPSCRIPT
		// - wx.STC_LEX_TADS3
		// - wx.STC_LEX_REBOL
		// - wx.STC_LEX_SMALLTALK
		// - wx.STC_LEX_FLAGSHIP
		// - wx.STC_LEX_CSOUND
		// - wx.STC_LEX_FREEBASIC
		// - wx.STC_LEX_INNOSETUP
		// - wx.STC_LEX_OPAL
		// - wx.STC_LEX_SPICE
		// - wx.STC_LEX_D
		// - wx.STC_LEX_CMAKE
		// - wx.STC_LEX_GAP
		// - wx.STC_LEX_PLM
		// - wx.STC_LEX_PROGRESS
		// - wx.STC_LEX_ABAQUS
		// - wx.STC_LEX_ASYMPTOTE
		// - wx.STC_LEX_R
		// - wx.STC_LEX_MAGIK
		// - wx.STC_LEX_POWERSHELL
		// - wx.STC_LEX_MYSQL
		// - wx.STC_LEX_PO
		// - wx.STC_LEX_TAL
		// - wx.STC_LEX_COBOL
		// - wx.STC_LEX_TACL
		// - wx.STC_LEX_SORCUS
		// - wx.STC_LEX_POWERPRO
		// - wx.STC_LEX_NIMROD
		// - wx.STC_LEX_SML
		// - wx.STC_LEX_MARKDOWN
		// - wx.STC_LEX_TXT2TAGS
		// - wx.STC_LEX_A68K
		// - wx.STC_LEX_MODULA
		// - wx.STC_LEX_COFFEESCRIPT
		// - wx.STC_LEX_TCMD
		// - wx.STC_LEX_AVS
		// - wx.STC_LEX_ECL
		// - wx.STC_LEX_OSCRIPT
		// - wx.STC_LEX_VISUALPROLOG
		// - wx.STC_LEX_AUTOMATIC
		this.SetLexer(wx.STC_LEX_CPP)
		// SetKeyWords(keywordSet:number, keyWords:string):void
		this.SetKeyWords(0, ['if', 'else', 'for', 'while'].join(' '))
		// SetViewWhiteSpace(viewWS:number):void
		// viewWS
		// - wx.STC_WS_INVISIBLE
		// - wx.STC_WS_VISIBLEALWAYS
		// - wx.STC_WS_VISIBLEAFTERINDENT
		this.SetViewWhiteSpace(wx.STC_WS_INVISIBLE)
		// SetProperty(key:string, value:string):void
		this.SetProperty('fold', '1')
		// SetUseTabs(useTabs:boolean):void
		//this.SetUseTabs(true)

		// CmdKeyAssign(key:number, modifiers:number, cmd:number):void
		// modifiers:
		// - wx.STC_SCMOD_NORM
		// - wx.STC_SCMOD_SHIFT
		// - wx.STC_SCMOD_CTRL
		// - wx.STC_SCMOD_ALT
		// - wx.STC_SCMOD_SUPER
		// - wx.STC_SCMOD_META
		//this.CmdKeyAssign(ord('P'), wx.STC_SCMOD_ALT, wx.STC_CMD_LINEUP)
		//this.CmdKeyAssign(ord('N'), wx.STC_SCMOD_ALT, wx.STC_CMD_LINEDOWN)

		// UsePopUp(allowPopUp:boolean)
		this.UsePopUp(true)

		this.Bind(wx.EVT_KEY_DOWN) {|event|
			if (event.GetKeyCode() == wx.WXK_RETURN) {
				this.NewLineAndIndent()
			} else {
				event.Skip()
			}
		}
		this.Bind(wx.EVT_STC_CHANGE) {|event|
			//println('Change')
		}
		this.Bind(wx.EVT_STC_STYLENEEDED) {|event|
			//println('StyleNeeded')
		}
		this.Bind(wx.EVT_STC_CHARADDED) {|event|
			//println('CharAdded')
		}
		this.Bind(wx.EVT_STC_SAVEPOINTREACHED) {|event|
			//println('SavePointReached')
		}
		this.Bind(wx.EVT_STC_SAVEPOINTLEFT) {|event|
			//println('SavePointLeft')
		}
		this.Bind(wx.EVT_STC_ROMODIFYATTEMPT) {|event|
			//println('RoModifyAttempt')
		}
		this.Bind(wx.EVT_STC_KEY) {|event|
			//println('Key')
		}
		this.Bind(wx.EVT_STC_DOUBLECLICK) {|event|
			//println('DoubleClick')
		}
		this.Bind(wx.EVT_STC_UPDATEUI) {|event|
			//println('UpdateUI')
		}
		this.Bind(wx.EVT_STC_MODIFIED) {|event|
			//println('Modified')
		}
		this.Bind(wx.EVT_STC_MACRORECORD) {|event|
			//println('MacroRecord')
		}
		this.Bind(wx.EVT_STC_MARGINCLICK) {|event|
			//println('MarginClick')
		}
		this.Bind(wx.EVT_STC_NEEDSHOWN) {|event|
			//println('NeedShown')
		}
		this.Bind(wx.EVT_STC_PAINTED) {|event|
			//println('Painted')
		}
		this.Bind(wx.EVT_STC_USERLISTSELECTION) {|event|
			//println('UserListSelection')
		}
		this.Bind(wx.EVT_STC_URIDROPPED) {|event|
			//println('URIDropped')
		}
		this.Bind(wx.EVT_STC_DWELLSTART) {|event|
			//println('DwellStart')
		}
		this.Bind(wx.EVT_STC_DWELLEND) {|event|
			//println('DwellEnd')
		}
		this.Bind(wx.EVT_STC_START_DRAG) {|event|
			//println('Start_Drag')
		}
		this.Bind(wx.EVT_STC_DRAG_OVER) {|event|
			//println('Drag_Over')
		}
		this.Bind(wx.EVT_STC_DO_DROP) {|event|
			//println('Do_Drop')
		}
		this.Bind(wx.EVT_STC_ZOOM) {|event|
			//println('Zoom')
		}
		this.Bind(wx.EVT_STC_HOTSPOT_CLICK) {|event|
			//println('Hotspot_Click')
		}
		this.Bind(wx.EVT_STC_HOTSPOT_DCLICK) {|event|
			//println('Hotspot_DClick')
		}
		this.Bind(wx.EVT_STC_CALLTIP_CLICK) {|event|
			//println('CallTip_Click')
		}
		this.Bind(wx.EVT_STC_AUTOCOMP_SELECTION) {|event|
			//println('AutoComp_Selection')
		}
		this.Bind(wx.EVT_STC_INDICATOR_CLICK) {|event|
			//println('Indicator_Click')
		}
		this.Bind(wx.EVT_STC_INDICATOR_RELEASE) {|event|
			//println('Indicator_Release')
		}
		this.Bind(wx.EVT_STC_AUTOCOMP_CANCELLED) {|event|
			//println('AutoComp_Cancelled')
		}
		this.Bind(wx.EVT_STC_AUTOCOMP_CHAR_DELETED) {|event|
			//println('AutoComp_CharDeleted')
		}
		//this.Bind(wx.EVT_STC_HOTSPOT_RELEASE_CLICK) {|event|
		//	println('HotSpot_Release_Click')
		//}
	}
	NewLineAndIndent() = {
		indentSize = this.GetLineIndentation(this.GetCurrentLine())
		this.NewLine()
		this.SetLineIndentation(this.GetCurrentLine(), indentSize)
		(indentSize > 0) && this.WordRight()
	}
}

MyApp = class(wx.App) {
	OnInit() = {
		frame = MyFrame('Simple')
		frame.Show()
		true
	}
}

MyFrame = class(wx.Frame) {
	ID_StyledTextCtrl = wx.NewId()
	__init__(title:string, pos:wx.Point => wx.DefaultPosition,
			 size:wx.Size => wx.Size(640, 640)) = {|nil, wx.ID_ANY, title, pos, size|
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		EditorCtrl(this, ID_StyledTextCtrl) {|ctrl|
			ctrl.LoadFile('wx-scintilla.guraw')
			// MarkerDefine(markerNumber:number, markerSymbol:number,
			//              foreground?:wx.Colour, background?:wx.Colour):void
			ctrl.MarkerDefine(0, wx.STC_MARK_CIRCLEPLUS, 'white', 'green')
			ctrl.MarkerDefine(1, wx.STC_MARK_ARROW, 'white', 'green')
			ctrl.MarkerDefine(2, wx.STC_MARK_CHARACTER + ord('A'), 'white', 'green')
			ctrl.MarkerDefine(3, wx.STC_MARK_BOXPLUS, 'white', 'green')
			ctrl.MarkerDefine(4, wx.STC_MARK_VLINE, 'white', 'green')
			//ctrl.MarkerAdd(0, wx.STC_MARK_CIRCLE)
			// MarkerAdd(line:number, markerNumber:number)
			// - markerNumber: an integer in the range 0..31
			ctrl.MarkerAdd(0, 0)
			ctrl.MarkerAdd(1, 1)
			ctrl.MarkerAdd(2, 2)
			ctrl.MarkerAdd(3, 3)
			ctrl.MarkerAdd(4, 4)
			ctrl.MarkerAdd(5, 4)
		}
		wx.MenuBar {|menuBar|
			this.SetMenuBar(menuBar)
		}
	}
}

wx.IMPLEMENT_APP(MyApp)

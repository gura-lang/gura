#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        controls.cpp
// Purpose:     Controls wxWidgets sample
// Author:      Robert Roebling
// Modified by:
// RCS-ID:      $Id: controls.cpp 43062 2006-11-04 20:39:49Z VZ $
// Copyright:   (c) Robert Roebling, Julian Smart
// Licence:     wxWindows license
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

//----------------------------------------------------------------------
// MyApp
//----------------------------------------------------------------------

CONTROLS_QUIT = wx.ID_EXIT,
CONTROLS_ABOUT = wx.ID_ABOUT,

[
CONTROLS_TEXT,
CONTROLS_CLEAR_LOG,
] = 100..

[
// tooltip menu
CONTROLS_SET_TOOLTIP_DELAY,
CONTROLS_ENABLE_TOOLTIPS,
// panel menu
CONTROLS_ENABLE_ALL,
CONTROLS_CONTEXT_HELP
] = 200..

MyApp = class(wx.App) {
	OnInit() = {
		x = 50
        y = 50
		wx.HelpProvider.Set(wx.SimpleHelpProvider())
		frame = MyFrame('Controls wxWidgets App', x, y)
		frame.Show()
		true
	}
}

//----------------------------------------------------------------------
// MyPanel
//----------------------------------------------------------------------

ID_BOOK              = 1000
ID_LISTBOX           = 130
ID_LISTBOX_SEL_NUM   = 131
ID_LISTBOX_SEL_STR   = 132
ID_LISTBOX_CLEAR     = 133
ID_LISTBOX_APPEND    = 134
ID_LISTBOX_DELETE    = 135
ID_LISTBOX_FONT      = 136
ID_LISTBOX_ENABLE    = 137
ID_LISTBOX_SORTED    = 138
ID_CHOICE            = 120
ID_CHOICE_SEL_NUM    = 121
ID_CHOICE_SEL_STR    = 122
ID_CHOICE_CLEAR      = 123
ID_CHOICE_APPEND     = 124
ID_CHOICE_DELETE     = 125
ID_CHOICE_FONT       = 126
ID_CHOICE_ENABLE     = 127
ID_CHOICE_SORTED     = 128
ID_COMBO             = 140
ID_COMBO_SEL_NUM     = 141
ID_COMBO_SEL_STR     = 142
ID_COMBO_CLEAR       = 143
ID_COMBO_APPEND      = 144
ID_COMBO_DELETE      = 145
ID_COMBO_FONT        = 146
ID_COMBO_ENABLE      = 147
ID_COMBO_SET_TEXT    = 148
ID_RADIOBOX          = 160
ID_RADIOBOX_SEL_NUM  = 161
ID_RADIOBOX_SEL_STR  = 162
ID_RADIOBOX_FONT     = 163
ID_RADIOBOX_ENABLE   = 164
ID_RADIOBUTTON_1     = 166
ID_RADIOBUTTON_2     = 167
ID_SET_FONT          = 170
ID_GAUGE             = 180
ID_SLIDER            = 181
ID_SPIN              = 182
ID_BTNPROGRESS       = 183
ID_BUTTON_LABEL      = 184
ID_SPINCTRL          = 185
ID_BTNNEWTEXT        = 186
ID_BUTTON_TEST1      = 190
ID_BUTTON_TEST2      = 191
ID_BITMAP_BTN        = 192
ID_BITMAP_BTN_ENABLE = 193
ID_CHANGE_COLOUR     = 200
ID_SIZER_CHECK1      = 201
ID_SIZER_CHECK2      = 202
ID_SIZER_CHECK3      = 203
ID_SIZER_CHECK4      = 204
ID_SIZER_CHECK14     = 205
ID_SIZER_CHECKBIG    = 206
ID_HYPERLINK         = 300

INVALID_SELECTION = -2

MyPanel = class(wx.Panel) {
	__init__(frame:wx.Frame, x:number, y:number, w:number, h:number) = \
					{|frame, wx.ID_ANY, wx.Point(x, y), wx.Size(w, h)|
		this.m_listbox = nil
		this.m_listboxSorted = nil
		this.m_choice = nil
		this.m_choiceSorted = nil
		this.m_combo = nil
		this.m_radio = nil
		this.m_gauge = nil
		this.m_gaugeVert = nil
		this.m_slider = nil
		this.m_fontButton = nil
		this.m_lbSelectNum = nil
		this.m_lbSelectThis = nil
		this.m_spinbutton = nil
		this.m_btnProgress = nil
		this.m_spinctrl = nil
		this.m_spintext = nil
		this.m_checkbox = nil
		this.m_text = nil
		this.m_book = nil
		this.m_label = nil
		this.EventTable()
		this.m_text = wx.TextCtrl(this, wx.ID_ANY, 'This is the log window.\n',
							wx.Point(0, 250), wx.Size(100, 50), wx.TE_MULTILINE)
		this.m_logTargetOld = wx.Log.SetActiveTarget(wx.LogTextCtrl(this.m_text))
		this.m_book = wx.BookCtrl(this, ID_BOOK)
		choices = [
			'This',
			'is one of my',
			'really',
			'wonderful',
			'examples.',
		]
		// image ids
		[
			Image_List,
			Image_Choice,
			Image_Combo,
			Image_Text,
			Image_Radio,
			Image_Gauge,
			Image_Max
		] = 0..
		// fill the image list
		bmp = wx.BitmapFromXPMData(resource.list_xpm)
		imagelist = wx.ImageList(bmp.GetWidth(), bmp.GetHeight())
		imagelist.Add(bmp)
		imagelist.Add(wx.BitmapFromXPMData(resource.choice_xpm))
		imagelist.Add(wx.BitmapFromXPMData(resource.combo_xpm))
		imagelist.Add(wx.BitmapFromXPMData(resource.text_xpm))
		imagelist.Add(wx.BitmapFromXPMData(resource.radio_xpm))
		imagelist.Add(wx.BitmapFromXPMData(resource.gauge_xpm))
		this.m_book.SetImageList(imagelist)
		wx.Panel(this.m_book) {|panel|
			this.m_listbox = wx.ListBox(panel, ID_LISTBOX,
										wx.Point(10, 10), wx.Size(120, 70),
										choices, wx.LB_MULTIPLE | wx.LB_ALWAYS_SB)
			this.m_listboxSorted = wx.ListBox(panel, ID_LISTBOX_SORTED,
										wx.Point(10, 90), wx.Size(120, 70),
										choices, wx.LB_SORT)
			SetListboxClientData('listbox', this.m_listbox)
			SetListboxClientData('listbox', this.m_listboxSorted)
			this.m_listbox.SetCursor(wx.CROSS_CURSOR)
			this.m_listbox.SetToolTipString('This is a list box')
			this.m_lbSelectNum = wx.Button(panel, ID_LISTBOX_SEL_NUM, 'Select #&2', wx.Point(180, 30), wx.Size(140, 30))
			this.m_lbSelectThis = wx.Button(panel, ID_LISTBOX_SEL_STR, "&Select 'This'", wx.Point(340, 30), wx.Size(140, 30))
			wx.Button(panel, ID_LISTBOX_CLEAR, '&Clear', wx.Point(180, 80), wx.Size(140, 30))
			MyButton(panel, ID_LISTBOX_APPEND, "&Append 'Hi!'", wx.Point(340, 80), wx.Size(140, 30))
			wx.Button(panel, ID_LISTBOX_DELETE, 'D&elete selected item', wx.Point(180, 130), wx.Size(140, 30))
			button = MyButton( panel, ID_LISTBOX_FONT, 'Set &Italic font', wx.Point(340, 130), wx.Size(140, 30))
			button.SetDefault()
			button.SetToolTipString('Press here to set italic font')
			this.m_checkbox = wx.CheckBox(panel, ID_LISTBOX_ENABLE, '&Disable', wx.Point(20, 170))
			this.m_checkbox.SetValue(false)
			button.MoveAfterInTabOrder(this.m_checkbox)
			this.m_checkbox.SetToolTipString('Click here to disable the listbox')
			wx.CheckBox( panel, ID_CHANGE_COLOUR, '&Toggle colour',
								wx.Point(110, 170))
			panel.SetCursor(wx.StockCursor(wx.CURSOR_HAND))
			this.m_book.AddPage(panel, 'wxListBox', true, Image_List)
		}
		wx.Panel(this.m_book) {|panel|
			this.m_choice = MyChoice(panel, ID_CHOICE, wx.Point(10,10), wx.Size(120, wx.DefaultCoord), choices)
			this.m_choiceSorted = MyChoice(panel, ID_CHOICE_SORTED, wx.Point(10, 70), wx.Size(120, wx.DefaultCoord),
										choices, wx.CB_SORT)
			SetChoiceClientData('choice', this.m_choice)
			SetChoiceClientData('choice', this.m_choiceSorted)
			this.m_choice.SetSelection(2)
			wx.Button(panel, ID_CHOICE_SEL_NUM, 'Select #&2', wx.Point(180, 30), wx.Size(140, 30))
			wx.Button(panel, ID_CHOICE_SEL_STR, "&Select 'This'", wx.Point(340, 30), wx.Size(140, 30))
			wx.Button(panel, ID_CHOICE_CLEAR, '&Clear', wx.Point(180, 80), wx.Size(140, 30))
			wx.Button(panel, ID_CHOICE_APPEND, "&Append 'Hi!'", wx.Point(340, 80), wx.Size(140, 30))
			wx.Button(panel, ID_CHOICE_DELETE, 'D&elete selected item', wx.Point(180, 130), wx.Size(140, 30))
			wx.Button(panel, ID_CHOICE_FONT, 'Set &Italic font', wx.Point(340, 130), wx.Size(140, 30))
			wx.CheckBox(panel, ID_CHOICE_ENABLE, '&Disable', wx.Point(20, 130), wx.Size(140, 30))
			this.m_book.AddPage(panel, 'wxChoice', false, Image_Choice)
		}

		wx.Panel(this.m_book) {|panel|
			wx.StaticBox(panel, wx.ID_ANY, '&Box around combobox',
						wx.Point(5, 5), wx.Size(150, 100))
			this.m_combo = MyComboBox(panel, ID_COMBO, 'This',
								wx.Point(20,25), wx.Size(120, wx.DefaultCoord),
								choices,
								wx.TE_PROCESS_ENTER)
			wx.Button(panel, ID_COMBO_SEL_NUM, 'Select #&2', wx.Point(180, 30), wx.Size(140, 30))
			wx.Button(panel, ID_COMBO_SEL_STR, "&Select 'This'", wx.Point(340, 30), wx.Size(140, 30))
			wx.Button(panel, ID_COMBO_CLEAR, '&Clear', wx.Point(180, 80), wx.Size(140, 30))
			wx.Button(panel, ID_COMBO_APPEND, "&Append 'Hi!'", wx.Point(340, 80), wx.Size(140, 30))
			wx.Button(panel, ID_COMBO_DELETE, 'D&elete selected item', wx.Point(180, 130), wx.Size(140, 30))
			wx.Button(panel, ID_COMBO_FONT, 'Set &Italic font', wx.Point(340, 130), wx.Size(140, 30))
			wx.Button(panel, ID_COMBO_SET_TEXT, "Set 'Hi!' at #2", wx.Point(340, 180), wx.Size(140, 30))
			wx.CheckBox(panel, ID_COMBO_ENABLE, '&Disable', wx.Point(20, 130), wx.Size(140, 30))
			this.m_book.AddPage(panel, 'wxComboBox', false, Image_Combo)
		}
		choices2 = [
			'First', 'Second',
			/* "Third",
			"Fourth", "Fifth", "Sixth",
			"Seventh", "Eighth", "Nineth", "Tenth" */
		]
		wx.Panel(this.m_book) {|panel|
			radio2 = MyRadioBox(panel, ID_RADIOBOX, '&That', wx.Point(10, 160), wx.DefaultSize, choices2, 1, wx.RA_SPECIFY_ROWS)
			this.m_radio = wx.RadioBox(panel, ID_RADIOBOX, 'T&his', wx.Point(10, 10), wx.DefaultSize, choices, 1, wx.RA_SPECIFY_COLS)
			this.m_combo.SetToolTipString('This is a natural\ncombobox - can you believe me?')
			radio2.SetToolTipString('Ever seen a radiobox?')
			//m_radio.SetToolTipString('Tooltip for the entire radiobox')
			this.m_radio.SetItemToolTip(0.., 'tooltip for\n' + choices)
			// remove the tooltip for one of the items
			this.m_radio.SetItemToolTip(2, '')
			this.m_radio.SetItemHelpText(0.., format('Help text for "%s"', choices))
			// erase help text for the second item
			this.m_radio.SetItemHelpText(1, '')
			// set default help text for control
			this.m_radio.SetHelpText('Default helptext for wxRadioBox')
			wx.Button(panel, ID_RADIOBOX_SEL_NUM, 'Select #&2', wx.Point(180, 30), wx.Size(140, 30))
			wx.Button(panel, ID_RADIOBOX_SEL_STR, "&Select 'This'", wx.Point(180, 80), wx.Size(140, 30))
			this.m_fontButton = wx.Button(panel, ID_SET_FONT, 'Set &more Italic font', wx.Point(340, 30), wx.Size(140, 30))
			wx.Button(panel, ID_RADIOBOX_FONT, 'Set &Italic font', wx.Point(340, 80), wx.Size(140, 30))
			wx.CheckBox(panel, ID_RADIOBOX_ENABLE, '&Disable', wx.Point(340, 130), wx.DefaultSize)
			rb = wx.RadioButton(panel, ID_RADIOBUTTON_1, 'Radiobutton1', wx.Point(210, 170), wx.DefaultSize, wx.RB_GROUP)
			rb.SetValue(false)
			wx.RadioButton(panel, ID_RADIOBUTTON_2, '&Radiobutton2', wx.Point(340, 170), wx.DefaultSize)
			this.m_book.AddPage(panel, 'wxRadioBox', false, Image_Radio)
		}
		wx.Panel(this.m_book) {|panel|
			main_sizer = wx.BoxSizer(wx.HORIZONTAL)
			panel.SetSizer(main_sizer)
			gauge_sizer = wx.StaticBoxSizer(wx.StaticBox(panel, wx.ID_ANY, '&wxGauge and wxSlider'),
											wx.HORIZONTAL)
			main_sizer.Add(gauge_sizer, wx.SizerFlags(0).Border(wx.ALL, 5))
			sz = wx.BoxSizer(wx.VERTICAL)
			gauge_sizer.Add(sz, wx.SizerFlags())
			this.m_gauge = wx.Gauge(panel, wx.ID_ANY, 200, wx.DefaultPosition, wx.Size(155, 30), wx.GA_HORIZONTAL|wx.NO_BORDER)
			sz.Add(this.m_gauge, wx.SizerFlags(0).Border(wx.ALL, 10))
			this.m_slider = wx.Slider(panel, ID_SLIDER, 0, 0, 200,
									wx.DefaultPosition, wx.Size(155, wx.DefaultCoord),
									wx.SL_AUTOTICKS | wx.SL_LABELS)
			this.m_slider.SetTickFreq(40, 0)
			this.m_slider.SetToolTipString('This is a sliding slider')
			sz.Add(this.m_slider, wx.SizerFlags(0).Border(wx.ALL, 10))
			this.m_gaugeVert = wx.Gauge(panel, wx.ID_ANY, 100,
									wx.DefaultPosition, wx.Size(wx.DefaultCoord, 90),
									wx.GA_VERTICAL | wx.GA_SMOOTH | wx.NO_BORDER)
			gauge_sizer.Add(this.m_gaugeVert, wx.SizerFlags(0).Border(wx.ALL, 10))
			sb = wx.StaticBox(panel, wx.ID_ANY, '&Explanation',
									wx.DefaultPosition, wx.DefaultSize) //, wx.ALIGN_CENTER)
			wrapping_sizer = wx.StaticBoxSizer(sb, wx.VERTICAL)
			main_sizer.Add(wrapping_sizer, wx.SizerFlags(0).Border(wx.ALL, 5))
			this.m_wrappingText = wx.StaticText(panel, wx.ID_ANY,
									'In order see the gauge (aka progress bar) ' \
									'control do something you have to drag the ' \
									'handle of the slider to the right.' \
									'\n\n' \
									'This is also supposed to demonstrate how ' \
									'to use static controls with line wrapping.',
									wx.DefaultPosition,
									wx.Size(240, wx.DefaultCoord)
								)
			wrapping_sizer.Add(this.m_wrappingText, wx.SizerFlags())
			non_wrapping_sizer = wx.StaticBoxSizer(wx.StaticBox(panel, wx.ID_ANY, 'Non-wrapping'), wx.VERTICAL)
			main_sizer.Add(non_wrapping_sizer, wx.SizerFlags(0).Border(wx.ALL, 5))
			this.m_nonWrappingText = wx.StaticText(panel, wx.ID_ANY,
									'This static text has two lines.\nThey do not wrap.',
									wx.DefaultPosition,
									wx.DefaultSize
								)
			non_wrapping_sizer.Add(this.m_nonWrappingText, wx.SizerFlags())
			wx.Button(panel, ID_BTNNEWTEXT, 'New text', wx.Point(450, 160))
			initialSpinValue = -5
			s = ''
			s += initialSpinValue
			this.m_spintext = wx.TextCtrl(panel, wx.ID_ANY, s, wx.Point(20, 160), wx.Size(80, wx.DefaultCoord))
			this.m_spinbutton = wx.SpinButton(panel, ID_SPIN, wx.Point(103, 160))
			this.m_spinbutton.SetRange(-40, 30)
			this.m_spinbutton.SetValue(initialSpinValue)
			this.m_btnProgress = wx.Button(panel, ID_BTNPROGRESS, '&Show progress dialog',
								wx.Point(300, 160))
			this.m_spinctrl = wx.SpinCtrl(panel, ID_SPINCTRL, wx.EmptyString, wx.Point(200, 160), wx.Size(80, wx.DefaultCoord))
			this.m_spinctrl.SetRange(-10, 30)
			this.m_spinctrl.SetValue(15)
			this.m_book.AddPage(panel, 'wxGauge', false, Image_Gauge)
		}
		wx.Panel(this.m_book) {|panel|
			icon = wx.ArtProvider.GetIcon(wx.ART_INFORMATION)
			wx.StaticBitmap(panel, wx.ID_ANY, icon, wx.Point(10, 10))
			// VZ: don't leak memory
			// bmpStatic = new wx.StaticBitmap(panel, wx.ID_ANY, wx.NullIcon, wx.Point(50, 10))
			// bmpStatic.SetIcon(wx.ArtProvider::GetIcon(wx.ART_QUESTION))
			bitmap = wx.BitmapWH(100, 100)
			dc = wx.MemoryDC(bitmap)
			//dc.SelectObject(bitmap)
			dc.SetBackground(wx.Brush(wx.GREEN))
			dc.SetPen(wx.RED_PEN)
			dc.Clear()
			dc.DrawEllipse(5, 5, 90, 90)
			dc.DrawText('Bitmap', 30, 40)
			dc.SelectObject(wx.NullBitmap)
			wx.BitmapButton(panel, ID_BITMAP_BTN, bitmap, wx.Point(100, 20))
			wx.ToggleButton(panel, ID_BITMAP_BTN_ENABLE,
									'Enable/disable &bitmap', wx.Point(100, 140))
			/*
			    // test for masked bitmap display
			    bitmap = wx.Bitmap('test2.bmp', wx.BITMAP_TYPE_BMP)
			    if (bitmap.Ok())
			    {
			       bitmap.SetMask(new wx.Mask(bitmap, *wx.BLUE))

			       (void)new wx.StaticBitmap(panel, wx.ID_ANY, bitmap, wx.Point(300, 120))
			    }
			*/
			bmp1 = wx.ArtProvider.GetBitmap(wx.ART_INFORMATION)
			bmp2 = wx.ArtProvider.GetBitmap(wx.ART_WARNING)
			bmp3 = wx.ArtProvider.GetBitmap(wx.ART_QUESTION)
			bmpBtn = wx.BitmapButton(panel, wx.ID_ANY,
								bmp1,
								wx.Point(30, 70)
							)
			bmpBtn.SetBitmapSelected(bmp2)
			bmpBtn.SetBitmapFocus(bmp3)
			wx.ToggleButton(panel, ID_BUTTON_LABEL,
										'&Toggle label', wx.Point(250, 20))
			this.m_label = wx.StaticText(panel, wx.ID_ANY, 'Label with some long text',
										wx.Point(250, 60), wx.DefaultSize,
										wx.ALIGN_RIGHT /*| wx.ST_NO_AUTORESIZE*/)
			this.m_label.SetForegroundColour(wx.BLUE)
			this.m_book.AddPage(panel, 'wxBitmapXXX')
		}
		// sizer
		wx.Panel(this.m_book) {|panel|
			panel.SetAutoLayout(true)
			sizer = wx.BoxSizer(wx.VERTICAL)
			csizer = wx.StaticBoxSizer(
					wx.StaticBox(panel, wx.ID_ANY, 'Show Buttons'), wx.HORIZONTAL)
			check1 = wx.CheckBox(panel, ID_SIZER_CHECK1, '1')
			check1.SetValue (true)
			csizer.Add(check1)
			check2 = wx.CheckBox(panel, ID_SIZER_CHECK2, '2')
			check2.SetValue (true)
			csizer.Add(check2)
			check3 = wx.CheckBox(panel, ID_SIZER_CHECK3, '3')
			check3.SetValue (true)
			csizer.Add(check3)
			check4 = wx.CheckBox(panel, ID_SIZER_CHECK4, '4')
			check4.SetValue (true)
			csizer.Add(check4)
			check14 = wx.CheckBox(panel, ID_SIZER_CHECK14, '1-4')
			check14.SetValue (true)
			csizer.Add(check14)
			checkBig = wx.CheckBox(panel, ID_SIZER_CHECKBIG, 'Big')
			checkBig.SetValue(true)
			csizer.Add(checkBig)
			sizer.Add(csizer)
			this.m_hsizer = wx.BoxSizer(wx.HORIZONTAL)
			this.m_buttonSizer = wx.BoxSizer (wx.VERTICAL)
			this.m_sizerBtn1 = wx.Button(panel, wx.ID_ANY, 'Test Button &1 (tab order 1)')
			this.m_buttonSizer.Add(this.m_sizerBtn1, wx.SizerFlags(0).Border(wx.ALL, 10))
			this.m_sizerBtn2 = wx.Button(panel, wx.ID_ANY, 'Test Button &2 (tab order 3)')
			this.m_buttonSizer.Add(this.m_sizerBtn2, wx.SizerFlags(0).Border(wx.ALL, 10))
			this.m_sizerBtn3 = wx.Button(panel, wx.ID_ANY, 'Test Button &3 (tab order 2)')
			this.m_buttonSizer.Add(this.m_sizerBtn3, wx.SizerFlags(0).Border(wx.ALL, 10))
			this.m_sizerBtn4 = wx.Button(panel, wx.ID_ANY, 'Test Button &4 (tab order 4)')
			this.m_buttonSizer.Add(this.m_sizerBtn4, wx.SizerFlags(0).Border(wx.ALL, 10))
			this.m_sizerBtn3.MoveBeforeInTabOrder(this.m_sizerBtn2)
			this.m_hsizer.Add(this.m_buttonSizer)
			this.m_hsizer.AddSpacer(20, 20, 1)
			this.m_bigBtn = wx.Button(panel, wx.ID_ANY, 'Multiline\nbutton')
			this.m_hsizer.Add(this.m_bigBtn, wx.SizerFlags(3).Border(wx.ALL, 10))
			sizer.Add(this.m_hsizer, wx.SizerFlags(1))
			panel.SetSizer(sizer)
			this.m_book.AddPage(panel, 'wxSizer')
		}
		// set the sizer for the panel itthis
		sizer = wx.BoxSizer(wx.VERTICAL)
		sizer.Add(this.m_book, wx.SizerFlags().Border().Expand())
		sizer.Add(this.m_text, wx.SizerFlags(1).Border().Expand())
		this.SetSizer(sizer)
	}
	EventTable() = {
		// event binding
		this.Bind(wx.EVT_IDLE) {|event| this.OnIdle(event) }
		this.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, ID_BOOK) {|event| this.OnPageChanging(event) }
		this.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, ID_BOOK) {|event| this.OnPageChanged(event) }
		this.Bind(wx.EVT_LISTBOX, ID_LISTBOX) {|event| this.OnListBox(event) }
		this.Bind(wx.EVT_LISTBOX, ID_LISTBOX_SORTED) {|event| this.OnListBox(event) }
		this.Bind(wx.EVT_LISTBOX_DCLICK, ID_LISTBOX) {|event| this.OnListBoxDoubleClick(event) }
		this.Bind(wx.EVT_BUTTON, ID_LISTBOX_SEL_NUM) {|event| this.OnListBoxButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_LISTBOX_SEL_STR) {|event| this.OnListBoxButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_LISTBOX_CLEAR) {|event| this.OnListBoxButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_LISTBOX_APPEND) {|event| this.OnListBoxButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_LISTBOX_DELETE) {|event| this.OnListBoxButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_LISTBOX_FONT) {|event| this.OnListBoxButtons(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_LISTBOX_ENABLE) {|event| this.OnListBoxButtons(event) }
		this.Bind(wx.EVT_CHOICE, ID_CHOICE) {|event| this.OnChoice(event) }
		this.Bind(wx.EVT_CHOICE, ID_CHOICE_SORTED) {|event| this.OnChoice(event) }
		this.Bind(wx.EVT_BUTTON, ID_CHOICE_SEL_NUM) {|event| this.OnChoiceButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_CHOICE_SEL_STR) {|event| this.OnChoiceButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_CHOICE_CLEAR) {|event| this.OnChoiceButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_CHOICE_APPEND) {|event| this.OnChoiceButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_CHOICE_DELETE) {|event| this.OnChoiceButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_CHOICE_FONT) {|event| this.OnChoiceButtons(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_CHOICE_ENABLE) {|event| this.OnChoiceButtons(event) }
		this.Bind(wx.EVT_COMBOBOX, ID_COMBO) {|event| this.OnCombo(event) }
		this.Bind(wx.EVT_TEXT, ID_COMBO) {|event| this.OnComboTextChanged(event) }
		this.Bind(wx.EVT_TEXT_ENTER, ID_COMBO) {|event| this.OnComboTextEnter(event) }
		this.Bind(wx.EVT_BUTTON, ID_COMBO_SEL_NUM) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_COMBO_SEL_STR) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_COMBO_CLEAR) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_COMBO_APPEND) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_COMBO_DELETE) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_COMBO_FONT) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_COMBO_SET_TEXT) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_COMBO_ENABLE) {|event| this.OnComboButtons(event) }
		this.Bind(wx.EVT_RADIOBOX, ID_RADIOBOX) {|event| this.OnRadio(event) }
		this.Bind(wx.EVT_BUTTON, ID_RADIOBOX_SEL_NUM) {|event| this.OnRadioButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_RADIOBOX_SEL_STR) {|event| this.OnRadioButtons(event) }
		this.Bind(wx.EVT_BUTTON, ID_RADIOBOX_FONT) {|event| this.OnRadioButtons(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_RADIOBOX_ENABLE) {|event| this.OnRadioButtons(event) }
		this.Bind(wx.EVT_RADIOBUTTON, ID_RADIOBUTTON_1) {|event| this.OnRadioButton1(event) }
		this.Bind(wx.EVT_RADIOBUTTON, ID_RADIOBUTTON_2) {|event| this.OnRadioButton2(event) }
		this.Bind(wx.EVT_BUTTON, ID_SET_FONT) {|event| this.OnSetFont(event) }
		this.Bind(wx.EVT_SLIDER, ID_SLIDER) {|event| this.OnSliderUpdate(event) }
		this.Bind(wx.EVT_SPIN, ID_SPIN) {|event| this.OnSpinUpdate(event) }
		this.Bind(wx.EVT_SPIN_UP, ID_SPIN) {|event| this.OnSpinUp(event) }
		this.Bind(wx.EVT_SPIN_DOWN, ID_SPIN) {|event| this.OnSpinDown(event) }
		this.Bind(wx.EVT_UPDATE_UI, ID_BTNPROGRESS) {|event| this.OnUpdateShowProgress(event) }
		this.Bind(wx.EVT_BUTTON, ID_BTNPROGRESS) {|event| this.OnShowProgress(event) }
		this.Bind(wx.EVT_SPINCTRL, ID_SPINCTRL) {|event| this.OnSpinCtrl(event) }
		this.Bind(wx.EVT_SPIN_UP, ID_SPINCTRL) {|event| this.OnSpinCtrlUp(event) }
		this.Bind(wx.EVT_SPIN_DOWN, ID_SPINCTRL) {|event| this.OnSpinCtrlDown(event) }
		this.Bind(wx.EVT_TEXT, ID_SPINCTRL) {|event| this.OnSpinCtrlText(event) }
		this.Bind(wx.EVT_BUTTON, ID_BTNNEWTEXT) {|event| this.OnNewText(event) }
		this.Bind(wx.EVT_TOGGLEBUTTON, ID_BUTTON_LABEL) {|event| this.OnUpdateLabel(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_CHANGE_COLOUR) {|event| this.OnChangeColour(event) }
		this.Bind(wx.EVT_BUTTON, ID_BUTTON_TEST1) {|event| this.OnTestButton(event) }
		this.Bind(wx.EVT_BUTTON, ID_BUTTON_TEST2) {|event| this.OnTestButton(event) }
		this.Bind(wx.EVT_BUTTON, ID_BITMAP_BTN) {|event| this.OnBmpButton(event) }
		this.Bind(wx.EVT_TOGGLEBUTTON, ID_BITMAP_BTN_ENABLE) {|event| this.OnBmpButtonToggle(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_SIZER_CHECK1) {|event| this.OnSizerCheck(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_SIZER_CHECK2) {|event| this.OnSizerCheck(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_SIZER_CHECK3) {|event| this.OnSizerCheck(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_SIZER_CHECK4) {|event| this.OnSizerCheck(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_SIZER_CHECK14) {|event| this.OnSizerCheck(event) }
		this.Bind(wx.EVT_CHECKBOX, ID_SIZER_CHECKBIG) {|event| this.OnSizerCheck(event) }
	}
	s_selCombo:public = INVALID_SELECTION
	s_selChoice:public = INVALID_SELECTION
	OnIdle(event:wx.IdleEvent) = {
		if (!this.m_combo || !this.m_choice) {
			event.Skip()
			return
		}
		sel = this.m_combo.GetSelection()
		if (sel != MyPanel.s_selCombo) {
			if (MyPanel.s_selCombo != INVALID_SELECTION) {
				wx.LogMessage('EVT_IDLE: combobox selection changed from %d to %d',
						MyPanel.s_selCombo, sel)
			}
			MyPanel.s_selCombo = sel
		}
	    sel = this.m_choice.GetSelection()
	    if (sel != MyPanel.s_selChoice) {
			if (MyPanel.s_selChoice != INVALID_SELECTION) {
				wx.LogMessage('EVT_IDLE: choice selection changed from %d to %d',
						MyPanel.s_selChoice, sel)
			}
			MyPanel.s_selChoice = sel
		}
		event.Skip()
	}
	OnPageChanging(event:wx.NotebookEvent) = {
		selOld = event.GetOldSelection()
		if (selOld == 2) {
			if (wx.MessageBox('This demonstrates how a program may prevent the\n' \
							'page change from taking place - if you select\n' \
							'[No] the current page will stay the third one\n',
							'Control sample',
							wx.ICON_QUESTION | wx.YES_NO, this) != wx.YES) {
				event.Veto()
				return
			}
		}
		this.m_text.AppendText('Book selection is being changed from ' + selOld \
				+ ' to ' + event.GetSelection() \
				+ ' (current page from book is ' \
				+ this.m_book.GetSelection() + ')\n')
	}
	OnPageChanged(event:wx.NotebookEvent) = {
		this.m_text.AppendText('Book selection is now ' + event.GetSelection() \
			+ ' (from book: ' + this.m_book.GetSelection() \
			+ ')\n')
	}
	OnTestButton(event:wx.CommandEvent) = {
		wx.LogMessage('Button %s clicked.',
			if (event.GetId() == ID_BUTTON_TEST1) {'1'} else {'2'})
	}
	OnBmpButton(event:wx.CommandEvent) = {
		wx.LogMessage('Bitmap button clicked.')
	}
	OnBmpButtonToggle(event:wx.CommandEvent) = {
		this.FindWindowById(ID_BITMAP_BTN).Enable(!event.IsChecked())
	}
	s_colOld = nil
	OnChangeColour(event:wx.CommandEvent) = {
		this.SetThemeEnabled(false)
		// test panel colour changing and propagation to the subcontrols
		if (MyPanel.s_colOld) {
			this.SetBackgroundColour(MyPanel.s_colOld)
			s_colOld = wx.NullColour
			this.m_lbSelectThis.SetForegroundColour(wx.NullColour)
			this.m_lbSelectThis.SetBackgroundColour(wx.NullColour)
		} else {
			MyPanel.s_colOld = wx.NamedColour('red')
			this.SetBackgroundColour(wx.NamedColour('white'))
			this.m_lbSelectThis.SetForegroundColour(wx.NamedColour('white'))
			this.m_lbSelectThis.SetBackgroundColour(wx.NamedColour('red'))
		}
		this.m_lbSelectThis.Refresh()
		this.Refresh()
	}
	OnListBox(event:wx.CommandEvent) = {
		if (event.GetInt() == -1) {
			this.m_text.AppendText('ListBox has no selections anymore\n')
			return
		}
		listbox = if (event.GetId() == ID_LISTBOX) {this.m_listbox} else {this.m_listboxSorted}
		this.m_text.AppendText("ListBox event selection string is: '")
		this.m_text.AppendText(event.GetString())
		this.m_text.AppendText("'\n")
		// can't use GetStringSelection() with multiple selections, there could be
		// more than one of them
		if (!listbox.HasFlag(wx.LB_MULTIPLE)) {
			this.m_text.AppendText("ListBox control selection string is: '")
			this.m_text.AppendText(listbox.GetStringSelection())
			this.m_text.AppendText("'\n")
		}
		obj = event.GetClientObject()
		this.m_text.AppendText("ListBox event client data string is: '")
		if (obj) {
		    this.m_text.AppendText(obj.GetData())
		} else {
		    this.m_text.AppendText('none')
		}
		this.m_text.AppendText("'\n")
		this.m_text.AppendText("ListBox control client data string is: '")
		obj = listbox.GetClientObject(event.GetInt())
		if (obj) {
			this.m_text.AppendText(obj.GetData())
		} else {
			this.m_text.AppendText('none')
		}
		this.m_text.AppendText("'\n")
	}
	OnListBoxDoubleClick(event:wx.CommandEvent) = {
		this.m_text.AppendText('ListBox double click string is: ')
		this.m_text.AppendText(event.GetString())
		this.m_text.AppendText('\n')
	}
	OnListBoxButtons(event:wx.CommandEvent) = {
		id = event.GetId()
		if (id == ID_LISTBOX_ENABLE) {
			this.m_text.AppendText('Checkbox clicked.\n')
			cb = this.m_checkbox
			if (event.GetInt()) {
				cb.SetToolTipString('Click to enable listbox')
			} else {
				cb.SetToolTipString('Click to disable listbox')
			}
			this.m_listbox.Enable(event.GetInt() == 0)
			this.m_lbSelectThis.Enable(event.GetInt() == 0)
			this.m_lbSelectNum.Enable(event.GetInt() == 0)
			this.m_listboxSorted.Enable(event.GetInt() == 0)
			this.FindWindowById(ID_CHANGE_COLOUR).Enable(event.GetInt() == 0)
		} elsif (id == ID_LISTBOX_SEL_NUM) {
			if (this.m_listbox.GetCount() > 2) {
			    this.m_listbox.SetSelection(2)
			}
			if (this.m_listboxSorted.GetCount() > 2) {
			    this.m_listboxSorted.SetSelection(2)
			}
			this.m_lbSelectThis.WarpPointer(40, 14)
		} elsif (id == ID_LISTBOX_SEL_STR) {
			if (this.m_listbox.FindString('This') != wx.NOT_FOUND) {
				this.m_listbox.SetStringSelection('This')
			}
			if (this.m_listboxSorted.FindString('This') != wx.NOT_FOUND) {
				this.m_listboxSorted.SetStringSelection('This')
			}
			this.m_lbSelectNum.WarpPointer(40, 14)
		} elsif (id == ID_LISTBOX_CLEAR) {
			this.m_listbox.Clear()
			this.m_listboxSorted.Clear()
		} elsif (id == ID_LISTBOX_APPEND) {
			this.m_listbox.Append('Hi!')
			this.m_listboxSorted.Append('Hi!')
		} elsif (id == ID_LISTBOX_DELETE) {
			idx = this.m_listbox.GetSelection()
			if (idx != wx.NOT_FOUND) {
				this.m_listbox.Delete(idx)
			}
			idx = this.m_listboxSorted.GetSelection()
			if (idx != wx.NOT_FOUND) {
				this.m_listboxSorted.Delete(idx)
			}
		} elsif (id == ID_LISTBOX_FONT) {
			this.m_listbox.SetFont(wx.ITALIC_FONT)
			this.m_listboxSorted.SetFont(wx.ITALIC_FONT)
			this.m_checkbox.SetFont(wx.ITALIC_FONT)
		}
	}
	OnChoice(event:wx.CommandEvent) = {
		choice = if (event.GetId() == ID_CHOICE) {this.m_choice} else {this.m_choiceSorted}
		sel = choice.GetSelection()
		dataEvt = event.GetClientObject(),
		dataCtrl = choice.GetClientObject(sel)
		wx.LogMessage('EVT_CHOICE: item %d/%d (event/control), ' \
					'string "%s"/"%s", ' \
					'data "%s"/"%s"',
					event.GetInt(),
					sel,
					event.GetString(),
					choice.GetStringSelection(),
					dataEvt.GetData(),
					dataCtrl.GetData())
	}
	OnChoiceButtons(event:wx.CommandEvent) = {
		id = event.GetId()
		if (id == ID_CHOICE_ENABLE) {
			this.m_choice.Enable(event.GetInt() == 0)
			this.m_choiceSorted.Enable(event.GetInt() == 0)
		} elsif (id == ID_CHOICE_SEL_NUM) {
			this.m_choice.SetSelection(2)
			this.m_choiceSorted.SetSelection(2)
		} elsif (id == ID_CHOICE_SEL_STR) {
			this.m_choice.SetStringSelection('This')
			this.m_choiceSorted.SetStringSelection('This')
		} elsif (id == ID_CHOICE_CLEAR) {
			this.m_choice.Clear()
			this.m_choiceSorted.Clear()
		} elsif (id == ID_CHOICE_APPEND) {
			this.m_choice.Append('Hi!')
			this.m_choiceSorted.Append('Hi!')
		} elsif (id == ID_CHOICE_DELETE) {
			idx = this.m_choice.GetSelection()
			if (idx != wx.NOT_FOUND) {
				this.m_choice.Delete(idx)
			}
			idx = this.m_choiceSorted.GetSelection()
			if (idx != wx.NOT_FOUND) {
				this.m_choiceSorted.Delete(idx)
			}
		} elsif (id == ID_CHOICE_FONT) {
			this.m_choice.SetFont(wx.ITALIC_FONT)
			this.m_choiceSorted.SetFont(wx.ITALIC_FONT)
		}
	}
	OnCombo(event:wx.CommandEvent) = {
		if (!this.m_combo) {
			return
		}
		wx.LogMessage('EVT_COMBOBOX: item %d/%d (event/control), string "%s"/"%s"',
					event.GetInt(),
					this.m_combo.GetSelection(),
					event.GetString(),
					this.m_combo.GetStringSelection())
	}
	OnComboTextChanged(event:wx.CommandEvent) = {
		if (this.m_combo) {
			wx.LogMessage('EVT_TEXT for the combobox: "%s" (event) or "%s" (control).',
					event.GetString(),
					this.m_combo.GetValue())
		}
	}
	OnComboTextEnter(event:wx.CommandEvent) = {
		if (this.m_combo) {
			wx.LogMessage("Enter pressed in the combobox: value is '%s'.",
					this.m_combo.GetValue())
		}
	}
	OnComboButtons(event:wx.CommandEvent) = {
		id = event.GetId()
		if (id == ID_COMBO_ENABLE) {
			this.m_combo.Enable(event.GetInt() == 0)
		} elsif (id == ID_COMBO_SEL_NUM) {
			this.m_combo.SetSelection(2)
		} elsif (id == ID_COMBO_SEL_STR) {
			this.m_combo.SetStringSelection('This')
		} elsif (id == ID_COMBO_CLEAR) {
			this.m_combo.Clear()
		} elsif (id == ID_COMBO_APPEND) {
			this.m_combo.Append('Hi!')
		} elsif (id == ID_COMBO_DELETE) {
			idx = this.m_combo.GetSelection()
			this.m_combo.Delete(idx)
		} elsif (id == ID_COMBO_FONT) {
			this.m_combo.SetFont(wx.ITALIC_FONT)
		} elsif (id == ID_COMBO_SET_TEXT) {
			this.m_combo.SetString(2, 'Hi!')
		}
	}
	OnRadio(event:wx.CommandEvent) = {
		this.m_text.AppendText('RadioBox selection string is: ')
		this.m_text.AppendText(event.GetString())
		this.m_text.AppendText('\n')
	}
	OnRadioButton1(event:wx.CommandEvent) = {
		wx.MessageBox('First wxRadioButton selected.', 'wxControl sample')
	}
	OnRadioButton2(event:wx.CommandEvent) = {
		this.m_text.AppendText('Second wxRadioButton selected.\n')
	}
	OnRadioButtons(event:wx.CommandEvent) = {
		id = event.GetId()
		if (id == ID_RADIOBOX_ENABLE) {
			this.m_radio.Enable(event.GetInt() == 0)
		} elsif (id == ID_RADIOBOX_SEL_NUM) {
			this.m_radio.SetSelection(2)
		} elsif (id == ID_RADIOBOX_SEL_STR) {
			this.m_radio.SetStringSelection('This')
		} elsif (id == ID_RADIOBOX_FONT) {
			this.m_radio.SetFont(wx.ITALIC_FONT)
		}
	}
	OnSetFont(event:wx.CommandEvent) = {
		this.m_fontButton.SetFont(wx.ITALIC_FONT)
		this.m_text.SetFont(wx.ITALIC_FONT)
	}
	OnUpdateLabel(event:wx.CommandEvent) = {
		this.m_label.SetLabel(if (event.GetInt() > 0) \
			{'Very very very very very long text.'} else {'Shorter text.'})
	}
	OnSliderUpdate(event:wx.CommandEvent) = {
		this.m_gauge.SetValue(this.m_slider.GetValue())
		this.m_gaugeVert.SetValue(this.m_slider.GetValue() / 2)
	}
	OnSpinCtrlText(event:wx.CommandEvent) = {
		if (this.m_spinctrl) {
			s = format('Spin ctrl text changed: now %d (from event: %s)\n',
					this.m_spinctrl.GetValue(), event.GetString())
			this.m_text.AppendText(s)
		}
	}
	OnSpinCtrl(event:wx.SpinEvent) = {
		if (this.m_spinctrl) {
			s = format('Spin ctrl changed: now %d (from event: %d)\n',
					this.m_spinctrl.GetValue(), event.GetInt())
			this.m_text.AppendText(s)
		}
	}
	OnSpinCtrlUp(event:wx.SpinEvent) = {
		if (this.m_spinctrl) {
			this.m_text.AppendText(format('Spin up: %d (from event: %d)\n',
 					this.m_spinctrl.GetValue(), event.GetInt()))
 		}
	}
	OnSpinCtrlDown(event:wx.SpinEvent) = {
		if (this.m_spinctrl) {
			this.m_text.AppendText(format('Spin down: %d (from event: %d)\n',
					this.m_spinctrl.GetValue(), event.GetInt()))
		}
	}
	OnSpinUp(event:wx.SpinEvent) = {
		value = format('Spin control up: current = %d\n',
					this.m_spinbutton.GetValue())
		if (event.GetPosition() > 17) {
			value += 'Preventing the spin button from going above 17.\n'
			event.Veto()
		}
		this.m_text.AppendText(value)
	}
	OnSpinDown(event:wx.SpinEvent) = {
		value = format('Spin control down: current = %d\n',
					this.m_spinbutton.GetValue())
		if (event.GetPosition() < -17) {
			value += 'Preventing the spin button from going below -17.\n'
			event.Veto()
		}
		this.m_text.AppendText(value)
	}
	OnSpinUpdate(event:wx.SpinEvent) = {
		value = format('%d', event.GetPosition())
		this.m_spintext.SetValue(value)
		value = format('Spin control range: (%d, %d), current = %d\n',
					this.m_spinbutton.GetMin(), this.m_spinbutton.GetMax(),
					this.m_spinbutton.GetValue())
		this.m_text.AppendText(value)
	}
	OnNewText(event:wx.CommandEvent) = {
		this.m_nonWrappingText.SetLabel('This text is short\nbut still spans\nover three lines.')
		this.m_wrappingText.SetLabel('This text is short but will still be wrapped if it is too long.')
		this.m_wrappingText.GetParent().Layout()
	}
	OnUpdateShowProgress(event:wx.UpdateUIEvent) = {
		event.Enable(this.m_spinbutton.GetValue() > 0)
	}
	OnShowProgress(event:wx.CommandEvent) = {
		max = this.m_spinbutton.GetValue()
		if (max <= 0) {
			wx.LogError('You must set positive range!')
			return
		}
		dialog = wx.ProgressDialog('Progress dialog example',
						'An informative message',
						max,    // range
						this,   // parent
						wx.PD_CAN_ABORT | \
						wx.PD_AUTO_HIDE | \
						wx.PD_APP_MODAL | \
						wx.PD_ELAPSED_TIME | \
						wx.PD_ESTIMATED_TIME | \
						wx.PD_REMAINING_TIME)
		cont = true
		repeat (max + 1) {|i|
			!cont && break
			wx.Sleep(1)
			if (i == max) {
				[cont, skip] = dialog.Update(i, "That's all, folks!")
			} elsif (i == max / 2) {
				[cont, skip] = dialog.Update(i, 'Only a half left (very long message)!')
			} else {
				[cont, skip] = dialog.Update(i)
			}
		}
		if (!cont) {
			this.m_text.AppendText('Progress dialog aborted!\n')
		} else {
			this.m_text.AppendText('Countdown from ' + max +  ' finished.\n')
		}
	}
	OnSizerCheck (event:wx.CommandEvent) = {
		id = event.GetId()
		if (id == ID_SIZER_CHECK1) {
			this.m_buttonSizer.Show(this.m_sizerBtn1, event.IsChecked())
			this.m_buttonSizer.Layout()
		} elsif (id == ID_SIZER_CHECK2) {
			this.m_buttonSizer.Show(this.m_sizerBtn2, event.IsChecked())
			this.m_buttonSizer.Layout()
		} elsif (id == ID_SIZER_CHECK3) {
			this.m_buttonSizer.Show(this.m_sizerBtn3, event.IsChecked())
			this.m_buttonSizer.Layout()
		} elsif (id == ID_SIZER_CHECK4) {
			this.m_buttonSizer.Show(this.m_sizerBtn4, event.IsChecked())
			this.m_buttonSizer.Layout()
		} elsif (id == ID_SIZER_CHECK14) {
			this.m_hsizer.Show(this.m_buttonSizer, event.IsChecked())
			this.m_hsizer.Layout()
		} elsif (id == ID_SIZER_CHECKBIG) {
			this.m_hsizer.Show(this.m_bigBtn, event.IsChecked())
			this.m_hsizer.Layout()
		}
	}
}

//----------------------------------------------------------------------
// MyFrame
//----------------------------------------------------------------------

MyFrame = class(wx.Frame) {
	__init__(title:string, x:number, y:number) = {|nil, wx.ID_ANY,
							title, wx.Point(x, y), wx.Size(700, 450)|
		this.EventTable()
		this.SetHelpText('Controls sample demonstrating various widgets')
		this.SetIcon(wx.IconFromXPMData(resource.mondrian_xpm))
		file_menu = wx.Menu()
		file_menu.Append(CONTROLS_CLEAR_LOG, '&Clear log\tCtrl-L')
		file_menu.AppendSeparator()
		file_menu.Append(CONTROLS_ABOUT, '&About\tF1')
		file_menu.AppendSeparator()
		file_menu.Append(CONTROLS_QUIT, 'E&xit\tAlt-X', 'Quit controls sample')
		menu_bar = wx.MenuBar()
		menu_bar.Append(file_menu, '&File')
		tooltip_menu = wx.Menu()
		tooltip_menu.Append(CONTROLS_SET_TOOLTIP_DELAY, 'Set &delay\tCtrl-D')
		tooltip_menu.AppendSeparator()
		tooltip_menu.Append(CONTROLS_ENABLE_TOOLTIPS, '&Toggle tooltips\tCtrl-T',
							'enable/disable tooltips', true)
		tooltip_menu.Check(CONTROLS_ENABLE_TOOLTIPS, true)
		menu_bar.Append(tooltip_menu, '&Tooltips')
		panel_menu = wx.Menu()
		panel_menu.Append(CONTROLS_ENABLE_ALL, '&Disable all\tCtrl-E',
							'Enable/disable all panel controls', true)
		panel_menu.Append(CONTROLS_CONTEXT_HELP, '&Context help...\tCtrl-H',
							'Get context help for a control')
		menu_bar.Append(panel_menu, '&Panel')
		this.SetMenuBar(menu_bar)
		this.CreateStatusBar(2)
		this.m_panel = MyPanel(this, 10, 10, 300, 100)
	}
	EventTable() = {
		this.Bind(wx.EVT_MENU, CONTROLS_QUIT) {|event| this.OnQuit(event) }
		this.Bind(wx.EVT_MENU, CONTROLS_ABOUT) {|event| this.OnAbout(event) }
		this.Bind(wx.EVT_MENU, CONTROLS_CLEAR_LOG) {|event| this.OnClearLog(event) }
		this.Bind(wx.EVT_MENU, CONTROLS_SET_TOOLTIP_DELAY) {|event| this.OnSetTooltipDelay(event) }
		this.Bind(wx.EVT_MENU, CONTROLS_ENABLE_TOOLTIPS) {|event| this.OnToggleTooltips(event) }
		this.Bind(wx.EVT_MENU, CONTROLS_ENABLE_ALL) {|event| this.OnEnableAll(event) }
		this.Bind(wx.EVT_MENU, CONTROLS_CONTEXT_HELP) {|event| this.OnContextHelp(event) }
		this.Bind(wx.EVT_ICONIZE) {|event| this.OnIconized(event) }
		this.Bind(wx.EVT_MAXIMIZE) {|event| this.OnMaximized(event) }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
		this.Bind(wx.EVT_MOVE) {|event| this.OnMove(event) }
		this.Bind(wx.EVT_IDLE) {|event| this.OnIdle(event) }
	}
	OnQuit(event:wx.CommandEvent) = {
		this.Close(true)
	}
	OnAbout(event:wx.CommandEvent) = {
		bc = wx.BusyCursor()
		dialog = wx.MessageDialog(this, 'This is a control sample', 'About Controls', wx.OK)
		dialog.ShowModal()
	}
	OnClearLog(event:wx.CommandEvent) = {
		this.m_panel.m_text.Clear()
	}
	s_delay = 5000
	OnSetTooltipDelay(event:wx.CommandEvent) = {
		delay = format('%ld', MyFrame.s_delay)
		delay = wx.GetTextFromUser('Enter delay (in milliseconds)',
				'Set tooltip delay',
				delay,
				this)
		if (!delay) {
			return // cancelled
		}
		MyFrame.s_delay = int(delay)
		wx.ToolTip.SetDelay(MyFrame.s_delay)
		wx.LogStatus('Tooltip delay set to %ld milliseconds', MyFrame.s_delay)
	}
	s_enabled1 = true
	OnToggleTooltips(event:wx.CommandEvent) = {
		MyFrame.s_enabled1 = !MyFrame.s_enabled1
		wx.ToolTip.Enable(MyFrame.s_enabled1)
		wx.LogStatus('Tooltips %sabled', if (MyFrame.s_enabled1) {'en'} else {'dis'})
	}
	s_enabled2 = true
	OnEnableAll(event:wx.CommandEvent) = {
		MyFrame.s_enabled2 = !MyFrame.s_enabled2
		this.m_panel.Enable(MyFrame.s_enabled2)
	}
	OnContextHelp(event:wx.CommandEvent) = {
		chelp = wx.ContextHelp(this)
	}
	OnMove(event:wx.MoveEvent) = {
		this.UpdateStatusBar(event.GetPosition(), this.GetSize())
		event.Skip()
	}
	OnIconized(event:wx.IconizeEvent) = {
		wx.LogMessage('Frame %s', if (event.Iconized()) {'iconized'} else {'restored'})
		event.Skip()
	}
	OnMaximized(event:wx.MaximizeEvent) = {
		wx.LogMessage('Frame maximized')
	}
	OnSize(event:wx.SizeEvent) = {
		this.UpdateStatusBar(this.GetPosition(), event.GetSize())
		event.Skip()
	}
	OnIdle(event:wx.IdleEvent) = {
	}
	GetPanel() = { this.m_panel }
	UpdateStatusBar(pos:wx.Point, size:wx.Size) = {
	}
}

// a button which intercepts double clicks (for testing...)
MyButton = class(wx.Button) {
	__init__(parent:wx.Window, id:number, label:string, pos:wx.Point, size:wx.Size) = \
												{|parent, id, label, pos, size|
		this.EventTable()
	}
	EventTable() = {
		this.Bind(wx.EVT_LEFT_DCLICK) {|event| this.OnDClick(event) }
	}
	OnDClick(event:wx.MouseEvent) = {
		wx.LogMessage('MyButton::OnDClick')
		event.Skip()
	}
}

// a combo which intercepts chars (to test Windows behaviour)
MyComboBox = class(wx.ComboBox) {
	__init__(parent:wx.Window,
				id:number,
				value:string => wx.EmptyString,
				pos:wx.Point => wx.DefaultPosition,
				size:wx.Size => wx.DefaultSize,
				choices[]:string => nil,
				style:number => 0,
				validator:wx.Validator => wx.DefaultValidator,
				name:string => wx.ComboBoxNameStr) = \
			{|parent, id, value, pos, size, choices, style,validator, name|
		this.EventTable()
	}
	EventTable() = {
		this.Bind(wx.EVT_CHAR) {|event| this.OnChar(event) }
		this.Bind(wx.EVT_KEY_DOWN) {|event| this.OnKeyDown(event) }
		this.Bind(wx.EVT_KEY_UP) {|event| this.OnKeyUp(event) }
		this.Bind(wx.EVT_SET_FOCUS) {|event| this.OnFocusGot(event) }
	}
	OnChar(event:wx.KeyEvent) = {
		wx.LogMessage('MyComboBox::OnChar')
		if (event.GetKeyCode() == ord('w')) {
			wx.LogMessage("MyComboBox: 'w' will be ignored.")
		} else {
			event.Skip()
		}
	}
	OnKeyDown(event:wx.KeyEvent) = {
		wx.LogMessage('MyComboBox::OnKeyDown')
		if (event.GetKeyCode() == ord('w')) {
			wx.LogMessage("MyComboBox: 'w' will be ignored.")
		} else {
			event.Skip()
		}
	}
	OnKeyUp(event:wx.KeyEvent) = {
		wx.LogMessage('MyComboBox::OnKeyUp')
		event.Skip()
	}
	OnFocusGot(event:wx.FocusEvent) = {
		wx.LogMessage('MyComboBox::OnFocusGot')
		event.Skip()
	}
}

// a radiobox which handles focus set/kill (for testing)
MyRadioBox = class(wx.RadioBox) {
	__init__(parent:wx.Window,
				id:number,
				title:string => wx.EmptyString,
				pos:wx.Point => wx.DefaultPosition,
				size:wx.Size => wx.DefaultSize,
				choices[]:string => nil,
				majorDim:number => 1,
				style:number => wx.RA_HORIZONTAL,
				validator:wx.Validator => wx.DefaultValidator,
				name:string => wx.RadioBoxNameStr) = \
			{|parent, id, title, pos, size, choices, majorDim, style, validator, name|
		this.EventTable()
	}
	EventTable() = {
		this.Bind(wx.EVT_SET_FOCUS) {|event| this.OnFocusGot(event) }
		this.Bind(wx.EVT_KILL_FOCUS) {|event| this.OnFocusLost(event) }
	}
	OnFocusGot(event:wx.FocusEvent) = {
		wx.LogMessage('wyRadioBox::OnFocusGot')
		event.Skip()
	}
	OnFocusLost(event:wx.FocusEvent) = {
		wx.LogMessage('MyRadioBox::OnFocusLost')
		event.Skip()
	}
}

// a choice which handles focus set/kill (for testing)
MyChoice = class(wx.Choice) {
	__init__(parent:wx.Window,
				id:number,
				pos:wx.Point => wx.DefaultPosition,
				size:wx.Size => wx.DefaultSize,
				choices[]:string => nil,
				style:number => 0,
				validator:wx.Validator => wx.DefaultValidator,
				name:string => wx.ChoiceNameStr) = \
			{|parent, id, pos, size, choices, style, validator, name|
		this.EventTable()
	}
	EventTable() = {
		this.Bind(wx.EVT_SET_FOCUS) {|event| this.OnFocusGot(event) }
		this.Bind(wx.EVT_KILL_FOCUS) {|event| this.OnFocusLost(event) }
	}
	OnFocusGot(event:wx.FocusEvent) = {
		wx.LogMessage('MyChoice::OnFocusGot')
		event.Skip()
	}
	OnFocusLost(event:wx.FocusEvent) = {
		wx.LogMessage('MyChoice::OnFocusLost')
		event.Skip()
	}
}

SetListboxClientData(name:string, control:wx.ListBox) = {
	count = control.GetCount()
	repeat (count) {|n|
		s = format("%s client data for '%s'",
								name, control.GetString(n))
		control.SetClientObject(n, wx.ClientData(s))
	}
}

SetChoiceClientData(name:string, control:wx.Choice) = {
	count = control.GetCount()
	repeat (count) {|n|
		s = format("%s client data for '%s'",
							name, control.GetString(n))
		control.SetClientObject(n, wx.ClientData(s))
	}
}

wx.IMPLEMENT_APP(MyApp)

#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        samples/richtext/richtext.cpp
// Purpose:     wxWidgets rich text editor sample
// Author:      Julian Smart
// Modified by:
// Created:     2005-10-02
// RCS-ID:      $Id: richtext.cpp 51739 2008-02-12 17:05:32Z JS $
// Copyright:   (c) Julian Smart
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

// menu items
ID_Quit = wx.ID_EXIT
ID_About = wx.ID_ABOUT

[ID_FORMAT_BOLD
ID_FORMAT_ITALIC
ID_FORMAT_UNDERLINE
ID_FORMAT_FONT
ID_FORMAT_PARAGRAPH
ID_FORMAT_CONTENT
ID_RELOAD
ID_INSERT_SYMBOL
ID_INSERT_URL
ID_FORMAT_ALIGN_LEFT
ID_FORMAT_ALIGN_CENTRE
ID_FORMAT_ALIGN_RIGHT
ID_FORMAT_INDENT_MORE
ID_FORMAT_INDENT_LESS
ID_FORMAT_PARAGRAPH_SPACING_MORE
ID_FORMAT_PARAGRAPH_SPACING_LESS
ID_FORMAT_LINE_SPACING_HALF
ID_FORMAT_LINE_SPACING_DOUBLE
ID_FORMAT_LINE_SPACING_SINGLE
ID_FORMAT_NUMBER_LIST
ID_FORMAT_BULLETS_AND_NUMBERING
ID_FORMAT_ITEMIZE_LIST
ID_FORMAT_RENUMBER_LIST
ID_FORMAT_PROMOTE_LIST
ID_FORMAT_DEMOTE_LIST
ID_FORMAT_CLEAR_LIST
ID_VIEW_HTML
ID_SWITCH_STYLE_SHEETS
ID_MANAGE_STYLES
ID_PRINT
ID_PREVIEW
ID_PAGE_SETUP
ID_RICHTEXT_CTRL
ID_RICHTEXT_STYLE_LIST
ID_RICHTEXT_STYLE_COMBO] = 100..

// Define a new application type, each program should derive a class from wx.App
MyApp = class(wx.App) {
	// 'Main program' equivalent: the program execution "starts" here
	OnInit() = {
		wx.HelpProvider.Set(wx.SimpleHelpProvider())
		this.m_styleSheet = wx.RichTextStyleSheet()
		this.m_printing = wx.RichTextPrinting('Test Document')
		this.m_printing.SetFooterText('@TITLE@', wx.RICHTEXT_PAGE_ALL, wx.RICHTEXT_PAGE_CENTRE)
		this.m_printing.SetFooterText('Page @PAGENUM@', wx.RICHTEXT_PAGE_ALL, wx.RICHTEXT_PAGE_RIGHT)
		this.CreateStyles()
		// Add extra handlers (plain text is automatically added)
		wx.RichTextBuffer.AddHandler(wx.RichTextXMLHandler())
		wx.RichTextBuffer.AddHandler(wx.RichTextHTMLHandler())
		// Add image handlers
		wx.Image.AddHandler(wx.PNGHandler())
		wx.Image.AddHandler(wx.JPEGHandler())
		wx.Image.AddHandler(wx.GIFHandler())
		wx.FileSystem.AddHandler(wx.MemoryFSHandler())
		// create the main application window
		frame = MyFrame('wxRichTextCtrl Sample', wx.ID_ANY
									wx.DefaultPosition, wx.Size(700, 600))
		this.m_printing.SetParentWindow(frame)
		// and show it (the frames, unlike simple controls, are not shown when
		// created initially)
		frame.Show(true)
		// success: wxApp::OnRun() will be called which will enter the main message
		// loop and the application will run. If we returned false here, the
		// application would exit immediately.
		true
	}
	CreateStyles() = {
		// Paragraph styles
		romanFont = wx.Font(12, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		swissFont = wx.Font(12, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		normalPara = wx.RichTextParagraphStyleDefinition('Normal')
		normalAttr = wx.RichTextAttr()
		normalAttr.SetFontFaceName(romanFont.GetFaceName())
		normalAttr.SetFontSize(12)
		// Let's set all attributes for this style
		normalAttr.SetFlags(wx.TEXT_ATTR_FONT | wx.TEXT_ATTR_BACKGROUND_COLOUR | wx.TEXT_ATTR_TEXT_COLOUR|wx.TEXT_ATTR_ALIGNMENT|wx.TEXT_ATTR_LEFT_INDENT|wx.TEXT_ATTR_RIGHT_INDENT|wx.TEXT_ATTR_TABS| \
			wx.TEXT_ATTR_PARA_SPACING_BEFORE|wx.TEXT_ATTR_PARA_SPACING_AFTER|wx.TEXT_ATTR_LINE_SPACING| \
			wx.TEXT_ATTR_BULLET_STYLE|wx.TEXT_ATTR_BULLET_NUMBER)
		normalPara.SetStyle(normalAttr)
		this.m_styleSheet.AddParagraphStyle(normalPara)

		indentedPara = wx.RichTextParagraphStyleDefinition('Indented')
		indentedAttr = wx.RichTextAttr()
		indentedAttr.SetFontFaceName(romanFont.GetFaceName())
		indentedAttr.SetFontSize(12)
		indentedAttr.SetLeftIndent(100, 0)
		// We only want to affect indentation
		indentedAttr.SetFlags(wx.TEXT_ATTR_LEFT_INDENT|wx.TEXT_ATTR_RIGHT_INDENT)
		indentedPara.SetStyle(indentedAttr)

		this.m_styleSheet.AddParagraphStyle(indentedPara)

		indentedPara2 = wx.RichTextParagraphStyleDefinition('Red Bold Indented')
		indentedAttr2 = wx.RichTextAttr()
		indentedAttr2.SetFontFaceName(romanFont.GetFaceName())
		indentedAttr2.SetFontSize(12)
		indentedAttr2.SetFontWeight(wx.FONTWEIGHT_BOLD)
		indentedAttr2.SetTextColour(wx.RED)
		indentedAttr2.SetFontSize(12)
		indentedAttr2.SetLeftIndent(100, 0)
		// We want to affect indentation, font and text colour
		indentedAttr2.SetFlags(wx.TEXT_ATTR_LEFT_INDENT|wx.TEXT_ATTR_RIGHT_INDENT|wx.TEXT_ATTR_FONT|wx.TEXT_ATTR_TEXT_COLOUR)
		indentedPara2.SetStyle(indentedAttr2)
		this.m_styleSheet.AddParagraphStyle(indentedPara2)
		flIndentedPara = wx.RichTextParagraphStyleDefinition('First Line Indented')
		flIndentedAttr = wx.RichTextAttr()
		flIndentedAttr.SetFontFaceName(swissFont.GetFaceName())
		flIndentedAttr.SetFontSize(12)
		flIndentedAttr.SetLeftIndent(100, -100)
		// We only want to affect indentation
		flIndentedAttr.SetFlags(wx.TEXT_ATTR_LEFT_INDENT|wx.TEXT_ATTR_RIGHT_INDENT)
		flIndentedPara.SetStyle(flIndentedAttr)
		// Character styles
		boldDef = wx.RichTextCharacterStyleDefinition('Bold')
		boldAttr = wx.RichTextAttr()
		boldAttr.SetFontFaceName(romanFont.GetFaceName())
		boldAttr.SetFontSize(12)
		boldAttr.SetFontWeight(wx.FONTWEIGHT_BOLD)
		// We only want to affect boldness
		boldAttr.SetFlags(wx.TEXT_ATTR_FONT_WEIGHT)
		boldDef.SetStyle(boldAttr)
		this.m_styleSheet.AddCharacterStyle(boldDef)
		italicDef = wx.RichTextCharacterStyleDefinition('Italic')
		italicAttr = wx.RichTextAttr()
		italicAttr.SetFontFaceName(romanFont.GetFaceName())
		italicAttr.SetFontSize(12)
		italicAttr.SetFontStyle(wx.FONTSTYLE_ITALIC)
		// We only want to affect italics
		italicAttr.SetFlags(wx.TEXT_ATTR_FONT_ITALIC)
		italicDef.SetStyle(italicAttr)
		this.m_styleSheet.AddCharacterStyle(italicDef)
		redDef = wx.RichTextCharacterStyleDefinition('Red Bold')
		redAttr = wx.RichTextAttr()
		redAttr.SetFontFaceName(romanFont.GetFaceName())
		redAttr.SetFontSize(12)
		redAttr.SetFontWeight(wx.FONTWEIGHT_BOLD)
		redAttr.SetTextColour(wx.RED)
		// We only want to affect colour, weight and face
		redAttr.SetFlags(wx.TEXT_ATTR_FONT_FACE|wx.TEXT_ATTR_FONT_WEIGHT|wx.TEXT_ATTR_TEXT_COLOUR)
		redDef.SetStyle(redAttr)
		this.m_styleSheet.AddCharacterStyle(redDef)
		bulletList = wx.RichTextListStyleDefinition('Bullet List 1')
		repeat (10) {|i|
			bulletText = if (i == 0) {
				'standard/circle'
			} elsif (i == 1) {
				'standard/square'
			} elsif (i == 2) {
				'standard/circle'
			} elsif (i == 3) {
				'standard/square'
			} else {
				'standard/circle'
			}
			attr = wx.RichTextAttr()
			attr.SetLeftIndent((i + 1) * 60)
			//attr.SetLeftSubIndent(60)
			attr.SetBulletStyle(wx.TEXT_ATTR_BULLET_STYLE_STANDARD)
			attr.SetBulletText(bulletText)
			bulletList.SetLevelAttributes(i, attr)
		}
		this.m_styleSheet.AddListStyle(bulletList)
		numberedList = wx.RichTextListStyleDefinition('Numbered List 1')
		repeat (10) {|i|
			numberStyle = if (i == 0) {
				wx.TEXT_ATTR_BULLET_STYLE_ARABIC|wx.TEXT_ATTR_BULLET_STYLE_PERIOD
			} elsif (i == 1) {
			    wx.TEXT_ATTR_BULLET_STYLE_LETTERS_LOWER|wx.TEXT_ATTR_BULLET_STYLE_PARENTHESES
			} elsif (i == 2) {
				wx.TEXT_ATTR_BULLET_STYLE_ROMAN_LOWER|wx.TEXT_ATTR_BULLET_STYLE_PARENTHESES
			} elsif (i == 3) {
				wx.TEXT_ATTR_BULLET_STYLE_ROMAN_UPPER|wx.TEXT_ATTR_BULLET_STYLE_PARENTHESES
			} else {
			    wx.TEXT_ATTR_BULLET_STYLE_ARABIC|wx.TEXT_ATTR_BULLET_STYLE_PERIOD
			}
			numberStyle |= wx.TEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT
			attr = wx.RichTextAttr()
			attr.SetLeftIndent((i + 1) * 60)
			//attr.SetLeftSubIndent(60)
			attr.SetBulletStyle(numberStyle)
			numberedList.SetLevelAttributes(i, attr)
	    }
		this.m_styleSheet.AddListStyle(numberedList)

		outlineList = wx.RichTextListStyleDefinition('Outline List 1')
		repeat (10) {|i|
			numberStyle = if (i < 4) {
				wx.TEXT_ATTR_BULLET_STYLE_OUTLINE|wx.TEXT_ATTR_BULLET_STYLE_PERIOD
			} else {
				wx.TEXT_ATTR_BULLET_STYLE_ARABIC|wx.TEXT_ATTR_BULLET_STYLE_PERIOD
			}
			attr = wx.RichTextAttr()
			attr.SetLeftIndent((i + 1) * 120)
			//attr.SetLeftSubIndent(120)
			attr.SetBulletStyle(numberStyle)
			outlineList.SetLevelAttributes(i, attr)
		}
		this.m_styleSheet.AddListStyle(outlineList)
	}
	GetStyleSheet() = this.m_styleSheet
}

// Define a new frame type: this is going to be our main frame
MyFrame = class(wx.Frame) {
	// frame constructor
	__init__(title:string, id:wx.WindowID, pos:wx.Point => wx.DefaultPosition
			size:wx.Size => wx.DefaultSize, style => wx.DEFAULT_FRAME_STYLE) = \
											{|nil, id, title, pos, size, style|
		// set the frame icon
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		// create a menu bar
		fileMenu = wx.Menu()
		// the "About" item should be in the help menu
		helpMenu = wx.Menu()
		helpMenu.Append(ID_About, '&About...\tF1', 'Show about dialog')
		fileMenu.Append(wx.ID_OPEN, '&Open\tCtrl+O', 'Open a file')
		fileMenu.Append(wx.ID_SAVE, '&Save\tCtrl+S', 'Save a file')
		fileMenu.Append(wx.ID_SAVEAS, '&Save As...\tF12', 'Save to a new file')
		fileMenu.AppendSeparator()
		fileMenu.Append(ID_RELOAD, '&Reload Text\tF2', 'Reload the initial text')
		fileMenu.AppendSeparator()
		fileMenu.Append(ID_PAGE_SETUP, 'Page Set&up...', 'Page setup')
		fileMenu.Append(ID_PRINT, '&Print...\tCtrl+P', 'Print')
		fileMenu.Append(ID_PREVIEW, 'Print Pre&view', 'Print preview')
		fileMenu.AppendSeparator()
		fileMenu.Append(ID_VIEW_HTML, '&View as HTML', 'View HTML')
		fileMenu.AppendSeparator()
		fileMenu.Append(ID_Quit, 'E&xit\tAlt+X', 'Quit this program')
		editMenu = wx.Menu()
		editMenu.Append(wx.ID_UNDO, '&Undo\tCtrl+Z')
		editMenu.Append(wx.ID_REDO, '&Redo\tCtrl+Y')
		editMenu.AppendSeparator()
		editMenu.Append(wx.ID_CUT, 'Cu&t\tCtrl+X')
		editMenu.Append(wx.ID_COPY, '&Copy\tCtrl+C')
		editMenu.Append(wx.ID_PASTE, '&Paste\tCtrl+V')
		editMenu.AppendSeparator()
		editMenu.Append(wx.ID_SELECTALL, 'Select A&ll\tCtrl+A')
		/*
		editMenu.AppendSeparator()
		editMenu.Append(wx.ID_FIND, '&Find...\tCtrl+F')
		editMenu.Append(wx.ID_FIND_REPLACE, '&Replace...\tCtrl+R')
		*/
		editMenu = wx.Menu()
		editMenu.Append(wx.ID_UNDO, '&Undo\tCtrl+Z')
		editMenu.Append(wx.ID_REDO, '&Redo\tCtrl+Y')
		editMenu.AppendSeparator()
		editMenu.Append(wx.ID_CUT, 'Cu&t\tCtrl+X')
		editMenu.Append(wx.ID_COPY, '&Copy\tCtrl+C')
		editMenu.Append(wx.ID_PASTE, '&Paste\tCtrl+V')
		editMenu.AppendSeparator()
		editMenu.Append(wx.ID_SELECTALL, 'Select A&ll\tCtrl+A')
		/*
		editMenu.AppendSeparator()
		editMenu.Append(wx.ID_FIND, '&Find...\tCtrl+F')
		editMenu.Append(wx.ID_FIND_REPLACE, '&Replace...\tCtrl+R')
		*/
		formatMenu = wx.Menu()
		formatMenu.AppendCheckItem(ID_FORMAT_BOLD, '&Bold\tCtrl+B')
		formatMenu.AppendCheckItem(ID_FORMAT_ITALIC, '&Italic\tCtrl+I')
		formatMenu.AppendCheckItem(ID_FORMAT_UNDERLINE, '&Underline\tCtrl+U')
		formatMenu.AppendSeparator()
		formatMenu.AppendCheckItem(ID_FORMAT_ALIGN_LEFT, 'L&eft Align')
		formatMenu.AppendCheckItem(ID_FORMAT_ALIGN_RIGHT, '&Right Align')
		formatMenu.AppendCheckItem(ID_FORMAT_ALIGN_CENTRE, '&Centre')
		formatMenu.AppendSeparator()
		formatMenu.Append(ID_FORMAT_INDENT_MORE, 'Indent &More')
		formatMenu.Append(ID_FORMAT_INDENT_LESS, 'Indent &Less')
		formatMenu.AppendSeparator()
		formatMenu.Append(ID_FORMAT_PARAGRAPH_SPACING_MORE, 'Increase Paragraph &Spacing')
		formatMenu.Append(ID_FORMAT_PARAGRAPH_SPACING_LESS, 'Decrease &Paragraph Spacing')
		formatMenu.AppendSeparator()
		formatMenu.Append(ID_FORMAT_LINE_SPACING_SINGLE, 'Normal Line Spacing')
		formatMenu.Append(ID_FORMAT_LINE_SPACING_HALF, '1.5 Line Spacing')
		formatMenu.Append(ID_FORMAT_LINE_SPACING_DOUBLE, 'Double Line Spacing')
		formatMenu.AppendSeparator()
		formatMenu.Append(ID_FORMAT_FONT, '&Font...')
		formatMenu.Append(ID_FORMAT_PARAGRAPH, '&Paragraph...')
		formatMenu.Append(ID_FORMAT_CONTENT, 'Font and Pa&ragraph...\tShift+Ctrl+F')
		formatMenu.AppendSeparator()
		formatMenu.Append(ID_SWITCH_STYLE_SHEETS, '&Switch Style Sheets')
		formatMenu.Append(ID_MANAGE_STYLES, '&Manage Styles')
		listsMenu = wx.Menu()
		listsMenu.Append(ID_FORMAT_BULLETS_AND_NUMBERING, 'Bullets and &Numbering...')
		listsMenu.AppendSeparator()
		listsMenu.Append(ID_FORMAT_NUMBER_LIST, 'Number List')
		listsMenu.Append(ID_FORMAT_ITEMIZE_LIST, 'Itemize List')
		listsMenu.Append(ID_FORMAT_RENUMBER_LIST, 'Renumber List')
		listsMenu.Append(ID_FORMAT_PROMOTE_LIST, 'Promote List Items')
		listsMenu.Append(ID_FORMAT_DEMOTE_LIST, 'Demote List Items')
		listsMenu.Append(ID_FORMAT_CLEAR_LIST, 'Clear List Formatting')
		insertMenu = wx.Menu()
		insertMenu.Append(ID_INSERT_SYMBOL, '&Symbol...\tCtrl+I')
		insertMenu.Append(ID_INSERT_URL, '&URL...')
		// now append the freshly created menu to the menu bar...
		menuBar = wx.MenuBar()
		menuBar.Append(fileMenu, '&File')
		menuBar.Append(editMenu, '&Edit')
		menuBar.Append(formatMenu, 'F&ormat')
		menuBar.Append(listsMenu, '&Lists')
		menuBar.Append(insertMenu, '&Insert')
		menuBar.Append(helpMenu, '&Help')
		// ... and attach this menu bar to the frame
		this.SetMenuBar(menuBar)
		// create a status bar just for fun (by default with 1 pane only)
		// but don't create it on limited screen space (WinCE)
		is_pda = (wx.SystemSettings.GetScreenType() <= wx.SYS_SCREEN_PDA)
		if (!is_pda) {
			this.CreateStatusBar(2)
			this.SetStatusText('Welcome to wxRichTextCtrl!')
		}
	    toolBar = this.CreateToolBar()
		toolBar.AddTool(wx.ID_OPEN, 'Open', wx.BitmapFromXPMData(resource.open_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddTool(wx.ID_SAVEAS, 'Save', wx.BitmapFromXPMData(resource.save_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddSeparator()
		toolBar.AddTool(wx.ID_CUT, 'Cut', wx.BitmapFromXPMData(resource.cut_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddTool(wx.ID_COPY, 'Copy', wx.BitmapFromXPMData(resource.copy_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddTool(wx.ID_PASTE, 'Paste', wx.BitmapFromXPMData(resource.paste_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddSeparator()
		toolBar.AddTool(wx.ID_UNDO, 'Undo', wx.BitmapFromXPMData(resource.undo_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddTool(wx.ID_REDO, 'Redo', wx.BitmapFromXPMData(resource.redo_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddSeparator()
		toolBar.AddTool(ID_FORMAT_BOLD, 'Bold', wx.BitmapFromXPMData(resource.bold_xpm), wx.NullBitmap, wx.ITEM_CHECK)
		toolBar.AddTool(ID_FORMAT_ITALIC, 'Italic', wx.BitmapFromXPMData(resource.italic_xpm), wx.NullBitmap, wx.ITEM_CHECK)
		toolBar.AddTool(ID_FORMAT_UNDERLINE, 'Underline', wx.BitmapFromXPMData(resource.underline_xpm), wx.NullBitmap, wx.ITEM_CHECK)
		toolBar.AddSeparator()
		toolBar.AddTool(ID_FORMAT_ALIGN_LEFT, 'Align Left', wx.BitmapFromXPMData(resource.alignleft_xpm), wx.NullBitmap, wx.ITEM_CHECK)
		toolBar.AddTool(ID_FORMAT_ALIGN_CENTRE, 'Centre', wx.BitmapFromXPMData(resource.centre_xpm), wx.NullBitmap, wx.ITEM_CHECK)
		toolBar.AddTool(ID_FORMAT_ALIGN_RIGHT, 'Align Right', wx.BitmapFromXPMData(resource.alignright_xpm), wx.NullBitmap, wx.ITEM_CHECK)
		toolBar.AddSeparator()
		toolBar.AddTool(ID_FORMAT_INDENT_LESS, 'Indent Less', wx.BitmapFromXPMData(resource.indentless_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddTool(ID_FORMAT_INDENT_MORE, 'Indent More', wx.BitmapFromXPMData(resource.indentmore_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		toolBar.AddSeparator()
		toolBar.AddTool(ID_FORMAT_FONT, 'Font', wx.BitmapFromXPMData(resource.font_xpm), wx.NullBitmap, wx.ITEM_NORMAL)
		combo = wx.RichTextStyleComboCtrl(toolBar, ID_RICHTEXT_STYLE_COMBO, wx.DefaultPosition, wx.Size(200, -1))
		this.m_styleCombo = combo
		toolBar.AddControl(combo)
		toolBar.Realize()
		splitter = wx.SplitterWindow(this, wx.ID_ANY, wx.DefaultPosition, this.GetClientSize(), wx.SP_NO_XP_THEME|wx.SP_3D|wx.SP_LIVE_UPDATE)
		textFont = wx.Font(12, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		boldFont = wx.Font(12, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)
		italicFont = wx.Font(12, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_ITALIC, wx.FONTWEIGHT_NORMAL)
		this.m_richTextCtrl = wx.RichTextCtrl(splitter, ID_RICHTEXT_CTRL, wx.EmptyString, wx.DefaultPosition, wx.Size(200, 200), wx.VSCROLL|wx.HSCROLL|wx.NO_BORDER|wx.WANTS_CHARS)
		font = wx.Font(12, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		this.m_richTextCtrl.SetFont(font)
		this.m_richTextCtrl.SetStyleSheet(wx.GetApp().GetStyleSheet())
		combo.SetStyleSheet(wx.GetApp().GetStyleSheet())
		combo.SetRichTextCtrl(this.m_richTextCtrl)
		combo.UpdateStyles()
		styleListCtrl = wx.RichTextStyleListCtrl(splitter, ID_RICHTEXT_STYLE_LIST)
		this.m_styleList = styleListCtrl
		display = wx.GetDisplaySize()
		if (is_pda && (display.GetWidth() < display.GetHeight())) {
			splitter.SplitHorizontally(this.m_richTextCtrl, styleListCtrl)
		} else {
			splitter.SplitVertically(this.m_richTextCtrl, styleListCtrl, 500)
		}
		splitter.UpdateSize()
		styleListCtrl.SetStyleSheet(wx.GetApp().GetStyleSheet())
		styleListCtrl.SetRichTextCtrl(this.m_richTextCtrl)
		styleListCtrl.UpdateStyles()
		this.WriteInitialText()
		this.EventTable()
	}
	EventTable() = {
		// bind event handlers
		this.Bind(wx.EVT_MENU, ID_Quit) { this.OnQuit() }
		this.Bind(wx.EVT_MENU, ID_About) { this.OnAbout() }
		this.Bind(wx.EVT_MENU, wx.ID_OPEN) { this.OnOpen() }
		this.Bind(wx.EVT_MENU, wx.ID_SAVE) { this.OnSave() }
		this.Bind(wx.EVT_MENU, wx.ID_SAVEAS) { this.OnSaveAs() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_BOLD) { this.OnBold() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_ITALIC) { this.OnItalic() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_UNDERLINE) { this.OnUnderline() }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_BOLD) {|event| this.OnUpdateBold(event) }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_ITALIC) {|event| this.OnUpdateItalic(event) }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_UNDERLINE) {|event| this.OnUpdateUnderline(event) }
		this.Bind(wx.EVT_MENU, ID_FORMAT_ALIGN_LEFT) { this.OnAlignLeft() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_ALIGN_CENTRE) { this.OnAlignCentre() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_ALIGN_RIGHT) { this.OnAlignRight() }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_ALIGN_LEFT) {|event| this.OnUpdateAlignLeft(event) }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_ALIGN_CENTRE) {|event| this.OnUpdateAlignCentre(event) }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_ALIGN_RIGHT) {|event| this.OnUpdateAlignRight(event) }
		this.Bind(wx.EVT_MENU, ID_FORMAT_FONT) { this.OnFont() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_PARAGRAPH) { this.OnParagraph() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_CONTENT) { this.OnFormat() }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_FONT) {|event| this.OnUpdateFormat(event) }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_PARAGRAPH) {|event| this.OnUpdateFormat(event) }
		this.Bind(wx.EVT_UPDATE_UI, ID_FORMAT_CONTENT) {|event| this.OnUpdateFormat(event) }
		this.Bind(wx.EVT_MENU, ID_FORMAT_INDENT_MORE) { this.OnIndentMore() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_INDENT_LESS) { this.OnIndentLess() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_LINE_SPACING_HALF) { this.OnLineSpacingHalf() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_LINE_SPACING_SINGLE) { this.OnLineSpacingSingle() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_LINE_SPACING_DOUBLE) { this.OnLineSpacingDouble() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_PARAGRAPH_SPACING_MORE) { this.OnParagraphSpacingMore() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_PARAGRAPH_SPACING_LESS) { this.OnParagraphSpacingLess() }
		this.Bind(wx.EVT_MENU, ID_RELOAD) { this.OnReload() }
		this.Bind(wx.EVT_MENU, ID_INSERT_SYMBOL) { this.OnInsertSymbol() }
		this.Bind(wx.EVT_MENU, ID_INSERT_URL) { this.OnInsertURL() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_NUMBER_LIST) { this.OnNumberList() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_BULLETS_AND_NUMBERING) { this.OnBulletsAndNumbering() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_ITEMIZE_LIST) { this.OnItemizeList() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_RENUMBER_LIST) { this.OnRenumberList() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_PROMOTE_LIST) { this.OnPromoteList() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_DEMOTE_LIST) { this.OnDemoteList() }
		this.Bind(wx.EVT_MENU, ID_FORMAT_CLEAR_LIST) { this.OnClearList() }
		this.Bind(wx.EVT_MENU, ID_VIEW_HTML) { this.OnViewHTML() }
		this.Bind(wx.EVT_MENU, ID_SWITCH_STYLE_SHEETS) { this.OnSwitchStyleSheets() }
		this.Bind(wx.EVT_MENU, ID_MANAGE_STYLES) { this.OnManageStyles() }
		this.Bind(wx.EVT_MENU, ID_PRINT) { this.OnPrint() }
		this.Bind(wx.EVT_MENU, ID_PREVIEW) { this.OnPreview() }
		this.Bind(wx.EVT_MENU, ID_PAGE_SETUP) { this.OnPageSetup() }
		this.Bind(wx.EVT_TEXT_URL, wx.ID_ANY) {|event| this.OnURL(event) }
		this.Bind(wx.EVT_RICHTEXT_STYLESHEET_REPLACING, wx.ID_ANY) {|even| this.OnStyleSheetReplacing(event) }
	}
	// Write text
	WriteInitialText() = {
		r = this.m_richTextCtrl
		r.SetDefaultStyle(wx.RichTextAttr())
		r.BeginSuppressUndo()
		r.BeginParagraphSpacing(0, 20)
		r.BeginAlignment(wx.TEXT_ALIGNMENT_CENTRE)
		r.BeginBold()
		r.BeginFontSize(14)
		lineBreak = '%c' % 29
		r.WriteText('Welcome to wxRichTextCtrl, a wxWidgets control' + lineBreak + 'for editing and presenting styled text and images\n')
		r.EndFontSize()
		//r.Newline()
		r.BeginItalic()
		r.WriteText('by Julian Smart')
		r.EndItalic()
		r.EndBold()
		r.Newline()
		r.WriteBitmap(wx.BitmapFromXPMData(resource.zebra_xpm))
		r.Newline()
		r.Newline()
		r.EndAlignment()
		r.WriteText('What can you do with this thing? ')
		r.WriteBitmap(wx.BitmapFromXPMData(resource.smiley_xpm))
		r.WriteText(' Well, you can change text ')
		r.BeginTextColour(wx.Colour(255, 0, 0))
		r.WriteText('colour, like this red bit.')
		r.EndTextColour()
		backgroundColourAttr = wx.RichTextAttr()
		backgroundColourAttr.SetBackgroundColour(wx.GREEN)
		backgroundColourAttr.SetTextColour(wx.Colour(0, 0, 255))
		r.BeginStyle(backgroundColourAttr)
		r.WriteText(' And this blue on green bit.')
		r.EndStyle()
		r.WriteText(' Naturally you can make things ')
		r.BeginBold()
		r.WriteText('bold ')
		r.EndBold()
		r.BeginItalic()
		r.WriteText('or italic ')
		r.EndItalic()
		r.BeginUnderline()
		r.WriteText('or underlined.')
		r.EndUnderline()
		r.BeginFontSize(14)
		r.WriteText(' Different font sizes on the same line is allowed, too.')
		r.EndFontSize()
		r.WriteText(' Next we\'ll show an indented paragraph.')
		r.Newline()
		r.BeginLeftIndent(60)
		r.WriteText('It was in January, the most down-trodden month of an Edinburgh winter. An attractive woman came into the cafe, which is nothing remarkable.')
		r.Newline()
		r.EndLeftIndent()
		r.WriteText('Next, we\'ll show a first-line indent, achieved using BeginLeftIndent(100, -40).')
		r.Newline()
		r.BeginLeftIndent(100, -40)
		r.WriteText('It was in January, the most down-trodden month of an Edinburgh winter. An attractive woman came into the cafe, which is nothing remarkable.')
		r.Newline()
		r.EndLeftIndent()
		r.WriteText('Numbered bullets are possible, again using subindents:')
		r.Newline()
		r.BeginNumberedBullet(1, 100, 60)
		r.WriteText('This is my first item. Note that wxRichTextCtrl can apply numbering and bullets automatically based on list styles, but this list is formatted explicitly by setting indents.')
		r.Newline()
		r.EndNumberedBullet()
		r.BeginNumberedBullet(2, 100, 60)
		r.WriteText('This is my second item.')
		r.Newline()
		r.EndNumberedBullet()
		r.WriteText('The following paragraph is right-indented:')
		r.Newline()
		r.BeginRightIndent(200)
		r.WriteText('It was in January, the most down-trodden month of an Edinburgh winter. An attractive woman came into the cafe, which is nothing remarkable.')
		r.Newline()
		r.EndRightIndent()
		r.WriteText('The following paragraph is right-aligned with 1.5 line spacing:')
		r.Newline()
		r.BeginAlignment(wx.TEXT_ALIGNMENT_RIGHT)
		r.BeginLineSpacing(wx.TEXT_ATTR_LINE_SPACING_HALF)
		r.WriteText('It was in January, the most down-trodden month of an Edinburgh winter. An attractive woman came into the cafe, which is nothing remarkable.')
		r.Newline()
		r.EndLineSpacing()
		r.EndAlignment()
		tabs = [400, 600, 800, 1000]
		attr = wx.RichTextAttr()
		attr.SetFlags(wx.TEXT_ATTR_TABS)
		attr.SetTabs(tabs)
		r.SetDefaultStyle(attr)
		r.WriteText('This line contains tabs:\tFirst tab\tSecond tab\tThird tab')
		r.Newline()
		r.WriteText('Other notable features of wxRichTextCtrl include:')
		r.Newline()
		r.BeginSymbolBullet('*', 100, 60)
		r.WriteText('Compatibility with wxTextCtrl API')
		r.Newline()
		r.EndSymbolBullet()
		r.BeginSymbolBullet('*', 100, 60)
		r.WriteText('Easy stack-based BeginXXX()...EndXXX() style setting in addition to SetStyle()')
		r.Newline()
		r.EndSymbolBullet()
		r.BeginSymbolBullet('*', 100, 60)
		r.WriteText('XML loading and saving')
		r.Newline()
		r.EndSymbolBullet()
		r.BeginSymbolBullet('*', 100, 60)
		r.WriteText('Undo/Redo, with batching option and Undo suppressing')
		r.Newline()
		r.EndSymbolBullet()
		r.BeginSymbolBullet('*', 100, 60)
		r.WriteText('Clipboard copy and paste')
		r.Newline()
		r.EndSymbolBullet()
		r.BeginSymbolBullet('*', 100, 60)
		r.WriteText('wxRichTextStyleSheet with named character and paragraph styles, and control for applying named styles')
		r.Newline()
		r.EndSymbolBullet()
		r.BeginSymbolBullet('*', 100, 60)
		r.WriteText('A design that can easily be extended to other content types, ultimately with text boxes, tables, controls, and so on')
		r.Newline()
		r.EndSymbolBullet()
		// Make a style suitable for showing a URL
		urlStyle = wx.RichTextAttr()
		urlStyle.SetTextColour(wx.BLUE)
		urlStyle.SetFontUnderlined(true)
		r.WriteText('wxRichTextCtrl can also display URLs, such as this one: ')
		r.BeginStyle(urlStyle)
		r.BeginURL('http://www.wxwidgets.org')
		r.WriteText('The wxWidgets Web Site')
		r.EndURL()
		r.EndStyle()
		r.WriteText('. Click on the URL to generate an event.')
		r.Newline()
		r.WriteText('Note: this sample content was generated programmatically from within the MyFrame constructor in the demo. The images were loaded from inline XPMs. Enjoy wxRichTextCtrl!')
		r.Newline()
		r.EndParagraphSpacing()
		r.EndSuppressUndo()
	}
	// event handlers (these functions should _not_ be virtual)
	OnQuit() = {
		// true is to force the frame to close
		this.Close(true)
	}
	OnAbout() = {
		msg = 'This is a demo for wxRichTextCtrl, a control for editing styled text.\n(c) Julian Smart, 2005'
		wx.MessageBox(msg, 'About wxRichTextCtrl Sample', wx.OK | wx.ICON_INFORMATION, this)
	}
	OnOpen() = {
		[filter, fileTypes] = wx.RichTextBuffer.GetExtWildcard(false, false)
		if (!filter.isempty()) {
			filter += '|'
		}
		filter += 'All files (*.*)|*.*'
		path = ''
		filename = ''
		dialog = wx.FileDialog(this, 'Choose a filename',
									path, filename, filter, wx.FD_OPEN)
		if (dialog.ShowModal() == wx.ID_OK) {
			path = dialog.GetPath()
			if (!path.isempty()) {
				filterIndex = dialog.GetFilterIndex()
				fileType = if (filterIndex < fileTypes.len()) {
					fileTypes[filterIndex]
				} else {
					wx.RICHTEXT_TYPE_TEXT
				}
			}
			this.m_richTextCtrl.LoadFile(path, fileType)
		}
	}
	OnSave() = {
		if (this.m_richTextCtrl.GetFilename().isempty()) {
			this.OnSaveAs()
			return
		}
		this.m_richTextCtrl.SaveFile()
	}
	OnSaveAs() = {
		[filter, fileTypes] = wx.RichTextBuffer.GetExtWildcard(false, true)
		path = ''
		filename = ''
		dialog = wx.FileDialog(this, 'Choose a filename',
									path, filename, filter, wx.FD_SAVE)
		if (dialog.ShowModal() == wx.ID_OK) {
			path = dialog.GetPath()
			if (!path.isempty()) {
				this.m_richTextCtrl.SaveFile(path)
			}
		}
	}
	OnBold() = {
		this.m_richTextCtrl.ApplyBoldToSelection()
	}
	OnItalic() = {
		this.m_richTextCtrl.ApplyItalicToSelection()
	}
	OnUnderline() = {
		this.m_richTextCtrl.ApplyUnderlineToSelection()
	}
	OnUpdateBold(event:wx.UpdateUIEvent) = {
		event.Check(this.m_richTextCtrl.IsSelectionBold())
	}
	OnUpdateItalic(event:wx.UpdateUIEvent) = {
		event.Check(this.m_richTextCtrl.IsSelectionItalics())
	}
	OnUpdateUnderline(event:wx.UpdateUIEvent) = {
		event.Check(this.m_richTextCtrl.IsSelectionUnderlined())
	}
	OnAlignLeft() = {
		this.m_richTextCtrl.ApplyAlignmentToSelection(wx.TEXT_ALIGNMENT_LEFT)
	}
	OnAlignCentre() = {
		this.m_richTextCtrl.ApplyAlignmentToSelection(wx.TEXT_ALIGNMENT_CENTRE)
	}
	OnAlignRight() = {
		this.m_richTextCtrl.ApplyAlignmentToSelection(wx.TEXT_ALIGNMENT_RIGHT)
	}
	OnUpdateAlignLeft(event:wx.UpdateUIEvent) = {
		event.Check(this.m_richTextCtrl.IsSelectionAligned(wx.TEXT_ALIGNMENT_LEFT))
	}
	OnUpdateAlignCentre(event:wx.UpdateUIEvent) = {
		event.Check(this.m_richTextCtrl.IsSelectionAligned(wx.TEXT_ALIGNMENT_CENTRE))
	}
	OnUpdateAlignRight(event:wx.UpdateUIEvent) = {
		event.Check(this.m_richTextCtrl.IsSelectionAligned(wx.TEXT_ALIGNMENT_RIGHT))
	}
	OnFont() = {
		range = if (this.m_richTextCtrl.HasSelection()) {
			this.m_richTextCtrl.GetSelectionRange()
		} else {
			wx.RichTextRange(0, this.m_richTextCtrl.GetLastPosition() + 1)
		}
		pages = wx.RICHTEXT_FORMAT_FONT
		formatDlg = wx.RichTextFormattingDialog(pages, this)
		formatDlg.GetStyle(this.m_richTextCtrl, range)
		if (formatDlg.ShowModal() == wx.ID_OK) {
			formatDlg.ApplyStyle(this.m_richTextCtrl, range, wx.RICHTEXT_SETSTYLE_WITH_UNDO|wx.RICHTEXT_SETSTYLE_OPTIMIZE|wx.RICHTEXT_SETSTYLE_CHARACTERS_ONLY)
		}
	}
	OnParagraph() = {
		range = if (this.m_richTextCtrl.HasSelection()) {
			this.m_richTextCtrl.GetSelectionRange()
		} else {
			wx.RichTextRange(0, this.m_richTextCtrl.GetLastPosition() + 1)
		}
		pages = wx.RICHTEXT_FORMAT_INDENTS_SPACING|wx.RICHTEXT_FORMAT_TABS|wx.RICHTEXT_FORMAT_BULLETS
		formatDlg = wx.RichTextFormattingDialog(pages, this)
		formatDlg.GetStyle(this.m_richTextCtrl, range)
		if (formatDlg.ShowModal() == wx.ID_OK) {
			formatDlg.ApplyStyle(this.m_richTextCtrl, range)
		}
	}
	OnFormat() = {
		range = if (this.m_richTextCtrl.HasSelection()) {
			this.m_richTextCtrl.GetSelectionRange()
		} else {
			wx.RichTextRange(0, this.m_richTextCtrl.GetLastPosition() + 1)
		}
		pages = wx.RICHTEXT_FORMAT_FONT|wx.RICHTEXT_FORMAT_INDENTS_SPACING|wx.RICHTEXT_FORMAT_TABS|wx.RICHTEXT_FORMAT_BULLETS
		formatDlg = wx.RichTextFormattingDialog(pages, this)
		formatDlg.GetStyle(this.m_richTextCtrl, range)
		if (formatDlg.ShowModal() == wx.ID_OK) {
			formatDlg.ApplyStyle(this.m_richTextCtrl, range)
		}
	}
	OnUpdateFormat(event:wx.UpdateUIEvent) = {
		event.Enable(this.m_richTextCtrl.HasSelection())
	}
	OnIndentMore() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_LEFT_INDENT)
		if (this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)) {
			range = wx.RichTextRange(this.m_richTextCtrl.GetInsertionPoint(), this.m_richTextCtrl.GetInsertionPoint())
			if (this.m_richTextCtrl.HasSelection()) {
				range = this.m_richTextCtrl.GetSelectionRange()
			}
			attr.SetLeftIndent(attr.GetLeftIndent() + 100)
			attr.SetFlags(wx.TEXT_ATTR_LEFT_INDENT)
			this.m_richTextCtrl.SetStyle(range, attr)
		}
    }
	OnIndentLess() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_LEFT_INDENT)
		if (this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)) {
			range = wx.RichTextRange(this.m_richTextCtrl.GetInsertionPoint(), this.m_richTextCtrl.GetInsertionPoint())
			if (this.m_richTextCtrl.HasSelection()) {
				range = this.m_richTextCtrl.GetSelectionRange()
			}
			if (attr.GetLeftIndent() > 0) {
				attr.SetLeftIndent(max(0, attr.GetLeftIndent() - 100))
			}
			this.m_richTextCtrl.SetStyle(range, attr)
		}
	}
	OnLineSpacingHalf() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_LINE_SPACING)
		if (this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)) {
			range = wx.RichTextRange(this.m_richTextCtrl.GetInsertionPoint(), this.m_richTextCtrl.GetInsertionPoint())
			if (this.m_richTextCtrl.HasSelection()) {
				range = this.m_richTextCtrl.GetSelectionRange()
			}
			attr.SetFlags(wx.TEXT_ATTR_LINE_SPACING)
			attr.SetLineSpacing(15)
			this.m_richTextCtrl.SetStyle(range, attr)
		}
	}
	OnLineSpacingDouble() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_LINE_SPACING)
		if (this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)) {
			range = wx.RichTextRange(this.m_richTextCtrl.GetInsertionPoint(), this.m_richTextCtrl.GetInsertionPoint())
			if (this.m_richTextCtrl.HasSelection()) {
				range = this.m_richTextCtrl.GetSelectionRange()
			}
			attr.SetFlags(wx.TEXT_ATTR_LINE_SPACING)
			attr.SetLineSpacing(20)
			this.m_richTextCtrl.SetStyle(range, attr)
		}
	}
	OnLineSpacingSingle() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_LINE_SPACING)
		if (this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)) {
			range = wx.RichTextRange(this.m_richTextCtrl.GetInsertionPoint(), this.m_richTextCtrl.GetInsertionPoint())
			if (this.m_richTextCtrl.HasSelection()) {
				range = this.m_richTextCtrl.GetSelectionRange()
			}
			attr.SetFlags(wx.TEXT_ATTR_LINE_SPACING)
			attr.SetLineSpacing(0) // Can also use 10
			this.m_richTextCtrl.SetStyle(range, attr)
		}
    }
	OnParagraphSpacingMore() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_PARA_SPACING_AFTER)
		if (this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)) {
			range = wx.RichTextRange(this.m_richTextCtrl.GetInsertionPoint(), this.m_richTextCtrl.GetInsertionPoint())
			if (this.m_richTextCtrl.HasSelection()) {
				range = this.m_richTextCtrl.GetSelectionRange()
			}
			attr.SetParagraphSpacingAfter(attr.GetParagraphSpacingAfter() + 20)
			attr.SetFlags(wx.TEXT_ATTR_PARA_SPACING_AFTER)
			this.m_richTextCtrl.SetStyle(range, attr)
		}
    }
	OnParagraphSpacingLess() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_PARA_SPACING_AFTER)
		if (this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)) {
			range = wx.RichTextRange(this.m_richTextCtrl.GetInsertionPoint(), this.m_richTextCtrl.GetInsertionPoint())
			if (this.m_richTextCtrl.HasSelection()) {
				range = this.m_richTextCtrl.GetSelectionRange()
			}
			if (attr.GetParagraphSpacingAfter() >= 20) {
				attr.SetParagraphSpacingAfter(attr.GetParagraphSpacingAfter() - 20)
				attr.SetFlags(wx.TEXT_ATTR_PARA_SPACING_AFTER)
				this.m_richTextCtrl.SetStyle(range, attr)
			}
		}
    }
	OnReload() = {
		this.m_richTextCtrl.Clear()
		this.WriteInitialText()
	}
	OnViewHTML() = {
		dialog = wx.Dialog(this, wx.ID_ANY, 'HTML', wx.DefaultPosition, wx.Size(500, 400), wx.DEFAULT_DIALOG_STYLE)
		boxSizer = wx.BoxSizer(wx.VERTICAL)
		dialog.SetSizer(boxSizer)
		win = wx.HtmlWindow(dialog, wx.ID_ANY, wx.DefaultPosition, wx.Size(500, 400), wx.SUNKEN_BORDER)
		boxSizer.Add(win, wx.SizerFlags(1).Border(wx.ALL, 5))
		cancelButton = wx.Button(dialog, wx.ID_CANCEL, '&Close')
		boxSizer.Add(cancelButton, wx.SizerFlags(0).Border(wx.ALL, 5).Align(wx.ALIGN_CENTRE))
		text = wx.String()
		strStream = wx.StringOutputStream(text)
		htmlHandler = wx.RichTextHTMLHandler()
		htmlHandler.SetFlags(wx.RICHTEXT_HANDLER_SAVE_IMAGES_TO_MEMORY)
		fontSizeMapping = [7, 9, 11, 12, 14, 22, 100]
		htmlHandler.SetFontSizeMapping(fontSizeMapping)
		println(text)
		if (htmlHandler.SaveFile(this.m_richTextCtrl.GetBuffer(), strStream)) {
			win.SetPage(text)
		}
		boxSizer.Fit(dialog)
		dialog.ShowModal()
		// Now delete the temporary in-memory images
		htmlHandler.DeleteTemporaryImages()
	}
	// Demonstrates how you can change the style sheets and have the changes
	// reflected in the control content without wiping out character formatting.
	gs_AlternateStyleSheet = nil
	OnSwitchStyleSheets() = {
		//styleList = wx.DynamicCast(this.FindWindow(ID_RICHTEXT_STYLE_LIST), wx.RichTextStyleListCtrl)
		//styleCombo = wx.DynamicCast(this.FindWindow(ID_RICHTEXT_STYLE_COMBO), wx.RichTextStyleComboCtrl)
		styleList = this.m_styleList
		styleCombo = this.m_styleCombo
		sheet = this.m_richTextCtrl.GetStyleSheet()
		// One-time creation of an alternate style sheet
		if (!MyFrame.gs_AlternateStyleSheet) {
			MyFrame.gs_AlternateStyleSheet = sheet.clone()
			// Make some modifications
			repeat (gs_AlternateStyleSheet.GetParagraphStyleCount()) {|i|
				def = gs_AlternateStyleSheet.GetParagraphStyle(i)
				if (def.GetStyle().HasTextColour()) {
					def.GetStyle().SetTextColour(wx.BLUE)
				}
				if (def.GetStyle().HasAlignment()) {
					if (def.GetStyle().GetAlignment() == wx.TEXT_ALIGNMENT_CENTRE) {
						def.GetStyle().SetAlignment(wx.TEXT_ALIGNMENT_RIGHT)
					} elsif (def.GetStyle().GetAlignment() == wx.TEXT_ALIGNMENT_LEFT) {
						def.GetStyle().SetAlignment(wx.TEXT_ALIGNMENT_CENTRE)
					}
				}
				if (def.GetStyle().HasLeftIndent()) {
					def.GetStyle().SetLeftIndent(def.GetStyle().GetLeftIndent() * 2)
				}
			}
		}
		// Switch sheets
		tmp = MyFrame.gs_AlternateStyleSheet
		MyFrame.gs_AlternateStyleSheet = sheet
		sheet = tmp
		this.m_richTextCtrl.SetStyleSheet(sheet)
		this.m_richTextCtrl.ApplyStyleSheet(sheet) // Makes the control reflect the new style definitions
		styleList.SetStyleSheet(sheet)
		styleList.UpdateStyles()
		styleCombo.SetStyleSheet(sheet)
		styleCombo.UpdateStyles()
	}
	OnManageStyles() = {
		sheet = this.m_richTextCtrl.GetStyleSheet()
		flags = wx.RICHTEXT_ORGANISER_CREATE_STYLES|wx.RICHTEXT_ORGANISER_EDIT_STYLES
		dlg = wx.RichTextStyleOrganiserDialog(flags, sheet, nil, this, wx.ID_ANY, 'Style Manager')
		dlg.ShowModal()
	}
	OnInsertSymbol() = {
		attr = wx.TextAttrEx()
		attr.SetFlags(wx.TEXT_ATTR_FONT)
		this.m_richTextCtrl.GetStyle(this.m_richTextCtrl.GetInsertionPoint(), attr)
		if (attr.HasFont() && attr.GetFont().IsOk()) {
			currentFontName = attr.GetFont().GetFaceName()
		}
		// Don't set the initial font in the dialog (so the user is choosing
		// 'normal text', i.e. the current font) but do tell the dialog
		// what 'normal text' is.
		dlg = wx.SymbolPickerDialog('*', wx.EmptyString, currentFontName, this)
		if (dlg.ShowModal() == wx.ID_OK) {
			if (dlg.HasSelection()) {
				insertionPoint = this.m_richTextCtrl.GetInsertionPoint()
				this.m_richTextCtrl.WriteText(dlg.GetSymbol())
				if (!dlg.UseNormalFont()) {
					font = attr.GetFont().clone()
					font.SetFaceName(dlg.GetFontName())
					attr.SetFont(font)
					this.m_richTextCtrl.SetStyle(insertionPoint, insertionPoint+1, attr)
				}
            }
        }
    }
	OnNumberList() = {
		if (this.m_richTextCtrl.HasSelection()) {
			range = this.m_richTextCtrl.GetSelectionRange()
			this.m_richTextCtrl.SetListStyle(range, 'Numbered List 1', wx.RICHTEXT_SETSTYLE_WITH_UNDO|wx.RICHTEXT_SETSTYLE_RENUMBER)
		}
	}
	OnBulletsAndNumbering() = {
		sheet = this.m_richTextCtrl.GetStyleSheet()
		flags = wx.RICHTEXT_ORGANISER_BROWSE_NUMBERING
		dlg = wxRichTextStyleOrganiserDialog(flags, sheet, m_richTextCtrl, this, wx.ID_ANY, 'Bullets and Numbering')
		if (dlg.ShowModal() == wx.ID_OK) {
			if (dlg.GetSelectedStyleDefinition()) {
				dlg.ApplyStyle()
			}
		}
	}
	OnItemizeList() = {
		if (this.m_richTextCtrl.HasSelection()) {
			range = this.m_richTextCtrl.GetSelectionRange()
			this.m_richTextCtrl.SetListStyle(range, 'Bullet List 1')
		}
	}
	OnRenumberList() = {
		if (this.m_richTextCtrl.HasSelection()) {
			range = this.m_richTextCtrl.GetSelectionRange()
			this.m_richTextCtrl.NumberList(range, nil, wx.RICHTEXT_SETSTYLE_WITH_UNDO|wx.RICHTEXT_SETSTYLE_RENUMBER)
		}
	}
	OnPromoteList() = {
		if (this.m_richTextCtrl.HasSelection()) {
			range = this.m_richTextCtrl.GetSelectionRange()
			this.m_richTextCtrl.PromoteList(1, range, nil)
		}
	}
	OnDemoteList() = {
		if (this.m_richTextCtrl.HasSelection()) {
			range = this.m_richTextCtrl.GetSelectionRange()
			this.m_richTextCtrl.PromoteList(-1, range, nil)
		}
	}
	OnClearList() = {
		if (this.m_richTextCtrl.HasSelection()) {
			range = this.m_richTextCtrl.GetSelectionRange()
			this.m_richTextCtrl.ClearListStyle(range)
		}
	}
	OnInsertURL() = {
		url = wx.GetTextFromUser('URL:', 'Insert URL')
		if (!url.isempty()) {
			// Make a style suitable for showing a URL
			urlStyle = wx.RichTextAttr()
			urlStyle.SetTextColour(wx.BLUE)
			urlStyle.SetFontUnderlined(true)
			this.m_richTextCtrl.BeginStyle(urlStyle)
			this.m_richTextCtrl.BeginURL(url)
			this.m_richTextCtrl.WriteText(url)
			this.m_richTextCtrl.EndURL()
			this.m_richTextCtrl.EndStyle()
		}
	}
	OnURL(event:wx.TextUrlEvent) = {
		wx.MessageBox(event.GetString())
	}
	// Veto style sheet replace events when loading from XML, since we want
	// to keep the original style sheet.
	OnStyleSheetReplacing(event:wx.RichTextEvent) = {
		event.Veto()
	}
	OnPrint() = {
		wx.GetApp().GetPrinting().PrintBuffer(this.m_richTextCtrl.GetBuffer())
	}
	OnPreview() = {
		wx.GetApp().GetPrinting().PreviewBuffer(this.m_richTextCtrl.GetBuffer())
	}
	OnPageSetup() = {
		wx.GetApp().GetPrinting().PageSetup()
	}
}

wx.IMPLEMENT_APP(MyApp)

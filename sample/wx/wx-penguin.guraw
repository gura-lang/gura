#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        penguin.cpp
// Purpose:     wxGLCanvas demo program
// Author:      Robert Roebling
// Modified by: Sandro Sigala
// Created:     04/01/98
// RCS-ID:      $Id: penguin.cpp 43272 2006-11-10 15:16:02Z VZ $
// Copyright:   (c) Robert Roebling
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(opengl) {*}
import(glu) {*}
import(resource)
import(penguin.trackball) {*}
import(penguin.dxfrenderer) {*}

// OpenGL view data
GLData = struct(
	initialized:boolean,	// have OpenGL been initialized?
	beginx:number,			// position of mouse
	beginy:number,
	quat[]:number,			// orientation of object
	zoom:number				// field of view in degrees
)

// ---------------------------------------------------------------------------
// MyApp
// ---------------------------------------------------------------------------

MyApp = class(wx.App) {
	OnInit() = {
		// Create the main frame window
		frame = MyFrame(nil, 'wxWidgets Penguin Sample',
						wx.DefaultPosition, wx.DefaultSize)
		if (wx.FileExists('penguin.dxf.gz')) {
			frame.GetCanvas().LoadDXF('penguin.dxf.gz')
		}
		/* Show the frame */
		frame.Show(true)
		true
	}
}

// ---------------------------------------------------------------------------
// TestGLCanvas
// ---------------------------------------------------------------------------

TestGLCanvas = class(wx.GLCanvas) {
	__init__(parent:wx.Window, id:number => wx.ID_ANY,
			 pos:wx.Point => wx.DefaultPosition,
			 size:wx.Size => wx.DefaultSize, style:number => 0,
			 name:string => 'TestGLCanvas') = {
		|parent, id, [], pos, size, (style | wx.FULL_REPAINT_ON_RESIZE), name|
		this.EventTable()
		this.m_gldata = GLData(
			initialized => false
			// initialize view matrix
			beginx => 0.0
			beginy => 0.0
			quat => [0, 0, 0, 0]
			zoom => 45.0
		)
		this.m_gldata.quat = trackball(0.0, 0.0, 0.0, 0.0)
		this.m_renderer = DXFRenderer()
		this.m_context = wx.GLContext(this)
	}
	EventTable() = {
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event) }
		this.Bind(wx.EVT_ERASE_BACKGROUND) {|event| this.OnEraseBackground(event) }
		this.Bind(wx.EVT_MOUSE_EVENTS) {|event| this.OnMouse(event) }
	}
	OnPaint(event:wx.PaintEvent) = {
		// must always be here
		dc = wx.PaintDC(this)
		try {
			this.m_context.SetCurrent(this)
			// Initialize OpenGL
			if (!this.m_gldata.initialized) {
				this.InitGL()
				this.ResetProjectionMode()
				this.m_gldata.initialized = true
			}
			// Clear
			glClearColor(0.3, 0.4, 0.6, 1.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			// Transformations
			glLoadIdentity()
			glTranslatef(0.0, 0.0, -20.0)
			m = build_rotmatrix(this.m_gldata.quat)
			glMultMatrixf(m)
			this.m_renderer.Render()
			// Flush
			glFlush()
			// Swap
			this.SwapBuffers()
		} catch {|e|
			println(e.text)
		}
		dc = nil
	}
	OnSize(event:wx.SizeEvent) = {
		// this is also necessary to update the context on some platforms
		//super(this).OnSize(event)
		// Reset the OpenGL view aspect
		this.ResetProjectionMode()
	}
	OnEraseBackground(event:wx.EraseEvent) = {
		// Do nothing, to avoid flashing on MSW
	}
	LoadDXF(filename:string) = {
		stream = wx.FileInputStream(filename)
		if (stream.Ok()) {
			if (filename.endswith('.gz')) {
				zstream = wx.ZlibInputStream(stream)
				this.m_renderer.Load(zstream)
			} else {
				this.m_renderer.Load(stream)
			}
		}
	}
	OnMouse(event:wx.MouseEvent) = {
		if (event.Dragging()) {
			sz = this.GetClientSize()
			/* drag in progress, simulate trackball */
			spin_quat = trackball(
				(2.0 * this.m_gldata.beginx - sz.x) / sz.x,
				(sz.y - 2.0 * this.m_gldata.beginy) / sz.y,
				(2.0 * event.GetX() - sz.x)	/ sz.x,
				(sz.y - 2.0 * event.GetY())	/ sz.y)
			this.m_gldata.quat = add_quats(spin_quat, this.m_gldata.quat)
			/* orientation has changed, redraw mesh */
			this.Refresh(false)
		}
		this.m_gldata.beginx = event.GetX()
		this.m_gldata.beginy = event.GetY()
	}
	InitGL() = {
		light0_pos = [-50.0, 50.0, 0.0, 0.0]
		// white light
		light0_color = [0.6, 0.6, 0.6, 1.0]
		light1_pos = [50.0, 50.0, 0.0, 0.0]
		// cold blue light
		light1_color = [0.4, 0.4, 1.0, 1.0]
		/* remove back faces */
		glDisable(GL_CULL_FACE)
		glEnable(GL_DEPTH_TEST)
		/* speedups */
		glEnable(GL_DITHER)
		glShadeModel(GL_SMOOTH)
		glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_FASTEST)
		glHint(GL_POLYGON_SMOOTH_HINT, GL_FASTEST)
		/* light */
		glLightfv(GL_LIGHT0, GL_POSITION, light0_pos)
		glLightfv(GL_LIGHT0, GL_DIFFUSE,  light0_color)
		glLightfv(GL_LIGHT1, GL_POSITION, light1_pos)
		glLightfv(GL_LIGHT1, GL_DIFFUSE,  light1_color)
		glEnable(GL_LIGHT0)
		glEnable(GL_LIGHT1)
		glEnable(GL_LIGHTING)
		glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE)
		glEnable(GL_COLOR_MATERIAL)
	}
	ResetProjectionMode() = {
		[w, h] = this.GetClientSizeWH()
		this.m_context.SetCurrent(this)
		glViewport(0, 0, w, h)
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity()
		gluPerspective(45.0, w / h, 1.0, 100.0)
		glMatrixMode(GL_MODELVIEW)
		glLoadIdentity()
	}
}

// ---------------------------------------------------------------------------
// MyFrame
// ---------------------------------------------------------------------------

MyFrame = class(wx.Frame) {
	__init__(frame:wx.Frame:nil, title:string, pos:wx.Point,
				size:wx.Size, style:number => wx.DEFAULT_FRAME_STYLE) = \
			{|frame, wx.ID_ANY, title, pos, size, style|
		this.EventTable()
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		// Make the "File" menu
		fileMenu = wx.Menu()
		fileMenu.Append(wx.ID_OPEN, '&Open...')
		fileMenu.AppendSeparator()
		fileMenu.Append(wx.ID_EXIT, 'E&xit\tALT-X')
		// Make the "Help" menu
		helpMenu = wx.Menu()
		helpMenu.Append(wx.ID_HELP, '&About...')
		menuBar = wx.MenuBar()
		menuBar.Append(fileMenu, '&File')
		menuBar.Append(helpMenu, '&Help')
		this.SetMenuBar(menuBar)
		this.m_canvas = TestGLCanvas(this, wx.ID_ANY, wx.DefaultPosition,
									wx.Size(300, 300), wx.SUNKEN_BORDER)
	}
	EventTable() = {
		this.Bind(wx.EVT_MENU, wx.ID_OPEN) {|event| this.OnMenuFileOpen(event) }
		this.Bind(wx.EVT_MENU, wx.ID_EXIT) {|event| this.OnMenuFileExit(event) }
		this.Bind(wx.EVT_MENU, wx.ID_HELP) {|event| this.OnMenuHelpAbout(event) }
	}
	OnMenuFileOpen(event:wx.CommandEvent) = {
		filename = wx.FileSelector('Choose DXF Model', '', '', '',
			'DXF Drawing (*.dxf;*.dxf.gz)|*.dxf;*.dxf.gz|All files (*.*)|*.*',
			//'DXF Drawing (*.dxf)|*.dxf)|All files (*.*)|*.*',
			wx.FD_OPEN)
		if (!filename.isempty()) {
			this.m_canvas.LoadDXF(filename)
			this.m_canvas.Refresh(false)
		}
	}
	OnMenuFileExit(event:wx.CommandEvent) = {
		// true is to force the frame to close
		this.Close(true)
	}
	OnMenuHelpAbout(event:wx.CommandEvent) = {
		wx.MessageBox('OpenGL Penguin Sample (c) Robert Roebling, Sandro Sigala et al')
	}
	//SetCanvas(canvas:TestGLCanvas) = { this.m_canvas = canvas }
	GetCanvas() = { this.m_canvas }
}

wx.IMPLEMENT_APP(MyApp)

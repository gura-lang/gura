#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        caret.cpp
// Purpose:     wxCaret sample
// Author:      Robert Roebling
// Modified by:
// Created:     04/01/98
// RCS-ID:      $Id: caret.cpp 29599 2004-10-02 12:36:02Z VS $
// Copyright:   (c) wxWindows team
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

// ----------------------------------------------------------------------------
// constants
// ----------------------------------------------------------------------------

// IDs for the controls and the menu commands
[
// menu items
Caret_Quit,
Caret_About,
Caret_SetBlinkTime,
Caret_SetFontSize,
Caret_Move,
] = 1..

// controls start here (the numbers are, of course, arbitrary)
Caret_Text = 1000

MyApp = class(wx.App) {
	OnInit() = {
		// create and show the main application window
		frame = MyFrame('Caret wxWidgets sample',
							wx.Point(50, 50), wx.Size(450, 340))
		frame.Show(true)
		// success: wxApp::OnRun() will be called which will enter the main message
		// loop and the application will run. If we returned false here, the
		// application would exit immediately.
		true
	}
}

MyFrame = class(wx.Frame) {
	__init__(title:string, pos:wx.Point, size:wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		self.EventTable()
		// set the frame icon
		self.SetIcon(wx.IconFromXPMData(resource.mondrian_xpm))
		// create a menu bar
		menuFile = wx.Menu()
		menuFile.Append(Caret_SetBlinkTime, '&Blink time...\tCtrl-B')
		menuFile.Append(Caret_SetFontSize, '&Font size...\tCtrl-S')
		menuFile.Append(Caret_Move, '&Move caret\tCtrl-C')
		menuFile.AppendSeparator()
		menuFile.Append(Caret_About, '&About...\tCtrl-A', 'Show about dialog')
		menuFile.AppendSeparator()
		menuFile.Append(Caret_Quit, 'E&xit\tAlt-X', 'Quit this program')
		// now append the freshly created menu to the menu bar...
		menuBar = wx.MenuBar()
		menuBar.Append(menuFile, '&File')
		// ... and attach this menu bar to the frame
		self.SetMenuBar(menuBar)
		self.m_canvas = MyCanvas(self)
		// create a status bar just for fun (by default with 1 pane only)
		self.CreateStatusBar(2)
		self.SetStatusText('Welcome to wxWidgets!')
	}
	EventTable() = {
		self.Bind(wx.EVT_MENU, Caret_Quit) {|event| self.OnQuit(event) }
		self.Bind(wx.EVT_MENU, Caret_About) {|event| self.OnAbout(event) }
		self.Bind(wx.EVT_MENU, Caret_SetBlinkTime) {|event| self.OnSetBlinkTime(event) }
		self.Bind(wx.EVT_MENU, Caret_SetFontSize) {|event| self.OnSetFontSize(event) }
		self.Bind(wx.EVT_MENU, Caret_Move) {|event| self.OnCaretMove(event) }
	}
	// event handlers (these functions should _not_ be virtual)
	OnQuit(event:wx.CommandEvent) = {
		// true is to force the frame to close
		self.Close(true)
	}
	OnAbout(event:wx.CommandEvent) = {
		wx.MessageBox('The caret wxWidgets sample.\n(c) 1999 Vadim Zeitlin',
						'About Caret', wx.OK | wx.ICON_INFORMATION, self)
	}
	OnCaretMove(event:wx.CommandEvent) = {
		self.m_canvas.MoveCaret(10, 10)
	}
	OnSetBlinkTime(event:wx.CommandEvent) = {
		blinkTime = wx.GetNumberFromUser(
						'The caret blink time is the time between two blinks',
						'Time in milliseconds:',
						'wxCaret sample',
						wx.Caret.GetBlinkTime(), 0, 10000,
						self
						)
		if (blinkTime != -1) {
			wx.Caret.SetBlinkTime(blinkTime)
			self.m_canvas.CreateCaret()
			wx.LogStatusEx(self, 'Blink time set to %ld milliseconds.', blinkTime)
		}
	}
	OnSetFontSize(event:wx.CommandEvent) = {
		fontSize = wx.GetNumberFromUser(
						'The font size also determines the caret size so\nthis demonstrates resizing the caret.',
						'Font size (in points):',
						'wxCaret sample',
						12, 1, 100,
						self
						)
		if (fontSize != -1) {
			self.m_canvas.SetFontSize(fontSize)
		}
	}
}

MyCanvas = class(wx.ScrolledWindow) {
	__init__(parent:wx.Frame) = {|parent, wx.ID_ANY,
				wx.DefaultPosition, wx.DefaultSize, wx.SUNKEN_BORDER|
		self.m_frame = parent
		self.EventTable()
		// the text
		self.m_text = nil
		self.SetBackgroundColour(wx.WHITE)
		self.SetFontSize(12)
		// position (in text coords) of the caret
		self.m_xCaret = self.m_yCaret = 0
		// the size (in text coords) of the window
		self.m_xChars = self.m_yChars = 0
		// the margin around the text (looks nicer)
		self.m_xMargin = self.m_yMargin = 5
		self.CreateCaret()
	}
	EventTable() = {
		self.Bind(wx.EVT_PAINT) {|event| self.OnPaint(event) }
		self.Bind(wx.EVT_SIZE) {|event| self.OnSize(event) }
		self.Bind(wx.EVT_CHAR) {|event| self.OnChar(event) }
	}
	CharAt(x:number, y:number) = { self.m_text[y][x] }
	StoreAt(x:number, y:number, ch:string) = { self.m_text[y][x] = ch }
	// operations
	CreateCaret() = {
		caret = wx.Caret(self, self.m_widthChar, self.m_heightChar)
		self.SetCaret(caret)
		caret.Move(self.m_xMargin, self.m_yMargin)
		caret.Show()
	}
	SetFontSize(fontSize:number) = {
		self.m_font = wx.Font(fontSize, wx.FONTFAMILY_TELETYPE,
						wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		dc = wx.ClientDC(self)
		dc.SetFont(self.m_font)
		self.m_heightChar = dc.GetCharHeight()
		self.m_widthChar = dc.GetCharWidth()
		caret = self.GetCaret()
		if (caret) {
			caret.SetSize(self.m_widthChar, self.m_heightChar)
			self.ChangeSize()
		}
	}
	MoveCaret(x:number, y:number) = {
		self.m_xCaret = x
		self.m_yCaret = y
		self.DoMoveCaret()
	}
	// caret movement
	Home() = { self.m_xCaret = 0 }
	End() = { self.m_xCaret = self.m_xChars - 1 }
	FirstLine() = { self.m_yCaret = 0 }
	LastLine() = { self.m_yCaret = self.m_yChars - 1 }
	PrevChar() = { if (self.m_xCaret == 0) { self.End(); self.PrevLine() }, self.m_xCaret -= 1 }
	NextChar() = { self.m_xCaret += 1, if (self.m_xCaret == self.m_xChars) { self.Home(); self.NextLine() } }
	PrevLine() = { if (self.m_yCaret == 0) { self.LastLine() }, self.m_yCaret -= 1 }
	NextLine() = { self.m_yCaret += 1, if (self.m_yCaret == self.m_yChars) { self.FirstLine() } }
	// event handlers
	// move the caret to m_xCaret, m_yCaret
	DoMoveCaret() = {
		wx.LogStatus('Caret is at (%d, %d)', self.m_xCaret, self.m_yCaret)
		self.GetCaret().Move(self.m_xMargin + self.m_xCaret * self.m_widthChar,
						self.m_yMargin + self.m_yCaret * self.m_heightChar)
	}
	OnSize(event:wx.SizeEvent) = {
		self.ChangeSize()
		event.Skip()
	}
	// update the geometry
	ChangeSize() = {
		size = self.GetClientSize()
		self.m_xChars = (size.x - 2 * self.m_xMargin) / self.m_widthChar
		self.m_yChars = (size.y - 2 * self.m_yMargin) / self.m_heightChar
		if (self.m_xChars == 0) {
			self.m_xChars = 1
		}
		if (self.m_yChars == 0) {
			self.m_yChars = 1
		}
		//free(m_text)
		self.m_text = dim(self.m_yChars, self.m_xChars) {''}
		if (self.m_frame && self.m_frame.GetStatusBar()) {
			msg = format('Panel size is (%d, %d)', self.m_xChars, self.m_yChars)
			self.m_frame.SetStatusText(msg, 1)
		}
	}
	OnPaint(event:wx.PaintEvent) = {
		wx.CaretSuspend(self) {
			dc = wx.PaintDC(self)
			self.PrepareDC(dc)
			dc.Clear()
			dc.SetFont(self.m_font)
			repeat(self.m_yChars) {|y|
				line = ''
				repeat(self.m_xChars) {|x|
					ch = self.CharAt(x, y)
					if (!ch) {
						ch = ' '
					}
					line += ch
				}
				dc.DrawText(line, self.m_xMargin, self.m_yMargin + y * self.m_heightChar)
			}
		}
	}
	OnChar(event:wx.KeyEvent) = {
		keyCode = event.GetKeyCode()
		if (keyCode == wx.WXK_LEFT) {
			self.PrevChar()
		} elsif (keyCode == wx.WXK_RIGHT) {
			self.NextChar()
		} elsif (keyCode == wx.WXK_UP) {
			self.PrevLine()
		} elsif (keyCode == wx.WXK_DOWN) {
			self.NextLine()
		} elsif (keyCode == wx.WXK_HOME) {
			self.Home()
		} elsif (keyCode == wx.WXK_END) {
			self.End()
		} elsif (keyCode == wx.WXK_RETURN) {
			self.Home()
			self.NextLine()
		} else {
			if (!event.AltDown() && wx.Isprint(event.GetKeyCode())) {
				ch = chr(event.GetKeyCode())
				self.StoreAt(self.m_xCaret, self.m_yCaret, ch)
				wx.CaretSuspend(self) {
					dc = wx.ClientDC(self)
					dc.SetFont(self.m_font)
					dc.SetBackgroundMode(wx.SOLID) // overwrite old value
					dc.DrawText(ch, self.m_xMargin + self.m_xCaret * self.m_widthChar,
									self.m_yMargin + self.m_yCaret * self.m_heightChar)
					self.NextChar()
				}
			} else {
				event.Skip()
			}
		}
		self.DoMoveCaret()
	}
}

// Create a new application object: this macro will allow wxWidgets to create
// the application object during program execution (it's better than using a
// static object for many reasons) and also declares the accessor function
// wxGetApp() which will return the reference of the right type (i.e. MyApp and
// not wxApp)
wx.IMPLEMENT_APP(MyApp)

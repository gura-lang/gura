#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        cube.cpp
// Purpose:     wxGLCanvas demo program
// Author:      Julian Smart
// Modified by:
// Created:     04/01/98
// RCS-ID:      $Id: cube.cpp 35650 2005-09-23 12:56:45Z MR $
// Copyright:   (c) Julian Smart
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)
import(opengl) {*}

ID_NEW_WINDOW = 10000
ID_DEF_ROTATE_LEFT_KEY = 10001
ID_DEF_ROTATE_RIGHT_KEY = 10002

/*----------------------------------------------------------
  Control to get a keycode
  ----------------------------------------------------------*/
ScanCodeCtrl = class(wx.TextCtrl) {
	__init__(parent:wx.Window, id:number, code:number, pos:wx.Point, size:wx.Size) = \
								{|parent, id, wx.EmptyString, pos, size|
		this.EventTable()
		this.SetValue(format('0x%04x', code))
	}
	EventTable() = {
		this.Bind(wx.EVT_CHAR) {|event| this.OnChar(event) }
		this.Bind(wx.EVT_KEY_DOWN) {|event| this.OnKeyDown(event) }
	}
	OnChar(event:wx.KeyEvent) = {
		// Do nothing
	}
	OnKeyDown(event:wx.KeyEvent) = {
		this.SetValue(format('0x%04x', event.GetKeyCode()))
	}
}

/*------------------------------------------------------------------
 Dialog for defining a keypress
-------------------------------------------------------------------*/

ScanCodeDialog = class(wx.Dialog) {
	__init__(parent:wx.Window, id:number, code:number, descr:string, title:string) = \
			{|parent, id, title, wx.DefaultPosition, wx.Size(96 * 2, 76 * 2)|
		wx.StaticText(this, wx.ID_ANY, 'Scancode', wx.Point(4 * 2, 3 * 2),
			wx.Size(31 * 2, 12 * 2))
		this.m_ScanCode = ScanCodeCtrl(this, wx.ID_ANY, code, wx.Point(37 * 2,6 * 2),
			wx.Size(53 * 2, 14 * 2))
		wx.StaticText(this, wx.ID_ANY, 'Description', wx.Point(4 * 2, 24 * 2),
			wx.Size(32 * 2, 12 * 2))
		this.m_Description = wx.TextCtrl(this, wx.ID_ANY, descr, wx.Point(37 * 2, 27 * 2),
			wx.Size(53 * 2, 14 * 2))
		wx.Button(this, wx.ID_OK, 'Ok', wx.Point(20 * 2, 50 * 2), wx.Size(20 * 2, 13 * 2))
		wx.Button(this, wx.ID_CANCEL, 'Cancel', wx.Point(44 * 2,50 * 2),
			wx.Size(25 * 2, 13 * 2))
	}
	GetValue() = {
		buf = this.m_ScanCode.GetValue()
		code = int(buf)
		code
	}
}

/*----------------------------------------------------------------
  Implementation of Test-GLCanvas
-----------------------------------------------------------------*/

TestGLCanvas = class(wx.GLCanvas) {
	__init__(parent:wx.Window,
			id:number => wx.ID_ANY, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.DefaultSize, style:number => 0,
			 name:string => 'TestGLCanvas') = {
		|parent, id, [], pos, size, (style | wx.FULL_REPAINT_ON_RESIZE), name|
		this.EventTable()
		this.m_init = false
		this.m_gllist = nil
		this.m_rleft:public = wx.WXK_LEFT
		this.m_rright:public = wx.WXK_RIGHT
		this.m_TimeInitialized = 0
		this.m_xsynct = 0
		this.m_gsynct = 0
		this.m_Key = 0
		this.m_StartTime = 0
		this.m_LastTime = 0
		this.m_LastRedraw = 0
		this.m_context = wx.GLContext(this)
	}
	EventTable() = {
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event) }
		this.Bind(wx.EVT_ERASE_BACKGROUND) {|event| this.OnEraseBackground(event) }
		this.Bind(wx.EVT_KEY_DOWN) {|event| this.OnKeyDown(event) }
		this.Bind(wx.EVT_KEY_UP) {|event| this.OnKeyUp(event) }
		this.Bind(wx.EVT_ENTER_WINDOW) {|event| this.OnEnterWindow(event) }
	}
	Render() = {
		dc = wx.PaintDC(this)
		this.m_context.SetCurrent(this)
		// Init OpenGL once, but after SetCurrent
		if (!this.m_init) {
			this.InitGL()
			this.m_init = true
		}
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity()
		glFrustum(-0.5, 0.5, -0.5, 0.5, 1.0, 3.0)
		glMatrixMode(GL_MODELVIEW)
		/* clear color and depth buffers */
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
		if (this.m_gllist == nil) {
			this.m_gllist = glGenLists(1)
			glNewList(this.m_gllist, GL_COMPILE_AND_EXECUTE )
			/* draw six faces of a cube */
			glBegin(GL_QUADS)
			glNormal3f( 0.0, 0.0, 1.0)
			glVertex3f( 0.5, 0.5, 0.5); glVertex3f(-0.5, 0.5, 0.5)
			glVertex3f(-0.5,-0.5, 0.5); glVertex3f( 0.5,-0.5, 0.5)
			glNormal3f( 0.0, 0.0,-1.0)
			glVertex3f(-0.5,-0.5,-0.5); glVertex3f(-0.5, 0.5,-0.5)
			glVertex3f( 0.5, 0.5,-0.5); glVertex3f( 0.5,-0.5,-0.5)
			glNormal3f( 0.0, 1.0, 0.0)
			glVertex3f( 0.5, 0.5, 0.5); glVertex3f( 0.5, 0.5,-0.5)
			glVertex3f(-0.5, 0.5,-0.5); glVertex3f(-0.5, 0.5, 0.5)
			glNormal3f( 0.0,-1.0, 0.0)
			glVertex3f(-0.5,-0.5,-0.5); glVertex3f( 0.5,-0.5,-0.5)
			glVertex3f( 0.5,-0.5, 0.5); glVertex3f(-0.5,-0.5, 0.5)
			glNormal3f( 1.0, 0.0, 0.0)
			glVertex3f( 0.5, 0.5, 0.5); glVertex3f( 0.5,-0.5, 0.5)
			glVertex3f( 0.5,-0.5,-0.5); glVertex3f( 0.5, 0.5,-0.5)
			glNormal3f(-1.0, 0.0, 0.0)
			glVertex3f(-0.5,-0.5,-0.5); glVertex3f(-0.5,-0.5, 0.5)
			glVertex3f(-0.5, 0.5, 0.5); glVertex3f(-0.5, 0.5,-0.5)
			glEnd()
			glEndList()
		} else {
			glCallList(this.m_gllist)
		}
		glFlush()
		this.SwapBuffers()
		dc = nil
	}
	OnEnterWindow(event:wx.MouseEvent) = {
	}
	OnPaint(event:wx.PaintEvent) = {
		this.Render()
	}
	OnSize(event:wx.SizeEvent) = {
		// set GL viewport (not called by wxGLCanvas::OnSize on all platforms...)
		[w, h] = this.GetClientSizeWH()
		this.m_context.SetCurrent(this)
		glViewport(0, 0, w, h)
	}
	OnEraseBackground(event:wx.EraseEvent) = {
		// Do nothing, to avoid flashing.
	}
	InitGL() = {
		this.m_context.SetCurrent(this)
		/* set viewing projection */
		glMatrixMode(GL_PROJECTION)
		glFrustum(-0.5, 0.5, -0.5, 0.5, 1.0, 3.0)
		/* position viewer */
		glMatrixMode(GL_MODELVIEW)
		glTranslatef(0.0, 0.0, -2.0)
		/* position object */
		glRotatef(30.0, 1.0, 0.0, 0.0)
		glRotatef(30.0, 0.0, 1.0, 0.0)
		glEnable(GL_DEPTH_TEST)
		glEnable(GL_LIGHTING)
		glEnable(GL_LIGHT0)
	}
	CalcRotateSpeed(acceltime:number):static = {
		t = acceltime / 1000.0
		if (t < 0.5) {
			v = t
		} elsif (t < 1.0) {
			v = t * (2.0 - t)
		} else {
			v = 0.75
		}
		v
	}
	CalcRotateAngle(lasttime:number, acceltime:number):static = {
		t = (acceltime - lasttime) / 1000.0
		s1 = this.CalcRotateSpeed(lasttime)
		s2 = this.CalcRotateSpeed(acceltime)
		t * (s1 + s2) * 135.0
	}
	Action(code:number, lasttime:number, acceltime:number) = {
		angle = this.CalcRotateAngle(lasttime, acceltime)
		if (code == this.m_rleft) {
			this.Rotate(angle)
		} elsif (code == this.m_rright) {
			this.Rotate(-angle)
		}
	}
	OnKeyDown(event:wx.KeyEvent) = {
		evkey = event.GetKeyCode()
		if (evkey == 0) { return }
		if (!this.m_TimeInitialized) {
			this.m_TimeInitialized = 1
			this.m_xsynct = event.GetTimestamp()
			this.m_gsynct = StopWatch(&m_secbase)
			this.m_Key = evkey
			this.m_StartTime = 0
			this.m_LastTime = 0
			this.m_LastRedraw = 0
		}
		currTime = event.GetTimestamp() - this.m_xsynct
		if (evkey != this.m_Key) {
			this.m_Key = evkey
			this.m_LastRedraw = this.m_StartTime = this.m_LastTime = currTime
		}
		if (currTime >= this.m_LastRedraw) {	  // Redraw:
			this.Action(this.m_Key, this.m_LastTime - this.m_StartTime, currTime - this.m_StartTime)
			this.m_LastRedraw = currTime;
			//m_LastRedraw = StopWatch(&m_secbase) - m_gsynct
			this.m_LastTime = currTime
		}
		event.Skip()
	}
	OnKeyUp(event:wx.KeyEvent) = {
		this.m_Key = 0
		this.m_StartTime = 0
		this.m_LastTime = 0
		this.m_LastRedraw = 0
		event.Skip()
	}
	Rotate(deg:number) = {
		this.m_context.SetCurrent(this)
		glMatrixMode(GL_MODELVIEW)
		glRotatef(deg, 0.0, 0.0, 1.0)
		this.Refresh(false)
	}
}

/* -----------------------------------------------------------------------
  Main Window
-------------------------------------------------------------------------*/

MyFrame = class(wx.Frame) {
	__init__(parent:wx.Window:nil, title:string, pos:wx.Point,
			size:wx.Size, style:number => wx.DEFAULT_FRAME_STYLE) = \
							{|parent, wx.ID_ANY, title, pos, size, style|
		this.EventTable()
		this.m_canvas = nil
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
	}
	EventTable() = {
		this.Bind(wx.EVT_MENU, wx.ID_EXIT) {|event| this.OnExit(event) }
		this.Bind(wx.EVT_MENU, ID_NEW_WINDOW) {|event| this.OnNewWindow(event) }
		this.Bind(wx.EVT_MENU, ID_DEF_ROTATE_LEFT_KEY) {|event| this.OnDefRotateLeftKey(event) }
		this.Bind(wx.EVT_MENU, ID_DEF_ROTATE_RIGHT_KEY) {|event| this.OnDefRotateRightKey(event) }
	}
	OnExit(event:wx.CommandEvent) = {
		// true is to force the frame to close
		this.Close(true)
	}
	Create(parentFrame:MyFrame:nil, isCloneWindow:boolean => false):static = {
		str = 'wxWidgets OpenGL Cube Sample'
		if (isCloneWindow) { str += ' - Clone' }
		frame = MyFrame(nil, str, wx.DefaultPosition,
			wx.Size(400, 300))
		// Make a menubar
		winMenu = wx.Menu()
		winMenu.Append(wx.ID_EXIT, '&Close')
		winMenu.Append(ID_NEW_WINDOW, '&New' )
		menuBar = wx.MenuBar()
		menuBar.Append(winMenu, '&Window')
		winMenu = wx.Menu()
		winMenu.Append(ID_DEF_ROTATE_LEFT_KEY, 'Rotate &left')
		winMenu.Append(ID_DEF_ROTATE_RIGHT_KEY, 'Rotate &right')
		menuBar.Append(winMenu, '&Key')
		frame.SetMenuBar(menuBar)
		frame.m_canvas = TestGLCanvas(frame, wx.ID_ANY,
				wx.DefaultPosition, wx.DefaultSize)
		if (parentFrame) {
			frame.m_canvas.SetCurrent(parentFrame.m_canvas)
			//frame.m_canvas.m_gllist = parentFrame.m_canvas.m_gllist
		}
		// Show the frame
		frame.Show(true)
		frame
	}
	OnNewWindow(event:wx.CommandEvent) = {
		this.Create(this, true)
	}
	OnDefRotateLeftKey(event:wx.CommandEvent) = {
		dial = ScanCodeDialog(this, wx.ID_ANY, this.m_canvas.m_rleft,
					'Left', 'Define key')
		result = dial.ShowModal()
		if (result == wx.ID_OK) {
			this.m_canvas.m_rleft = dial.GetValue()
		}
	}
	OnDefRotateRightKey(event:wx.CommandEvent) = {
		dial = ScanCodeDialog(this, wx.ID_ANY, this.m_canvas.m_rright,
					'Right', 'Define key')
		result = dial.ShowModal()
		if (result == wx.ID_OK) {
			this.m_canvas.m_rright = dial.GetValue()
		}
	}
}

/*------------------------------------------------------------------
  Application object ( equivalent to main() )
------------------------------------------------------------------ */

MyApp = class(wx.App) {
	OnInit() = {
		// Create the main frame window
		MyFrame.Create(nil)
		true
	}
}

wx.IMPLEMENT_APP(MyApp)

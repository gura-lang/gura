#!/usr/bin/env gura
/////////////////////////////////////////////////////////////////////////////
// Name:        listctrl.cpp
// Purpose:     wxListCtrl sample
// Author:      Julian Smart
// Modified by:
// Created:     04/01/98
// RCS-ID:      $Id: listtest.cpp 62088 2009-09-24 15:54:53Z JS $
// Copyright:   (c) Julian Smart
// Licence:     wxWindows license
/////////////////////////////////////////////////////////////////////////////
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)

// IDs for the menu commands
LIST_ABOUT = wx.ID_ABOUT,
LIST_QUIT = wx.ID_EXIT,
[LIST_LIST_VIEW,
LIST_ICON_VIEW,
LIST_ICON_TEXT_VIEW,
LIST_SMALL_ICON_VIEW,
LIST_SMALL_ICON_TEXT_VIEW,
LIST_REPORT_VIEW,
LIST_VIRTUAL_VIEW,
LIST_SMALL_VIRTUAL_VIEW,
LIST_DESELECT_ALL,
LIST_SELECT_ALL,
LIST_DELETE_ALL,
LIST_DELETE,
LIST_ADD,
LIST_EDIT,
LIST_SORT,
LIST_SET_FG_COL,
LIST_SET_BG_COL,
LIST_TOGGLE_MULTI_SEL,
LIST_TOGGLE_FIRST,
LIST_SHOW_COL_INFO,
LIST_SHOW_SEL_INFO,
LIST_FOCUS_LAST,
LIST_FREEZE,
LIST_THAW,
LIST_TOGGLE_LINES,
LIST_MAC_USE_GENERIC,
LIST_LONG_OPERATION] = wx.ID_HIGHEST..
LIST_CTRL = 1000

// number of items in list/report view
NUM_ITEMS = 30

// number of items in icon/small icon view
NUM_ICONS = 9

SMALL_VIRTUAL_VIEW_ITEMS = @{
	{ 'Cat', 'meow' },
	{ 'Cow', 'moo' },
	{ 'Crow', 'caw' },
	{ 'Dog', 'woof' },
	{ 'Duck', 'quack' },
	{ 'Mouse', 'squeak' },
	{ 'Owl', 'hoo' },
	{ 'Pig', 'oink' },
	{ 'Pigeon', 'coo' },
	{ 'Sheep', 'baaah' },
}

MyApp = class(wx.App) {
	// `Main program' equivalent, creating windows and returning main app frame
	OnInit() = {
		// Create the main frame window
		frame = MyFrame('wxListCtrl Test')
		// Show the frame
		frame.Show(true)
		self.SetTopWindow(frame)
		true
	}
}

MyFrame = class(wx.Frame) {
	__init__(title:string) = {|nil, wx.ID_ANY, title|
		self.m_listCtrl = nil
		self.m_logWindow = nil
		self.m_smallVirtual = false
		if (wx.SystemSettings.GetScreenType() > wx.SYS_SCREEN_SMALL) {
			self.SetSize(wx.Size(450, 340))
		}
		// Give it an icon
		self.SetIcon(wx.IconFromXPMData(resource.mondrian_xpm))
		//self.SetIcon(wx.ICON(mondrian))
		// Make an image list containing large icons
		self.m_imageListNormal = wx.ImageList(32, 32, true)
		self.m_imageListSmall = wx.ImageList(16, 16, true)
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.toolbrai_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.toolchar_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.tooldata_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.toolnote_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.tooltodo_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.toolchec_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.toolgame_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.tooltime_xpm))
		self.m_imageListNormal.Add(wx.BitmapFromXPMData(resource.toolword_xpm))
		self.m_imageListSmall.Add(wx.BitmapFromXPMData(resource.small1_xpm))
		// Make a menubar
		menuFile = wx.Menu()
		menuFile.Append(LIST_ABOUT, '&About')
		menuFile.AppendSeparator()
		menuFile.Append(LIST_QUIT, 'E&xit\tAlt-X')
		menuView = wx.Menu()
		menuView.Append(LIST_LIST_VIEW, '&List view\tF1')
		menuView.Append(LIST_REPORT_VIEW, '&Report view\tF2')
		menuView.Append(LIST_ICON_VIEW, '&Icon view\tF3')
		menuView.Append(LIST_ICON_TEXT_VIEW, 'Icon view with &text\tF4')
		menuView.Append(LIST_SMALL_ICON_VIEW, '&Small icon view\tF5')
		menuView.Append(LIST_SMALL_ICON_TEXT_VIEW, 'Small icon &view with text\tF6')
		menuView.Append(LIST_VIRTUAL_VIEW, '&Virtual view\tF7')
		menuView.Append(LIST_SMALL_VIRTUAL_VIEW, 'Small virtual vie&w\tF8')
		menuList = wx.Menu()
		menuList.Append(LIST_FOCUS_LAST, '&Make last item current\tCtrl-L')
		menuList.Append(LIST_TOGGLE_FIRST, 'To&ggle first item\tCtrl-G')
		menuList.Append(LIST_DESELECT_ALL, '&Deselect All\tCtrl-D')
		menuList.Append(LIST_SELECT_ALL, 'S&elect All\tCtrl-A')
		menuList.AppendSeparator()
		menuList.Append(LIST_SHOW_COL_INFO, 'Show &column info\tCtrl-C')
		menuList.Append(LIST_SHOW_SEL_INFO, 'Show &selected items\tCtrl-S')
		menuList.AppendSeparator()
		menuList.Append(LIST_SORT, '&Sort\tCtrl-S')
		menuList.AppendSeparator()
		menuList.Append(LIST_ADD, '&Append an item\tCtrl-P')
		menuList.Append(LIST_EDIT, '&Edit the item\tCtrl-E')
		menuList.Append(LIST_DELETE, '&Delete first item\tCtrl-X')
		menuList.Append(LIST_DELETE_ALL, 'Delete &all items')
		menuList.AppendSeparator()
		menuList.Append(LIST_FREEZE, 'Free&ze\tCtrl-Z')
		menuList.Append(LIST_THAW, 'Tha&w\tCtrl-W')
		menuList.AppendSeparator()
		menuList.AppendCheckItem(LIST_TOGGLE_LINES, 'Toggle &lines\tCtrl-I')
		menuList.Append(LIST_TOGGLE_MULTI_SEL, '&Multiple selection\tCtrl-M',
				'Toggle multiple selection', true)
		menuList.AppendSeparator()
		menuList.Append(LIST_LONG_OPERATION, '&Updates a list during long operation')
		menuCol = wx.Menu()
		menuCol.Append(LIST_SET_FG_COL, '&Foreground colour...')
		menuCol.Append(LIST_SET_BG_COL, '&Background colour...')
		menubar = wx.MenuBar()
		menubar.Append(menuFile, '&File')
		menubar.Append(menuView, '&View')
		menubar.Append(menuList, '&List')
		menubar.Append(menuCol, '&Colour')
		self.SetMenuBar(menubar)
		self.m_panel = wx.Panel(self, wx.ID_ANY)
		self.m_logWindow = wx.TextCtrl(self.m_panel, wx.ID_ANY, wx.EmptyString,
									wx.DefaultPosition, wx.DefaultSize,
									wx.TE_MULTILINE | wx.SUNKEN_BORDER)
		self.m_logOld = wx.Log.SetActiveTarget(wx.LogTextCtrl(self.m_logWindow))
		self.RecreateList(wx.LC_REPORT | wx.LC_SINGLE_SEL)
		self.CreateStatusBar(3)
		self.EventTable()
	}
	EventTable() = {
		self.Bind(wx.EVT_SIZE) {|event| self.OnSize(event) }
		self.Bind(wx.EVT_MENU, LIST_QUIT) {|event| self.OnQuit(event) }
		self.Bind(wx.EVT_MENU, LIST_ABOUT) {|event| self.OnAbout(event) }
		self.Bind(wx.EVT_MENU, LIST_LIST_VIEW) {|event| self.OnListView(event) }
		self.Bind(wx.EVT_MENU, LIST_REPORT_VIEW) {|event| self.OnReportView(event) }
		self.Bind(wx.EVT_MENU, LIST_ICON_VIEW) {|event| self.OnIconView(event) }
		self.Bind(wx.EVT_MENU, LIST_ICON_TEXT_VIEW) {|event| self.OnIconTextView(event) }
		self.Bind(wx.EVT_MENU, LIST_SMALL_ICON_VIEW) {|event| self.OnSmallIconView(event) }
		self.Bind(wx.EVT_MENU, LIST_SMALL_ICON_TEXT_VIEW) {|event| self.OnSmallIconTextView(event) }
		self.Bind(wx.EVT_MENU, LIST_VIRTUAL_VIEW) {|event| self.OnVirtualView(event) }
		self.Bind(wx.EVT_MENU, LIST_SMALL_VIRTUAL_VIEW) {|event| self.OnSmallVirtualView(event) }
		self.Bind(wx.EVT_MENU, LIST_FOCUS_LAST) {|event| self.OnFocusLast(event) }
		self.Bind(wx.EVT_MENU, LIST_TOGGLE_FIRST) {|event| self.OnToggleFirstSel(event) }
		self.Bind(wx.EVT_MENU, LIST_DESELECT_ALL) {|event| self.OnDeselectAll(event) }
		self.Bind(wx.EVT_MENU, LIST_SELECT_ALL) {|event| self.OnSelectAll(event) }
		self.Bind(wx.EVT_MENU, LIST_DELETE) {|event| self.OnDelete(event) }
		self.Bind(wx.EVT_MENU, LIST_ADD) {|event| self.OnAdd(event) }
		self.Bind(wx.EVT_MENU, LIST_EDIT) {|event| self.OnEdit(event) }
		self.Bind(wx.EVT_MENU, LIST_DELETE_ALL) {|event| self.OnDeleteAll(event) }
		self.Bind(wx.EVT_MENU, LIST_SORT) {|event| self.OnSort(event) }
		self.Bind(wx.EVT_MENU, LIST_SET_FG_COL) {|event| self.OnSetFgColour(event) }
		self.Bind(wx.EVT_MENU, LIST_SET_BG_COL) {|event| self.OnSetBgColour(event) }
		self.Bind(wx.EVT_MENU, LIST_TOGGLE_MULTI_SEL) {|event| self.OnToggleMultiSel(event) }
		self.Bind(wx.EVT_MENU, LIST_SHOW_COL_INFO) {|event| self.OnShowColInfo(event) }
		self.Bind(wx.EVT_MENU, LIST_SHOW_SEL_INFO) {|event| self.OnShowSelInfo(event) }
		self.Bind(wx.EVT_MENU, LIST_FREEZE) {|event| self.OnFreeze(event) }
		self.Bind(wx.EVT_MENU, LIST_THAW) {|event| self.OnThaw(event) }
		self.Bind(wx.EVT_MENU, LIST_TOGGLE_LINES) {|event| self.OnToggleLines(event) }
		self.Bind(wx.EVT_MENU, LIST_MAC_USE_GENERIC) {|event| self.OnToggleMacUseGeneric(event) }
		self.Bind(wx.EVT_MENU, LIST_LONG_OPERATION) {|event| self.OnLongOperation(event) }
		self.Bind(wx.EVT_UPDATE_UI, LIST_SHOW_COL_INFO) {|event| self.OnUpdateShowColInfo(event) }
		self.Bind(wx.EVT_UPDATE_UI, LIST_TOGGLE_MULTI_SEL) {|event| self.OnUpdateToggleMultiSel(event) }
	}
	OnSize(event:wx.SizeEvent) = {
		self.DoSize()
		event.Skip()
	}
	DoSize() = {
		if (!self.m_logWindow) {
			return
		}
		size = self.GetClientSize()
		y = (2 * size.y) / 3
		self.m_listCtrl.SetDimensions(0, 0, size.x, y)
		self.m_logWindow.SetDimensions(0, y + 1, size.x, size.y - y)
	}
	// return true if the control is not in virtual view, give an error message
	// and return false if it is
	CheckNonVirtual() = {
		if (!self.m_listCtrl.HasFlag(wx.LC_VIRTUAL)) {
			return(true)
		}
		// "this" == whatever
		wx.LogWarning("Can't do this in virtual view, sorry.")
		false
	}
	OnQuit(event:wx.CommandEvent) = {
		self.Close(true)
	}
	OnAbout(event:wx.CommandEvent) = {
		dialog = wx.MessageDialog(self, 'List test sample\nJulian Smart (c) 1997',
			'About list test', wx.OK | wx.CANCEL)
		dialog.ShowModal()
	}
	OnFreeze(event:wx.CommandEvent) = {
		wx.LogMessage('Freezing the control')
		self.m_listCtrl.Freeze()
	}
	OnThaw(event:wx.CommandEvent) = {
		wx.LogMessage('Thawing the control')
		self.m_listCtrl.Thaw()
	}
	OnToggleLines(event:wx.CommandEvent) = {
		self.m_listCtrl.SetSingleStyle(wx.LC_HRULES | wx.LC_VRULES, event.IsChecked())
	}
	OnToggleMacUseGeneric(event:wx.CommandEvent) = {
	}
	OnLongOperation(event:wx.CommandEvent) = {
		if ((self.m_listCtrl.GetWindowStyleFlag() & wx.LC_MASK_TYPE) != wx.LC_REPORT) {
			wx.LogWarning('need to be in report mode')
			return
		}
		repeat(100) {|idx|
			self.m_listCtrl.Freeze()
			self.m_listCtrl.DeleteAllItems()
			self.m_listCtrl.DeleteColumn(2)
			self.m_listCtrl.DeleteColumn(1)
			self.m_listCtrl.DeleteColumn(0)
			self.InitWithReportItems (idx)
			self.m_listCtrl.Thaw()
			wx.App.GetInstance().Yield(true)
		}
	}
	OnFocusLast(event:wx.CommandEvent) = {
		index = self.m_listCtrl.GetItemCount() - 1
		if (index == -1) {
			return
		}
		self.m_listCtrl.SetItemState(index, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED)
		self.m_listCtrl.EnsureVisible(index)
	}
	OnToggleFirstSel(event:wx.CommandEvent) = {
		self.m_listCtrl.SetItemState(0, (~self.m_listCtrl.GetItemState(0, wx.LIST_STATE_SELECTED)) & wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
	}
	OnDeselectAll(event:wx.CommandEvent) = {
		if (!self.CheckNonVirtual()) {
			return
		}
		n = self.m_listCtrl.GetItemCount()
		self.m_listCtrl.SetItemState(0 .. (n - 1), 0, wx.LIST_STATE_SELECTED)
	}
	OnSelectAll(event:wx.CommandEvent) = {
		if (!self.CheckNonVirtual()) {
			return
		}
		n = self.m_listCtrl.GetItemCount()
		self.m_listCtrl.SetItemState(0 .. (n - 1), wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
	}
	// recreate the list control with the new flags
	RecreateList(flags:number, withText:boolean => true) = {
		// we could avoid recreating it if we don't set/clear the wxLC_VIRTUAL
		// style, but it is more trouble to do it than not
		self.m_listCtrl && self.m_listCtrl.Destroy()
		self.m_listCtrl = MyListCtrl(self.m_panel, LIST_CTRL,
									wx.DefaultPosition, wx.DefaultSize,
									flags | \
									wx.SUNKEN_BORDER | wx.LC_EDIT_LABELS)
		flagsMasked = flags & wx.LC_MASK_TYPE
		if (flagsMasked == wx.LC_LIST) {
			self.InitWithListItems()
		} elsif (flagsMasked == wx.LC_ICON) {
			self.InitWithIconItems(withText)
		} elsif (flagsMasked == wx.LC_SMALL_ICON) {
			self.InitWithIconItems(withText, true)
		} elsif (flagsMasked == wx.LC_REPORT) {
			if (flags & wx.LC_VIRTUAL != 0) {
				self.InitWithVirtualItems()
			} else {
				self.InitWithReportItems(0)
			}
		} else {
			wx.FAIL_MSG('unknown listctrl mode')
		}
		self.DoSize()
		self.m_logWindow.Clear()
	}
	OnListView(event:wx.CommandEvent) = {
		self.RecreateList(wx.LC_LIST)
	}
	// fill the control with items depending on the view
	InitWithListItems() = {
		i = 0..(NUM_ITEMS - 1)
		self.m_listCtrl.InsertStringItem(i, format('Item %d', i))
	}
	OnReportView(event:wx.CommandEvent) = {
		self.RecreateList(wx.LC_REPORT)
	}
	InitWithReportItems(shift:number) = {
		self.m_listCtrl.SetImageList(self.m_imageListSmall, wx.IMAGE_LIST_SMALL)
		// note that under MSW for SetColumnWidth() to work we need to create the
		// items with images initially even if we specify dummy image id
		itemCol = wx.ListItem()
		itemCol.SetText('Column 1')
		itemCol.SetImage(-1)
		self.m_listCtrl.InsertColumnItem(0, itemCol)
		itemCol.SetText('Column 2')
		itemCol.SetAlign(wx.LIST_FORMAT_CENTRE)
		self.m_listCtrl.InsertColumnItem(1, itemCol)
		itemCol.SetText('Column 3')
		itemCol.SetAlign(wx.LIST_FORMAT_RIGHT)
		self.m_listCtrl.InsertColumnItem(2, itemCol)
		// to speed up inserting we hide the control temporarily
		self.m_listCtrl.Hide()
		sw = wx.StopWatch()
		self.m_listCtrl.InsertItemInReportView(0..(NUM_ITEMS - 1), shift)
		self.m_logWindow.WriteText(format('%d items inserted in %ldms\n',
												NUM_ITEMS, sw.Time()))
		self.m_listCtrl.Show()
		// we leave all mask fields to 0 and only change the colour
		item = wx.ListItem()
		item.SetId(0)
		item.SetTextColour(wx.RED)
		self.m_listCtrl.SetItem(item)
		item.SetId(2)
		item.SetTextColour(wx.GREEN)
		self.m_listCtrl.SetItem(item)
		item.SetId(4)
		item.SetTextColour(wx.LIGHT_GREY)
		item.SetFont(wx.ITALIC_FONT)
		item.SetBackgroundColour(wx.RED)
		self.m_listCtrl.SetItem(item)
		self.m_listCtrl.SetTextColour(wx.BLUE)
		self.m_listCtrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
		self.m_listCtrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		self.m_listCtrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
		// Set images in columns
		self.m_listCtrl.SetItemColumnImage(1, 1, 0)
		info = wx.ListItem()
		info.SetImage(0)
		info.SetId(3)
		info.SetColumn(2)
		self.m_listCtrl.SetItem(info)
		// test SetItemFont too
		self.m_listCtrl.SetItemFont(0, wx.ITALIC_FONT)
	}
	InitWithIconItems(withText:boolean, sameIcon:boolean => false) = {
		self.m_listCtrl.SetImageList(self.m_imageListNormal, wx.IMAGE_LIST_NORMAL)
		self.m_listCtrl.SetImageList(self.m_imageListSmall, wx.IMAGE_LIST_SMALL)
		repeat(NUM_ICONS) {|i|
			image = if (sameIcon) {0} else {i}
			if (withText) {
				self.m_listCtrl.InsertImageStringItem(i, format('Label %d', i),
									image)
			} else {
				self.m_listCtrl.InsertImageItem(i, image)
			}
		}
	}
	OnIconView(event:wx.CommandEvent) = {
		self.RecreateList(wx.LC_ICON, false)
	}
	OnIconTextView(event:wx.CommandEvent) = {
		self.RecreateList(wx.LC_ICON)
	}
	OnSmallIconView(event:wx.CommandEvent) = {
		self.RecreateList(wx.LC_SMALL_ICON, false)
	}
	OnSmallIconTextView(event:wx.CommandEvent) = {
		self.RecreateList(wx.LC_SMALL_ICON)
	}
	OnVirtualView(event:wx.CommandEvent) = {
		self.m_smallVirtual = false
		self.RecreateList(wx.LC_REPORT | wx.LC_VIRTUAL)
	}
	OnSmallVirtualView(event:wx.CommandEvent) = {
		self.m_smallVirtual = true
		self.RecreateList(wx.LC_REPORT | wx.LC_VIRTUAL)
	}
	InitWithVirtualItems() = {
		self.m_listCtrl.SetImageList(self.m_imageListSmall, wx.IMAGE_LIST_SMALL)
		if (self.m_smallVirtual) {
			self.m_listCtrl.InsertColumn(0, 'Animal')
			self.m_listCtrl.InsertColumn(1, 'Sound')
			self.m_listCtrl.SetItemCount(SMALL_VIRTUAL_VIEW_ITEMS.len())
		} else {
			self.m_listCtrl.InsertColumn(0, 'First Column')
			self.m_listCtrl.InsertColumn(1, 'Second Column')
			self.m_listCtrl.SetColumnWidth(0, 150)
			self.m_listCtrl.SetColumnWidth(1, 150)
			self.m_listCtrl.SetItemCount(1000000)
		}
	}
	OnSort(event:wx.CommandEvent) = {
		sw = wx.StopWatch()
		self.m_listCtrl.SortItems(MyCompareFunction)
		self.m_logWindow.WriteText(format('Sorting %d items took %ld ms\n',
											self.m_listCtrl.GetItemCount(),
											sw.Time()))
	}
	OnShowSelInfo(event:wx.CommandEvent) = {
		selCount = self.m_listCtrl.GetSelectedItemCount()
		wx.LogMessage('%d items selected:', selCount)
		// don't show too many items
		shownCount = 0
		item = self.m_listCtrl.GetNextItem(-1, wx.LIST_NEXT_ALL,
											wx.LIST_STATE_SELECTED)
		while (item != -1) {
			wx.LogMessage('\t%ld (%s)',
						 item, self.m_listCtrl.GetItemText(item))
			shownCount += 1
			if (shownCount > 10) {
				wx.LogMessage('\t... more selected items snipped...')
				break
			}
			item = self.m_listCtrl.GetNextItem(item, wx.LIST_NEXT_ALL,
										   wx.LIST_STATE_SELECTED)
		}
	}
	OnShowColInfo(event:wx.CommandEvent) = {
		count = self.m_listCtrl.GetColumnCount()
		wx.LogMessage('%d columns:', count)
		c = 0 .. (count - 1)
		wx.LogMessage('\tcolumn %d has width %d', c,
						self.m_listCtrl.GetColumnWidth(c))
	}
	OnUpdateShowColInfo(event:wx.UpdateUIEvent) = {
		event.Enable((self.m_listCtrl.GetWindowStyleFlag() & wx.LC_REPORT) != 0)
	}
	OnToggleMultiSel(event:wx.CommandEvent) = {
		flags = self.m_listCtrl.GetWindowStyleFlag()
		if (flags & wx.LC_SINGLE_SEL) {
			flags &= ~wx.LC_SINGLE_SEL
		} else {
			flags |= wx.LC_SINGLE_SEL
		}
		self.m_logWindow.WriteText(format('Current selection mode: %sle\n',
						if (flags & wx.LC_SINGLE_SEL != 0) {'sing'} else {'multip'}))
		self.RecreateList(flags)
	}
	OnUpdateToggleMultiSel(event:wx.UpdateUIEvent) = {
		event.Check((self.m_listCtrl.GetWindowStyleFlag() & wx.LC_SINGLE_SEL) == 0)
	}
	OnSetFgColour(event:wx.CommandEvent) = {
		self.m_listCtrl.SetForegroundColour(wx.GetColourFromUser(self))
		self.m_listCtrl.Refresh()
	}
	OnSetBgColour(event:wx.CommandEvent) = {
		self.m_listCtrl.SetBackgroundColour(wx.GetColourFromUser(self))
		self.m_listCtrl.Refresh()
	}
	OnAdd(event:wx.CommandEvent) = {
		self.m_listCtrl.InsertStringItem(self.m_listCtrl.GetItemCount(), 'Appended item')
	}
	OnEdit(event:wx.CommandEvent) = {
		itemCur = self.m_listCtrl.GetNextItem(-1, wx.LIST_NEXT_ALL,
											wx.LIST_STATE_FOCUSED)
		if (itemCur != -1) {
			self.m_listCtrl.EditLabel(itemCur)
		} else {
			self.m_logWindow.WriteText('No item to edit')
		}
	}
	OnDelete(event:wx.CommandEvent) = {
		if (self.m_listCtrl.GetItemCount() != 0) {
			self.m_listCtrl.DeleteItem(0)
		} else {
			self.m_logWindow.WriteText('Nothing to delete')
		}
	}
	OnDeleteAll(event:wx.CommandEvent) = {
		sw = wx.StopWatch()
		itemCount = self.m_listCtrl.GetItemCount()
		self.m_listCtrl.DeleteAllItems()
		self.m_logWindow.WriteText(format('Deleting %d items took %ld ms\n',
												itemCount,
												sw.Time()))
	}
}

MyListCtrl = class(wx.ListCtrl) {
	__init__(parent:wx.Window, id:number, pos:wx.Point, size:wx.Size, style:number) = \
												{|parent, id, pos, size, style|
		self.m_attr = wx.ListItemAttr(wx.BLUE, wx.LIGHT_GREY, wx.NullFont)
		self.EventTable()
	}
	EventTable() = {
		self.Bind(wx.EVT_LIST_BEGIN_DRAG, LIST_CTRL) {|event| self.OnBeginDrag(event) }
		self.Bind(wx.EVT_LIST_BEGIN_RDRAG, LIST_CTRL) {|event| self.OnBeginRDrag(event) }
		self.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, LIST_CTRL) {|event| self.OnBeginLabelEdit(event) }
		self.Bind(wx.EVT_LIST_END_LABEL_EDIT, LIST_CTRL) {|event| self.OnEndLabelEdit(event) }
		self.Bind(wx.EVT_LIST_DELETE_ITEM, LIST_CTRL) {|event| self.OnDeleteItem(event) }
		self.Bind(wx.EVT_LIST_DELETE_ALL_ITEMS, LIST_CTRL) {|event| self.OnDeleteAllItems(event) }
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, LIST_CTRL) {|event| self.OnSelected(event) }
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, LIST_CTRL) {|event| self.OnDeselected(event) }
		self.Bind(wx.EVT_LIST_KEY_DOWN, LIST_CTRL) {|event| self.OnListKeyDown(event) }
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, LIST_CTRL) {|event| self.OnActivated(event) }
		self.Bind(wx.EVT_LIST_ITEM_FOCUSED, LIST_CTRL) {|event| self.OnFocused(event) }
		self.Bind(wx.EVT_LIST_COL_CLICK, LIST_CTRL) {|event| self.OnColClick(event) }
		self.Bind(wx.EVT_LIST_COL_RIGHT_CLICK, LIST_CTRL) {|event| self.OnColRightClick(event) }
		self.Bind(wx.EVT_LIST_COL_BEGIN_DRAG, LIST_CTRL) {|event| self.OnColBeginDrag(event) }
		self.Bind(wx.EVT_LIST_COL_DRAGGING, LIST_CTRL) {|event| self.OnColDragging(event) }
		self.Bind(wx.EVT_LIST_COL_END_DRAG, LIST_CTRL) {|event| self.OnColEndDrag(event) }
		self.Bind(wx.EVT_LIST_CACHE_HINT, LIST_CTRL) {|event| self.OnCacheHint(event) }
		self.Bind(wx.EVT_CONTEXT_MENU) {|event| self.OnContextMenu(event) }
		self.Bind(wx.EVT_CHAR) {|event| self.OnChar(event) }
		self.Bind(wx.EVT_RIGHT_DOWN) {|event| self.OnRightClick(event) }
	}
	OnCacheHint(event:wx.ListEvent) = {
		wx.LogMessage('OnCacheHint: cache items %ld..%ld',
					  event.GetCacheFrom(), event.GetCacheTo() )
	}
	SetColumnImage(col:number, image:number) = {
		item = wx.ListItem()
		item.SetMask(wx.LIST_MASK_IMAGE)
		item.SetImage(image)
		self.SetColumn(col, item)
	}
	x = false
	OnColClick(event:wx.ListEvent) = {
		col = event.GetColumn()
		// set or unset image
		MyListCtrl.x = !MyListCtrl.x
		self.SetColumnImage(col, if (MyListCtrl.x) {0} else {-1})
		wx.LogMessage('OnColumnClick at %d.', col)
	}
	OnColRightClick(event:wx.ListEvent) = {
		col = event.GetColumn()
		if (col != -1) {
			self.SetColumnImage(col, -1)
		}
		// Show popupmenu at position
		menu = wx.Menu('Test')
		menu.Append(LIST_ABOUT, '&About')
		self.PopupMenu(menu, event.GetPoint())
		wx.LogMessage('OnColumnRightClick at %d.', event.GetColumn())
	}
	LogColEvent(event:wx.ListEvent, name:string) = {
		col = event.GetColumn()
		wx.LogMessage('%s: column %d (width = %d or %d).',
					name,
					col,
					event.GetItem().GetWidth(),
					self.GetColumnWidth(col))
	}
	OnColBeginDrag(event:wx.ListEvent) = {
		self.LogColEvent( event, 'OnColBeginDrag' )
		if (event.GetColumn() == 0) {
			wx.LogMessage("Resizing this column shouldn't work.")
			event.Veto()
		}
	}
	OnColDragging(event:wx.ListEvent) = {
		self.LogColEvent( event, 'OnColDragging' )
	}
	OnColEndDrag(event:wx.ListEvent) = {
		self.LogColEvent( event, 'OnColEndDrag' )
	}
	OnBeginDrag(event:wx.ListEvent) = {
		pt = event.GetPoint()
		[index, flags] = self.HitTest(pt)
		wx.LogMessage('OnBeginDrag at (%d, %d), item %ld.',
				  pt.x, pt.y, index)
	}
	OnBeginRDrag(event:wx.ListEvent) = {
		wx.LogMessage('OnBeginRDrag at %d,%d.',
				  event.GetPoint().x, event.GetPoint().y )
	}
	OnBeginLabelEdit(event:wx.ListEvent) = {
		wx.LogMessage('OnBeginLabelEdit: %s', event.GetItem().GetText())
	}
	OnEndLabelEdit(event:wx.ListEvent) = {
		wx.LogMessage('OnEndLabelEdit: %s',
			if (event.IsEditCancelled()) {'[cancelled]'} else {event.GetItem().GetText()})
	}
	OnDeleteItem(event:wx.ListEvent) = {
		self.LogEvent(event, 'OnDeleteItem')
		wx.LogMessage('Number of items when delete event is sent: %d', self.GetItemCount() )
	}
	OnDeleteAllItems(event:wx.ListEvent) = {
		self.LogEvent(event, 'OnDeleteAllItems')
	}
	OnSelected(event:wx.ListEvent) = {
		self.LogEvent(event, 'OnSelected')
		if ((self.GetWindowStyle() & wx.LC_REPORT) != 0) {
			if (info = self.GetItem(event.GetIndex(), 1)) {
				wx.LogMessage('Value of the 2nd field of the selected item: %s',
							info.GetText())
			} else {
				wx.FAIL_MSG('wxListCtrl::GetItem() failed')
			}
		}
	}
	OnDeselected(event:wx.ListEvent) = {
		self.LogEvent(event, 'OnDeselected')
	}
	OnActivated(event:wx.ListEvent) = {
		self.LogEvent(event, 'OnActivated')
	}
	OnFocused(event:wx.ListEvent) = {
		self.LogEvent(event, 'OnFocused')
		event.Skip()
	}
	OnListKeyDown(event:wx.ListEvent) = {
		keyCode = event.GetKeyCode()
		if (keyCode in ord(['c', 'C'])) { // colorize
			itemId = event.GetIndex()
			if (itemId == -1) {
				// no item
				return
			}
			info = GetItem(itemId)
			attr = info.GetAttributes()
			if (!attr || !attr.HasTextColour()) {
				info.SetTextColour(wx.CYAN)
				self.SetItem(info)
				self.RefreshItem(itemId)
			}
		} elsif (keyCode in ord(['n', 'N'])) { // next
			item = self.GetNextItem(-1, wx.LIST_NEXT_ALL, wx.LIST_STATE_FOCUSED)
			item += 1
			if (item == self.GetItemCount() - 1) {
				item = 0
			}
			wx.LogMessage('Focusing item %ld', item)
			self.SetItemState(item, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED)
			self.EnsureVisible(item)
		} elsif (keyCode in ord(['r', 'R'])) { // show bounding Rect
			item = event.GetIndex()
			if (!(r = self.GetItemRect(item))) {
				wx.LogError('Failed to retrieve rect of item %ld', item)
			} else {
				wx.LogMessage('Bounding rect of item %ld is (%d, %d)-(%d, %d)',
						item, r.x, r.y, r.x + r.width, r.y + r.height)
			}
		} elsif (keyCode == wx.WXK_DELETE) {
			item = self.GetNextItem(-1, wx.LIST_NEXT_ALL, wx.LIST_STATE_SELECTED)
			while (item != -1) {
				self.DeleteItem(item)
				wx.LogMessage('Item %ld deleted', item)
				// -1 because the indices were shifted by DeleteItem()
				item = self.GetNextItem(item - 1,
								   wx.LIST_NEXT_ALL, wx.LIST_STATE_SELECTED)
			}
		} elsif (keyCode == wx.WXK_INSERT) {
			if ((self.GetWindowStyle() & wxLC_REPORT) != 0) {
				if ((self.GetWindowStyle() & wx.LC_VIRTUAL) != 0) {
					self.SetItemCount(self.GetItemCount() + 1)
				} else { // !virtual
					self.InsertItemInReportView(event.GetIndex(), 0)
				}
			}
		} else { //else: fall through
			self.LogEvent(event, 'OnListKeyDown')
			event.Skip()
		}
	}
	OnChar(event:wx.KeyEvent) = {
		wx.LogMessage('Got char event.')
		if (event.GetKeyCode() in ord(['n', 'N', 'c', 'C'])) {
			// these are the keys we process ourselves
		} else {
			event.Skip()
		}
	}
	OnRightClick(event:wx.MouseEvent) = {
		if (!event.ControlDown()) {
			event.Skip()
			return
		}
		[item, flags, subitem] = self.HitTest(event.GetPosition())
		where = ''
		if (flags == wx.LIST_HITTEST_ABOVE) {
			where = 'above'
		} elsif (flags == wx.LIST_HITTEST_BELOW) {
			where = 'below'
		} elsif (flags == wx.LIST_HITTEST_NOWHERE) {
			where = 'nowhere near'
		} elsif (flags == wx.LIST_HITTEST_ONITEMICON) {
			where = 'on icon of'
		} elsif (flags == wx.LIST_HITTEST_ONITEMLABEL) {
			where = 'on label of'
		} elsif (flags == wx.LIST_HITTEST_ONITEMRIGHT) {
			where = 'right on'
		} elsif (flags == wx.LIST_HITTEST_TOLEFT) {
			where = 'to the left of'
		} elsif (flags == wx.LIST_HITTEST_TORIGHT) {
			where = 'to the right of'
		} else {
			where = 'not clear exactly where on'
		}
		wx.LogMessage('Right double click %s item %ld, subitem %ld',
					where, item, subitem)
	}
	LogEvent(event:wx.ListEvent, eventName:string) = {
		wx.LogMessage('Item %ld: %s (item text = %s, data = %ld)',
						event.GetIndex(), eventName,
						event.GetText(), event.GetData())
	}
	OnGetItemText(item:number, column:number) = {
		if (self.GetItemCount() == SMALL_VIRTUAL_VIEW_ITEMS.len()) {
			SMALL_VIRTUAL_VIEW_ITEMS[item][column]
		} else {
			format('Column %ld of item %ld', column, item)
		}
	}
	OnGetItemColumnImage(item:number, column:number) = {
		if (column != 0) {
			return(0)
		}
		if (!(item % 3 != 0) && column == 1) {
			return(0)
		}
		-1
	}
	OnGetItemAttr(item:number) = {
		if (item % 2 != 0) {nil} else {self.m_attr}
	}
	// add one item to the listctrl in report mode
	InsertItemInReportView(i:number, shift:number):map = {
		buf = format('This is item %d', i + shift)
		tmp = self.InsertImageStringItem(i, buf, 0)
		self.SetItemData(tmp, i)
		buf = format('Col 1, item %d', i + shift)
		self.SetStringItem(tmp, 1, buf)
		buf = format('Item %d in column 2', i + shift)
		self.SetStringItem(tmp, 2, buf)
	}
	OnContextMenu(event:wx.ContextMenuEvent) = {
		point = event.GetPosition()
		// If from keyboard
		if (point.x == -1 && point.y == -1) {
			size = self.GetSize()
			point.x = size.x / 2
			point.y = size.y / 2
		} else {
			point = self.ScreenToClient(point)
		}
		self.ShowContextMenu(point)
	}
	ShowContextMenu(pos:wx.Point) = {
		menu = wx.Menu()
		menu.Append(wx.ID_ABOUT, '&About')
		menu.AppendSeparator()
		menu.Append(wx.ID_EXIT, 'E&xit')
		self.PopupMenuXY(menu, pos.x, pos.y)
	}
}

MyCompareFunction(item1:number, item2:number) = {
	item1 <=> item2
}

wx.IMPLEMENT_APP(MyApp)

#!/usr/bin/env gura
// Answer to the question: https://codeiq.jp/ace/araki/q1182

friendLink = %{
	'A' => ['B', 'C', 'D', 'E', 'F', 'G', 'J']
	'B' => ['A', 'E', 'G', 'H']
	'C' => ['A', 'D', 'E', 'G', 'J']
	'D' => ['A', 'C', 'H', 'I']
	'E' => ['A', 'B', 'C', 'G', 'H', 'J']
	'F' => ['A', 'G', 'I']
	'G' => ['A', 'B', 'C', 'E', 'F']
	'H' => ['B', 'D', 'E', 'I']
	'I' => ['D', 'F', 'H']
	'J' => ['A', 'C', 'E']
}

Group = class {
	__init__(names[]:string) = {
		this.names:public = names.sort()
	}
	IsEqual(group:Group) = {
		this.names.len() == group.names.len() && (this.names == group.names).and()
	}
	__str__() = {
		this.names.join('-')
	}
}
groups = []
friendLink.keys().each {|name|
	friendLink[name].each {|friend|
		friendLink[friend].each {|friendOfFriend|
			names = set([name, friend, friendOfFriend])
			if (names.len() == 3) {
				group = Group(names)
				!groups:*IsEqual(group).or() && groups.add(group)
			}
		}
	}
}
println(groups)
println('---')
printf('%d groups\n', groups.len())

#!/usr/bin/env gura
// Answer to the question: https://codeiq.jp/ace/egi/q1186

fareTable = %{
	'東京' => %{             '新宿' => 200, '渋谷' => 200, '三鷹' => 390, '錦糸町' => 160, '北千住' => 220}
	'新宿' => %{'東京' => 200,              '渋谷' => 160, '三鷹' => 220, '錦糸町' => 220, '北千住' => 310}
	'渋谷' => %{'東京' => 200, '新宿' => 160,              '三鷹' => 310, '錦糸町' => 220, '北千住' => 310}
	'三鷹' => %{'東京' => 390, '新宿' => 220, '渋谷' => 310,              '錦糸町' => 470, '北千住' => 550}
	'錦糸町' => %{'東京' => 160, '新宿' => 220, '渋谷' => 220, '三鷹' => 470,              '北千住' => 220}
	'北千住' => %{'東京' => 220, '新宿' => 310, '渋谷' => 310, '三鷹' => 550, '錦糸町' => 220             }
}

LookupFare(stationStart:string, stationEnd:string):map = fareTable[stationStart][stationEnd]

Route = class {
	__init__(stations[]:string) = {
		this.stations:public = stations
		this.fares:public = LookupFare(this.stations, this.stations.offset(1)):list
		this.fareSum:public = this.fares.sum()
		this.markFlag:public = false
	}
	ToString() = {
		format('%s%s %6d%s',
			   format('%s-[%d]-', this.stations, this.fares).join(),
			   this.stations.last(), this.fareSum, cond(this.markFlag, ' *', ''))
	}
}

DoSolve(stations[]:string, stationStart:string, stationEnd:string) = {
	stationsMid = stations.filter(!(stations in [stationStart, stationEnd])):list
	routes = stationsMid.permutation():list {|stationsRoute|
		stationsRoute.insert(0, stationStart)
		stationsRoute.append(stationEnd)
		Route(stationsRoute)
	}
	routes = routes.sort(`ascend, routes::fareSum):list
	printf('%s -> %s\n', stationStart, stationEnd)
	routes[routes:*fareSum.min():indices]:*markFlag = true
	println(routes:*ToString())
}

stations = fareTable.keys().sort()
DoSolve(stations, '東京', '東京')
DoSolve(stations, '東京', '錦糸町')

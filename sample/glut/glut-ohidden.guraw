#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/ohidden.c

/* Copyright (c) Mark J. Kilgard, 1994. */

/**
 * (c) Copyright 1993, 1994, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED 
 * Permission to use, copy, modify, and distribute this software for 
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that 
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission. 
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
 * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 * 
 * US Government Users Restricted Rights 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
 * (c)(1)(ii) of the Rights in Technical Data and Computer Software
 * clause at DFARS 252.227-7013 and/or in similar or successor
 * clauses in the FAR or the DOD or NASA FAR Supplement.
 * Unpublished-- rights reserved under the copyright laws of the
 * United States.  Contractor/manufacturer is Silicon Graphics,
 * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
 *
 * OpenGL(TM) is a trademark of Silicon Graphics, Inc.
 */
/*----------------------------------------------------------------------------
 *
 * ohidden.c : openGL (GLUT) example showing how to use stencils
 *             to draw outlined polygons.
 *
 * Author : Yusuf Attarwala
 *          SGI - Applications
 * Date   : Jul 93
 *
 * Update : Mark Kilgard
 * Date   : Feb 95
 *
 *    note : the main intent of this program is to demo the stencil
 *           plane functionality, hence the rendering is kept
 *           simple (wireframe).
 *
 *---------------------------------------------------------------------------*/
import(opengl) {*}
import(glu) {*}
import(glut) {*}

stencilOn = true;

/* function declarations */

/* global variables */

ax = 0, ay = 0, az = 0;       /* angles for animation */

/* coords of a cube */
cube = \
@{0.0, 0.0, 0.0,
  1.0, 0.0, 0.0,
  1.0, 0.0, 1.0,
  0.0, 0.0, 1.0,
  1.0, 1.0, 0.0,
  1.0, 1.0, 1.0,
  0.0, 1.0, 1.0,
  0.0, 1.0, 0.0}.fold(3):list;

faceIndex = \
@{0, 1, 2, 3,
  1, 4, 5, 2,
  4, 7, 6, 5,
  7, 0, 3, 6,
  3, 2, 5, 6,
  7, 4, 1, 0}.fold(4):list;

main() = {
	argv = glutInit(sys.argv);

	glutInitWindowSize(400, 400);
	glutInitDisplayMode(GLUT_RGB | GLUT_STENCIL | GLUT_DOUBLE | GLUT_DEPTH);
	glutCreateWindow("Stenciled hidden surface removal");

	ax:extern = 10.0;
	ay:extern = -10.0;
	az:extern = 0.0;

	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutCreateMenu(menu);
	glutAddMenuEntry("Motion", 3);
	glutAddMenuEntry("Stencil on", 1);
	glutAddMenuEntry("Stencil off", 2);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
}

drawWireframe(face:number) = {
	glBegin(GL_LINE_LOOP) {
		repeat(4) {|i|
			glVertex3fv(cube[faceIndex[face][i]]);
		}
	}
}

drawFilled(face:number) = {
	glBegin(GL_POLYGON) {
		repeat(4) {|i|
			glVertex3fv(cube[faceIndex[face][i]]);
		}
	}
}

drawScene() = {
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);

	glClearColor(0.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glPushMatrix {

		glRotatef(ax, 1.0, 0.0, 0.0);
		glRotatef(-ay, 0.0, 1.0, 0.0);

		/* all the good stuff follows */

		if (stencilOn) {
			glEnable(GL_STENCIL_TEST);
			glClear(GL_STENCIL_BUFFER_BIT);
			glStencilMask(1);
			glStencilFunc(GL_ALWAYS, 0, 1);
			glStencilOp(GL_INVERT, GL_INVERT, GL_INVERT);
		}
		glColor3f(1.0, 1.0, 0.0);
		repeat(6) {|i|
			drawWireframe(i);
			if (stencilOn) {
				glStencilFunc(GL_EQUAL, 0, 1);
				glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
			}
			glColor3f(0.0, 0.0, 0.0);
			drawFilled(i);

			glColor3f(1.0, 1.0, 0.0);
			if (stencilOn) {
				glStencilFunc(GL_ALWAYS, 0, 1);
				glStencilOp(GL_INVERT, GL_INVERT, GL_INVERT);
			}
			glColor3f(1.0, 1.0, 0.0);
			drawWireframe(i);
		}
	}

	if (stencilOn) {
		glDisable(GL_STENCIL_TEST);
	}

	/* end of good stuff */

	glutSwapBuffers();
}

setMatrix() = {
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-2.0, 2.0, -2.0, 2.0, -2.0, 2.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

count = 0;

animation() = {
	/* animate the cone */

	ax:extern += 5.0;
	ay:extern -= 2.0;
	az:extern += 5.0;
	if (ax >= 360) {
		ax:extern = 0.0;
	}
	if (ay <= -360) {
		ay:extern = 0.0;
	}
	if (az >= 360) {
		az:extern = 0.0;
	}
	glutPostRedisplay();
	count:extern += 1;
	if (count >= 60) {
		glutIdleFunc(nil);
	}
}

menu(choice:number) = {
	if (choice == 3) {
		count:extern = 0;
		glutIdleFunc(animation);
	} elsif (choice == 2) {
		stencilOn:extern = false;
		glutSetWindowTitle("Stencil Disabled");
		glutPostRedisplay();
	} elsif (choice == 1) {
		stencilOn:extern = true;
		glutSetWindowTitle("Stencil Enabled");
		glutPostRedisplay();
	}
}

keyboard(c:number, x:number, y:number) = {
	if (c == 27) {
		sys.exit(0);
	}
}

resize(w:number, h:number) = {
	glViewport(0, 0, w, h);
	setMatrix();
}

main()

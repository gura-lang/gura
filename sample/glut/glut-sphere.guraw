#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/sphere.c

/* Copyright (c) Mark J. Kilgard, 1994. */

/* This program is freely distributable without licensing fees 
   and is provided without guarantee or warrantee expressed or 
   implied. This program is -not- in the public domain. */

/* Don't take this program too seriously.  It is just a hack. */

import(opengl) {*}
import(glu) {*}
import(glut) {*}

light_diffuse = \
	@{1.0, 0.0, 0.0, 1.0};
light_position = \
	@{1.0, 1.0, 1.0, 0.0};
qobj = nil

win1 = 0, win2 = 0, submenu1 = 0, submenu2 = 0;

list = 1;

thetime = 0.0;

display() = {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	if (glutGetWindow() == win1) {
		glCallList(list);   /* render sphere display list */
	} else {
		glCallList(1);      /* render sphere display list */
	}
	glutSwapBuffers();
}

display_win1() = {
	glPushMatrix();
	glTranslatef(0.0, 0.0, -1 - 2 * math.sin(thetime));
	display();
	glPopMatrix();
}

idle() = {
	light_position[] = \
		@{1.0, 1.0, 1.0, 0.0};

	glutSetWindow(win1);
	thetime += 0.05;
	light_position[1] = 1 + math.sin(thetime);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	display_win1();
}

delayed_stop(value:number) = {
	glutIdleFunc(nil);
}

it(value:number) = {
	glutDestroyWindow(glutGetWindow());
	printf("menu selection: win=%d, menu=%d\n", glutGetWindow(), glutGetMenu());
	if (value == 1) {
		if (list == 1) {
			list:extern = 2;
		} else {
			list:extern = 1;
		}
	} elsif (value == 2) {
		sys.exit(0);
	} elsif (value == 3) {
		glutAddMenuEntry("new entry", value + 9);
	} elsif (value == 4) {
		glutChangeToMenuEntry(1, "toggle it for drawing", 1);
		glutChangeToMenuEntry(3, "motion done", 3);
		glutIdleFunc(idle);
	} elsif (value == 5) {
		glutIdleFunc(nil);
	} elsif (value == 6) {
		glutTimerFunc(2000, delayed_stop, 0);
	} else {
		printf("value = %d\n", value);
	}
}

init() = {
	gluQuadricDrawStyle(qobj, GLU_FILL);
	glNewList(1, GL_COMPILE);  /* create sphere display list */
	gluSphere(qobj, /* radius */ 1.0, /* slices */ 20,  /* stacks 
                                                       */ 20);
	glEndList();
	gluQuadricDrawStyle(qobj, GLU_LINE);
	glNewList(2, GL_COMPILE);  /* create sphere display list */
	gluSphere(qobj, /* radius */ 1.0, /* slices */ 20,  /* stacks 
                                                       */ 20);
	glEndList();
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);
	glMatrixMode(GL_PROJECTION);
	gluPerspective( /* field of view in degree */ 40.0,
				   /* aspect ratio */ 1.0,
				   /* Z near */ 1.0, /* Z far */ 10.0);
	glMatrixMode(GL_MODELVIEW);
	gluLookAt(0.0, 0.0, 5.0,  /* eye is at (0,0,5) */
			  0.0, 0.0, 0.0,      /* center is at (0,0,0) */
			  0.0, 1.0, 0.);      /* up is in positive Y direction */
	glTranslatef(0.0, 0.0, -1.0);
}

menustate(inuse:boolean) = {
	printf("menu is %s\n", cond(inuse, "INUSE",  "not in use"));
	if (!inuse) {
	}
}

keyboard(key:number, x:number, y:number) = {
	if (0x20 <= key && key < 0x7f) {
		printf("key: `%c' %d,%d\n", key, x, y);
	} else {
		printf("key: 0x%x %d,%d\n", key, x, y);
	}
}

special(key:number, x:number, y:number) = {
	if (key == GLUT_KEY_F1) {
		name = "F1";
	} elsif (key == GLUT_KEY_F2) {
		name = "F2";
	} elsif (key == GLUT_KEY_F3) {
		name = "F3";
	} elsif (key == GLUT_KEY_F4) {
		name = "F4";
	} elsif (key == GLUT_KEY_F5) {
		name = "F5";
	} elsif (key == GLUT_KEY_F6) {
		name = "F6";
	} elsif (key == GLUT_KEY_F7) {
		name = "F7";
	} elsif (key == GLUT_KEY_F8) {
		name = "F8";
	} elsif (key == GLUT_KEY_F9) {
		name = "F9";
	} elsif (key == GLUT_KEY_F10) {
		name = "F11";
	} elsif (key == GLUT_KEY_F11) {
		name = "F12";
	} elsif (key == GLUT_KEY_LEFT) {
		name = "Left";
	} elsif (key == GLUT_KEY_UP) {
		name = "Up";
	} elsif (key == GLUT_KEY_RIGHT) {
		name = "Right";
	} elsif (key == GLUT_KEY_DOWN) {
		name = "Down";
	} elsif (key == GLUT_KEY_PAGE_UP) {
		name = "Page up";
	} elsif (key == GLUT_KEY_PAGE_DOWN) {
		name = "Page down";
	} elsif (key == GLUT_KEY_HOME) {
		name = "Home";
	} elsif (key == GLUT_KEY_END) {
		name = "End";
	} elsif (key == GLUT_KEY_INSERT) {
		name = "Insert";
	} else {
		name = "UNKONW";
	}
	printf("special: %s %d,%d\n", name, x, y);
}

mouse(button:number, state:number, x:number, y:number) = {
	printf("button: %d %s %d,%d\n", button, cond(state == GLUT_UP, "UP", "down"), x, y);
}

motion(x:number, y:number) = {
	printf("motion: %d,%d\n", x, y);
}

visible(status:number) = {
	printf("visible: %s\n", cond(status == GLUT_VISIBLE, "YES", "no"));
}

enter_leave(state:number) = {
	printf("enter/leave %d = %s\n",
		   glutGetWindow(),
		   cond(state == GLUT_LEFT, "left", "entered"));
}

main() = {
	qobj:extern = gluNewQuadric();
	argv = glutInit(sys.argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	win1 = glutCreateWindow("sphere");
	glutEntryFunc(enter_leave);
	init();
	glutDisplayFunc(display_win1);
	glutCreateMenu(it);
	glutAddMenuEntry("toggle draw mode", 1);
	glutAddMenuEntry("exit", 2);
	glutAddMenuEntry("new menu entry", 3);
	glutAddMenuEntry("motion", 4);
	glutAttachMenu(GLUT_LEFT_BUTTON);
	glutCreateMenu(it);
	glutAddMenuEntry("yes", 1);
	glutAddMenuEntry("no", 2);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	win2 = glutCreateWindow("second window");
	glutEntryFunc(enter_leave);
	glutKeyboardFunc(keyboard);
	glutSpecialFunc(special);
	glutMouseFunc(mouse);
/*
	glutMotionFunc(motion);
*/
	glutVisibilityFunc(visible);
	init();
	light_diffuse[1] = 1;
	light_diffuse[2] = 1;
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glutDisplayFunc(display);
	submenu1 = glutCreateMenu(it);
	glutAddMenuEntry("submenu a", 666);
	glutAddMenuEntry("submenu b", 777);
	submenu2 = glutCreateMenu(it);
	glutAddMenuEntry("submenu 1", 25);
	glutAddMenuEntry("submenu 2", 26);
	glutAddSubMenu("submenuXXX", submenu1);
	glutCreateMenu(it);
	glutAddSubMenu("submenu", submenu2);
	glutAddMenuEntry("stop motion", 5);
	glutAddMenuEntry("delayed stop motion", 6);
	glutAddSubMenu("submenu", submenu2);
	glutAttachMenu(GLUT_LEFT_BUTTON);
	glutMenuStateFunc(menustate);
	glutMainLoop();
}

main()

#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/dinospin.c

/* Copyright (c) Mark J. Kilgard, 1994.  */

/* This program is freely distributable without licensing fees 
   and is provided without guarantee or warrantee expressed or 
   implied. This program is -not- in the public domain. */

/* New GLUT 3.0 glutGetModifiers() functionality used to make Shift-Left
   mouse scale the dinosaur's size. */

import(opengl) {*}
import(glu) {*}
import(glut) {*}
import(trackball)

[
	RESERVED, BODY_SIDE, BODY_EDGE, BODY_WHOLE, ARM_SIDE, ARM_EDGE, ARM_WHOLE,
	LEG_SIDE, LEG_EDGE, LEG_WHOLE, EYE_SIDE, EYE_EDGE, EYE_WHOLE, DINOSAUR
] = 0.. // displayLists;

angle = -150;   /* in degrees */
doubleBuffer = GL_TRUE, iconic = GL_FALSE, keepAspect = GL_FALSE;
spinning = false, moving = false;
beginx = 0, beginy = 0
W = 300, H = 300;
curquat = dim(4) {0};
lastquat = dim(4) {0};
bodyWidth = 3.0;
newModel = true;
scaling = false;
scalefactor = 1.0;
/* *INDENT-OFF* */
body = @{ {0, 3}, {1, 1}, {5, 1}, {8, 4}, {10, 4}, {11, 5},
	{11, 11.5}, {13, 12}, {13, 13}, {10, 13.5}, {13, 14}, {13, 15}, {11, 16},
	{8, 16}, {7, 15}, {7, 13}, {8, 12}, {7, 11}, {6, 6}, {4, 3}, {3, 2},
	{1, 2} };
arm = @{ {8, 10}, {9, 9}, {10, 9}, {13, 8}, {14, 9}, {16, 9},
	{15, 9.5}, {16, 10}, {15, 10}, {15.5, 11}, {14.5, 10}, {14, 11}, {14, 10},
	{13, 9}, {11, 11}, {9, 11} };
leg = @{ {8, 6}, {8, 4}, {9, 3}, {9, 2}, {8, 1}, {8, 0.5}, {9, 0},
	{12, 0}, {10, 1}, {10, 2}, {12, 4}, {11, 6}, {10, 7}, {9, 7} };
eye = @{ {8.75, 15}, {9, 14.7}, {9.6, 14.7}, {10.1, 15},
	{9.6, 15.25}, {9, 15.25} };
lightZeroPosition = @{10.0, 4.0, 10.0, 1.0};
lightZeroColor = @{0.8, 1.0, 0.8, 1.0}; /* green-tinted */
lightOnePosition = @{-1.0, -2.0, 1.0, 0.0};
lightOneColor = @{0.6, 0.3, 0.2, 1.0}; /* red-tinted */
skinColor = @{0.1, 1.0, 0.1, 1.0}, eyeColor = @{1.0, 0.2, 0.2, 1.0};
/* *INDENT-ON* */

tobj = nil

extrudeSolidFromPolygon(data[], thickness:number, side:number, edge:number, whole:number) = {
	vertex = dim(3) {0}, dx = 0, dy = 0, len = 0;
	i = 0;
	count = data.len()

	if (tobj == nil) {
		tobj:extern = gluNewTess();  /* create and initialize a GLU
                             polygon tesselation object */
		gluTessCallback(tobj, GLU_BEGIN, glBegin);
		gluTessCallback(tobj, GLU_VERTEX, glVertex2fv);  /* semi-tricky */
		gluTessCallback(tobj, GLU_END, glEnd);
	}
	glNewList(side, GL_COMPILE) {
		glShadeModel(GL_SMOOTH);  /* smooth minimizes seeing
                               tessellation */
		gluBeginPolygon(tobj) {
			repeat(count) {|i|
				vertex[0] = data[i][0];
				vertex[1] = data[i][1];
				vertex[2] = 0;
		    	gluTessVertex(tobj, vertex, data[i]);
			}
		}
	}
	glNewList(edge, GL_COMPILE);
	glShadeModel(GL_FLAT);  /* flat shade keeps angular hands
                             from being * * "smoothed" */
	glBegin(GL_QUAD_STRIP);
	repeat(count + 1) {|i|
		/* mod function handles closing the edge */
	    glVertex3f(data[i % count][0], data[i % count][1], 0.0);
	    glVertex3f(data[i % count][0], data[i % count][1], thickness);
		/* Calculate a unit normal by dividing by Euclidean
		distance. We * could be lazy and use
		glEnable(GL_NORMALIZE) so we could pass in * arbitrary
		normals for a very slight performance hit. */
		dx = data[(i + 1) % count][1] - data[i % count][1];
		dy = data[i % count][0] - data[(i + 1) % count][0];
		len = math.sqrt(dx * dx + dy * dy);
		glNormal3f(dx / len, dy / len, 0.0);
	}
	glEnd();
	glEndList();
	glNewList(whole, GL_COMPILE);
	glFrontFace(GL_CW);
	glCallList(edge);
	glNormal3f(0.0, 0.0, -1.0);  /* constant normal for side */
	glCallList(side);
	glPushMatrix();
	glTranslatef(0.0, 0.0, thickness);
	glFrontFace(GL_CCW);
	glNormal3f(0.0, 0.0, 1.0);  /* opposite normal for other side 
                               */
	glCallList(side);
	glPopMatrix();
	glEndList();
}

makeDinosaur() = {
	extrudeSolidFromPolygon(body, bodyWidth, BODY_SIDE, BODY_EDGE, BODY_WHOLE);
	extrudeSolidFromPolygon(arm, bodyWidth / 4, ARM_SIDE, ARM_EDGE, ARM_WHOLE);
	extrudeSolidFromPolygon(leg, bodyWidth / 2, LEG_SIDE, LEG_EDGE, LEG_WHOLE);
	extrudeSolidFromPolygon(eye, bodyWidth + 0.2, EYE_SIDE, EYE_EDGE, EYE_WHOLE);
	glNewList(DINOSAUR, GL_COMPILE);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, skinColor);
	glCallList(BODY_WHOLE);
	glPushMatrix();
	glTranslatef(0.0, 0.0, bodyWidth);
	glCallList(ARM_WHOLE);
	glCallList(LEG_WHOLE);
	glTranslatef(0.0, 0.0, -bodyWidth - bodyWidth / 4);
	glCallList(ARM_WHOLE);
	glTranslatef(0.0, 0.0, -bodyWidth / 4);
	glCallList(LEG_WHOLE);
	glTranslatef(0.0, 0.0, bodyWidth / 2 - 0.1);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, eyeColor);
	glCallList(EYE_WHOLE);
	glPopMatrix();
	glEndList();
}

recalcModelView() = {
	m = dim(4, 4)

	glPopMatrix();
	glPushMatrix();
	trackball.build_rotmatrix(m, curquat);
	glMultMatrixf(m.flat());
	if (scalefactor == 1.0) {
		glDisable(GL_NORMALIZE);
	} else {
		glEnable(GL_NORMALIZE);
	}
	glScalef(scalefactor, scalefactor, scalefactor);
	glTranslatef(-8, -8, -bodyWidth / 2);
	newModel:extern = false;
}

showMessage(x:number, y:number, z:number, message:string) = {
	glPushMatrix();
	glDisable(GL_LIGHTING);
	glTranslatef(x, y, z);
	glScalef(.02, .02, .02);
	glutStrokeCharacter(GLUT_STROKE_ROMAN, message.each():utf8);
	glEnable(GL_LIGHTING);
	glPopMatrix();
}

redraw() = {
	if (newModel) {
		recalcModelView();
	}
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glCallList(DINOSAUR);
	showMessage(2, 7.1, 4.1, "Spin me.");
	glutSwapBuffers();
}

myReshape(w:number, h:number) = {
	glViewport(0, 0, w, h);
	W:extern = w;
	H:extern = h;
}

mouse(button:number, state:number, x:number, y:number) = {
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
		spinning:extern = false;
		glutIdleFunc(nil);
		moving:extern = true;
		beginx:extern = x;
		beginy:extern = y;
		if (glutGetModifiers() & GLUT_ACTIVE_SHIFT) {
			scaling = true;
		} else {
			scaling = false;
		}
	}
	if (button == GLUT_LEFT_BUTTON && state == GLUT_UP) {
		moving:extern = false;
	}
}

animate() = {
	trackball.add_quats(lastquat, curquat, curquat);
	newModel:extern = true;
	glutPostRedisplay();
}

motion(x:number, y:number) = {
	if (scaling) {
		scalefactor:extern = scalefactor * (1.0 + (((beginy - y)) / H));
		beginx:extern = x;
		beginy:extern = y;
		newModel:extern = true;
		glutPostRedisplay();
		return;
	}
	if (moving) {
		trackball.trackball(lastquat,
				  (2.0 * beginx - W) / W,
				  (H - 2.0 * beginy) / H,
				  (2.0 * x - W) / W,
				  (H - 2.0 * y) / H
				  );
		beginx:extern = x;
		beginy:extern = y;
		spinning:extern = true;
		glutIdleFunc(animate);
	}
}

lightZeroSwitch = true, lightOneSwitch = true;

controlLights(value:number) = {
	if (value == 1) {
		lightZeroSwitch:extern = !lightZeroSwitch;
		if (lightZeroSwitch) {
			glEnable(GL_LIGHT0);
		} else {
			glDisable(GL_LIGHT0);
		}
	} elsif (value == 2) {
		lightOneSwitch:extern = !lightOneSwitch;
		if (lightOneSwitch) {
			glEnable(GL_LIGHT1);
		} else {
			glDisable(GL_LIGHT1);
		}
	} elsif (value == 4) {
		glutFullScreen();
	} elsif (value == 5) {
		sys.exit(0);
	}
	glutPostRedisplay();
}

vis(visible:number) = {
	if (visible == GLUT_VISIBLE) {
		if (spinning) {
			glutIdleFunc(animate);
		}
	} else {
		if (spinning) {
			glutIdleFunc(nil);
		}
	}
}

main() = {
	argv = glutInit(sys.argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE);
	trackball.trackball(curquat, 0.0, 0.0, 0.0, 0.0);
	glutCreateWindow("dinospin");
	glutDisplayFunc(redraw);
	glutReshapeFunc(myReshape);
	glutVisibilityFunc(vis);
	glutMouseFunc(mouse);
	glutMotionFunc(motion);
	glutCreateMenu(controlLights);
	glutAddMenuEntry("Toggle right light", 1);
	glutAddMenuEntry("Toggle left light", 2);
	if (glutGet(GLUT_WINDOW_NUM_SAMPLES) > 0) {
		glutAddMenuEntry("Toggle multisampling", 3);
		glutSetWindowTitle("dinospin (multisample capable)");
	}
	glutAddMenuEntry("Full screen", 4);
	glutAddMenuEntry("Quit", 5);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	makeDinosaur();
	glEnable(GL_CULL_FACE);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);
	glMatrixMode(GL_PROJECTION);
	gluPerspective( /* field of view in degree */ 40.0,
				   /* aspect ratio */ 1.0,
				   /* Z near */ 1.0, /* Z far */ 40.0);
	glMatrixMode(GL_MODELVIEW);
	gluLookAt(0.0, 0.0, 30.0,  /* eye is at (0,0,30) */
			  0.0, 0.0, 0.0,      /* center is at (0,0,0) */
			  0.0, 1.0, 0.);      /* up is in positive Y direction */
	glPushMatrix();       /* dummy push so we can pop on model
                           recalc */
	glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, 1);
	glLightfv(GL_LIGHT0, GL_POSITION, lightZeroPosition);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightZeroColor);
	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 0.1);
	glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION, 0.05);
	glLightfv(GL_LIGHT1, GL_POSITION, lightOnePosition);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, lightOneColor);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHT1);
	glLineWidth(2.0);
	glutMainLoop();
}

main()
	
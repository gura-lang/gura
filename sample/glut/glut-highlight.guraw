#!/usr/bin/env gura
// This Gura program has been ported from the original C code below:
// https://www.opengl.org/archives/resources/code/samples/glut_examples/examples/highlight.c

/* Copyright (c) Mark J. Kilgard, 1994. */

/* This program is freely distributable without licensing fees 
   and is provided without guarantee or warrantee expressed or 
   implied. This program is -not- in the public domain. */

/**
 * (c) Copyright 1993, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED 
 * Permission to use, copy, modify, and distribute this software for 
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that 
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission. 
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
 * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 * 
 * US Government Users Restricted Rights 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
 * (c)(1)(ii) of the Rights in Technical Data and Computer Software
 * clause at DFARS 252.227-7013 and/or in similar or successor
 * clauses in the FAR or the DOD or NASA FAR Supplement.
 * Unpublished-- rights reserved under the copyright laws of the
 * United States.  Contractor/manufacturer is Silicon Graphics,
 * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
 *
 * OpenGL(TM) is a trademark of Silicon Graphics, Inc.
 */
/*
 *  scene.c
 *  This program demonstrates the use of the GL lighting model.
 *  Objects are drawn using a grey material characteristic. 
 *  A single light source illuminates the objects.
 */
import(opengl) {*}
import(glu) {*}
import(glut) {*}

BUFSIZE = 512

TORUS		= 1
TETRAHEDRON	= 2
ICOSAHEDRON	= 3

selectBuf = nil

W = 500, H = 500;
x = 0, y = 0;
locating = false;
theObject = 0;
menu_inuse = false;
mouse_state = 0;

objectNames = \
@{"Nothing", "Torus", "Tetrahedron", "Icosahedron"};

output(x:number, y:number, fmt:string, args*) = {
	buffer = format(fmt, args*)
	glPushMatrix();
	glTranslatef(x, y, 0);
    glutStrokeCharacter(GLUT_STROKE_ROMAN, buffer.each():utf8);
	glPopMatrix();
}

/* Initialize material property and light source. */
myinit() = {
	light_ambient = \
		@{0.2, 0.2, 0.2, 1.0};
	light_diffuse = \
		@{1.0, 1.0, 1.0, 1.0};
	light_specular = \
		@{1.0, 1.0, 1.0, 1.0};
	light_position = \
		@{1.0, 1.0, 1.0, 0.0};

	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	
	glEnable(GL_LIGHT0);
	glDepthFunc(GL_LESS);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);

	selectBuf:extern = glSelectBuffer(BUFSIZE);

	glNewList(TORUS, GL_COMPILE);
	glutSolidTorus(0.275, 0.85, 10, 15);
	glEndList();
	glNewList(TETRAHEDRON, GL_COMPILE);
	glutSolidTetrahedron();
	glEndList();
	glNewList(ICOSAHEDRON, GL_COMPILE);
	glutSolidIcosahedron();
	glEndList();
}

highlightBegin() = {
	red = \
		@{1.0, 0.0, 0.0, 1.0};

	glPushAttrib(GL_LIGHTING_BIT | GL_CURRENT_BIT);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, red);
	glColor3f(1.0, 0.0, 0.0);
}

highlightEnd() = {
	glPopAttrib();
}

draw() = {
	glPushMatrix();
	glScalef(1.3, 1.3, 1.3);
	glRotatef(20.0, 1.0, 0.0, 0.0);
	
	glLoadName(2);
	glPushMatrix();
	if (theObject == 2) {
		highlightBegin();
	}
	glTranslatef(-0.75, -0.5, 0.0);
	glRotatef(270.0, 1.0, 0.0, 0.0);
	glCallList(TETRAHEDRON);
	if (theObject == 2) {
		highlightEnd();
	}
	glPopMatrix();

	glLoadName(1);
	glPushMatrix();
	if (theObject == 1) {
		highlightBegin();
	}
	glTranslatef(-0.75, 0.5, 0.0);
	glRotatef(90.0, 1.0, 0.0, 0.0);
	glCallList(TORUS);
	if (theObject == 1) {
		highlightEnd();
	}
	glPopMatrix();

	glLoadName(3);
	glPushMatrix();
	if (theObject == 3) {
		highlightBegin();
	}
	glTranslatef(0.75, 0.0, -1.0);
	glCallList(ICOSAHEDRON);
	if (theObject == 3) {
		highlightEnd();
	}
	glPopMatrix();

	glPopMatrix();
}

myortho() = {
	if (W <= H) {
		glOrtho(-2.5, 2.5, -2.5 * H / W, 2.5 * H / W, -10.0, 10.0);
	} else {
		glOrtho(-2.5 * W / H, 2.5 * W / H, -2.5, 2.5, -10.0, 10.0);
	}
}

/*  processHits() prints out the contents of the 
 *  selection array.
 */
processHits(hits:number, buffer:opengl.Buffer) = {
	depth = ~0
	iBuffer = 0
	newObject = 0;
	repeat(hits) {			/* for each hit  */
		getThisName = false
		names = buffer[iBuffer]
		iBuffer += 1		/* skip # name */
		if (buffer[iBuffer] <= depth) {
			depth = buffer[iBuffer];
			getThisName = true
		}
		iBuffer += 1;		/* skip z1 */
		if (buffer[iBuffer] <= depth) {
			depth = buffer[iBuffer];
			getThisName = true
		}
		iBuffer += 1		/* skip z2 */

		if (getThisName) {
			newObject = buffer[iBuffer];
		}
		iBuffer += names	/* skip the names list */
	}
	if (theObject != newObject) {
		theObject = newObject;
		glutPostRedisplay();
	}
}

/* ARGSUSED */
locate(value:number) = {
	viewport = dim(4) {0}

	if (locating) {
		if (mouse_state == GLUT_ENTERED) {
			glRenderMode(GL_SELECT);
			glInitNames();
			glPushName(-1);

			glMatrixMode(GL_PROJECTION);
			glPushMatrix();
			glLoadIdentity();
			viewport[0] = 0;
			viewport[1] = 0;
			viewport[2] = W;
			viewport[3] = H;
			gluPickMatrix(x, H - y, 5.0, 5.0, viewport);
			myortho();
			glMatrixMode(GL_MODELVIEW);
			draw();
			glMatrixMode(GL_PROJECTION);
			glPopMatrix();
			glMatrixMode(GL_MODELVIEW);
			hits = glRenderMode(GL_RENDER);
		} else {
			hits = 0;
		}
		processHits(hits, selectBuf);
	}
	locating:extern = false;
}

passive(newx:number, newy:number) = {
	x:extern = newx;
	y:extern = newy;
	if (!locating) {
		locating:extern = true;
		glutTimerFunc(1, locate, 0);
	}
}

entry(state:number) = {
	mouse_state:extern = state;
	if (!menu_inuse) {
		if (state == GLUT_LEFT) {
			if (theObject != 0) {
				theObject:extern = 0;
				glutPostRedisplay();
			}
		}
	}
}

display() = {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	draw();

	glPushAttrib(GL_ENABLE_BIT);
	glDisable(GL_DEPTH_TEST);
	glDisable(GL_LIGHTING);
	glDisable(GL_LINE_SMOOTH);

	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	glLoadIdentity();
	gluOrtho2D(0, 3000, 0, 3000);
	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	glLoadIdentity();
	output(80, 2800, "Automatically names object under mouse.");
	output(80, 100, "Located: %s.", objectNames[theObject]);
	glPopMatrix();
	glMatrixMode(GL_PROJECTION);
	glPopMatrix();
	glMatrixMode(GL_MODELVIEW);
	glPopAttrib();

	glutSwapBuffers();
}

myReshape(w:number, h:number) = {
	W:extern = w;
	H:extern = h;
	glViewport(0, 0, W, H);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	myortho();
	glMatrixMode(GL_MODELVIEW);
}

polygon_mode(value:number) = {
	  if (value == 1) {
		  glEnable(GL_LIGHTING);
		  glDisable(GL_BLEND);
		  glEnable(GL_DEPTH_TEST);
		  glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	  } elsif (value == 2) {
		  glDisable(GL_LIGHTING);
		  glColor3f(1.0, 1.0, 1.0);
		  glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
		  glEnable(GL_LINE_SMOOTH);
		  glEnable(GL_BLEND);
		  glDisable(GL_DEPTH_TEST);
		  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	}
	glutPostRedisplay();
}

mstatus(status:number, newx:number, newy:number) = {
	if (status == GLUT_MENU_NOT_IN_USE) {
		menu_inuse:extern = false;
		passive(newx, newy);
	} else {
		menu_inuse:extern = true;
	}
}

main_menu(value:number) = {
	if (value == 666) {
		exit(0);
	}
}

/*  Main Loop
 *  Open window with initial window size, title bar, 
 *  RGBA display mode, and handle input events.
 */
main() = {
	argv = glutInit(sys.argv);
	glutInitWindowSize(W, H);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutCreateWindow(argv[0]);
	myinit();
	glutReshapeFunc(myReshape);
	glutDisplayFunc(display);
	submenu = glutCreateMenu(polygon_mode);
	glutAddMenuEntry("Filled", 1);
	glutAddMenuEntry("Outline", 2);
	glutCreateMenu(main_menu);
	glutAddMenuEntry("Quit", 666);
	glutAddSubMenu("Polygon mode", submenu);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutPassiveMotionFunc(passive);
	glutEntryFunc(entry);
	glutMenuStatusFunc(mstatus);
	glutMainLoop();
}

main()

#!/usr/bin/env gura
import(plotter)

MakeRands(center:number, range:number, n:number) = {
	center + rands(nil, n) * range - range / 2
}

plotter.canvas(`horz) {|cv|
	cv.graph {|g|
		markerStyles = [
			`pixel, `square, `point, `circle
			`triangle_down, `triangle_up, `triangle_left, `triangle_right
			`tri_down, `tri_up, `tri_left, `tri_right
			`cross, `plus, `diamond, `dia
		]
		g.attr(labelAnchor => `n)
		g.title = 'Marker Style'
		g.minX = 0, g.maxX = 10
		g.minY = 0, g.maxY = 10
		g.showTickX = g.showTickY = false
		nMarkers = markerStyles.len()
		xs = interval(3, 10, 6):open_r
		ys = interval(9, 0, nMarkers):open
		g.attr(labelAnchor => `s)
		xs.each {|x, i|
			g.label(x, 9, '%d' % (6 + i * 2))
		}
		g.attr(labelAnchor => `w)
		for (y in ys, markerStyle in markerStyles) {
			g.label(1, y, markerStyle, 0, 0)
			g.attr(markerStyle => markerStyle)
			xs.each {|x, i|
				g.attr(markerSize => 6 + i * 2)
				g.marker([x], [y])
			}
		}
	}
	cv.graph {|g|
		g.attrCycle(markerStyle => [`pixel, `point, `cross, `dia])
		g.marker(MakeRands(5, 5, 10), MakeRands(5, 5, 10))
		g.marker(MakeRands(-5, 5, 10), MakeRands(5, 5, 10))
		g.marker(MakeRands(-5, 5, 10), MakeRands(-5, 5, 10))
		g.marker(MakeRands(5, 5, 10), MakeRands(-5, 5, 10))
		g.adjustRange()
	}
	cv.show(1000, 600)
}

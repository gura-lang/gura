#!/usr/bin/env gura
import(sdl2, sdl)
import(gif)

if (sys.argv.len() < 2) {
	sys.stderr.println('usage: gif-disp.gura file')
	sys.exit(1)
}
gif.content(sys.argv[1], `rgba) {|g|
	ratio = 480 / g.images:*width.max()
	imgs = g.images::resize(ratio):ratio
	//imgs = g.images
	imgs:*delayTime:public = g.images:*gif:*GraphicControl:*DelayTime * 10
	imgs:*xOffset:public = g.images:*gif:*ImageDescriptor:*ImageLeftPosition * ratio
	imgs:*yOffset:public = g.images:*gif:*ImageDescriptor:*ImageTopPosition * ratio
}
createHatchImage(width:number, height:number, wdHatch:number, htHatch:number) = {
	colors = [color(`gray), color(`white)]
	iCols = range(width / wdHatch + 1)
	img = image(`rgb, width, height)
	repeat (height / htHatch + 1) {|iRow|
		img.fillrect(iCols * wdHatch, iRow * htHatch, wdHatch, htHatch,
								colors.cycle().offset(iRow % 2))
	}
	img
}

bgColor = color(`green)
wdScreen = imgs:*width.max()
htScreen = imgs:*height.max()
imgHatch = createHatchImage(wdScreen, htScreen, 8, 8)

sdl.Init(sdl.INIT_EVERYTHING)
window = sdl.CreateWindow(
		path.filename(sys.argv[0]),
		sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED, wdScreen + 32, htScreen + 32, 0)
renderer = sdl.CreateRenderer(window, -1, 0)

imgIter = imgs.cycle()
delayTime = 0
sdl.SetRenderDrawColor(renderer, bgColor.r, bgColor.g, bgColor.b, 255)
sdl.RenderClear(renderer)
sdl.RenderPresent(renderer)
timePrev = sdl.GetTicks()
repeat {
	event = sdl.WaitEventTimeout(delayTime)
	timeCur = sdl.GetTicks()
	if (timeCur < timePrev || timeCur > timePrev + delayTime) {
		timePrev = timeCur
		sdl.SetRenderDrawColor(renderer, bgColor.r, bgColor.g, bgColor.b, 255)
		sdl.RenderClear(renderer)
		img = imgIter.next()
		sdl.CreateTextureFromSurface(renderer, img) {|texture|
			sdl.RenderCopy(renderer, texture, nil,
						   sdl.Rect(img.xOffset, img.yOffset, img.width, img.height))
		}
		sdl.RenderPresent(renderer)
		delayTime = img.delayTime
	}
	if (!event) {
		// nothing to do
	} elsif (event.type == sdl.QUIT) {
		break
	} elsif (event.type == sdl.KEYDOWN) {
		(event.sym == sdl.K_ESCAPE) && break
	}
}

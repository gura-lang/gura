#!/usr/bin/env gura
import(helper.test) {*}

test_serial(var:nomap) = {
	buff = binary()
	buff.writer() {|w|
		w.serialize(var):nomap
		println('original:    ', var):nomap
	}
	buff.dump()
	buff.reader() {|r|
		varDec = r.deserialize()
		println('deserialize: ', varDec):nomap
	}
}

testcase {
	test_serial(0)
	test_serial(0xffffffff)
	test_serial(0x100000000)
	test_serial('')
	test_serial('abcdefghijklmnopqrstuvwxyz')
	test_serial(%{'apple' => 100, 'orange' => 120, 'grape' => 200})
	test_serial([0, 1, 2, 3])
}

/*
testcase {
	buff = binary()
	buff.writer() {|w|
		x = %{'apple' => 100, 'orange' => 120, 'grape' => 200}
		w.serialize(x)
		println(x)
	}
	buff.reader() {|r|
		x = r.deserialize()
		println(x)
	}
}
testcase {
	buff = binary()
	buff.writer() {|w|
		x = @@{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}
		w.serialize(x)
		println(x)
	}
	buff.reader() {|r|
		x = r.deserialize()
		println(x)
	}
}
testcase {
	f() = {
		buff = binary()
		buff.writer() {|w|
			x = `a('A', 'B', 1, 2) {} b(1, 2, 3) {}
			w.serialize(x)
			println(x)
		}
		buff.reader() {|r|
			x = r.deserialize()
			println(x)
		}
	}
	println(f.expr)
	buff = binary()
	buff.writer() {|w|
		w.serialize(f.expr)
	}
	buff.dump()
	buff.reader() {|r|
		println(r.deserialize())
	}
}
testcase {
	buff = binary()
	buff.writer() {|w|
		x = `a('A', 'B', 1, 2) {} b(1, 2, 3) {}
		w.serialize(x)
		println(x)
	}
	buff.reader() {|r|
		x = r.deserialize()
		println(x)
	}
}
testcase {
	buff = binary()
	buff.writer() {|w|
		w.serialize('hello world')
	}
	buff.reader() {|r|
		println(r.deserialize())
	}
}
testcase {
	buff = binary()
	buff.writer() {|w|
		w.serialize(['hello world', 'line1', 'line2'])
	}
	buff.reader() {|r|
		println(r.deserialize()):nomap
	}
}
testcase {
	buff = binary()
	buff.writer() {|w|
		w.serialize([12345, 3.1415926, 'hello world', 3 + 2j])
	}
	buff.dump()
	buff.reader() {|r|
		println(r.deserialize()):nomap
	}
}
*/

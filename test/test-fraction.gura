#!/usr/bin/env gura
import(testutil) {*}

testcase {
	[
		[3, 4]
		[-3, 4]
		[3, -4]
		[-3, -4]
	].each {|test|
		x = fraction(test*)
		printf('%s .. numer=%d denom=%d\n', x, x.numer, x.denom)
	}
	tester(`fraction(3, 12).reduce())
	tester(`fraction(-3, 12).reduce())
}
testcase {
	[
		`(fraction(4, 7) + fraction(3, 10))
		`(fraction(3, 5) + fraction(3, 10))
		`(fraction(4, 7) + fraction(2, 5))
		`(fraction(1, 2) + fraction(3, 7))
		`(fraction(2, 7) + fraction(3, 5))
		`(fraction(2, 5) + fraction(5, 9))
		`(fraction(2, 5) + fraction(3, 7))
		`(fraction(3, 10) + fraction(3, 5))
		`(fraction(2, 3) + fraction(3, 10))
		`(fraction(3, 4) + fraction(1, 5))
		`(fraction(2, 3) - fraction(3, 5))
		`(fraction(6, 7) - fraction(1, 3))
		`(fraction(6, 7) - fraction(1, 3))
		`(fraction(8, 9) - fraction(5, 6))
		`(fraction(1, 2) - fraction(1, 4))
		`(fraction(2, 7) - fraction(1, 5))
		`(fraction(1, 2) - fraction(1, 3))
		`(fraction(1, 3) - fraction(1, 5))
		`(fraction(2, 9) - fraction(1, 5))
		`(fraction(3, 8) - fraction(1, 5))
		`(fraction(1, 4) - fraction(1, 5))
		`(fraction(1, 2) + fraction(1, 3))
		`(fraction(3, 10) - fraction(3, 10))
		`(fraction(2, 9) - fraction(1, 5))
		`(fraction(5, 6) - fraction(2, 7))
		`(fraction(1, 2) - fraction(4, 9))
		`(fraction(2, 5) - fraction(2, 5))
		`(fraction(3, 5) - fraction(3, 5))
		`(fraction(2, 3) - fraction(5, 8))
		`(fraction(1, 2) - fraction(1, 4))
		`(fraction(2, 3) * fraction(1, 2))
		`(fraction(1, 2) * 3)
		`(fraction(10, 13) * fraction(10, 3))
		`(fraction(13, 8) * fraction(10, 3))
		`(fraction(5, 9) * fraction(9, 2))
		`(2 * fraction(11, 7))
		`(4 * fraction(11, 14))
		`(fraction(3, 7) / fraction(3, 4))
		`(fraction(5, 2) / fraction(5, 7))
		`(5 / fraction(14, 9))
		`(fraction(6, 11) / fraction(1, 4))
		`(fraction(12, 5) / fraction(15, 7))
		`(fraction(4, 3) / fraction(3, 2))
		`(fraction(13, 7) / 2)
	].each {|test|
		printf('%s .. %s\n', test, test.eval()):nomap
	}
}

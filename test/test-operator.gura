#!/usr/bin/env gura
import(helper.test) {*}
import(arrayt)

testcase('script generation test') {
	x = [
		`(-(a + b))
		`(-(a <=> b))
		`(-4)
		`(-4 + 3 * 4)
		`((-4 + 3) * 4)
		`(-4 * (3 + 4))
		`(-a)
		`(`a)
		`((m = func()) && m)
		`(func(a) = {})
		`(func(a) {block?} = {})
		`(func(a) {|a, b, c|})
		`(func(a) {|(3 | 4 | 5), b, c|})
		`(func(a) {|((3 | 4 | 5)), b, c|})
		`(func(a) {|((3 * 4) | 5), b, c|})
		`(func(a) {|(3 | 4 | 5), b, (a | b | c)|})
		`(func(a) {|(a |.| b), c, d|})
		`(func(a) {|(a |*| b), c, d|})
		`(func(a) {|(a |+| b), c, d|})
		`(func(a) {|(a |-| b), c, d|})
		`(func(a) {|(a |&| b), c, d|})
		`(func(a) {|(a ||| b), c, d|})
		`(func(a, b, c, d, e%, f*) = {})
		`(`(3 + 4))
		`(`(3 * 4))
		`(`(-3 * 4))
		`(`(3 + 4 + 5 + 6))
		`(`(-3 + 4 + 5 + 6))
		`(`(-3 - (-4) + 5 + 6))
		`(`(3 * 4 * 5 * 6))
		`(`(3 * (-4) * 5 * 6))
		`(`(a(3, 4, 5):hoge).func())
		`(`(a:hoge).func())
		`(`(a[0]:hoge).func())
		`(a |.| b * 3)
		`(a |*| b * 3)
	]
	println(x)
}
testcase('acceptable value types') {
	[`+, `-, `~, `!, `..].each {|op|
		printf('%s\n%s\n', op, operator(op).entries(`unary)):nomap
	}
	[`+, `-, `*, `/, `%, `**, `==, `!=, `>, `<, `>=, `<=, `<=>, `in, `|, `&, `^, `<<, `>>, `||, `&&, `.., `|.|, `|*|, `|+|, `|-|, `|&|, `|||].each {|op|
		printf('%s\n%s\n', op, operator(op).entries(`binary)):nomap
	}
}
testcase('operator assignment - 1') {
	A = class {
		__getitem__(i) = println('__getitem__ ', i)				// a[i]
		__getitemx__() = println('__getitemx__')				// a[]
		__setitem__(i, v) = println('__setitem__ ', i, ' ', v)	// a[i] = v
		__setitemx__(v) = println('__setitemx__ ', v)			// a[] = v
		__getprop__(attr) = println('__getprop__ ', attr)		// a.attr
		__setprop__(attr, v) = printf('__setprop__ %s %s\n', attr, v)	// a.attr = v
		public {
			a = 3
		}
	}
	operator(`+).assign(`A) {|v| printf('+%s\n', typename(v)):nomap }
	operator(`-).assign(`A) {|v| printf('-%s\n', typename(v)):nomap }
	operator(`~).assign(`A) {|v| printf('~%s\n', typename(v)):nomap }
	operator(`!).assign(`A) {|v| printf('!%s\n', typename(v)):nomap }
	//operator(`..).assign(`A) {|v| printf('%s..\n', typename(v)):nomap }
	operator(`+).assign(`A, `A) {|v1, v2| printf('%s + %s\n', typename(v1), typename(v2)):nomap }
	operator(`-).assign(`A, `A) {|v1, v2| printf('%s - %s\n', typename(v1), typename(v2)):nomap }
	operator(`*).assign(`A, `A) {|v1, v2| printf('%s * %s\n', typename(v1), typename(v2)):nomap }
	operator(`/).assign(`A, `A) {|v1, v2| printf('%s / %s\n', typename(v1), typename(v2)):nomap }
	operator(`%).assign(`A, `A) {|v1, v2| printf('%s %% %s\n', typename(v1), typename(v2)):nomap }
	operator(`**).assign(`A, `A) {|v1, v2| printf('%s ** %s\n', typename(v1), typename(v2)):nomap }
	operator(`==).assign(`A, `A) {|v1, v2| printf('%s == %s\n', typename(v1), typename(v2)):nomap }
	operator(`!=).assign(`A, `A) {|v1, v2| printf('%s != %s\n', typename(v1), typename(v2)):nomap }
	operator(`>).assign(`A, `A) {|v1, v2| printf('%s > %s\n', typename(v1), typename(v2)):nomap }
	operator(`<).assign(`A, `A) {|v1, v2| printf('%s < %s\n', typename(v1), typename(v2)):nomap }
	operator(`>=).assign(`A, `A) {|v1, v2| printf('%s >= %s\n', typename(v1), typename(v2)):nomap }
	operator(`<=).assign(`A, `A) {|v1, v2| printf('%s <= %s\n', typename(v1), typename(v2)):nomap }
	operator(`<=>).assign(`A, `A) {|v1, v2| printf('%s <=> %s\n', typename(v1), typename(v2)):nomap }
	operator(`in).assign(`A, `A) {|v1, v2| printf('%s in %s\n', typename(v1), typename(v2)):nomap }
	operator(`|).assign(`A, `A) {|v1, v2| printf('%s | %s\n', typename(v1), typename(v2)):nomap }
	operator(`&).assign(`A, `A) {|v1, v2| printf('%s & %s\n', typename(v1), typename(v2)):nomap }
	operator(`^).assign(`A, `A) {|v1, v2| printf('%s ^ %s\n', typename(v1), typename(v2)):nomap }
	operator(`<<).assign(`A, `A) {|v1, v2| printf('%s << %s\n', typename(v1), typename(v2)):nomap }
	operator(`>>).assign(`A, `A) {|v1, v2| printf('%s >> %s\n', typename(v1), typename(v2)):nomap }
	//operator(`||).assign(`A, `A) {|v1, v2| printf('%s || %s\n', typename(v1), typename(v2)):nomap }
	//operator(`&&).assign(`A, `A) {|v1, v2| printf('%s && %s\n', typename(v1), typename(v2)):nomap }
	operator(`..).assign(`A, `A) {|v1, v2| printf('%s .. %s\n', typename(v1), typename(v2)):nomap }
	a1 = A()
	a2 = A()
	+a1
	-a1
	~a1
	!a1
	//a1..
	a1 + a2
	a1 - a2
	a1 * a2
	a1 / a2
	a1 % a2
	a1 ** a2
	a1 == a2
	a1 != a2
	a1 > a2
	a1 < a2
	a1 >= a2
	a1 <= a2
	a1 <=> a2
	a1 in a2
	a1 | a2
	a1 & a2
	a1 ^ a2
	a1 << a2
	a1 >> a2
	a1 .. a2
	a1[3]
	a1[]
	a1[3] = 2
	a1[] = 2
	a1.a
	a1.b
	a1.b = 2
}
testcase('stream output operator') {
	sys.stdout << 'hello world\n'
	sys.stdout << 'hello world\n' << '2nd line\n' << '3rd line\n'
	sys.stdout << b'hello world\n'
}
testcase('bitwise and/or calculation with nil') {
	tester(`(nil | 3))
	tester(`(3 | nil))
	tester(`(nil | nil))
	tester(`(nil & 3))
	tester(`(3 & nil))
	tester(`(nil & nil))
}
testcase('"in" operator') {
	tester(`(2 in 2))
	tester(`(2 in 3))
	tester(`(2 in 0..10))
	tester(`(2 in 4..10))
	tester(`(2 in [0..10]))
	tester(`(2 in [4..10]))
	tester(`[0..10 in 4])
	tester(`[0..10 in -2])
	tester(`[0..10 in 0..5])
	tester(`[0..10 in 4..8])
	tester(`[0..10 in [0..5]])
	tester(`[0..10 in [4..8]])
	tester(`([0..10] in 4))
	tester(`([0..10] in -2))
	tester(`([0..10] in 0..5))
	tester(`([0..10] in 4..8))
	tester(`([0..10] in [0..5]))
	tester(`([0..10] in [4..8]))
}
testcase('list assignment and suffix operators + and *') {
	[a, b, c] = [1, 2, 3]
	printf('a=%s, b=%s, c=%s\n', a, b, c):nomap
	[a, b, c+] = [1, 2, 3, 4, 5]
	printf('a=%s, b=%s, c=%s\n', a, b, c):nomap
	[a, b, c*] = [1, 2, 3, 4, 5]
	printf('a=%s, b=%s, c=%s\n', a, b, c):nomap
	[a, b, c*] = [1, 2]
	printf('a=%s, b=%s, c=%s\n', a, b, c):nomap
}
/*
testcase('operator with expr') {
	println(-`(x + 2))
	println(`(x + 2) + `(y + 3))
	println(`(x + 2) - `(y + 3))
	println(`(x + 2) * `(y + 3))
	println(`(x + 2) / `(y + 3))
	println(`(x + 2) ** `(y + 3))
	println(sin(`(x + 2)))
	f(x) = 3 * x ** 3 + x ** 2 + 3 * x + 2
	println(f(`x))
	println(f(`(t + 2)))
}
*/
testcase('operator assignment - 2') {
	Fruit = class {
		__init__(name:string) = { this.cnt = 0, this.name = name }
		__str__() = format('name = %s, cnt = %d', this.name, this.cnt)
	}
	operator(`+).assign(`Fruit) {|v| format('+%s', typename(v)):nomap }
	operator(`-).assign(`Fruit) {|v| format('-%s', typename(v)):nomap }
	operator(`~).assign(`Fruit) {|v| format('~%s', typename(v)):nomap }
	operator(`!).assign(`Fruit) {|v| format('!%s', typename(v)):nomap }
	operator(`..).assign(`Fruit) {|v| format('%s..', typename(v)):nomap }
	operator(`+).assign(`Fruit, `any) {|v1, v2| format('%s + %s', typename(v1), typename(v2)):nomap }
	operator(`-).assign(`Fruit, `any) {|v1, v2| format('%s - %s', typename(v1), typename(v2)):nomap }
	operator(`*).assign(`Fruit, `any) {|v1, v2| format('%s * %s', typename(v1), typename(v2)):nomap }
	operator(`/).assign(`Fruit, `any) {|v1, v2| format('%s / %s', typename(v1), typename(v2)):nomap }
	operator(`%).assign(`Fruit, `any) {|v1, v2| format('%s %% %s', typename(v1), typename(v2)):nomap }
	operator(`**).assign(`Fruit, `any) {|v1, v2| format('%s ** %s', typename(v1), typename(v2)):nomap }
	operator(`+).assign(`any, `Fruit) {|v1, v2| format('%s + %s', typename(v1), typename(v2)):nomap }
	operator(`-).assign(`any, `Fruit) {|v1, v2| format('%s - %s', typename(v1), typename(v2)):nomap }
	operator(`*).assign(`any, `Fruit) {|v1, v2| format('%s * %s', typename(v1), typename(v2)):nomap }
	operator(`/).assign(`any, `Fruit) {|v1, v2| format('%s / %s', typename(v1), typename(v2)):nomap }
	operator(`%).assign(`any, `Fruit) {|v1, v2| format('%s %% %s', typename(v1), typename(v2)):nomap }
	operator(`**).assign(`any, `Fruit) {|v1, v2| format('%s ** %s', typename(v1), typename(v2)):nomap }
	operator(`==).assign(`Fruit, `any) {|v1, v2| format('%s == %s', typename(v1), typename(v2)):nomap }
	operator(`!=).assign(`Fruit, `any) {|v1, v2| format('%s != %s', typename(v1), typename(v2)):nomap }
	operator(`>).assign(`Fruit, `any) {|v1, v2| format('%s > %s', typename(v1), typename(v2)):nomap }
	operator(`<).assign(`Fruit, `any) {|v1, v2| format('%s < %s', typename(v1), typename(v2)):nomap }
	operator(`>=).assign(`Fruit, `any) {|v1, v2| format('%s >= %s', typename(v1), typename(v2)):nomap }
	operator(`<=).assign(`Fruit, `any) {|v1, v2| format('%s <= %s', typename(v1), typename(v2)):nomap }
	operator(`<=>).assign(`Fruit, `any) {|v1, v2| format('%s <=> %s', typename(v1), typename(v2)):nomap }
	operator(`in).assign(`Fruit, `any) {|v1, v2| format('%s in %s', typename(v1), typename(v2)):nomap }
	operator(`|).assign(`Fruit, `any) {|v1, v2| format('%s | %s', typename(v1), typename(v2)):nomap }
	operator(`&).assign(`Fruit, `any) {|v1, v2| format('%s & %s', typename(v1), typename(v2)):nomap }
	operator(`^).assign(`Fruit, `any) {|v1, v2| format('%s ^ %s', typename(v1), typename(v2)):nomap }
	operator(`<<).assign(`Fruit, `any) {|v1, v2| format('%s << %s', typename(v1), typename(v2)):nomap }
	operator(`>>).assign(`Fruit, `any) {|v1, v2| format('%s >> %s', typename(v1), typename(v2)):nomap }
	//operator(`||).assign(`Fruit, `any) {|v1, v2| format('%s || %s', typename(v1), typename(v2)):nomap }
	//operator(`&&).assign(`Fruit, `any) {|v1, v2| format('%s && %s', typename(v1), typename(v2)):nomap }
	operator(`..).assign(`Fruit, `any) {|v1, v2| format('%s .. %s', typename(v1), typename(v2)):nomap }
	fruit = Fruit('apple')
	println(fruit)
	println(fruit + 3)
	println(fruit - 3)
	println(fruit * 3)
	println(fruit / 3)
	println(fruit % 3)
	println(fruit ** 3)
	println(3 + fruit)
	println(3 - fruit)
	println(3 * fruit)
	println(3 / fruit)
	println(3 % fruit)
	println(3 ** fruit)
	println(fruit == 1)
	println(fruit != 1)
	println(fruit < 1)
	println(fruit > 1)
	println(fruit <= 1)
	println(fruit >= 1)
	println(fruit <=> 1)
	println(fruit | 1)
	println(fruit & 1)
	println(fruit .. 1)
}
testcase('bitwise and/or/xor and boolean values') {
	tester(`(false & false))
	tester(`(false & true))
	tester(`(true & false))
	tester(`(true & true))
	tester(`(false | false))
	tester(`(false | true))
	tester(`(true | false))
	tester(`(true | true))
	tester(`(false ^ false))
	tester(`(false ^ true))
	tester(`(true ^ false))
	tester(`(true ^ true))
	tester(`(false & false & false))
	tester(`(false & false & true))
	tester(`(false & true & false))
	tester(`(false & true & true))
	tester(`(true & false & false))
	tester(`(true & false & true))
	tester(`(true & true & false))
	tester(`(true & true & true))
	tester(`(false | false | false))
	tester(`(false | false | true))
	tester(`(false | true | false))
	tester(`(false | true | true))
	tester(`(true | false | false))
	tester(`(true | false | true))
	tester(`(true | true | false))
	tester(`(true | true | true))
	tester(`(false | true & false))
	x = [true, false, false, true, false, true, false, false, true, true]
	y = [true, false, false, true, false, false, false, false, true, true]
	z = [false, false, false, true, false, false, false, true, true, false]
	//x = choose(rands(2, 10), false, true):list
	//y = choose(rands(2, 10), false, true):list
	//z = choose(rands(2, 10), false, true):list
	tester(`x)
	tester(`y)
	tester(`z)
	tester(`(x | y))
	tester(`(x & y))
	tester(`(x || y))
	tester(`(x && y))
	tester(`(x ^ y))
	tester(`(x | y | z))
	tester(`(x & y & z))
	tester(`(x || y || z))
	tester(`(x && y && z))
	tester(`(x ^ y ^ z))
}
testcase('operators applying arguments - 1') {
	f(a:number, b:number, c:number, d:number):map = format('%d-%d-%d-%d', a, b, c, d)
	print_func(f)
	tester(`(f % [1, 2, 3, 4]))
	tester(`(f % [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))
	tester(`(f * [1, 2, 3, 4]))
	tester(`(f * [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]))
}
testcase('operators applying arguments - 2') {
	f(a:number, b:number, c:number, d:number):map = a + b + c + d
	print_func(f)
	tester(`(f % [1, 2, 3, 4]))
	tester(`(f % [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))
	tester(`(f * [1, 2, 3, 4]))
	tester(`(f * [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]))
}
testcase('boolean with "+", "-" and "*" operators') {
	cross (x in [false, true], y in [false, true]) {
		printf('%s + %s .. %d\n', x, y, x + y)
		printf('%s - %s .. %d\n', x, y, x - y)
		printf('%s * %s .. %d\n', x, y, x * y)
	}
	for (x in [false, true]) {
		y = 5
		printf('%s + %s .. %d\n', x, y, x + y)
		printf('%s - %s .. %d\n', x, y, x - y)
		printf('%s * %s .. %d\n', x, y, x * y)
	}
	for (y in [false, true]) {
		x = 5
		printf('%s + %s .. %d\n', x, y, x + y)
		printf('%s - %s .. %d\n', x, y, x - y)
		printf('%s * %s .. %d\n', x, y, x * y)
	}
}

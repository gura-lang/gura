#!/usr/bin/env gura
import(helper.test) {*}

testcase {
	_ = function
	funcs = [
		math.sin
		math.cos
		math.tan
		math.exp
		math.log
		math.log10
		math.asin
		math.acos
		math.atan
		math.sqrt
		_(x) { x ** 2 }
		_(x) { x ** 3 }
		_(x) { x ** 4 }
		_(x) { a ** x }
		_(x) { math.sin(x) }
		_(x) { math.cos(x) }
		_(x) { math.tan(x) }
		_(x) { math.exp(x) }
		_(x) { math.log(x) }
		_(x) { math.log10(x) }
		_(x) { math.asin(x) }
		_(x) { math.acos(x) }
		_(x) { math.atan(x) }
		_(x) { math.sqrt(x) }
		_(x) { (math.sin(x)) ** 2 }
		_(x) { (math.sin(x**2)) }
		_(x) { math.log(math.sin(x)) }
		_(x) { x ** 2 * math.sin(x) }
		_(x) { math.sin(x) / (x ** 2) }
		_(x) { 3 ** (2 * x) }
		_(x) { math.log(x ** 2 + 1) }
		_(x) { ((x - 1) ** 2 * (x - 2) ** 3) / ((x - 5) ** 2) }
		_(x) { math.sin(2 * x - 3) }
		_(x) { math.cos(x) ** 2 }
		_(x) { (2 * x - 1) ** 3 }
		_(x) { math.sqrt(x ** 2 + 2 * x + 3) }
		_(x) { 1 / x }
		_(x) { math.exp(x) + math.exp(-x) }
		_(x) { math.exp(x) - math.exp(-x) }
		_(x) { (math.sin(x + 2) + x + 2) * (math.sin(x + 3) + x + 3) }
		_(x) { math.sin(math.sin(x ** 2 / 3)) }
	]
	printf('%s -> %s\n', funcs:*expr || funcs, funcs:*mathdiff():*expr)
}
testcase {
	f(x) = x ** 3 + x ** 2 + x + 1
	g(x) = f(x ** 2 + x * 3)
	h = g.mathdiff()
	println(h.expr)
}

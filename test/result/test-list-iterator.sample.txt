Test Case #1
f(x).join(',') .. 1,2,3,,4,5,6,,7,8
(f(x):xiter).join(',') .. 1,2,3,4,5,6,7,8
(f(x):xlist).join(',') .. 1,2,3,4,5,6,7,8
(f(x):xset).join(',') .. 1,2,3,4,5,6,7,8
(f(x.each()):xiter).join(',') .. 1,2,3,4,5,6,7,8
(f(x.each()):xlist).join(',') .. 1,2,3,4,5,6,7,8
(f(x.each()):xset).join(',') .. 1,2,3,4,5,6,7,8
(range(10):xiter {|i| x[i] }).join(',') .. 1,2,3,4,5,6,7,8
(range(10):xlist {|i| x[i] }).join(',') .. 1,2,3,4,5,6,7,8
(range(10):xset {|i| x[i] }).join(',') .. 1,2,3,4,5,6,7,8
(x.each():xiter {|i| i.tostring() }).join(',') .. 1,2,3,,4,5,6,,7,8
(x.each():xlist {|i| i.tostring() }).join(',') .. 1,2,3,,4,5,6,,7,8
(x.each():xset {|i| i.tostring() }).join(',') .. 1,2,3,,4,5,6,7,8
Test Case #2
x .. <iterator:1..10>
x.min():index .. 2
Test Case #3
x.runlength():list .. [[3, 1], [2, 2], [5, 3], [2, 4]]
x.each().runlength():list .. [[3, 1], [2, 2], [5, 3], [2, 4]]
x.runlength():list .. [[3, 'a'], [2, 'b'], [5, 'c'], [2, 'd']]
x.each().runlength():list .. [[3, 'a'], [2, 'b'], [5, 'c'], [2, 'd']]
x.runlength():list .. []
x.each().runlength():list .. []
(x < x.offset(1)).runlength():list .. [[4, true], [2, false], [3, true]]
Test Case #4
0, 1, 2, 3, 4, 5, 6, 7
1, 3, 5, 7, 9, 11, 13, 15, 17, 19
Test Case #5
x .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x .. [-1, -2, -3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x .. [1, 2, 3, 4, -1, -2, -3, 5, 6, 7, 8, 9, 10]
x .. [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, 10]
x .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3]
Test Case #6
orange

grape
orange

grape
Test Case #7
x.roundoff():list .. [1e-06, 1e-07, 1e-08, 1e-09, 1e-10, 0, 0, 0]
x.each().roundoff():list .. [1e-06, 1e-07, 1e-08, 1e-09, 1e-10, 0, 0, 0]
x.roundoff(1e-8):list .. [1e-06, 1e-07, 1e-08, 0, 0, 0, 0, 0]
x.each().roundoff(1e-8):list .. [1e-06, 1e-07, 1e-08, 0, 0, 0, 0, 0]
Test Case #8
[].each().sort() .. <iterator:list#each>
[].find(2):index .. nil
[].find():index .. nil
[3, 4, 1, 2, 5].find(2):index .. 3
[3, 4, 1, 2, 5].each().find(2):index .. 3
[3, 4, 1, 2, 5].find(6):index .. nil
[3, 4, 1, 2, 5].each().find(6):index .. nil
[false, false, true, false, true].find():index .. 2
[false, false, true, false, true].each().find():index .. 2
[false, false, false, false].find():index .. nil
[false, false, false, false].each().find():index .. nil
Test Case #9
x .. ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
x[0] .. A
x[13] .. N
x[25] .. Z
x[0 .. 25] .. ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
x[0..] .. ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
x[13..] .. ['N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
x[[0, 1, 2, 3]] .. ['A', 'B', 'C', 'D']
x[0, 1, 2, 3, 22, 23, 24, 25] .. ['A', 'B', 'C', 'D', 'W', 'X', 'Y', 'Z']
x[0 .. 3, 22 .. 25] .. ['A', 'B', 'C', 'D', 'W', 'X', 'Y', 'Z']
x[[0, 1, 2, 3], [22, 23, 24, 25]] .. ['A', 'B', 'C', 'D', 'W', 'X', 'Y', 'Z']
Test Case #10
{ x[0] = 'A' } .. %{0 => 'A'}
{ x[0] = ['A', 'B', 'C'], x[1] = ['D', 'E', 'F'], x[2] = ['G', 'H', 'I'] } .. %{0 => ['A', 'B', 'C'], 1 => ['D', 'E', 'F'], 2 => ['G', 'H', 'I']}
{ x[0, 1, 2, 3] = ['A', 'B', 'C', 'D'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D'}
{ x[0, 1, 2] = ['A', 'B', 'C', 'D'] } .. %{0 => 'A', 1 => 'B', 2 => 'C'}
{ x[0 .. 3] = ['A', 'B', 'C', 'D'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D'}
{ x[0 .. 10] = ['A', 'B', 'C', 'D'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D'}
{ x[0 .. 3, 8 .. 10] = ['A', 'B', 'C', 'D', 'E', 'F', 'G'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D', 8 => 'E', 9 => 'F', 10 => 'G'}
{ x[0 .. 3, 8 .. 9] = ['A', 'B', 'C', 'D', 'E', 'F', 'G'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D', 8 => 'E', 9 => 'F'}
{ x[0 .. 3, 8 .. 10] = ['A', 'B', 'C', 'D', 'E'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D', 8 => 'E'}
{ x[[0, 1, 2, 3], [8, 9, 10]] = ['A', 'B', 'C', 'D', 'E', 'F', 'G'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D', 8 => 'E', 9 => 'F', 10 => 'G'}
{ x[[0, 1, 2, 3], [8, 9]] = ['A', 'B', 'C', 'D', 'E', 'F', 'G'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D', 8 => 'E', 9 => 'F'}
{ x[[0, 1, 2, 3], [8, 9, 10]] = ['A', 'B', 'C', 'D', 'E'] } .. %{0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D', 8 => 'E'}
{ x[0 .. 3] = 'A' } .. %{0 => 'A', 1 => 'A', 2 => 'A', 3 => 'A'}
{ x[0 .. 3, 8 .. 10] = 'A' } .. %{0 => 'A', 1 => 'A', 2 => 'A', 3 => 'A', 8 => 'A', 9 => 'A', 10 => 'A'}
{ x[[0, 1, 2, 3]] = 'A' } .. %{0 => 'A', 1 => 'A', 2 => 'A', 3 => 'A'}
{ x[[0, 1, 2, 3], [8, 9, 10]] = 'A' } .. %{0 => 'A', 1 => 'A', 2 => 'A', 3 => 'A', 8 => 'A', 9 => 'A', 10 => 'A'}
Test Case #11
0,1,2,3,4
0,1,2,3,4,a
1,3,5,7,9
a,1,a,3,a,5,a,7,a,9

return value
Test Case #12
9-8-7-6-5-4-3-2-1-0-
4-3-2-1-0-
a
9-8-7-6-4-3-2-1-0-
9-8-7-6-xx

return value
Test Case #13
expected error occurs: IteratorError: cannot evaluate infinite iterator
expected error occurs: IteratorError: cannot evaluate infinite iterator
Test Case #14
i.each():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1]
x.each():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9]
iterator(x, 0 .. (-5), x, interval(0, 1, 5)).each():list {|m| m } .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1]
i.each():list .. ['first', 'second', 'third', 0, 1, 2, 3, 0, 3, 6]
Test Case #15
i.each():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1]
x.each():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9]
(x, 0 .. (-5), x, interval(0, 1, 5)).each():list {|m| m } .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1]
i.each():list .. ['first', 'second', 'third', 0, 1, 2, 3, 0, 3, 6]
Test Case #16
i .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 99, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1, 99]
x.each():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9]
list(x, 0 .. (-5), x, interval(0, 1, 5)) .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1]
i .. ['first', 'second', 'third', 0, 1, 2, 3, 0, 3, 6]
Test Case #17
i .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 99, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1, 99]
x.each():list .. [1, 2, 3, 4, 5, 6, 7, 8, 9]
[x, 0 .. (-5), x, interval(0, 1, 5)] .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0.25, 0.5, 0.75, 1]
i .. ['first', 'second', 'third', 0, 1, 2, 3, 0, 3, 6]
Test Case #18
  1  2  3  4  5  6  7  8  9 10
expected error occurs: ValueError: no items
Test Case #19
[[1, 2, 3, nil, 4, 5, nil, 6, 7].each():xiter] .. [1, 2, 3, 4, 5, 6, 7]
[[1, 2, 3], 4, 5, [6, 7, [8, 9, [10, 11]]]].flat() .. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
[1 .. 10].sum() .. 55
(1 .. 10).sum() .. 55
[1 .. 10].average() .. 5.5
(1 .. 10).average() .. 5.5
[true, true, true].and() .. true
[true, true, true, false].and() .. false
[true, true, true, false].or() .. true
[false, false, false, false].or() .. false
[nil, 1, 2, 3, nil, nil, 4, 5].nilto(9):list .. [9, 1, 2, 3, 9, 9, 4, 5]
[4, 3, 6, 1, 2, 3, 5, 4, 4, 4, 0].replace(4, 9):list .. [9, 3, 6, 1, 2, 3, 5, 9, 9, 9, 0]
x.while(& { $i >= 0 }):list .. [4, 3, 6, 1, 2, 3]
x.while(x >= 0):list .. [4, 3, 6, 1, 2, 3]
x.since(& { $i < 0 }):list .. [-1, 4, 4, 4, 0]
x.since(x < 0):list .. [-1, 4, 4, 4, 0]
x.since(& { $i < 0 }).offset(1):list .. [4, 4, 4, 0]
x.since(x < 0).offset(1):list .. [4, 4, 4, 0]
x.after(& { $i < 0 }):list .. [4, 4, 4, 0]
x.after(x < 0):list .. [4, 4, 4, 0]
x.after(& { $i < 0 }).offset(1):list .. [4, 4, 0]
x.after(x < 0).offset(1):list .. [4, 4, 0]
x.until(& { $i < 0 }):list .. [4, 3, 6, 1, 2, 3, -1]
x.until(x < 0):list .. [4, 3, 6, 1, 2, 3, -1]
x.until(& { $i < 0 }).offset(1):list .. [3, 6, 1, 2, 3, -1]
x.until(x < 0).offset(1):list .. [3, 6, 1, 2, 3, -1]
x.before(& { $i < 0 }):list .. [4, 3, 6, 1, 2, 3]
x.before(x < 0):list .. [4, 3, 6, 1, 2, 3]
x.before(& { $i < 0 }).offset(1):list .. [3, 6, 1, 2, 3]
x.before(x < 0).offset(1):list .. [3, 6, 1, 2, 3]
x.since(& { $i < 0 }).offset(1).while(& { $i >= 0 }):list .. [3, 1, 2, 3, 4]
Test Case #20
sum=695 average=69.5 variance=243.65 standard-deviation=15.6093
sum=695 average=69.5 variance=243.65 standard-deviation=15.6093
sum=0+695j average=0+69.5j variance=243.65 standard-deviation=15.6093
sum=0+695j average=0+69.5j variance=243.65 standard-deviation=15.6093
sum=nil average=nil variance=nil standard-deviation=nil
sum=nil average=nil variance=nil standard-deviation=nil
Test Case #21
calculation with explicit script:    0.979704
calculation with built-in functions: 0.979704
calculation with explicit script:    -0.940305
calculation with built-in functions: -0.940305
calculation with explicit script:    -0.056120
calculation with built-in functions: -0.056120
Test Case #22
12345678910
1
2
3
4
5
6
7
8
9
10
  1 10
  2  9
  3  8
  4  7
  5  6
  6  5
  7  4
  8  3
  9  2
 10  1
zipv(1 .. 10, 1 .. 10).format('%3d%3d'):list .. ['  1  1', '  2  2', '  3  3', '  4  4', '  5  5', '  6  6', '  7  7', '  8  8', '  9  9', ' 10 10']
zipv(1, 2, 3, 'abc', 'def', 4, 5) .. [1, 2, 3, 'abc', 'def', 4, 5]
Test Case #23
[0 .. 10] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[consts(2, 10)] .. [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[range(10)] .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[interval(0, 1, 11)] .. [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
[0, 3 .. 6, consts(0, 3), range(5), 4 .. 0] .. [0, 3, 4, 5, 6, 0, 0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0]
Test Case #24
000000  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f
000010  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f
000020  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f
000030  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f
000040  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f
000050  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f
000060  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f
000070  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f
000080  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f
000090  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f
0000a0  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af
0000b0  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf
0000c0  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf
0000d0  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df
0000e0  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef
0000f0  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff
000100  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f
000110  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f
000120  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f
000130  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f
000140  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f
000150  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f
000160  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f
000170  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f
000180  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f
000190  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f
0001a0  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af
0001b0  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf
0001c0  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf
0001d0  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df
0001e0  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef
0001f0  f0 f1 f2 f3
Test Case #25
tbl .. [49, 23, 23, 69]
tbl.min() .. 23
tbl.min():index .. 1
tbl.min():last_index .. 2
tbl.min():indices .. [1, 2]
tbl.max() .. 69
tbl.max():index .. 3
tbl.max():last_index .. 3
tbl.max():indices .. [3]
Test Case #26
  1   first, second, third, fourth
  2   first, second, fourth, third
  3   first, third, second, fourth
  4   first, third, fourth, second
  5   first, fourth, second, third
  6   first, fourth, third, second
  7   second, first, third, fourth
  8   second, first, fourth, third
  9   second, third, first, fourth
 10   second, third, fourth, first
 11   second, fourth, first, third
 12   second, fourth, third, first
 13   third, first, second, fourth
 14   third, first, fourth, second
 15   third, second, first, fourth
 16   third, second, fourth, first
 17   third, fourth, first, second
 18   third, fourth, second, first
 19   fourth, first, second, third
 20   fourth, first, third, second
 21   fourth, second, first, third
 22   fourth, second, third, first
 23   fourth, third, first, second
 24   fourth, third, second, first
  1   1, 2, 3, 4
  2   1, 2, 4, 3
  3   1, 3, 2, 4
  4   1, 3, 4, 2
  5   1, 4, 2, 3
  6   1, 4, 3, 2
  7   2, 1, 3, 4
  8   2, 1, 4, 3
  9   2, 3, 1, 4
 10   2, 3, 4, 1
 11   2, 4, 1, 3
 12   2, 4, 3, 1
 13   3, 1, 2, 4
 14   3, 1, 4, 2
 15   3, 2, 1, 4
 16   3, 2, 4, 1
 17   3, 4, 1, 2
 18   3, 4, 2, 1
 19   4, 1, 2, 3
 20   4, 1, 3, 2
 21   4, 2, 1, 3
 22   4, 2, 3, 1
 23   4, 3, 1, 2
 24   4, 3, 2, 1
  1   1st, 2nd, 3rd, 4th
  2   1st, 2nd, 4th, 3rd
  3   1st, 3rd, 2nd, 4th
  4   1st, 3rd, 4th, 2nd
  5   1st, 4th, 2nd, 3rd
  6   1st, 4th, 3rd, 2nd
  7   2nd, 1st, 3rd, 4th
  8   2nd, 1st, 4th, 3rd
  9   2nd, 3rd, 1st, 4th
 10   2nd, 3rd, 4th, 1st
 11   2nd, 4th, 1st, 3rd
 12   2nd, 4th, 3rd, 1st
 13   3rd, 1st, 2nd, 4th
 14   3rd, 1st, 4th, 2nd
 15   3rd, 2nd, 1st, 4th
 16   3rd, 2nd, 4th, 1st
 17   3rd, 4th, 1st, 2nd
 18   3rd, 4th, 2nd, 1st
 19   4th, 1st, 2nd, 3rd
 20   4th, 1st, 3rd, 2nd
 21   4th, 2nd, 1st, 3rd
 22   4th, 2nd, 3rd, 1st
 23   4th, 3rd, 1st, 2nd
 24   4th, 3rd, 2nd, 1st
  1   1, 2, 3, 4
  2   1, 2, 4, 3
  3   1, 3, 2, 4
  4   1, 3, 4, 2
  5   1, 4, 2, 3
  6   1, 4, 3, 2
  7   2, 1, 3, 4
  8   2, 1, 4, 3
  9   2, 3, 1, 4
 10   2, 3, 4, 1
 11   2, 4, 1, 3
 12   2, 4, 3, 1
 13   3, 1, 2, 4
 14   3, 1, 4, 2
 15   3, 2, 1, 4
 16   3, 2, 4, 1
 17   3, 4, 1, 2
 18   3, 4, 2, 1
 19   4, 1, 2, 3
 20   4, 1, 3, 2
 21   4, 2, 1, 3
 22   4, 2, 3, 1
 23   4, 3, 1, 2
 24   4, 3, 2, 1
permutation()  [1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]
permutation(3) [1,2,3], [1,2,4], [1,3,2], [1,3,4], [1,4,2], [1,4,3], [2,1,3], [2,1,4], [2,3,1], [2,3,4], [2,4,1], [2,4,3], [3,1,2], [3,1,4], [3,2,1], [3,2,4], [3,4,1], [3,4,2], [4,1,2], [4,1,3], [4,2,1], [4,2,3], [4,3,1], [4,3,2]
permutation(2) [1,2], [1,3], [1,4], [2,1], [2,3], [2,4], [3,1], [3,2], [3,4], [4,1], [4,2], [4,3]
permutation(1) [1], [2], [3], [4]
permutation(0) []
combination(4) [1,2,3,4]
combination(3) [1,2,3], [1,2,4], [1,3,4], [2,3,4]
combination(2) [1,2], [1,3], [1,4], [2,3], [2,4], [3,4]
combination(1) [1], [2], [3], [4]
combination(0) []
Test Case #27
list .. ['[0]', '[1]', '[2]', '[3]', '[4]', '[5]', '[6]', '[7]', '[8]', '[9]', '[10]']
list[0] .. [0]
list[9] .. [9]
list[0 .. 3] .. ['[0]', '[1]', '[2]', '[3]']
list[8 .. 3] .. ['[8]', '[7]', '[6]', '[5]', '[4]', '[3]']
list[5..] .. ['[5]', '[6]', '[7]', '[8]', '[9]', '[10]']
list[2, 5..] .. ['[2]', '[5]', '[6]', '[7]', '[8]', '[9]', '[10]']
list[2, 5.., 3, 4] .. ['[2]', '[5]', '[6]', '[7]', '[8]', '[9]', '[10]', '[3]', '[4]']
Test Case #28
list .. ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']
[list.reverse()].join(' ') .. dog lazy the over jumps fox brown quick the
list .. ['apple', 'orange', 'grape']
[list.round(13)].join(' ') .. apple orange grape apple orange grape apple orange grape apple orange grape apple
[(0 .. 10).offset(2)] .. [2, 3, 4, 5, 6, 7, 8, 9, 10]
[(0 .. 10).skip(1)] .. [0, 2, 4, 6, 8, 10]
[(0 .. 10).offset(2).skip(1)] .. [2, 4, 6, 8, 10]
[(0 .. 5).align(10)] .. [0, 1, 2, 3, 4, 5, nil, nil, nil, nil]
[(0 .. 5).align(3)] .. [0, 1, 2]
[(0 .. 5).align(10, 0)] .. [0, 1, 2, 3, 4, 5, 0, 0, 0, 0]
[(0 .. 3).round(20)] .. [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
[(0 .. 3).round().head(20)] .. [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
[(0 .. 3).pingpong(20)] .. [0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1]
[(0 .. 3).pingpong(20):sticky] .. [0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3]
[(0 .. 3).pingpong(20):sticky_l:sticky_r] .. [0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3]
[(0 .. 3).pingpong().head(20)] .. [0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1]
[(0 .. 9).head(3)] .. [0, 1, 2]
[(0 .. 9).tail(3)] .. [7, 8, 9]
[(0 .. 9).reverse()] .. [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
[[1, 2, 3, nil, 4, 5, nil].skipnil()] .. [1, 2, 3, 4, 5]
[[0 .. 10].offset(2)] .. [2, 3, 4, 5, 6, 7, 8, 9, 10]
[[0 .. 10].skip(1)] .. [0, 2, 4, 6, 8, 10]
[[0 .. 10].offset(2).skip(1)] .. [2, 4, 6, 8, 10]
[[0 .. 5].align(10)] .. [0, 1, 2, 3, 4, 5, nil, nil, nil, nil]
[[0 .. 5].align(10, 0)] .. [0, 1, 2, 3, 4, 5, 0, 0, 0, 0]
[[0].round(10)] .. [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[[0, 1].round(10)] .. [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
[[0 .. 3].round(20)] .. [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
[[0 .. 3].round().head(20)] .. [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
[[0].pingpong(10)] .. [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[[0].pingpong(10):sticky] .. [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[[0, 1].pingpong(10)] .. [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
[[0, 1].pingpong(10):sticky] .. [0, 1, 1, 0, 0, 1, 1, 0, 0, 1]
[[0 .. 3].pingpong(20)] .. [0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1]
[[0 .. 3].pingpong(20):sticky] .. [0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3]
[[0 .. 3].pingpong(20):sticky_l:sticky_r] .. [0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3]
[[0 .. 3].pingpong().head(20)] .. [0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1]
[[0 .. 9].head(3)] .. [0, 1, 2]
[[0 .. 9].tail(3)] .. [7, 8, 9]
[[0 .. 9].reverse()] .. [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
[[1, 2, 3, nil, 4, 5, nil].each().skipnil()] .. [1, 2, 3, 4, 5]
[0 .. 21].fold(3).each():list .. [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21]]
[0 .. 21].fold(3):list .. [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21]]
(0 .. 21).fold(3).each():list .. [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21]]
(0 .. 21).fold(3):list .. [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21]]
Test Case #29
Test Case #30
[[1, 2, 3, [4, 5, 6, [7, 8, 9], 10, 11], 12], 13, 14]
[Person(name => 'hayasaka hiroko', email => 'hayasaka_hiroko@example.com', age => 33), Person(name => 'hannda takashi', email => 'hannda_takashi@example.com', age => 75), Person(name => 'honma masahiko', email => 'honma_masahiko@example.com', age => 46), Person(name => 'kawahata nana', email => 'kawahata_nana@example.com', age => 47)]
Test Case #31
freshfruit .. ['  banana', '  loganberry ', 'passion fruit  ']
for (weapon in freshfruit):list { weapon.strip() } .. ['banana', 'loganberry', 'passion fruit']
freshfruit::strip() .. ['banana', 'loganberry', 'passion fruit']
vec.filter():list .. ['hoge', 'foo', 'bar']
vec.each().filter():list .. ['hoge', 'foo', 'bar']
vec.skipnil():list .. ['hoge', false, 'foo', 'bar']
vec.each().skipnil():list .. ['hoge', false, 'foo', 'bar']
vec .. [2, 4, 6, 3, 1, 4, 2]
3 * vec .. [6, 12, 18, 9, 3, 12, 6]
3 * vec.filter(& { $x > 3 }):list .. [12, 18, 12]
3 * vec.filter(& { $x < 2 }):list .. [3]
3 * vec.filter(vec > 3):list .. [12, 18, 12]
3 * vec.filter(vec < 2):list .. [3]
3 * vec.filter(vec.each() > 3):list .. [12, 18, 12]
3 * vec.filter(vec.each() < 2):list .. [3]
zipv(vec, vec ** 2):list .. [[2, 4], [4, 16], [6, 36], [3, 9], [1, 1], [4, 16], [2, 4]]
for (x in vec):list { [x, x ** 2] } .. [[2, 4], [4, 16], [6, 36], [3, 9], [1, 1], [4, 16], [2, 4]]
vec1 .. [2, 4, 6]
vec2 .. [4, 3, -9]
cross (x in vec1, y in vec2):list { x * y } .. [8, 6, -18, 16, 12, -36, 24, 18, -54]
cross (x in vec1, y in vec2):list { x + y } .. [6, 5, -7, 8, 7, -5, 10, 9, -3]
vec1 * vec2 .. [8, 12, -54]
set([1, 2, 3], [4, 5, 2], [1, 2, 8]):or .. [1, 2, 3, 4, 5, 8]
set([1, 2, 3], [4, 5, 2], [1, 2, 8]):and .. [2]
set([1, 2, 3], [4, 5, 2], [1, 2, 8]):xor .. [1, 3, 4, 5, 8]
vec1 .. [8, 3, 3, 6, 3, 8, 0, 4, 8, 6]
vec2 .. [6, 3, 4, 5, 3, 1, 3, 3, 9, 9]
set(vec1, vec2):or .. [8, 3, 6, 0, 4, 5, 1, 9]
set(vec1, vec2):and .. [3, 6, 4]
set(vec1, vec2):xor .. [8, 0, 5, 1, 9]
Test Case #32
basket .. ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
fruit .. ['apple', 'orange', 'pear', 'banana']
'orange' in fruit .. true
'crabgrass' in fruit .. false
a .. ['a', 'b', 'r', 'c', 'd']
b .. ['a', 'l', 'c', 'z', 'm']
set(a, b):or .. ['a', 'b', 'r', 'c', 'd', 'l', 'z', 'm']
set(a, b):and .. ['a', 'c']
set(a, b):xor .. ['b', 'r', 'd', 'l', 'z', 'm']
Test Case #33
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
[4, 5, 6]
[1, 2, 3]
0.14112 -0.989992 1.73205
Test Case #34 ==== Test of list operation (1) ====
t .. [0, 1, 2, 3]
a .. ['aaa3', 'bbbb4', 'ccc5']
b .. ['aaa3aaa3aaa3aaa3', 'bbbb4bbbb4bbbb4bbbb4', 'ccc5ccc5ccc5ccc5']
x1 .. [1, 2, 3, 4, 5]
x2 .. [5, 4, 3, 2, 1]
x1 == x2 .. [false, false, true, false, false]
x1 != x2 .. [true, true, false, true, true]
x1 < x2 .. [true, true, false, false, false]
x1 > x2 .. [false, false, false, true, true]
x1 <= x2 .. [true, true, true, false, false]
x1 >= x2 .. [false, false, true, true, true]
1
2
3
2
4
6
3
6
9
-10 -5 1 10 1
-9 -4 2 9 4
-8 -3 3 8 9
-7 -2 4 7 16
-6 -1 5 6 25
-5 0 6 5 36
-4 1 7 4 49
-3 2 8 3 64
-2 3 9 2 81
-1 4 10 1 100
1,2,3
4,5,6
7,8,9
t = [2, 9, 1, 2, 8, 6, 6, 7, 4, 9]
t.sort(ascend)  1 2 2 4 6 6 7 8 9 9
t.sort(descend) 9 9 8 7 6 6 4 2 2 1
t.rank(ascend)  1 8 0 1 7 4 4 6 3 8
t.rank(descend) 7 0 9 7 2 4 4 3 6 0
t.each().sort(ascend)  1 2 2 4 6 6 7 8 9 9
t.each().sort(descend) 9 9 8 7 6 6 4 2 2 1
t.each().rank(ascend)  1 8 0 1 7 4 4 6 3 8
t.each().rank(descend) 7 0 9 7 2 4 4 3 6 0
--------
%{0 => 0, 1 => 0.0174524, 2 => 0.0348995, 3 => 0.052336, 4 => 0.0697565, 5 => 0.0871557, 6 => 0.104528, 7 => 0.121869, 8 => 0.139173, 9 => 0.156434, 10 => 0.173648, 11 => 0.190809, 12 => 0.207912, 13 => 0.224951, 14 => 0.241922, 15 => 0.258819, 16 => 0.275637, 17 => 0.292372, 18 => 0.309017, 19 => 0.325568, 20 => 0.34202, 21 => 0.358368, 22 => 0.374607, 23 => 0.390731, 24 => 0.406737, 25 => 0.422618, 26 => 0.438371, 27 => 0.45399, 28 => 0.469472, 29 => 0.48481, 30 => 0.5, 31 => 0.515038, 32 => 0.529919, 33 => 0.544639, 34 => 0.559193, 35 => 0.573576, 36 => 0.587785, 37 => 0.601815, 38 => 0.615661, 39 => 0.62932, 40 => 0.642788, 41 => 0.656059, 42 => 0.669131, 43 => 0.681998, 44 => 0.694658, 45 => 0.707107, 46 => 0.71934, 47 => 0.731354, 48 => 0.743145, 49 => 0.75471, 50 => 0.766044, 51 => 0.777146, 52 => 0.788011, 53 => 0.798636, 54 => 0.809017, 55 => 0.819152, 56 => 0.829038, 57 => 0.838671, 58 => 0.848048, 59 => 0.857167, 60 => 0.866025, 61 => 0.87462, 62 => 0.882948, 63 => 0.891007, 64 => 0.898794, 65 => 0.906308, 66 => 0.913545, 67 => 0.920505, 68 => 0.927184, 69 => 0.93358, 70 => 0.939693, 71 => 0.945519, 72 => 0.951057, 73 => 0.956305, 74 => 0.961262, 75 => 0.965926, 76 => 0.970296, 77 => 0.97437, 78 => 0.978148, 79 => 0.981627, 80 => 0.984808, 81 => 0.987688, 82 => 0.990268, 83 => 0.992546, 84 => 0.994522, 85 => 0.996195, 86 => 0.997564, 87 => 0.99863, 88 => 0.999391, 89 => 0.999848, 90 => 1}
%{0 => 0, 1 => 0.0174524, 2 => 0.0348995, 3 => 0.052336, 4 => 0.0697565, 5 => 0.0871557, 6 => 0.104528, 7 => 0.121869, 8 => 0.139173, 9 => 0.156434, 10 => 0.173648, 11 => 0.190809, 12 => 0.207912, 13 => 0.224951, 14 => 0.241922, 15 => 0.258819, 16 => 0.275637, 17 => 0.292372, 18 => 0.309017, 19 => 0.325568, 20 => 0.34202, 21 => 0.358368, 22 => 0.374607, 23 => 0.390731, 24 => 0.406737, 25 => 0.422618, 26 => 0.438371, 27 => 0.45399, 28 => 0.469472, 29 => 0.48481, 30 => 0.5, 31 => 0.515038, 32 => 0.529919, 33 => 0.544639, 34 => 0.559193, 35 => 0.573576, 36 => 0.587785, 37 => 0.601815, 38 => 0.615661, 39 => 0.62932, 40 => 0.642788, 41 => 0.656059, 42 => 0.669131, 43 => 0.681998, 44 => 0.694658, 45 => 0.707107, 46 => 0.71934, 47 => 0.731354, 48 => 0.743145, 49 => 0.75471, 50 => 0.766044, 51 => 0.777146, 52 => 0.788011, 53 => 0.798636, 54 => 0.809017, 55 => 0.819152, 56 => 0.829038, 57 => 0.838671, 58 => 0.848048, 59 => 0.857167, 60 => 0.866025, 61 => 0.87462, 62 => 0.882948, 63 => 0.891007, 64 => 0.898794, 65 => 0.906308, 66 => 0.913545, 67 => 0.920505, 68 => 0.927184, 69 => 0.93358, 70 => 0.939693, 71 => 0.945519, 72 => 0.951057, 73 => 0.956305, 74 => 0.961262, 75 => 0.965926, 76 => 0.970296, 77 => 0.97437, 78 => 0.978148, 79 => 0.981627, 80 => 0.984808, 81 => 0.987688, 82 => 0.990268, 83 => 0.992546, 84 => 0.994522, 85 => 0.996195, 86 => 0.997564, 87 => 0.99863, 88 => 0.999391, 89 => 0.999848, 90 => 1}
Test Case #35 ==== Test of list operation (2) ====

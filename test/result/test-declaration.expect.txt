%(elems?):[icase] {block?}
&(`args*) {block}
-:nil = nil
@(func?:function) {block?}
@@() {block}
@rem:nil = nil
__name__:string = __main__
argument:class = <class:argument>
array:class = <class:array(src?, elemtype?:symbol) {block?}>
array@boolean:class = <class:array@boolean(src?) {block?}>
array@complex:class = <class:array@complex(src?) {block?}>
array@double:class = <class:array@double(src?) {block?}>
array@float:class = <class:array@float(src?) {block?}>
array@half:class = <class:array@half(src?) {block?}>
array@int16:class = <class:array@int16(src?) {block?}>
array@int32:class = <class:array@int32(src?) {block?}>
array@int64:class = <class:array@int64(src?) {block?}>
array@int8:class = <class:array@int8(src?) {block?}>
array@uint16:class = <class:array@uint16(src?) {block?}>
array@uint32:class = <class:array@uint32(src?) {block?}>
array@uint64:class = <class:array@uint64(src?) {block?}>
array@uint8:class = <class:array@uint8(src?) {block?}>
arrayt:module
  __name__:string = arrayt
  __symbol__:symbol = arrayt
audio:class = <class:audio(args+):map {block?}>
base64:module
  __name__:string = base64
  __symbol__:symbol = base64
  base64.decode(stream:stream:r) {block?}
  base64.encode(stream:stream:r, linelen:number:nil => 76) {block?}
  base64.reader(stream:stream:r) {block?}
  base64.writer(stream:stream:w, linelen:number:nil => 76) {block?}
binary:class = <class:binary(buff*) {block?}>
boolean:class = <class:boolean>
case(`cond) {block}
catch(errors*:error):leader:trailer {block}
choose(index:number, values+):map
chr(code:number):map
class(superclass?:class) {block?}
classref(type+:expr):map {block?}
codec:class = <class:codec(encoding:string) {block?}>
codecs:module
  __name__:string = codecs
  __symbol__:symbol = codecs
  basic:module
    __name__:string = basic
    __symbol__:symbol = basic
  chinese:module
    __name__:string = chinese
    __symbol__:symbol = chinese
  codecs.dir()
  iso8859:module
    __name__:string = iso8859
    __symbol__:symbol = iso8859
  japanese:module
    __name__:string = japanese
    __symbol__:symbol = japanese
  korean:module
    __name__:string = korean
    __symbol__:symbol = korean
color:class = <class:color(args+):map {block?}>
complex:class = <class:complex(real:number, imag?:number):map {block?}>
cond(flag:boolean, value1:nomap, value2?:nomap):map
conds(flag:boolean, value1, value2?):map
consts(value, num?:number) {block?}
cross (`expr+) {block}
datetime:class = <class:datetime(year:number, month:number, day:number, hour:number => 0, min:number => 0, sec:number => 0, usec:number => 0, minsoff?:number):map {block?}>
declaration:class = <class:declaration>
default() {block}
dict:class = <class:dict(elems?):[icase] {block?}>
dim(n+:number) {block?}
dir(obj?):[noesc]
directory:class = <class:directory(pathname:string):map {block?}>
dirtype(obj?):[noesc]
else():trailer {block}
elsif (`cond):leader:trailer {block}
end(dummy*):end_marker:symbol_func:trailer:void
environment:class = <class:environment>
error:class = <class:error>
expr:class = <class:expr(src:stream:r):map {block?}>
false:boolean = false
finally():finalizer:trailer {block}
for (`expr+) {block}
format(format:string, values*):map
formatter:class = <class:formatter>
fs:module
  __name__:string = fs
  __symbol__:symbol = fs
  fs.chdir(pathname:string) {block?}
  fs.chmod(mode, pathname:string):map:void:[follow_link]
  fs.copy(src:string, dst:string):map:void:[overwrite]
  fs.cpdir(src:string, dst:string):map:void:[tree]
  fs.getcwd()
  fs.mkdir(pathname:string):map:void:[tree]
  fs.remove(pathname:string):map:void
  fs.rename(src:string, dst:string):map:void
  fs.rmdir(pathname:string):map:void:[tree]
  stat:class = <class:fs.stat(pathname:string) {block?}>
function:class = <class:function(`args*) {block}>
gear:class = <class:gear>
gear@conv1d:class = <class:gear@conv1d(array:array, strides?:number, padding?:symbol, channel_pos?:symbol):map {block?}>
gear@conv2d:class = <class:gear@conv2d(array:array, strides[]?:number, padding?:symbol, channel_pos?:symbol):map {block?}>
gear@conv3d:class = <class:gear@conv3d(array:array, strides[]?:number, padding?:symbol, channel_pos?:symbol):map {block?}>
gear@maxpool1d:class = <class:gear@maxpool1d(size:number, strides?:number, padding?:symbol, channel_pos?:symbol):map {block?}>
gear@maxpool2d:class = <class:gear@maxpool2d(size[]:number, strides[]?:number, padding?:symbol, channel_pos?:symbol):map {block?}>
gear@maxpool3d:class = <class:gear@maxpool3d(size[]:number, strides[]?:number, padding?:symbol, format?:symbol):map {block?}>
gear@relu:class = <class:gear@relu() {block?}>
gear@sigmoid:class = <class:gear@sigmoid() {block?}>
gear@softmax:class = <class:gear@softmax(axis?:number):map {block?}>
gear@tanh:class = <class:gear@tanh() {block?}>
help:class = <class:help>
help@class(cls:class, lang?:symbol):map {block?}
help@function(func:function, lang?:symbol):map {block?}
hex(num:number, digits?:number):map:[upper]
if (`cond):leader {block}
image:class = <class:image(args+):map {block?}>
import(`module, `alias?):[binary,mixin_type,overwrite] {block?}
int(value):map
interval(begin:number, end:number, samples:number):map:[open,open_l,open_r] {block?}
isbinary(value)
isboolean(value)
isclass(value)
iscomplex(value)
isdatetime(value)
isdefined(`identifier)
isdict(value)
isenvironment(value)
iserror(value)
isexpr(value)
isfunction(value)
isinstance(value, type+:expr):map
isiterator(value)
islist(value)
ismodule(value)
isnil(value)
isnumber(value)
isrational(value)
issemaphore(value)
isstring(value)
issymbol(value)
istimedelta(value)
istype(value, type+:expr):map
isuri(value)
iterator:class = <class:iterator(value+) {block?}>
lexer:module
  __name__:string = lexer
  __symbol__:symbol = lexer
list:class = <class:list(value+)>
local(`syms+)
locals(module?:module) {block?}
markdown:module
  markdown.JoinText(item:markdown.item):map
  markdown.MakeAnchorNameDef(indices[]:number)
  Renderer@console:class = <class:markdown.Renderer@console(colorFlag:boolean => true) {block?}>
  Renderer@html:class = <class:markdown.Renderer@html(out:stream:w, captionIndex:boolean) {block?}>
  Renderer@rtf:class = <class:markdown.Renderer@rtf(out:stream:w) {block?}>
  Renderer@tex:class = <class:markdown.Renderer@tex(out:stream:w, title:string, author:string, date:string) {block?}>
  Renderer@toc:class = <class:markdown.Renderer@toc(handler:function) {block?}>
  TableCol:class = <class:markdown.TableCol(text:string, align:symbol) {block?}>
  TableRow:class = <class:markdown.TableRow(headerFlag:boolean, cols[]:markdown.TableCol) {block?}>
  __name__:string = markdown
  __symbol__:symbol = markdown
  markdown._funcentry(lang:symbol, func:function, fullname:string, fmt:string):map
  conio:module
    K_BACKSPACE:number = 8
    K_CTRL_A:number = 1
    K_CTRL_B:number = 2
    K_CTRL_C:number = 3
    K_CTRL_D:number = 4
    K_CTRL_E:number = 5
    K_CTRL_F:number = 6
    K_CTRL_G:number = 7
    K_CTRL_H:number = 8
    K_CTRL_I:number = 9
    K_CTRL_J:number = 10
    K_CTRL_K:number = 11
    K_CTRL_L:number = 12
    K_CTRL_M:number = 13
    K_CTRL_N:number = 14
    K_CTRL_O:number = 15
    K_CTRL_P:number = 16
    K_CTRL_Q:number = 17
    K_CTRL_R:number = 18
    K_CTRL_S:number = 19
    K_CTRL_T:number = 20
    K_CTRL_U:number = 21
    K_CTRL_V:number = 22
    K_CTRL_W:number = 23
    K_CTRL_X:number = 24
    K_CTRL_Y:number = 25
    K_CTRL_Z:number = 26
    K_DELETE:number = 137
    K_DOWN:number = 129
    K_END:number = 134
    K_ESCAPE:number = 27
    K_HOME:number = 133
    K_INSERT:number = 132
    K_LEFT:number = 131
    K_PAGEDOWN:number = 136
    K_PAGEUP:number = 135
    K_RETURN:number = 10
    K_RIGHT:number = 130
    K_SPACE:number = 32
    K_TAB:number = 9
    K_UP:number = 128
    __name__:string = conio
    __symbol__:symbol = conio
    conio.clear(region?:symbol):void
    conio.getwinsize()
    conio.moveto(x:number, y:number):map:void {block?}
    conio.readkey():[raise]
    conio.setcolor(fg:symbol:nil, bg?:symbol):map:void {block?}
    conio.waitkey():[raise]
  document:class = <class:markdown.document(stream?:stream:r) {block?}>
  item:class = <class:item>
  markdown.makedoc@class(lang:symbol, cls:class)
  markdown.makedoc@function(lang:symbol, funcs*:function)
  markdown.makedoc@function$(lang:symbol, match:string, sub:string, funcs*:function)
  markdown.makedoc@module(mod:environment, d:dict)
  markdown.makedoc@property(lang:symbol, obj)
math:module
  __name__:string = math
  __symbol__:symbol = math
  math.abs(num):map
  math.acos(num):map:[deg]
  math.arg(num):map:[deg]
  math.asin(num):map:[deg]
  math.atan(num):map:[deg]
  math.atan2(num1, num2):map:[deg]
  math.bezier(nums[]+:number)
  math.ceil(num):map
  math.conj(num):map
  math.cos(num):map:[deg]
  math.cosh(num):map
  math.covariance(a, b)
  math.cross (a, b)
  math.delta(num):map
  math.diff(expr:expr, var:symbol):map {block?}
  math.dot(a, b)
  e:number = 2.71828
  math.exp(num):map
  math.fft(seq[])
  math.floor(num):map
  math.gcd(a:number, b+:number):map
  math.hypot(x, y):map
  math.imag(num):map
  math.integral()
  math.lcm(a:number, b+:number):map
  math.least_square(x:iterator, y:iterator, dim:number => 1, var:symbol => `x)
  math.log(num):map
  math.log10(num):map
  math.norm(num):map
  math.optimize(expr:expr):map {block?}
  pi:number = 3.14159
  math.real(num):map
  math.relu(num):map
  math.sigmoid(num):map
  math.sin(num):map:[deg]
  math.sinh(num):map
  math.sqrt(num):map
  math.tan(num):map:[deg]
  math.tanh(num):map
  math.unitstep(num):map
max(values+):map
memory:class = <class:memory(bytes:number):map {block?}>
min(values+):map
module() {block}
monitor:class = <class:monitor() {block?}>
nil:nil = nil
number:class = <class:number>
object() {block?}
open(pathname:string, mode?:string, codec?:codec):map {block?}
operator:class = <class:operator(symbol:symbol):map {block?}>
optimizer:class = <class:optimizer>
optimizer@adagrad():map {block?}
optimizer@adam():map {block?}
optimizer@gradient_descent(learning_rate:number):map {block?}
optimizer@momentum():map {block?}
optimizer@nesterov():map {block?}
optimizer@none():map {block?}
optimizer@rmsprop():map {block?}
ord(str:string):map
os:module
  __name__:string = os
  __source__:string = <integrated>
  __symbol__:symbol = os
  os.clock() {block?}
  os.exec(pathname:string, args*:string):map:[fork]
  os.fromnative(buff:binary):map
  os.getenv(name:string, default?:string):map
  os.putenv(name:string, value:string):void
  os.redirect(stdin:stream:nil:r, stdout:stream:nil:w, stderr?:stream:w) {block?}
  os.sleep(secs:number)
  os.symlink(src:string, tgt:string):map:void
  os.tonative(str:string):map
  os.unsetenv(name:string):void
outers() {block?}
palette:class = <class:palette(type) {block?}>
path:module
  __name__:string = path
  __source__:string = <integrated>
  __symbol__:symbol = path
  path.absname(name:string):map:[uri]
  path.basename(pathname:string):map
  path.bottom(pathname:string):map
  path.cutbottom(pathname:string):map
  path.dir(directory?:directory, pattern*:string):flat:map:[dir,file,stat] {block?}
  path.dirname(pathname:string):map
  path.exists(pathname:string):map
  path.extname(pathname:string):map
  path.filename(pathname:string):map
  path.glob(pattern:string):flat:map:[dir,file,stat] {block?}
  path.join(paths+:string):map:[uri]
  path.match(pattern:string, name:string):map
  path.regulate(name:string):map:[uri]
  path.split(pathname:string):map:[bottom]
  path.splitext(pathname:string):map
  path.stat(directory:directory):map
  path.walk(directory?:directory, maxdepth?:number, pattern*:string):flat:map:[dir,file,stat] {block?}
pointer:class = <class:pointer(org:pointer):map {block?}>
print(values*):map:void
printf(format:string, values*):map:void
println(values*):map:void
propdeclaration:class = <class:propdeclaration>
public():void {block}
raise(error:error, msg:string => 'error', value?)
rand(range?:number) {block?}
rand@normal(mu?:number, sigma?:number) {block?}
rands(range?:number, num?:number) {block?}
rands@normal(mu?:number, sigma?:number, num?:number) {block?}
randseed(seed:number):void
range(num:number, num_end?:number, step?:number):map {block?}
rational:class = <class:rational(numer:number, denom?:number):map {block?}>
readlines(stream?:stream:r):[chop] {block?}
repeat (n?:number) {block}
root:environment = <environment:root>
scope(target?) {block}
semaphore:class = <class:semaphore()>
set(iter+:iterator):[and,or,xor]
stream:class = <class:stream(pathname:string, mode?:string, codec?:codec):map {block?}>
string:class = <class:string>
struct(`args+):nonamed:[loose] {block?}
suffixmgr:class = <class:suffixmgr(type:symbol) {block?}>
super(obj):map {block?}
switch() {block}
symbol:class = <class:symbol>
sys:module
  __name__:string = sys
  __source__:string = <integrated>
  __symbol__:symbol = sys
  sys.echo(flag:boolean)
  sys.exit(status?:number)
  sys.interactive()
  ps1:string = >>> 
  ps2:string = ... 
  sys.required_version(major:number, minor:number, patch:number)
template:class = <class:template(src?:stream:r):map:[lasteol,noindent] {block?}>
timedelta:class = <class:timedelta(days:number => 0, secs:number => 0, usecs:number => 0):map {block?}>
token:class = <class:token>
tokens(stream:stream):map {block?}
tonumber(value):map:[nil,raise,strict,zero]
tostring(value):map
tosymbol(str:string):map
trainer:class = <class:trainer(model:expr, optimizer:optimizer:nil, inputs*:symbol):map {block?}>
trainernode:class = <class:trainernode>
true:boolean = true
try():leader {block}
typename(`value)
undef(`identifier+):[raise]
uri:class = <class:uri(str?:string):map {block?}>
vertex:class = <class:vertex(x:number, y:number, z?:number):map {block?}>
while (`cond) {block}
xlist(value+)
xset(iter+:iterator):[and,or,xor]
any
argument
  argument#finalize_trailer():void
  argument#isset(symbol:symbol)
  argument#quit_trailer():void
array
  array#argmax(axis?:number):map:[last_index] {block?}
  array#argmin(axis?:number):map:[last_index] {block?}
  array.dot(a:array, b:array):static:map {block?}
  array#dump(stream?:stream):void:[upper]
  array#each():[flat] {block?}
  array#elemcast(elemtype:symbol) {block?}
  array#expand_kernelvec1d(size:number, strides?:number, padding?, channel_pos?:symbol, padnum?:number) {block?}
  array#expand_kernelvec2d(size[]:number, strides[]?:number, padding?:nomap, channel_pos?:symbol, padnum?:number) {block?}
  array#expand_kernelvec3d(size[]:number, strides[]?:number, padding?:nomap, channel_pos?:symbol, padnum?:number) {block?}
  array#fill(value:number):void
  array#flatten() {block?}
  array#head(n:number):map {block?}
  array.identity(n:number, elemtype?:symbol):static:map {block?}
  array.interval(begin:number, end:number, samples:number, elemtype?:symbol):static:map:[open,open_l,open_r] {block?}
  array#invert(eps?:number) {block?}
  array#iselemsame(array:array)
  array#issquare()
  array#max(axis?:number):map:[index,last_index] {block?}
  array#mean(axis?:number):map {block?}
  array#min(axis?:number):map:[index,last_index] {block?}
  array#offset(n:number):map {block?}
  array.ones(dims[]:number, elemtype?:symbol):static:map {block?}
  array#paste(offset:number, src:array):map
  array.rands(dims[]:number, range?:number, elemtype?:symbol):static:map {block?}
  array.rands@normal(dims[]:number, mu?:number, sigma?:number, elemtype?:symbol):static:map {block?}
  array.range(num:number, num_end?:number, step?:number, elemtype?:symbol):static:map {block?}
  array#reshape(dims[]:number:nil) {block?}
  array#restore_kernelvec1d(size_out:number, size:number, strides?:number, padding?, channel_pos?:symbol) {block?}
  array#restore_kernelvec2d(size_out[]:number, size[]:number, strides[]?:number, padding?:nomap, channel_pos?:symbol) {block?}
  array#restore_kernelvec3d(size_out[]:number, size[]:number, strides[]?:number, padding?:nomap, channel_pos?:symbol) {block?}
  array.rotation(angle:number, xtrans?:number, ytrans?:number, elemtype?:symbol):static:map:[deg] {block?}
  array.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number, elemtype?:symbol):static:map:[deg] {block?}
  array.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number, elemtype?:symbol):static:map:[deg] {block?}
  array.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number, elemtype?:symbol):static:map:[deg] {block?}
  array#roundoff(threshold?:number) {block?}
  array.scaling(xscale:number, yscale:number, zscale?:number, elemtype?:symbol):static:map {block?}
  array#std(axis?:number):map:[p] {block?}
  array#sum(axis?:number):map {block?}
  array#tail(n:number):map {block?}
  array#tolist() {block?}
  array#tostring(ndims_horz?:number)
  array.translation(xtrans:number, ytrans:number, ztrans?:number, elemtype?:symbol):static:map {block?}
  array#transpose(axes[]?:number) {block?}
  array#var(axis?:number):map:[p] {block?}
  array.zeros(dims[]:number, elemtype?:symbol):static:map {block?}
array@boolean
  array@boolean.identity(n:number):static:map {block?}
  array@boolean.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@boolean.ones(dims[]:number):static:map {block?}
  array@boolean.rands(dims[]:number, range?:number):static:map {block?}
  array@boolean.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@boolean.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@boolean.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@boolean.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@boolean.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@boolean.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@boolean.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@boolean.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@boolean.zeros(dims[]:number):static:map {block?}
array@complex
  array@complex.identity(n:number):static:map {block?}
  array@complex.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@complex.ones(dims[]:number):static:map {block?}
  array@complex.rands(dims[]:number, range?:number):static:map {block?}
  array@complex.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@complex.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@complex.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@complex.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@complex.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@complex.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@complex.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@complex.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@complex.zeros(dims[]:number):static:map {block?}
array@double
  array@double.identity(n:number):static:map {block?}
  array@double.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@double.ones(dims[]:number):static:map {block?}
  array@double.rands(dims[]:number, range?:number):static:map {block?}
  array@double.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@double.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@double.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@double.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@double.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@double.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@double.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@double.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@double.zeros(dims[]:number):static:map {block?}
array@float
  array@float.identity(n:number):static:map {block?}
  array@float.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@float.ones(dims[]:number):static:map {block?}
  array@float.rands(dims[]:number, range?:number):static:map {block?}
  array@float.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@float.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@float.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@float.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@float.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@float.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@float.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@float.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@float.zeros(dims[]:number):static:map {block?}
array@half
  array@half.identity(n:number):static:map {block?}
  array@half.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@half.ones(dims[]:number):static:map {block?}
  array@half.rands(dims[]:number, range?:number):static:map {block?}
  array@half.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@half.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@half.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@half.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@half.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@half.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@half.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@half.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@half.zeros(dims[]:number):static:map {block?}
array@int16
  array@int16.identity(n:number):static:map {block?}
  array@int16.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@int16.ones(dims[]:number):static:map {block?}
  array@int16.rands(dims[]:number, range?:number):static:map {block?}
  array@int16.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@int16.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@int16.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@int16.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int16.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int16.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int16.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@int16.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@int16.zeros(dims[]:number):static:map {block?}
array@int32
  array@int32.identity(n:number):static:map {block?}
  array@int32.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@int32.ones(dims[]:number):static:map {block?}
  array@int32.rands(dims[]:number, range?:number):static:map {block?}
  array@int32.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@int32.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@int32.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@int32.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int32.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int32.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int32.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@int32.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@int32.zeros(dims[]:number):static:map {block?}
array@int64
  array@int64.identity(n:number):static:map {block?}
  array@int64.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@int64.ones(dims[]:number):static:map {block?}
  array@int64.rands(dims[]:number, range?:number):static:map {block?}
  array@int64.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@int64.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@int64.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@int64.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int64.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int64.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int64.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@int64.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@int64.zeros(dims[]:number):static:map {block?}
array@int8
  array@int8.identity(n:number):static:map {block?}
  array@int8.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@int8.ones(dims[]:number):static:map {block?}
  array@int8.rands(dims[]:number, range?:number):static:map {block?}
  array@int8.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@int8.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@int8.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@int8.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int8.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int8.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@int8.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@int8.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@int8.zeros(dims[]:number):static:map {block?}
array@uint16
  array@uint16.identity(n:number):static:map {block?}
  array@uint16.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@uint16.ones(dims[]:number):static:map {block?}
  array@uint16.rands(dims[]:number, range?:number):static:map {block?}
  array@uint16.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@uint16.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@uint16.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@uint16.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint16.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint16.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint16.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@uint16.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@uint16.zeros(dims[]:number):static:map {block?}
array@uint32
  array@uint32.identity(n:number):static:map {block?}
  array@uint32.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@uint32.ones(dims[]:number):static:map {block?}
  array@uint32.rands(dims[]:number, range?:number):static:map {block?}
  array@uint32.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@uint32.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@uint32.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@uint32.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint32.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint32.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint32.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@uint32.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@uint32.zeros(dims[]:number):static:map {block?}
array@uint64
  array@uint64.identity(n:number):static:map {block?}
  array@uint64.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@uint64.ones(dims[]:number):static:map {block?}
  array@uint64.rands(dims[]:number, range?:number):static:map {block?}
  array@uint64.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@uint64.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@uint64.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@uint64.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint64.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint64.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint64.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@uint64.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@uint64.zeros(dims[]:number):static:map {block?}
array@uint8
  array@uint8.identity(n:number):static:map {block?}
  array@uint8.interval(begin:number, end:number, samples:number):static:map:[open,open_l,open_r] {block?}
  array@uint8.ones(dims[]:number):static:map {block?}
  array@uint8.rands(dims[]:number, range?:number):static:map {block?}
  array@uint8.rands@normal(dims[]:number, mu?:number, sigma?:number):static:map {block?}
  array@uint8.range(num:number, num_end?:number, step?:number):static:map {block?}
  array@uint8.rotation(angle:number, xtrans?:number, ytrans?:number):static:map:[deg] {block?}
  array@uint8.rotation@x(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint8.rotation@y(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint8.rotation@z(angle:number, xtrans?:number, ytrans?:number, ztrans?:number):static:map:[deg] {block?}
  array@uint8.scaling(xscale:number, yscale:number, zscale?:number):static:map {block?}
  array@uint8.translation(xtrans:number, ytrans:number, ztrans?:number):static:map {block?}
  array@uint8.zeros(dims[]:number):static:map {block?}
audio
  audio#each(channel:number, offset?:number):map {block?}
  audio#get(channel:number, offset:number):map
  audio#put(channel:number, offset:number, data:number):map:reduce
  audio#sinewave(channel:number, freq:number, len:number, amplitude?:number):map:reduce
  audio#store(channel:number, offset:number, data:iterator):reduce
binary
  binary.alloc(bytes:number, data?:number):static:map {block?}
  binary#dump(stream?:stream:w):void:[upper]
  binary#pointer(offset?:number):map {block?}
  binary#reader() {block?}
  binary#writer() {block?}
boolean
codec
  codec#addcr(flag?:boolean):reduce
  bom@utf16be:binary = <binary:R:2byte:'\xfe\xff'>
  bom@utf16le:binary = <binary:R:2byte:'\xff\xfe'>
  bom@utf32be:binary = <binary:R:4byte:'\x00\x00\xfe\xff'>
  bom@utf32le:binary = <binary:R:4byte:'\xff\xfe\x00\x00'>
  bom@utf8:binary = <binary:R:3byte:'\xef\xbb\xbf'>
  codec#decode(buff:binary):map
  codec#delcr(flag?:boolean):reduce
  codec#encode(str:string):map
color
  aqua:color = <color:#00ffff,a:ff>
  black:color = <color:#000000,a:ff>
  blue:color = <color:#0000ff,a:ff>
  fuchsia:color = <color:#ff00ff,a:ff>
  color#getgray()
  gray:color = <color:#808080,a:ff>
  green:color = <color:#008000,a:ff>
  color#html()
  lime:color = <color:#00ff00,a:ff>
  color#list():[alpha]
  maroon:color = <color:#800000,a:ff>
  names = [black,maroon,green,olive,navy,purple,teal,gray,silver,red,lime,yellow,blue,fuchsia,aqua,white,snow,ghost white,GhostWhite,white smoke,WhiteSmoke,gainsboro,floral white,FloralWhite,old lace,OldLace,linen,antique white,AntiqueWhite,papaya whip,PapayaWhip,blanched almond,BlanchedAlmond,bisque,peach puff,PeachPuff,navajo white,NavajoWhite,moccasin,cornsilk,ivory,lemon chiffon,LemonChiffon,seashell,honeydew,mint cream,MintCream,azure,alice blue,AliceBlue,lavender,lavender blush,LavenderBlush,misty rose,MistyRose,dark slate gray,DarkSlateGray,dark slate grey,DarkSlateGrey,dim gray,DimGray,dim grey,DimGrey,slate gray,SlateGray,slate grey,SlateGrey,light slate gray,LightSlateGray,light slate grey,LightSlateGrey,grayX,grey,light grey,LightGrey,light gray,LightGray,midnight blue,MidnightBlue,navy blue,NavyBlue,cornflower blue,CornflowerBlue,dark slate blue,DarkSlateBlue,slate blue,SlateBlue,medium slate blue,MediumSlateBlue,light slate blue,LightSlateBlue,medium blue,MediumBlue,royal blue,RoyalBlue,dodger blue,DodgerBlue,deep sky blue,DeepSkyBlue,sky blue,SkyBlue,light sky blue,LightSkyBlue,steel blue,SteelBlue,light steel blue,LightSteelBlue,light blue,LightBlue,powder blue,PowderBlue,pale turquoise,PaleTurquoise,dark turquoise,DarkTurquoise,medium turquoise,MediumTurquoise,turquoise,cyan,light cyan,LightCyan,cadet blue,CadetBlue,medium aquamarine,MediumAquamarine,aquamarine,dark green,DarkGreen,dark olive green,DarkOliveGreen,dark sea green,DarkSeaGreen,sea green,SeaGreen,medium sea green,MediumSeaGreen,light sea green,LightSeaGreen,pale green,PaleGreen,spring green,SpringGreen,lawn green,LawnGreen,greenX,chartreuse,medium spring green,MediumSpringGreen,green yellow,GreenYellow,lime green,LimeGreen,yellow green,YellowGreen,forest green,ForestGreen,olive drab,OliveDrab,dark khaki,DarkKhaki,khaki,pale goldenrod,PaleGoldenrod,light goldenrod yellow,LightGoldenrodYellow,light yellow,LightYellow,gold,light goldenrod,LightGoldenrod,goldenrod,dark goldenrod,DarkGoldenrod,rosy brown,RosyBrown,indian red,IndianRed,saddle brown,SaddleBrown,sienna,peru,burlywood,beige,wheat,sandy brown,SandyBrown,tan,chocolate,firebrick,brown,dark salmon,DarkSalmon,salmon,light salmon,LightSalmon,orange,dark orange,DarkOrange,coral,light coral,LightCoral,tomato,orange red,OrangeRed,hot pink,HotPink,deep pink,DeepPink,pink,light pink,LightPink,pale violet red,PaleVioletRed,maroonX,medium violet red,MediumVioletRed,violet red,VioletRed,magenta,violet,plum,orchid,medium orchid,MediumOrchid,dark orchid,DarkOrchid,dark violet,DarkViolet,blue violet,BlueViolet,purpleX,medium purple,MediumPurple,thistle,snow1,snow2,snow3,snow4,seashell1,seashell2,seashell3,seashell4,AntiqueWhite1,AntiqueWhite2,AntiqueWhite3,AntiqueWhite4,bisque1,bisque2,bisque3,bisque4,PeachPuff1,PeachPuff2,PeachPuff3,PeachPuff4,NavajoWhite1,NavajoWhite2,NavajoWhite3,NavajoWhite4,LemonChiffon1,LemonChiffon2,LemonChiffon3,LemonChiffon4,cornsilk1,cornsilk2,cornsilk3,cornsilk4,ivory1,ivory2,ivory3,ivory4,honeydew1,honeydew2,honeydew3,honeydew4,LavenderBlush1,LavenderBlush2,LavenderBlush3,LavenderBlush4,MistyRose1,MistyRose2,MistyRose3,MistyRose4,azure1,azure2,azure3,azure4,SlateBlue1,SlateBlue2,SlateBlue3,SlateBlue4,RoyalBlue1,RoyalBlue2,RoyalBlue3,RoyalBlue4,blue1,blue2,blue3,blue4,DodgerBlue1,DodgerBlue2,DodgerBlue3,DodgerBlue4,SteelBlue1,SteelBlue2,SteelBlue3,SteelBlue4,DeepSkyBlue1,DeepSkyBlue2,DeepSkyBlue3,DeepSkyBlue4,SkyBlue1,SkyBlue2,SkyBlue3,SkyBlue4,LightSkyBlue1,LightSkyBlue2,LightSkyBlue3,LightSkyBlue4,SlateGray1,SlateGray2,SlateGray3,SlateGray4,LightSteelBlue1,LightSteelBlue2,LightSteelBlue3,LightSteelBlue4,LightBlue1,LightBlue2,LightBlue3,LightBlue4,LightCyan1,LightCyan2,LightCyan3,LightCyan4,PaleTurquoise1,PaleTurquoise2,PaleTurquoise3,PaleTurquoise4,CadetBlue1,CadetBlue2,CadetBlue3,CadetBlue4,turquoise1,turquoise2,turquoise3,turquoise4,cyan1,cyan2,cyan3,cyan4,DarkSlateGray1,DarkSlateGray2,DarkSlateGray3,DarkSlateGray4,aquamarine1,aquamarine2,aquamarine3,aquamarine4,DarkSeaGreen1,DarkSeaGreen2,DarkSeaGreen3,DarkSeaGreen4,SeaGreen1,SeaGreen2,SeaGreen3,SeaGreen4,PaleGreen1,PaleGreen2,PaleGreen3,PaleGreen4,SpringGreen1,SpringGreen2,SpringGreen3,SpringGreen4,green1,green2,green3,green4,chartreuse1,chartreuse2,chartreuse3,chartreuse4,OliveDrab1,OliveDrab2,OliveDrab3,OliveDrab4,DarkOliveGreen1,DarkOliveGreen2,DarkOliveGreen3,DarkOliveGreen4,khaki1,khaki2,khaki3,khaki4,LightGoldenrod1,LightGoldenrod2,LightGoldenrod3,LightGoldenrod4,LightYellow1,LightYellow2,LightYellow3,LightYellow4,yellow1,yellow2,yellow3,yellow4,gold1,gold2,gold3,gold4,goldenrod1,goldenrod2,goldenrod3,goldenrod4,DarkGoldenrod1,DarkGoldenrod2,DarkGoldenrod3,DarkGoldenrod4,RosyBrown1,RosyBrown2,RosyBrown3,RosyBrown4,IndianRed1,IndianRed2,IndianRed3,IndianRed4,sienna1,sienna2,sienna3,sienna4,burlywood1,burlywood2,burlywood3,burlywood4,wheat1,wheat2,wheat3,wheat4,tan1,tan2,tan3,tan4,chocolate1,chocolate2,chocolate3,chocolate4,firebrick1,firebrick2,firebrick3,firebrick4,brown1,brown2,brown3,brown4,salmon1,salmon2,salmon3,salmon4,LightSalmon1,LightSalmon2,LightSalmon3,LightSalmon4,orange1,orange2,orange3,orange4,DarkOrange1,DarkOrange2,DarkOrange3,DarkOrange4,coral1,coral2,coral3,coral4,tomato1,tomato2,tomato3,tomato4,OrangeRed1,OrangeRed2,OrangeRed3,OrangeRed4,red1,red2,red3,red4,DeepPink1,DeepPink2,DeepPink3,DeepPink4,HotPink1,HotPink2,HotPink3,HotPink4,pink1,pink2,pink3,pink4,LightPink1,LightPink2,LightPink3,LightPink4,PaleVioletRed1,PaleVioletRed2,PaleVioletRed3,PaleVioletRed4,maroon1,maroon2,maroon3,maroon4,VioletRed1,VioletRed2,VioletRed3,VioletRed4,magenta1,magenta2,magenta3,magenta4,orchid1,orchid2,orchid3,orchid4,plum1,plum2,plum3,plum4,MediumOrchid1,MediumOrchid2,MediumOrchid3,MediumOrchid4,DarkOrchid1,DarkOrchid2,DarkOrchid3,DarkOrchid4,purple1,purple2,purple3,purple4,MediumPurple1,MediumPurple2,MediumPurple3,MediumPurple4,thistle1,thistle2,thistle3,thistle4,gray0,grey0,gray1,grey1,gray2,grey2,gray3,grey3,gray4,grey4,gray5,grey5,gray6,grey6,gray7,grey7,gray8,grey8,gray9,grey9,gray10,grey10,gray11,grey11,gray12,grey12,gray13,grey13,gray14,grey14,gray15,grey15,gray16,grey16,gray17,grey17,gray18,grey18,gray19,grey19,gray20,grey20,gray21,grey21,gray22,grey22,gray23,grey23,gray24,grey24,gray25,grey25,gray26,grey26,gray27,grey27,gray28,grey28,gray29,grey29,gray30,grey30,gray31,grey31,gray32,grey32,gray33,grey33,gray34,grey34,gray35,grey35,gray36,grey36,gray37,grey37,gray38,grey38,gray39,grey39,gray40,grey40,gray41,grey41,gray42,grey42,gray43,grey43,gray44,grey44,gray45,grey45,gray46,grey46,gray47,grey47,gray48,grey48,gray49,grey49,gray50,grey50,gray51,grey51,gray52,grey52,gray53,grey53,gray54,grey54,gray55,grey55,gray56,grey56,gray57,grey57,gray58,grey58,gray59,grey59,gray60,grey60,gray61,grey61,gray62,grey62,gray63,grey63,gray64,grey64,gray65,grey65,gray66,grey66,gray67,grey67,gray68,grey68,gray69,grey69,gray70,grey70,gray71,grey71,gray72,grey72,gray73,grey73,gray74,grey74,gray75,grey75,gray76,grey76,gray77,grey77,gray78,grey78,gray79,grey79,gray80,grey80,gray81,grey81,gray82,grey82,gray83,grey83,gray84,grey84,gray85,grey85,gray86,grey86,gray87,grey87,gray88,grey88,gray89,grey89,gray90,grey90,gray91,grey91,gray92,grey92,gray93,grey93,gray94,grey94,gray95,grey95,gray96,grey96,gray97,grey97,gray98,grey98,gray99,grey99,gray100,grey100,dark grey,DarkGrey,dark gray,DarkGray,dark blue,DarkBlue,dark cyan,DarkCyan,dark magenta,DarkMagenta,dark red,DarkRed,light green,LightGreen]
  navy:color = <color:#000080,a:ff>
  olive:color = <color:#808000,a:ff>
  purple:color = <color:#800080,a:ff>
  red:color = <color:#ff0000,a:ff>
  silver:color = <color:#c0c0c0,a:ff>
  teal:color = <color:#008080,a:ff>
  white:color = <color:#ffffff,a:ff>
  yellow:color = <color:#ffff00,a:ff>
  zero:color = <color:#000000,a:00>
complex
  complex.polar(abs:number, arg:number):static:map:[deg] {block?}
  complex.roundoff(threshold:number => 1e-10) {block?}
datetime
  Friday:number = 5
  Monday:number = 1
  Saturday:number = 6
  Sunday:number = 0
  Thursday:number = 4
  Tuesday:number = 2
  Wednesday:number = 3
  datetime#clrtzoff():reduce
  datetime#format(format => `w3c)
  datetime.isleap(year:number):static:map
  datetime.monthdays(year:number, month:number):static:map {block?}
  datetime.now():static:[utc] {block?}
  datetime.parse(str:string):static:map {block?}
  datetime#settzoff(mins:number):reduce
  datetime.time(hour:number => 0, minute:number => 0, sec:number => 0, usec:number => 0):static:map {block?}
  datetime.today():static:[utc] {block?}
  datetime#utc()
  datetime.weekday(year:number, month:number, day:number):static:map
declaration
  declaration#istype(type+:expr):map
dict
  dict#append(elems?):reduce:[overwrite,strict,timid] {block?}
  dict#clear()
  dict#erase(key):map
  dict#get(key, default?):map:[raise]
  dict#haskey(key):map
  dict#isempty() {block?}
  dict#items() {block?}
  dict#keys() {block?}
  dict#len()
  dict#put(key, value):map:reduce:[overwrite,strict,timid]
  dict#values() {block?}
directory
expr
  expr#eval(env?:environment) {block?}
  expr#isassign()
  expr#isbinary()
  expr#isbinaryop()
  expr#isblock()
  expr#iscaller()
  expr#iscollector()
  expr#iscompound()
  expr#isidentifier()
  expr#isindexer()
  expr#isiterer()
  expr#islister()
  expr#ismember()
  expr#isquote()
  expr#isroot()
  expr#issuffixed()
  expr#isunary()
  expr#isunaryop()
  expr#isvalue()
  expr.parse(script:string):static:map {block?}
  expr#textize(style?:symbol, indent?:string)
  expr#tofunction(`args*)
  expr#unquote()
  expr#write(dst:stream:w, style?:symbol, indent?:string)
formatter
  formatter#getminwidth()
  formatter#getpadding()
  formatter#getplusmode()
  formatter#getprecision()
  formatter#isleftalign()
  formatter#issharp()
  formatter#isuppercase()
function
  function.getdecls(func:function):static:map
  function.getexpr(func:function):static:map
  function.getformat(func:function):static:map
  function.getfullname(func:function):static:map
  function.getname(func:function):static:map
  function.getsymbol(func:function):static:map
  function#mathdiff(var?:symbol):reduce
gear
  gear.calcpadding(size_in:number, size_kernel:number, strides:number, padding:symbol):static:map {block?}
gear@conv1d
gear@conv2d
gear@conv3d
gear@maxpool1d
gear@maxpool2d
gear@maxpool3d
gear@relu
gear@sigmoid
gear@softmax
gear@tanh
help
  help#present():void {block?}
  help.presenter(format:string):static:void {block}
  help#render(format:string, out?:stream, header_offset?:number) {block?}
  help.renderer(format:string, format_out:string):static:void {block}
  help.text@block(lang:symbol, varname:string, typename:string):static {block?}
  help.text@iterator(lang:symbol):static {block?}
image
  image#allocbuff(width:number, height:number, color?:color):reduce
  image#blur(radius:number, sigma?:number) {block?}
  image#clear():reduce
  image#crop(x:number, y:number, width?:number, height?:number):map {block?}
  image#delpalette():reduce
  image#expand(top?:number, bottom?:number, left?:number, right?:number, background?:color):map:reduce {block?}
  image#extract(x:number, y:number, width:number, height:number, element:symbol, dst):reduce
  image#fill(color:color):reduce
  image#fillrect(x:number, y:number, width:number, height:number, color:color):map:reduce
  image#flip(orient:symbol):map {block?}
  image#getpixel(x:number, y:number):map {block?}
  image#grayscale() {block?}
  image#mapcolorlevel(map@r:array@uint8, map@g?:array@uint8, map@b?:array@uint8) {block?}
  image#paste(x:number, y:number, src:image, width?:number, height?:number, xoffset:number => 0, yoffset:number => 0, a:number => 255):map:reduce
  image#putpixel(x:number, y:number, color:color):map:reduce
  image#read(stream:stream:r, imagetype?:string):map:reduce
  image#reducecolor(palette?:palette) {block?}
  image#replacecolor(colorOrg:color, color:color, tolerance?:number):reduce
  image#resize(width?:number, height?:number):map:[box,ratio] {block?}
  image#rotate(rotate:number, background?:color):map {block?}
  image#scan(x?:number, y?:number, width?:number, height?:number, scandir?:symbol) {block?}
  image#setalpha(a:number, color?:color, tolerance?:number):reduce
  image#size()
  image#store(x:number, y:number, width:number, height:number, element:symbol, src):reduce
  image#thumbnail(width?:number, height?:number):map:[box] {block?}
  image#write(stream:stream:w, imagetype?:string):map:reduce
iterator
  iterator#after(criteria) {block?}
  iterator#align(n:number, value?) {block?}
  iterator#and()
  iterator#argmax():[indices,last_index]
  iterator#argmin():[indices,last_index]
  iterator#before(criteria) {block?}
  iterator#contains(value)
  iterator#count(criteria?)
  iterator#cycle(n?:number) {block?}
  iterator#delay(delay:number) {block?}
  iterator#each() {block?}
  iterator#filter(criteria?) {block?}
  iterator#find(criteria?):[index]
  iterator#finite():reduce
  iterator#flatten():[bfs,dfs] {block?}
  iterator#fold(n:number, nstep?:number):map:[iteritem,neat] {block?}
  iterator#format(format:string):map {block?}
  iterator#head(n:number):map {block?}
  iterator#infinite():reduce
  iterator#isinfinite()
  iterator#join(sep?:string):map
  iterator#joinb()
  iterator#len()
  iterator#map(func:function) {block?}
  iterator#max():[index,indices,last_index]
  iterator#mean()
  iterator#min():[index,indices,last_index]
  iterator#next()
  iterator#nilto(replace) {block?}
  iterator#offset(n:number) {block?}
  iterator#or()
  iterator#pack(format:string) {block?}
  iterator#pingpong(n?:number):[sticky,sticky@top,sticky@btm] {block?}
  iterator#print(stream?:stream:w):void
  iterator#printf(format:string, stream?:stream:w):void
  iterator#println(stream?:stream:w):void
  iterator#prod()
  iterator#rank(directive?) {block?}
  iterator#reduce(accum) {block}
  iterator#repeater()
  iterator#replace(value, replace) {block?}
  iterator#reverse() {block?}
  iterator#roundoff(threshold:number => 1e-10) {block?}
  iterator#runlength() {block?}
  iterator#since(criteria) {block?}
  iterator#skip(n:number) {block?}
  iterator#skipnil() {block?}
  iterator#sort(directive?, keys[]?):[stable] {block?}
  iterator#std():[p]
  iterator#sum()
  iterator#tail(n:number) {block?}
  iterator#until(criteria) {block?}
  iterator#var():[p]
  iterator#while (criteria) {block?}
list
  list#add(elem+):reduce
  list#after(criteria) {block?}
  list#align(n:number, value?):map {block?}
  list#and()
  list#append(elem+):reduce
  list#argmax():[indices,last_index]
  list#argmin():[indices,last_index]
  list#before(criteria) {block?}
  list#clear():reduce
  list#combination(n:number) {block?}
  list#contains(value)
  list#count(criteria?)
  list#cycle(n?:number) {block?}
  list#each() {block?}
  list#erase(idx*:number):reduce
  list#filter(criteria?) {block?}
  list#find(criteria?):[index]
  list#first()
  list#flatten():[bfs,dfs] {block?}
  list#fold(n:number, nstep?:number):map:[iteritem,neat] {block?}
  list#format(format:string):map {block?}
  list#get(index:number):flat:map
  list#head(n:number):map {block?}
  list#insert(idx:number, elem+):reduce
  list#isempty()
  list#join(sep?:string):map
  list#joinb()
  list#last()
  list#len()
  list#map(func:function) {block?}
  list#max():[index,indices,last_index]
  list#mean()
  list#min():[index,indices,last_index]
  list#nilto(replace) {block?}
  list#offset(n:number):map {block?}
  list#or()
  list#pack(format:string)
  list#permutation(n?:number) {block?}
  list#pingpong(n?:number):[sticky,sticky@top,sticky@btm] {block?}
  list#print(stream?:stream:w)
  list#printf(format:string, stream?:stream:w):void
  list#println(stream?:stream:w)
  list#prod()
  list#put(index:number, value:nomap):map:reduce
  list#rank(directive?):[stable] {block?}
  list#reduce(accum) {block}
  list#replace(value, replace) {block?}
  list#reverse() {block?}
  list#roundoff(threshold:number => 1e-10) {block?}
  list#runlength() {block?}
  list#shift():[raise]
  list#shuffle():reduce
  list#since(criteria) {block?}
  list#skip(n:number):map {block?}
  list#skipnil() {block?}
  list#sort(directive?, keys[]?):[stable] {block?}
  list#std():[p]
  list#sum()
  list#tail(n:number):map {block?}
  list#until(criteria) {block?}
  list#var():[p]
  list#while (criteria) {block?}
  list.zip(values+):static {block?}
memory
  memory#array@double():map {block?}
  memory#array@float():map {block?}
  memory#array@int16():map {block?}
  memory#array@int32():map {block?}
  memory#array@int64():map {block?}
  memory#array@int8():map {block?}
  memory#array@uint16():map {block?}
  memory#array@uint32():map {block?}
  memory#array@uint64():map {block?}
  memory#array@uint8():map {block?}
  memory#dump(stream?:stream:w):void:[upper]
  memory#pointer(offset?:number) {block?}
monitor
nil
number
  max@int16:number = 32767
  max@int32:number = 2147483647
  max@int8:number = 127
  max@uint16:number = 65535
  max@uint32:number = 4294967295
  max@uint8:number = 255
  min@int16:number = -32768
  min@int32:number = -2.14748e+09
  min@int8:number = -128
  min@uint16:number = 0
  min@uint32:number = 0
  min@uint8:number = 0
  number.roundoff(threshold:number => 1e-10)
  size@double:number = 8
  size@float:number = 4
  size@int16:number = 2
  size@int32:number = 4
  size@int64:number = 8
  size@int8:number = 1
  size@uint16:number = 2
  size@uint32:number = 4
  size@uint64:number = 8
  size@uint8:number = 1
object
  object#__call__(symbol:symbol, `args*):map:nonamed {block?}
  object#__iter__()
  object.__propdecls__() {block?}
  object#clone()
  object.getprop!(symbol:symbol, default?:nomap, attrs[]?:symbol:nomap):static:map
  object.is(obj):map
  object.isinstance(type+:expr):map
  object.isnil():map
  object.istype(type+:expr):map
  object.nomap() {block?}
  object.setprop!(symbol:symbol, value):static:map
  object.tonumber():[nil,raise,strict,zero]
  object.tostring()
operator
  operator#assign(type_l:expr, type_r?:expr):map:void {block}
  operator#entries(type?:symbol)
optimizer
  optimizer#update(array:array, array_grad:array):void
palette
  palette#each() {block?}
  palette#nearest(color:color):map:[index]
  palette#shrink():reduce:[align]
  palette#updateby(image_or_palette):reduce:[align,shrink]
pointer
  pointer#copyfrom(src:pointer, bytes?:number):map:reduce
  pointer#copyto(dst:pointer, bytes?:number):map:reduce
  pointer#decode(codec:codec, bytes?:number) {block?}
  pointer#dump(stream?:stream:w, bytes?:number):reduce:[upper]
  pointer#each@double():[be] {block?}
  pointer#each@float():[be] {block?}
  pointer#each@int16():[be] {block?}
  pointer#each@int32():[be] {block?}
  pointer#each@int64():[be] {block?}
  pointer#each@int8():[be] {block?}
  pointer#each@uint16():[be] {block?}
  pointer#each@uint32():[be] {block?}
  pointer#each@uint64():[be] {block?}
  pointer#each@uint8():[be] {block?}
  pointer#encodeuri(bytes?:number) {block?}
  pointer#forward(distance:number):reduce
  pointer#get@double():[be,nil,stay] {block?}
  pointer#get@float():[be,nil,stay] {block?}
  pointer#get@int16():[be,nil,stay] {block?}
  pointer#get@int32():[be,nil,stay] {block?}
  pointer#get@int64():[be,nil,stay] {block?}
  pointer#get@int8():[be,nil,stay] {block?}
  pointer#get@uint16():[be,nil,stay] {block?}
  pointer#get@uint32():[be,nil,stay] {block?}
  pointer#get@uint64():[be,nil,stay] {block?}
  pointer#get@uint8():[be,nil,stay] {block?}
  pointer#head():reduce
  pointer#hex(bytes?:number):[carray,cstr,upper] {block?}
  pointer#pack(format:string, values+):reduce:[stay]
  pointer#put@double(n:number):map:reduce:[be,stay]
  pointer#put@float(n:number):map:reduce:[be,stay]
  pointer#put@int16(n:number):map:reduce:[be,stay]
  pointer#put@int32(n:number):map:reduce:[be,stay]
  pointer#put@int64(n:number):map:reduce:[be,stay]
  pointer#put@int8(n:number):map:reduce:[be,stay]
  pointer#put@uint16(n:number):map:reduce:[be,stay]
  pointer#put@uint32(n:number):map:reduce:[be,stay]
  pointer#put@uint64(n:number):map:reduce:[be,stay]
  pointer#put@uint8(n:number):map:reduce:[be,stay]
  pointer#reader() {block?}
  pointer#seek(offset:number):reduce
  pointer#tail():reduce
  pointer#unpack(format:string, values*:number):[nil,stay] {block?}
  pointer#unpacks(format:string, values*:number):map {block?}
  pointer#writer() {block?}
propdeclaration
  propdeclaration#gethelp(lang?:symbol):map {block?}
quote
rational
  rational.reduce()
semaphore
  semaphore#release()
  semaphore#session() {block}
  semaphore#wait()
stream
  stream#addcr(flag?:boolean):reduce
  stream#close():void
  stream#compare(stream:stream:r):map
  stream.copy(src:stream:r, dst:stream:w, bytesunit:number => 65536):static:map:void:[finalize] {block?}
  stream#copyfrom(src:stream:r, bytesunit:number => 65536):map:reduce:[finalize] {block?}
  stream#copyto(dst:stream:w, bytesunit:number => 65536):map:reduce:[finalize] {block?}
  stream#delcr(flag?:boolean):reduce
  stream#deserialize()
  stream#flush():void
  stream#peek(bytes?:number)
  stream#print(values*):map:void
  stream#printf(format:string, values*):map:void
  stream#println(values*):map:void
  stream#read(bytes?:number) {block?}
  stream#readchar() {block?}
  stream#reader@base64() {block?}
  stream#readline():[chop] {block?}
  stream#readlines(nlines?:number):[chop] {block?}
  stream#readtext() {block?}
  stream#seek(offset:number, origin?:symbol):reduce
  stream#serialize(value):void
  stream#setcodec(codec:codec:nil):reduce
  stream#skipline():reduce
  stream#skiplines(nlines:number):reduce
  stream#tell()
  stream#write(ptr:pointer, bytes?:number):reduce
  stream#writer@base64(linelen:number:nil => 76) {block?}
string
  string#align(width:number, padding:string => ' '):map:[center,left,right] {block?}
  string.binary() {block?}
  string#capitalize() {block?}
  string#chop(suffix*:string):[eol,icase] {block?}
  string#decodeuri() {block?}
  string#each():map:[utf32,utf8] {block?}
  string#eachline(nlines?:number):[chop] {block?}
  string#embed(dst?:stream:w):[lasteol,noindent]
  string.encode(codec:codec) {block?}
  string#encodeuri() {block?}
  string#endswith(suffix:string, endpos?:number):map:[icase,rest]
  string#escape():[surround] {block?}
  string#escapehtml():[quote] {block?}
  string#find(sub:string, pos:number => 0):map:[icase,rev]
  string#fold(len:number, step?:number):[neat] {block?}
  string#foldw(width:number):[padding] {block?}
  string#format(values*):map
  string#isalnum()
  string#isalpha()
  string#isdigit()
  string#isempty()
  string#isspace()
  string#left(len?:number):map
  string#len()
  string#lower()
  string#mid(pos:number => 0, len?:number):map {block?}
  string.print(stream?:stream:w):void
  string.println(stream?:stream:w):void
  string#reader() {block?}
  string#replace(match:string, sub:string, count?:number):map:[icase] {block?}
  string#replaces(map[]:string, count?:number):map:[icase] {block?}
  string#right(len?:number):map {block?}
  string#split(sep?:string, count?:number):[icase] {block?}
  string#startswith(prefix:string, pos:number => 0):map:[icase,rest]
  string#strip():[both,left,right] {block?}
  string#template():[lasteol,noindent] {block?}
  string#tosymbol() {block?}
  string.translator():static:void {block}
  string#unescapehtml() {block?}
  string#upper() {block?}
  string#width()
  string#zentohan() {block?}
struct
  struct#tolist()
suffixmgr
  suffixmgr#assign(suffix:symbol):void:[overwrite] {block}
symbol
  symbol#eval(env?:environment)
  symbol#len()
  symbol#width()
template
  template#block(symbol:symbol):void
  template#call(symbol:symbol, args*)
  template#define(symbol:symbol, `args*):void
  template#embed(template:template)
  template#extends(template:template):void
  template#init_block(symbol:symbol):void {block}
  template#init_call(symbol:symbol, args*):void
  template#init_define(symbol:symbol, `args*):void {block}
  template#init_embed(template:template):void
  template#init_extends(template:template):void
  template#init_super(symbol:symbol):void
  template#parse(str:string):void:[lasteol,noindent]
  template#read(src:stream:r):void:[lasteol,noindent]
  template#render(dst?:stream:w)
  template#super(symbol:symbol):void
timedelta
token
trainer
  trainer#eval(env?:environment) {block?}
  trainer#evalbwd(correct:array, env?:environment):void
  trainer#node(id:symbol):map:[nil] {block?}
  trainer#train(correct:array, env?:environment):void
trainernode
  trainernode#isbinary()
  trainernode#isbottom()
  trainernode#isgear()
  trainernode#ishead()
  trainernode#isunary()
undefined
uri
  uri#getfragment()
  uri#getpath()
  uri#getquery()
  uri.parsequery(query:string):static:map
vertex
  vertex.cross (v1:vertex, v2:vertex):static:map {block?}
  vertex.dot(v1:vertex, v2:vertex):static:map {block?}
  vertex#list() {block?}
  vertex#norm() {block?}
  vertex.normal(v1:vertex, v2:vertex, v3:vertex):static:map:[unit] {block?}
  vertex#rotate@x(angle:number):[deg] {block?}
  vertex#rotate@y(angle:number):[deg] {block?}
  vertex#rotate@z(angle:number):[deg] {block?}
  vertex#translate(tx:number, ty:number, tz?:number) {block?}
  zero:vertex = <vertex:0,0,0>

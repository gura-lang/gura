%:function = %(elem[]?):[icase] {block?}
&:function = &(`args*) {block}
@:function = @(func?:function) {block?}
@@:function = @@() {block}
@rem:nil = nil
ArgumentError:error = <error:ArgumentError>
ArithmeticError:error = <error:ArithmeticError>
AttributeError:error = <error:AttributeError>
CodecError:error = <error:CodecError>
CommandError:error = <error:CommandError>
DeclarationError:error = <error:DeclarationError>
FormatError:error = <error:FormatError>
IOError:error = <error:IOError>
ImportError:error = <error:ImportError>
IndexError:error = <error:IndexError>
IteratorError:error = <error:IteratorError>
KeyError:error = <error:KeyError>
MemberAccessError:error = <error:MemberAccessError>
MemoryError:error = <error:MemoryError>
NameError:error = <error:NameError>
None:error = <error:None>
NotImplementedError:error = <error:NotImplementedError>
OutOfRange:error = <error:OutOfRange>
ResourceError:error = <error:ResourceError>
RuntimeError:error = <error:RuntimeError>
SyntaxError:error = <error:SyntaxError>
SystemError:error = <error:SystemError>
TypeError:error = <error:TypeError>
ValueError:error = <error:ValueError>
ZeroDivisionError:error = <error:ZeroDivisionError>
__name__:string = __main__
audio:function = audio(args+):map {block?}
base64:module = <module:base64:<integrated>>
  __name__:string = base64
  __source__:string = <integrated>
  __symbol__:symbol = base64
  decode:function = decode(stream:stream:r)
  encode:function = encode(stream:stream:r, linelen:number:nil => 76)
  reader:function = reader(stream:stream:r)
  writer:function = writer(stream:stream:w, linelen:number:nil => 76)
binary:function = binary(buff*) {block?}
case:function = case(`cond) {block}
catch:function = catch(errors*:error):leader:trailer {block}
choose:function = choose(index:number, values+):map
chr:function = chr(num:number):map
class:function = class(superclass?:function) {block?}
classref:function = classref(type+:expr):map {block?}
codec:function = codec(encoding:string) {block?}
codecs:module = <module:codecs:<integrated>>
  __name__:string = codecs
  __source__:string = <integrated>
  __symbol__:symbol = codecs
  basic:module = <module:basic:<integrated>>
    __name__:string = basic
    __source__:string = <integrated>
    __symbol__:symbol = basic
  iso8859:module = <module:iso8859:<integrated>>
    __name__:string = iso8859
    __source__:string = <integrated>
    __symbol__:symbol = iso8859
  japanese:module = <module:japanese:<integrated>>
    __name__:string = japanese
    __source__:string = <integrated>
    __symbol__:symbol = japanese
color:function = color(args+):map {block?}
complex:function = complex(real:number, imag?:number):map {block?}
cond:function = cond(flag:boolean, value1:nomap, value2?:nomap):map
conds:function = conds(flag:boolean, value1, value2?):map
conio:module = <module:conio:<integrated>>
  K_BACKSPACE:number = 127
  K_DELETE:number = 137
  K_DOWN:number = 129
  K_END:number = 134
  K_ESCAPE:number = 27
  K_HOME:number = 133
  K_INSERT:number = 132
  K_LEFT:number = 131
  K_PAGEDOWN:number = 136
  K_PAGEUP:number = 135
  K_RETURN:number = 10
  K_RIGHT:number = 130
  K_SPACE:number = 32
  K_TAB:number = 9
  K_UP:number = 128
  __name__:string = conio
  __source__:string = <integrated>
  __symbol__:symbol = conio
  clear:function = clear(region?:symbol):void
  getwinsize:function = getwinsize()
  moveto:function = moveto(x:number, y:number):map:void {block?}
  setcolor:function = setcolor(fg:symbol:nil, bg?:symbol):map:void {block?}
  waitkey:function = waitkey():[raise]
consts:function = consts(value, num?:number) {block?}
copy:function = copy(src:stream:r, dst:stream:w, bytesunit:number => 65536):map:void {block?}
cross:function = cross (`expr+) {block}
datetime:function = datetime(year:number, month:number, day:number, hour:number => 0, min:number => 0, sec:number => 0, usec:number => 0, minsoff?:number):map {block?}
default:function = default() {block}
dict:function = dict(elem[]?):[icase] {block?}
dim:function = dim(n+:number) {block?}
dir:function = dir(obj?):[noesc]
directory:function = directory(pathname:string):map {block?}
dirtype:function = dirtype(obj?):[noesc]
else:function = else():trailer {block}
elsif:function = elsif (`cond):leader:trailer {block}
end:function = end():symbol_func:trailer:end_marker:void
eval:function = eval(expr:expr):map
extern:function = extern(`syms+)
false:boolean = false
finally:function = finally():trailer:finalizer {block}
for:function = for (`expr+) {block}
format:function = format(format:string, values*):map
fraction:function = fraction(numer:number, denom?:number):map {block?}
fs:module = <module:fs:<integrated>>
  __name__:string = fs
  __source__:string = <integrated>
  __symbol__:symbol = fs
  chdir:function = chdir(pathname:string) {block?}
  chmod:function = chmod(mode, pathname:string):map:void
  copy:function = copy(src:string, dst:string):map:void:[overwrite]
  cpdir:function = cpdir(src:string, dst:string):map:void:[tree]
  getcwd:function = getcwd()
  mkdir:function = mkdir(pathname:string):map:void:[tree]
  remove:function = remove(pathname:string):map:void
  rename:function = rename(src:string, dst:string):map:void
  rmdir:function = rmdir(pathname:string):map:void:[tree]
function:function = function(`args*) {block}
help:function = help(func:function, lang?:symbol):map:void
hex:function = hex(num:number, digits?:number):map:[upper]
if:function = if (`cond):leader {block}
image:function = image(args+):map {block?}
import:function = import(`module, `alias?):void:[binary,mixin_type,overwrite] {block?}
int:function = int(value):map
interval:function = interval(a:number, b:number, samples:number):map:[open,open_l,open_r] {block?}
isbinary:function = isbinary(value)
isboolean:function = isboolean(value)
isclass:function = isclass(value)
iscomplex:function = iscomplex(value)
isdatetime:function = isdatetime(value)
isdefined:function = isdefined(`symbol)
isdict:function = isdict(value)
isenvironment:function = isenvironment(value)
iserror:function = iserror(value)
isexpr:function = isexpr(value)
isfraction:function = isfraction(value)
isfunction:function = isfunction(value)
isinstance:function = isinstance(value, type+:expr):map
isiterator:function = isiterator(value)
islist:function = islist(value)
ismatrix:function = ismatrix(value)
ismodule:function = ismodule(value)
isnil:function = isnil(value)
isnumber:function = isnumber(value)
issemaphore:function = issemaphore(value)
isstring:function = isstring(value)
issymbol:function = issymbol(value)
istimedelta:function = istimedelta(value)
istype:function = istype(value, type+:expr):map
isuri:function = isuri(value)
iterator:function = iterator(value+) {block?}
list:function = list(value+)
local:function = local(`syms+)
locals:function = locals(module?:module) {block?}
math:module = <module:math:<integrated>>
  __name__:string = math
  __source__:string = <integrated>
  __symbol__:symbol = math
  abs:function = abs(num):map
  acos:function = acos(num):map:[deg]
  arg:function = arg(num):map:[deg]
  asin:function = asin(num):map:[deg]
  atan:function = atan(num):map:[deg]
  atan2:function = atan2(num1, num2):map:[deg]
  bezier:function = bezier(nums[]+:number)
  ceil:function = ceil(num):map
  conj:function = conj(num):map
  cos:function = cos(num):map:[deg]
  cosh:function = cosh(num):map
  covariance:function = covariance(a:iterator, b:iterator)
  cross_product:function = cross_product(a[], b[])
  diff:function = diff(expr:expr, var:symbol):map {block?}
  dot_product:function = dot_product(a[], b[])
  e:number = 2.71828
  exp:function = exp(num):map
  fft:function = fft(seq[])
  floor:function = floor(num):map
  gcd:function = gcd(a:number, b+:number):map
  hypot:function = hypot(x, y):map
  imag:function = imag(num):map
  integral:function = integral()
  lcm:function = lcm(a:number, b+:number):map
  least_square:function = least_square(x:iterator, y:iterator, dim:number => 1, var:symbol => x)
  log:function = log(num):map
  log10:function = log10(num):map
  norm:function = norm(num):map
  optimize:function = optimize(expr:expr):map {block?}
  pi:number = 3.14159
  real:function = real(num):map
  sin:function = sin(num):map:[deg]
  sinh:function = sinh(num):map
  sqrt:function = sqrt(num):map
  tan:function = tan(num):map:[deg]
  tanh:function = tanh(num):map
matrix:function = matrix(nrows:number, ncols:number, value?) {block?}
max:function = max(values+):map
min:function = min(values+):map
module:function = module() {block}
nil:nil = nil
nomap:function = nomap(obj) {block?}
object:function = object()
open:function = open(name:string, mode?:string, codec?:codec):map {block?}
operator:function = operator(op:symbol):map {block?}
ord:function = ord(str:string):map
os:module = <module:os:<integrated>>
  __name__:string = os
  __source__:string = <integrated>
  __symbol__:symbol = os
  clock:function = clock()
  exec:function = exec(pathname:string, args*:string):map:[fork]
  fromnative:function = fromnative(buff:binary):map
  getenv:function = getenv(name:string):map
  putenv:function = putenv(name:string, value:string):void
  redirect:function = redirect(stdin:stream:nil:r, stdout:stream:nil:w, stderr?:stream:w) {block?}
  sleep:function = sleep(secs:number)
  tonative:function = tonative(str:string):map
outers:function = outers() {block?}
palette:function = palette(type) {block?}
path:module = <module:path:<integrated>>
  __name__:string = path
  __source__:string = <integrated>
  __symbol__:symbol = path
  absname:function = absname(name:string):map:[uri]
  bottom:function = bottom(pathname:string):map
  cutbottom:function = cutbottom(pathname:string):map
  dir:function = dir(directory?:directory, pattern*:string):map:flat:[dir,file,icase,stat] {block?}
  dirname:function = dirname(pathname:string):map
  exists:function = exists(pathname:string):map
  filename:function = filename(pathname:string):map
  glob:function = glob(pattern:string):map:flat:[dir,file,icase,stat] {block?}
  join:function = join(paths+:string):map:[uri]
  match:function = match(pattern:string, name:string):map:[icase]
  regulate:function = regulate(name:string):map:[uri]
  split:function = split(pathname:string):map:[bottom]
  splitext:function = splitext(pathname:string):map
  stat:function = stat(directory:directory):map
  walk:function = walk(directory?:directory, maxdepth?:number, pattern*:string):map:flat:[dir,file,icase,stat] {block?}
print:function = print(values*):map:void
printf:function = printf(format:string, values*):map:void
println:function = println(values*):map:void
public:function = public():void {block}
raise:function = raise(error:error, msg:string => 'error', value?)
rand:function = rand(range?:number) {block?}
rands:function = rands(range?:number, num?:number) {block?}
randseed:function = randseed(seed:number)
range:function = range(num:number, num_end?:number, step?:number):map {block?}
readlines:function = readlines(stream?:stream:r):[chop] {block?}
repeat:function = repeat (n?:number) {block}
root:environment = <environment:root>
scope:function = scope(target?) {block}
semaphore:function = semaphore()
set:function = set(iter+:iterator):[and,or,xor]
stream:function = stream(name:string, mode?:string, codec?:codec):map {block?}
struct:function = struct(`args+):[loose] {block?}
super:function = super(obj):map {block?}
switch:function = switch() {block}
sys:module = <module:sys:<integrated>>
  __name__:string = sys
  __source__:string = <integrated>
  __symbol__:symbol = sys
  echo:function = echo(flag:boolean)
  exit:function = exit(status?:number)
  ps1:string = >>> 
  ps2:string = ... 
  version:string = 0.4.0
template:function = template(src:stream:r, dst?:stream:w):map:[lasteol,noindent] {block?}
timedelta:function = timedelta(days:number => 0, secs:number => 0, usecs:number => 0):map {block?}
tonumber:function = tonumber(value):map:[nil,raise,strict,zero]
tostring:function = tostring(value):map
tosymbol:function = tosymbol(str:string):map
true:boolean = true
try:function = try():leader {block}
typename:function = typename(`value)
undef:function = undef(`symbol+):[raise]
uri:function = uri(str?:string):map {block?}
while:function = while (`cond) {block}
xlist:function = xlist(iter+:iterator)
xset:function = xset(iter+:iterator):[and,or,xor]
zipv:function = zipv(values+) {block?}

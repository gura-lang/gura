%(elem[]?):[icase] {block?}
&(`args*) {block}
-:nil = nil
@(func?:function) {block?}
@@() {block}
@rem:nil = nil
__name__:string = __main__
audio(args+):map {block?}
base64:module = <module:base64:<integrated>>
  __name__:string = base64
  __source__:string = <integrated>
  __symbol__:symbol = base64
  decode(stream:stream:r)
  encode(stream:stream:r, linelen:number:nil => 76)
  reader(stream:stream:r)
  writer(stream:stream:w, linelen:number:nil => 76)
binary(buff*) {block?}
case(`cond) {block}
catch(errors*:error):leader:trailer {block}
choose(index:number, values+):map
chr(num:number):map
class(superclass?:function) {block?}
classref(type+:expr):map {block?}
codec(encoding:string) {block?}
codecs:module = <module:codecs:<integrated>>
  __name__:string = codecs
  __source__:string = <integrated>
  __symbol__:symbol = codecs
  basic:module = <module:basic:<integrated>>
    __name__:string = basic
    __source__:string = <integrated>
    __symbol__:symbol = basic
  iso8859:module = <module:iso8859:<integrated>>
    __name__:string = iso8859
    __source__:string = <integrated>
    __symbol__:symbol = iso8859
  japanese:module = <module:japanese:<integrated>>
    __name__:string = japanese
    __source__:string = <integrated>
    __symbol__:symbol = japanese
color(args+):map {block?}
complex(real:number, imag?:number):map {block?}
cond(flag:boolean, value1:nomap, value2?:nomap):map
conds(flag:boolean, value1, value2?):map
conio:module = <module:conio:<integrated>>
  K_BACKSPACE:number = 127
  K_DELETE:number = 137
  K_DOWN:number = 129
  K_END:number = 134
  K_ESCAPE:number = 27
  K_HOME:number = 133
  K_INSERT:number = 132
  K_LEFT:number = 131
  K_PAGEDOWN:number = 136
  K_PAGEUP:number = 135
  K_RETURN:number = 10
  K_RIGHT:number = 130
  K_SPACE:number = 32
  K_TAB:number = 9
  K_UP:number = 128
  __name__:string = conio
  __source__:string = <integrated>
  __symbol__:symbol = conio
  clear(region?:symbol):void
  getwinsize()
  moveto(x:number, y:number):map:void {block?}
  setcolor(fg:symbol:nil, bg?:symbol):map:void {block?}
  waitkey():[raise]
consts(value, num?:number) {block?}
copy(src:stream:r, dst:stream:w, bytesunit:number => 65536):map:void:[finalize] {block?}
cross (`expr+) {block}
datetime(year:number, month:number, day:number, hour:number => 0, min:number => 0, sec:number => 0, usec:number => 0, minsoff?:number):map {block?}
default() {block}
dict(elem[]?):[icase] {block?}
dim(n+:number) {block?}
dir(obj?):[noesc]
directory(pathname:string):map {block?}
dirtype(obj?):[noesc]
else():trailer {block}
elsif (`cond):leader:trailer {block}
end(dummy*):symbol_func:trailer:end_marker:void
error:class = <class:error>
expr():map {block?}
extern(`syms+)
false:boolean = false
finally():trailer:finalizer {block}
for (`expr+) {block}
format(format:string, values*):map
fraction(numer:number, denom?:number):map {block?}
fs:module = <module:fs:<integrated>>
  __name__:string = fs
  __source__:string = <integrated>
  __symbol__:symbol = fs
  chdir(pathname:string) {block?}
  chmod(mode, pathname:string):map:void
  copy(src:string, dst:string):map:void:[overwrite]
  cpdir(src:string, dst:string):map:void:[tree]
  getcwd()
  mkdir(pathname:string):map:void:[tree]
  remove(pathname:string):map:void
  rename(src:string, dst:string):map:void
  rmdir(pathname:string):map:void:[tree]
function(`args*) {block}
help(func:function, lang?:symbol):map:void
hex(num:number, digits?:number):map:[upper]
if (`cond):leader {block}
image(args+):map {block?}
import(`module, `alias?):void:[binary,mixin_type,overwrite] {block?}
int(value):map
interval(a:number, b:number, samples:number):map:[open,open_l,open_r] {block?}
isbinary(value)
isboolean(value)
isclass(value)
iscomplex(value)
isdatetime(value)
isdefined(`symbol)
isdict(value)
isenvironment(value)
iserror(value)
isexpr(value)
isfraction(value)
isfunction(value)
isinstance(value, type+:expr):map
isiterator(value)
islist(value)
ismatrix(value)
ismodule(value)
isnil(value)
isnumber(value)
issemaphore(value)
isstring(value)
issymbol(value)
istimedelta(value)
istype(value, type+:expr):map
isuri(value)
iterator(value+) {block?}
list(value+)
local(`syms+)
locals(module?:module) {block?}
math:module = <module:math:<integrated>>
  __name__:string = math
  __source__:string = <integrated>
  __symbol__:symbol = math
  abs(num):map
  acos(num):map:[deg]
  arg(num):map:[deg]
  asin(num):map:[deg]
  atan(num):map:[deg]
  atan2(num1, num2):map:[deg]
  bezier(nums[]+:number)
  ceil(num):map
  conj(num):map
  cos(num):map:[deg]
  cosh(num):map
  covariance(a:iterator, b:iterator)
  cross_product(a[], b[])
  diff(expr:expr, var:symbol):map {block?}
  dot_product(a[], b[])
  e:number = 2.71828
  exp(num):map
  fft(seq[])
  floor(num):map
  gcd(a:number, b+:number):map
  hypot(x, y):map
  imag(num):map
  integral()
  lcm(a:number, b+:number):map
  least_square(x:iterator, y:iterator, dim:number => 1, var:symbol => x)
  log(num):map
  log10(num):map
  norm(num):map
  optimize(expr:expr):map {block?}
  pi:number = 3.14159
  real(num):map
  sin(num):map:[deg]
  sinh(num):map
  sqrt(num):map
  tan(num):map:[deg]
  tanh(num):map
matrix(nrows:number, ncols:number, value?) {block?}
max(values+):map
min(values+):map
module() {block}
nil:nil = nil
nomap(obj) {block?}
object()
open(name:string, mode?:string, codec?:codec):map {block?}
operator(op:symbol):map {block?}
ord(str:string):map
os:module = <module:os:<integrated>>
  __name__:string = os
  __source__:string = <integrated>
  __symbol__:symbol = os
  clock()
  exec(pathname:string, args*:string):map:[fork]
  fromnative(buff:binary):map
  getenv(name:string):map
  putenv(name:string, value:string):void
  redirect(stdin:stream:nil:r, stdout:stream:nil:w, stderr?:stream:w) {block?}
  sleep(secs:number)
  tonative(str:string):map
outers() {block?}
palette(type) {block?}
path:module = <module:path:<integrated>>
  __name__:string = path
  __source__:string = <integrated>
  __symbol__:symbol = path
  absname(name:string):map:[uri]
  bottom(pathname:string):map
  cutbottom(pathname:string):map
  dir(directory?:directory, pattern*:string):map:flat:[dir,file,icase,stat] {block?}
  dirname(pathname:string):map
  exists(pathname:string):map
  filename(pathname:string):map
  glob(pattern:string):map:flat:[dir,file,icase,stat] {block?}
  join(paths+:string):map:[uri]
  match(pattern:string, name:string):map:[icase]
  regulate(name:string):map:[uri]
  split(pathname:string):map:[bottom]
  splitext(pathname:string):map
  stat(directory:directory):map
  walk(directory?:directory, maxdepth?:number, pattern*:string):map:flat:[dir,file,icase,stat] {block?}
print(values*):map:void
printf(format:string, values*):map:void
println(values*):map:void
public():void {block}
raise(error:error, msg:string => 'error', value?)
rand(range?:number) {block?}
rands(range?:number, num?:number) {block?}
randseed(seed:number)
range(num:number, num_end?:number, step?:number):map {block?}
readlines(stream?:stream:r):[chop] {block?}
repeat (n?:number) {block}
root:environment = <environment:root>
scope(target?) {block}
semaphore()
set(iter+:iterator):[and,or,xor]
stream(name:string, mode?:string, codec?:codec):map {block?}
struct(`args+):[loose] {block?}
super(obj):map {block?}
switch() {block}
sys:module = <module:sys:<integrated>>
  __name__:string = sys
  __source__:string = <integrated>
  __symbol__:symbol = sys
  echo(flag:boolean)
  exit(status?:number)
  ps1:string = >>> 
  ps2:string = ... 
  version:string = 0.4.0
template(src?:stream:r):map:[lasteol,noindent] {block?}
timedelta(days:number => 0, secs:number => 0, usecs:number => 0):map {block?}
tonumber(value):map:[nil,raise,strict,zero]
tostring(value):map
tosymbol(str:string):map
true:boolean = true
try():leader {block}
typename(`value)
undef(`symbol+):[raise]
uri(str?:string):map {block?}
while (`cond) {block}
xlist(iter+:iterator)
xset(iter+:iterator):[and,or,xor]
zipv(values+) {block?}
any
args
  finalize_trailer():void
  isset(symbol:symbol)
  quit_trailer():void
audio
  each(channel:number, offset?:number):map {block?}
  get(channel:number, offset:number):map
  put(channel:number, offset:number, data:number):map:reduce
  sinewave(channel:number, freq:number, len:number, amplitude?:number):map:reduce
  store(channel:number, offset:number, data:iterator):reduce
binary
  add(buff+:binary):map:reduce
  decode(codec:codec)
  dump(stream?:stream:w):void:[upper]
  each() {block?}
  encodeuri()
  hex():[carray,cstr,upper]
  len()
  pack(format:string, value*):static:map
  pointer(offset:number => 0)
  reader() {block?}
  store(offset:number, buff+:binary):map:reduce
  unpack(format:string, values*:number):[nil]
  unpacks(format:string, values*:number) {block?}
  writer() {block?}
boolean
codec
  addcr(flag?:boolean):reduce
  bom_utf16be:binary = <binary:R:2byte:'\xfe\xff'>
  bom_utf16le:binary = <binary:R:2byte:'\xff\xfe'>
  bom_utf32be:binary = <binary:R:4byte:'\x00\x00\xfe\xff'>
  bom_utf32le:binary = <binary:R:4byte:'\xff\xfe\x00\x00'>
  bom_utf8:binary = <binary:R:3byte:'\xef\xbb\xbf'>
  decode(buff:binary):map
  delcr(flag?:boolean):reduce
  dir():static
  encode(string:string):map
color
  Aqua:color = <color:#00ffff,alpha:ff>
  Black:color = <color:#000000,alpha:ff>
  Blue:color = <color:#0000ff,alpha:ff>
  Fuchsia:color = <color:#ff00ff,alpha:ff>
  Gray:color = <color:#808080,alpha:ff>
  Green:color = <color:#008000,alpha:ff>
  Lime:color = <color:#00ff00,alpha:ff>
  Maroon:color = <color:#800000,alpha:ff>
  Navy:color = <color:#000080,alpha:ff>
  Olive:color = <color:#808000,alpha:ff>
  Purple:color = <color:#800080,alpha:ff>
  Red:color = <color:#ff0000,alpha:ff>
  Silver:color = <color:#c0c0c0,alpha:ff>
  Teal:color = <color:#008080,alpha:ff>
  White:color = <color:#ffffff,alpha:ff>
  Yellow:color = <color:#ffff00,alpha:ff>
  html()
  names = [black,maroon,green,olive,navy,purple,teal,gray,silver,red,lime,yellow,blue,fuchsia,aqua,white,snow,ghost white,GhostWhite,white smoke,WhiteSmoke,gainsboro,floral white,FloralWhite,old lace,OldLace,linen,antique white,AntiqueWhite,papaya whip,PapayaWhip,blanched almond,BlanchedAlmond,bisque,peach puff,PeachPuff,navajo white,NavajoWhite,moccasin,cornsilk,ivory,lemon chiffon,LemonChiffon,seashell,honeydew,mint cream,MintCream,azure,alice blue,AliceBlue,lavender,lavender blush,LavenderBlush,misty rose,MistyRose,dark slate gray,DarkSlateGray,dark slate grey,DarkSlateGrey,dim gray,DimGray,dim grey,DimGrey,slate gray,SlateGray,slate grey,SlateGrey,light slate gray,LightSlateGray,light slate grey,LightSlateGrey,grayX,grey,light grey,LightGrey,light gray,LightGray,midnight blue,MidnightBlue,navy blue,NavyBlue,cornflower blue,CornflowerBlue,dark slate blue,DarkSlateBlue,slate blue,SlateBlue,medium slate blue,MediumSlateBlue,light slate blue,LightSlateBlue,medium blue,MediumBlue,royal blue,RoyalBlue,dodger blue,DodgerBlue,deep sky blue,DeepSkyBlue,sky blue,SkyBlue,light sky blue,LightSkyBlue,steel blue,SteelBlue,light steel blue,LightSteelBlue,light blue,LightBlue,powder blue,PowderBlue,pale turquoise,PaleTurquoise,dark turquoise,DarkTurquoise,medium turquoise,MediumTurquoise,turquoise,cyan,light cyan,LightCyan,cadet blue,CadetBlue,medium aquamarine,MediumAquamarine,aquamarine,dark green,DarkGreen,dark olive green,DarkOliveGreen,dark sea green,DarkSeaGreen,sea green,SeaGreen,medium sea green,MediumSeaGreen,light sea green,LightSeaGreen,pale green,PaleGreen,spring green,SpringGreen,lawn green,LawnGreen,greenX,chartreuse,medium spring green,MediumSpringGreen,green yellow,GreenYellow,lime green,LimeGreen,yellow green,YellowGreen,forest green,ForestGreen,olive drab,OliveDrab,dark khaki,DarkKhaki,khaki,pale goldenrod,PaleGoldenrod,light goldenrod yellow,LightGoldenrodYellow,light yellow,LightYellow,gold,light goldenrod,LightGoldenrod,goldenrod,dark goldenrod,DarkGoldenrod,rosy brown,RosyBrown,indian red,IndianRed,saddle brown,SaddleBrown,sienna,peru,burlywood,beige,wheat,sandy brown,SandyBrown,tan,chocolate,firebrick,brown,dark salmon,DarkSalmon,salmon,light salmon,LightSalmon,orange,dark orange,DarkOrange,coral,light coral,LightCoral,tomato,orange red,OrangeRed,hot pink,HotPink,deep pink,DeepPink,pink,light pink,LightPink,pale violet red,PaleVioletRed,maroonX,medium violet red,MediumVioletRed,violet red,VioletRed,magenta,violet,plum,orchid,medium orchid,MediumOrchid,dark orchid,DarkOrchid,dark violet,DarkViolet,blue violet,BlueViolet,purpleX,medium purple,MediumPurple,thistle,snow1,snow2,snow3,snow4,seashell1,seashell2,seashell3,seashell4,AntiqueWhite1,AntiqueWhite2,AntiqueWhite3,AntiqueWhite4,bisque1,bisque2,bisque3,bisque4,PeachPuff1,PeachPuff2,PeachPuff3,PeachPuff4,NavajoWhite1,NavajoWhite2,NavajoWhite3,NavajoWhite4,LemonChiffon1,LemonChiffon2,LemonChiffon3,LemonChiffon4,cornsilk1,cornsilk2,cornsilk3,cornsilk4,ivory1,ivory2,ivory3,ivory4,honeydew1,honeydew2,honeydew3,honeydew4,LavenderBlush1,LavenderBlush2,LavenderBlush3,LavenderBlush4,MistyRose1,MistyRose2,MistyRose3,MistyRose4,azure1,azure2,azure3,azure4,SlateBlue1,SlateBlue2,SlateBlue3,SlateBlue4,RoyalBlue1,RoyalBlue2,RoyalBlue3,RoyalBlue4,blue1,blue2,blue3,blue4,DodgerBlue1,DodgerBlue2,DodgerBlue3,DodgerBlue4,SteelBlue1,SteelBlue2,SteelBlue3,SteelBlue4,DeepSkyBlue1,DeepSkyBlue2,DeepSkyBlue3,DeepSkyBlue4,SkyBlue1,SkyBlue2,SkyBlue3,SkyBlue4,LightSkyBlue1,LightSkyBlue2,LightSkyBlue3,LightSkyBlue4,SlateGray1,SlateGray2,SlateGray3,SlateGray4,LightSteelBlue1,LightSteelBlue2,LightSteelBlue3,LightSteelBlue4,LightBlue1,LightBlue2,LightBlue3,LightBlue4,LightCyan1,LightCyan2,LightCyan3,LightCyan4,PaleTurquoise1,PaleTurquoise2,PaleTurquoise3,PaleTurquoise4,CadetBlue1,CadetBlue2,CadetBlue3,CadetBlue4,turquoise1,turquoise2,turquoise3,turquoise4,cyan1,cyan2,cyan3,cyan4,DarkSlateGray1,DarkSlateGray2,DarkSlateGray3,DarkSlateGray4,aquamarine1,aquamarine2,aquamarine3,aquamarine4,DarkSeaGreen1,DarkSeaGreen2,DarkSeaGreen3,DarkSeaGreen4,SeaGreen1,SeaGreen2,SeaGreen3,SeaGreen4,PaleGreen1,PaleGreen2,PaleGreen3,PaleGreen4,SpringGreen1,SpringGreen2,SpringGreen3,SpringGreen4,green1,green2,green3,green4,chartreuse1,chartreuse2,chartreuse3,chartreuse4,OliveDrab1,OliveDrab2,OliveDrab3,OliveDrab4,DarkOliveGreen1,DarkOliveGreen2,DarkOliveGreen3,DarkOliveGreen4,khaki1,khaki2,khaki3,khaki4,LightGoldenrod1,LightGoldenrod2,LightGoldenrod3,LightGoldenrod4,LightYellow1,LightYellow2,LightYellow3,LightYellow4,yellow1,yellow2,yellow3,yellow4,gold1,gold2,gold3,gold4,goldenrod1,goldenrod2,goldenrod3,goldenrod4,DarkGoldenrod1,DarkGoldenrod2,DarkGoldenrod3,DarkGoldenrod4,RosyBrown1,RosyBrown2,RosyBrown3,RosyBrown4,IndianRed1,IndianRed2,IndianRed3,IndianRed4,sienna1,sienna2,sienna3,sienna4,burlywood1,burlywood2,burlywood3,burlywood4,wheat1,wheat2,wheat3,wheat4,tan1,tan2,tan3,tan4,chocolate1,chocolate2,chocolate3,chocolate4,firebrick1,firebrick2,firebrick3,firebrick4,brown1,brown2,brown3,brown4,salmon1,salmon2,salmon3,salmon4,LightSalmon1,LightSalmon2,LightSalmon3,LightSalmon4,orange1,orange2,orange3,orange4,DarkOrange1,DarkOrange2,DarkOrange3,DarkOrange4,coral1,coral2,coral3,coral4,tomato1,tomato2,tomato3,tomato4,OrangeRed1,OrangeRed2,OrangeRed3,OrangeRed4,red1,red2,red3,red4,DeepPink1,DeepPink2,DeepPink3,DeepPink4,HotPink1,HotPink2,HotPink3,HotPink4,pink1,pink2,pink3,pink4,LightPink1,LightPink2,LightPink3,LightPink4,PaleVioletRed1,PaleVioletRed2,PaleVioletRed3,PaleVioletRed4,maroon1,maroon2,maroon3,maroon4,VioletRed1,VioletRed2,VioletRed3,VioletRed4,magenta1,magenta2,magenta3,magenta4,orchid1,orchid2,orchid3,orchid4,plum1,plum2,plum3,plum4,MediumOrchid1,MediumOrchid2,MediumOrchid3,MediumOrchid4,DarkOrchid1,DarkOrchid2,DarkOrchid3,DarkOrchid4,purple1,purple2,purple3,purple4,MediumPurple1,MediumPurple2,MediumPurple3,MediumPurple4,thistle1,thistle2,thistle3,thistle4,gray0,grey0,gray1,grey1,gray2,grey2,gray3,grey3,gray4,grey4,gray5,grey5,gray6,grey6,gray7,grey7,gray8,grey8,gray9,grey9,gray10,grey10,gray11,grey11,gray12,grey12,gray13,grey13,gray14,grey14,gray15,grey15,gray16,grey16,gray17,grey17,gray18,grey18,gray19,grey19,gray20,grey20,gray21,grey21,gray22,grey22,gray23,grey23,gray24,grey24,gray25,grey25,gray26,grey26,gray27,grey27,gray28,grey28,gray29,grey29,gray30,grey30,gray31,grey31,gray32,grey32,gray33,grey33,gray34,grey34,gray35,grey35,gray36,grey36,gray37,grey37,gray38,grey38,gray39,grey39,gray40,grey40,gray41,grey41,gray42,grey42,gray43,grey43,gray44,grey44,gray45,grey45,gray46,grey46,gray47,grey47,gray48,grey48,gray49,grey49,gray50,grey50,gray51,grey51,gray52,grey52,gray53,grey53,gray54,grey54,gray55,grey55,gray56,grey56,gray57,grey57,gray58,grey58,gray59,grey59,gray60,grey60,gray61,grey61,gray62,grey62,gray63,grey63,gray64,grey64,gray65,grey65,gray66,grey66,gray67,grey67,gray68,grey68,gray69,grey69,gray70,grey70,gray71,grey71,gray72,grey72,gray73,grey73,gray74,grey74,gray75,grey75,gray76,grey76,gray77,grey77,gray78,grey78,gray79,grey79,gray80,grey80,gray81,grey81,gray82,grey82,gray83,grey83,gray84,grey84,gray85,grey85,gray86,grey86,gray87,grey87,gray88,grey88,gray89,grey89,gray90,grey90,gray91,grey91,gray92,grey92,gray93,grey93,gray94,grey94,gray95,grey95,gray96,grey96,gray97,grey97,gray98,grey98,gray99,grey99,gray100,grey100,dark grey,DarkGrey,dark gray,DarkGray,dark blue,DarkBlue,dark cyan,DarkCyan,dark magenta,DarkMagenta,dark red,DarkRed,light green,LightGreen]
  tolist():[alpha]
complex
  polar(abs:number, arg:number):static:map:[deg] {block?}
  roundoff(threshold:number => 1e-10)
datetime
  Friday:number = 5
  Monday:number = 1
  Saturday:number = 6
  Sunday:number = 0
  Thursday:number = 4
  Tuesday:number = 2
  Wednesday:number = 3
  clrtzoff():reduce
  format(format => `w3c)
  isleap(year:number):static:map
  monthdays(year:number, month:number):static:map
  now():static:[utc]
  parse(str:string):static:map
  settzoff(mins:number):reduce
  time(hour:number => 0, minute:number => 0, sec:number => 0, usec:number => 0):static:map
  today():static:[utc]
  utc()
  weekday(year:number, month:number, day:number):static:map
declaration
dict
  clear()
  erase(key):map
  get(key, default?:nomap):map:[raise]
  gets(key, default?):map:[raise]
  haskey(key):map
  items() {block?}
  keys() {block?}
  len()
  set(key, value:nomap):map:reduce
  setdefault(key, value:nomap):map:reduce
  sets(key, value):map:void
  store(elems?):reduce:[default] {block?}
  values() {block?}
directory
expr
  eval(env?:environment)
  genscript(dst?:stream:w, style?:symbol)
  isassign()
  isbinary()
  isbinaryop()
  isblock()
  iscaller()
  iscompound()
  iscontainer()
  isindexer()
  isiterer()
  islister()
  ismember()
  isquote()
  isroot()
  isstring()
  issymbol()
  isunary()
  isunaryop()
  isvalue()
  parse(script:string):static:map {block?}
  read(src:stream:r):static:map {block?}
  tofunction(`args*)
  unquote()
fraction
  reduce()
function
  addhelp(lang:symbol, format:string, help:string):map:void
  diff(var?:symbol):reduce
  gethelp(lang?:symbol):map
  help(lang?:symbol):map:void
help
image
  allocbuff(width:number, height:number, color?:color):void
  blur(radius:number, sigma?:number)
  clear():void
  crop(x:number, y:number, width?:number, height?:number):map
  delpalette():reduce
  each(x?:number, y?:number, width?:number, height?:number, scandir?:symbol) {block?}
  extract(x:number, y:number, width:number, height:number, element:symbol, dst):void
  fill(color:color):void
  fillrect(x:number, y:number, width:number, height:number, color:color):map:void
  flip(orient:symbol):map
  getpixel(x:number, y:number):map
  grayscale()
  paste(x:number, y:number, src:image, width?:number, height?:number, xoffset:number => 0, yoffset:number => 0, alpha:number => 255):map:reduce
  putpixel(x:number, y:number, color:color):map:void
  read(stream:stream:r, imagetype?:string):map:reduce
  reducecolor(palette?:palette)
  replacecolor(colorOrg:color, color:color, tolerance?:number):void
  resize(width?:number, height?:number):map:[box]
  rotate(rotate:number, background?:color):map
  setalpha(alpha:number, color?:color, tolerance?:number):reduce
  size()
  store(x:number, y:number, width:number, height:number, element:symbol, src):void
  thumbnail(width?:number, height?:number):map:[box]
  write(stream:stream:w, imagetype?:string):map:reduce
iterator
  after(criteria) {block?}
  align(n:number, value?) {block?}
  and()
  average()
  before(criteria) {block?}
  contains(value)
  count(criteria?)
  cycle(n?:number) {block?}
  delay(delay:number) {block?}
  each() {block?}
  filter(criteria?) {block?}
  find(criteria?):[index]
  fold(n:number):[iteritem] {block?}
  format(format:string) {block?}
  head(n:number):map {block?}
  isinfinite()
  join(sep?:string)
  joinb()
  len()
  map(func:function) {block?}
  max():[index,indices,last_index]
  min():[index,indices,last_index]
  next()
  nilto(replace)
  offset(n:number) {block?}
  or()
  pack(format:string) {block?}
  pingpong(n?:number):[sticky,sticky_l,sticky_r] {block?}
  print(stream?:stream:w)
  printf(format:string, stream?:stream:w)
  println(stream?:stream:w)
  rank(directive?) {block?}
  reduce(accum) {block}
  repeater()
  replace(value, replace)
  reverse() {block?}
  roundoff(threshold:number => 1e-10) {block?}
  runlength() {block?}
  since(criteria) {block?}
  skip(n:number) {block?}
  skipnil() {block?}
  sort(directive?, keys[]?):[stable] {block?}
  stddev()
  sum()
  tail(n:number) {block?}
  until(criteria) {block?}
  variance()
  while (criteria) {block?}
list
  add(elem+):reduce
  after(criteria) {block?}
  align(n:number, value?):map {block?}
  and()
  append(elem+):reduce
  average()
  before(criteria) {block?}
  clear():reduce
  combination(n:number) {block?}
  contains(value)
  count(criteria?)
  cycle(n?:number) {block?}
  each() {block?}
  erase(idx*:number):reduce
  filter(criteria?) {block?}
  find(criteria?):[index]
  first()
  flat()
  fold(n:number, nstep?:number):[iteritem] {block?}
  format(format:string):map
  get(index:number):map:flat
  head(n:number):map {block?}
  insert(idx:number, elem+):reduce
  isempty()
  join(sep:string => '')
  last()
  len()
  map(func:function) {block?}
  max():[index,indices,last_index]
  min():[index,indices,last_index]
  nilto(replace)
  offset(n:number):map {block?}
  or()
  pack(format:string)
  permutation(n?:number) {block?}
  pingpong(n?:number):[sticky,sticky_l,sticky_r] {block?}
  printf(format:string, stream?:stream:w):void
  rank(directive?):[stable]
  reduce(accum) {block}
  replace(value, replace)
  reverse() {block?}
  roundoff(threshold:number => 1e-10) {block?}
  runlength() {block?}
  shift():[raise]
  shuffle():reduce
  since(criteria) {block?}
  skip(n:number):map {block?}
  skipnil() {block?}
  sort(directive?, keys[]?):[stable] {block?}
  stddev()
  sum()
  tail(n:number):map {block?}
  until(criteria) {block?}
  variance()
  while (criteria) {block?}
matrix
  col(col:number):map
  colsize()
  each():[transpose]
  eachcol()
  eachrow()
  identity(n:number):static:map {block?}
  invert()
  issquare()
  rotation(angle:number, tx?:number, ty?:number):static:map:[deg] {block?}
  rotation_x(angle:number, tx?:number, ty?:number, tz?:number):static:map:[deg] {block?}
  rotation_y(angle:number, tx?:number, ty?:number, tz?:number):static:map:[deg] {block?}
  rotation_z(angle:number, tx?:number, ty?:number, tz?:number):static:map:[deg] {block?}
  roundoff(threshold:number => 1e-10)
  row(row:number):map
  rowsize()
  set(value)
  setcol(col:number, value)
  setrow(row:number, value)
  submat(row:number, col:number, nrows:number, ncols:number):map
  tolist():[flat,transpose]
  transpose()
nil
number
  roundoff(threshold:number => 1e-10)
object
  __call__(symbol:symbol, args?, dict%):static:map {block?}
  __iter__()
  clone()
  getprop!(symbol:symbol, default?:nomap):static:map
  isinstance(type+:expr):map
  isnil():map
  istype(type+:expr):map
  setprop!(symbol:symbol, value):static:map
  tonumber():[nil,raise,strict,zero]
  tostring()
operator
  assign(type_l:expr, type_r?:expr):map:void {block}
  entries(type?:symbol)
palette
  each() {block?}
  nearest(color:color):map:[index]
  shrink():reduce:[align]
  updateby(image_or_palette):reduce:[align,shrink]
pointer
  forward(distance:number):reduce
  pack(format:string, value+):reduce:[stay]
  reset()
  unpack(format:string, values*:number):[nil,stay]
  unpacks(format:string, values*:number)
quote
semaphore
  release()
  session() {block}
  wait()
stream
  addcr(flag?:boolean):reduce
  base64reader()
  base64writer(linelen:number:nil => 76)
  close()
  compare(stream:stream:r):map
  copyfrom(stream:stream:r, bytesunit:number => 65536):map:reduce:[finalize] {block?}
  copyto(stream:stream:w, bytesunit:number => 65536):map:reduce:[finalize] {block?}
  delcr(flag?:boolean):reduce
  deserialize()
  flush():void
  peek(len?:number)
  print(values*):map:void
  printf(format:string, values*):map:void
  println(values*):map:void
  read(len?:number)
  readchar()
  readline():[chop]
  readlines(nlines?:number):[chop] {block?}
  readtext()
  seek(offset:number, origin?:symbol):reduce
  serialize(value):void
  setcodec(codec:codec:nil):reduce
  tell()
  write(buff:binary, len?:number):reduce
string
  align(len:number, padding:string => ' '):map:[center,left,right]
  binary()
  capitalize()
  chop(suffix*:string):[eol,icase]
  decodeuri()
  each():map:[utf32,utf8] {block?}
  eachline(nlines?:number):[chop] {block?}
  encode(codec:codec)
  encodeuri()
  endswith(suffix:string, endpos?:number):map:[icase,rest]
  escapehtml():[quote]
  find(sub:string, pos:number => 0):map:[icase,rev]
  fold(len:number, step?:number):[neat] {block?}
  format(values*):map
  isempty()
  left(len?:number):map
  len()
  lower()
  mid(pos:number => 0, len?:number):map
  print(stream?:stream:w):void
  println(stream?:stream:w):void
  reader() {block?}
  replace(sub:string, replace:string, count?:number):map:[icase] {block?}
  right(len?:number):map
  split(sep?:string, count?:number):[icase] {block?}
  startswith(prefix:string, pos:number => 0):map:[icase,rest]
  strip():[both,left,right]
  template():[lasteol,noindent] {block?}
  unescapehtml()
  upper()
  zentohan()
struct
  tolist()
symbol
  eval(env?:environment)
template
  _R_block(symbol:symbol):void
  _R_call(symbol:symbol, args*):void
  _R_def(symbol:symbol, `args*):void
  _R_embed(template:template):void
  _R_extends(super):void:[lasteol,noindent]
  _R_super(symbol:symbol):void
  block(symbol:symbol):void {block}
  call(symbol:symbol, args*):void
  def(symbol:symbol, `args*):void {block}
  embed(template):void
  extends(super:template):void
  parse(str:string):void:[lasteol,noindent]
  read(src:stream:r):void:[lasteol,noindent]
  render(dst?:stream:w)
  super(super):void
timedelta
undefined
uri

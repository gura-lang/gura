%(elems?):[icase] {block?}
&(`args*) {block}
-:nil = nil
@(func?:function) {block?}
@@() {block}
@char() {block}
@double() {block}
@float() {block}
@int() {block}
@long() {block}
@rem:nil = nil
@short() {block}
@uchar() {block}
@uint() {block}
@ulong() {block}
@ushort() {block}
__name__:string = __main__
argument:class = <class:argument>
array@char(arg, init?:number) {block?}
array@double(arg, init?:number) {block?}
array@float(arg, init?:number) {block?}
array@int(arg, init?:number) {block?}
array@long(arg, init?:number) {block?}
array@short(arg, init?:number) {block?}
array@uchar(arg, init?:number) {block?}
array@uint(arg, init?:number) {block?}
array@ulong(arg, init?:number) {block?}
array@ushort(arg, init?:number) {block?}
audio(args+):map {block?}
base64:module = <module:base64:<integrated>>
  __name__:string = base64
  __source__:string = <integrated>
  __symbol__:symbol = base64
  base64.decode(stream:stream:r) {block?}
  base64.encode(stream:stream:r, linelen:number:nil => 76) {block?}
  base64.reader(stream:stream:r) {block?}
  base64.writer(stream:stream:w, linelen:number:nil => 76) {block?}
binary(buff*) {block?}
boolean:class = <class:boolean>
case(`cond) {block}
catch(errors*:error):leader:trailer {block}
choose(index:number, values+):map
chr(code:number):map
class(superclass?:function) {block?}
classref(type+:expr):map {block?}
codec(encoding:string) {block?}
codecs:module = <module:codecs:<integrated>>
  __name__:string = codecs
  __source__:string = <integrated>
  __symbol__:symbol = codecs
  basic:module = <module:basic:<integrated>>
    __name__:string = basic
    __source__:string = <integrated>
    __symbol__:symbol = basic
  chinese:module = <module:chinese:<integrated>>
    __name__:string = chinese
    __source__:string = <integrated>
    __symbol__:symbol = chinese
  codecs.dir()
  iso8859:module = <module:iso8859:<integrated>>
    __name__:string = iso8859
    __source__:string = <integrated>
    __symbol__:symbol = iso8859
  japanese:module = <module:japanese:<integrated>>
    __name__:string = japanese
    __source__:string = <integrated>
    __symbol__:symbol = japanese
  korean:module = <module:korean:<integrated>>
    __name__:string = korean
    __source__:string = <integrated>
    __symbol__:symbol = korean
color(args+):map {block?}
complex(real:number, imag?:number):map {block?}
cond(flag:boolean, value1:nomap, value2?:nomap):map
conds(flag:boolean, value1, value2?):map
consts(value, num?:number) {block?}
cross (`expr+) {block}
datetime(year:number, month:number, day:number, hour:number => 0, min:number => 0, sec:number => 0, usec:number => 0, minsoff?:number):map {block?}
declaration:class = <class:declaration>
default() {block}
dict(elems?):[icase] {block?}
dim(n+:number) {block?}
dir(obj?):[noesc]
directory(pathname:string):map {block?}
dirtype(obj?):[noesc]
else():trailer {block}
elsif (`cond):leader:trailer {block}
end(dummy*):symbol_func:trailer:end_marker:void
environment:class = <class:environment>
error:class = <class:error>
expr(src:stream:r):map {block?}
false:boolean = false
finally():trailer:finalizer {block}
for (`expr+) {block}
format(format:string, values*):map
formatter:class = <class:formatter>
fs:module = <module:fs:<integrated>>
  __name__:string = fs
  __source__:string = <integrated>
  __symbol__:symbol = fs
  fs.chdir(pathname:string) {block?}
  fs.chmod(mode, pathname:string):map:void:[follow_link]
  fs.copy(src:string, dst:string):map:void:[overwrite]
  fs.cpdir(src:string, dst:string):map:void:[tree]
  fs.getcwd()
  fs.mkdir(pathname:string):map:void:[tree]
  fs.remove(pathname:string):map:void
  fs.rename(src:string, dst:string):map:void
  fs.rmdir(pathname:string):map:void:[tree]
function(`args*) {block}
help:class = <class:help>
hex(num:number, digits?:number):map:[upper]
if (`cond):leader {block}
image(args+):map {block?}
import(`module, `alias?):[binary,mixin_type,overwrite] {block?}
int(value):map
interval(begin:number, end:number, samples:number):map:[open,open_l,open_r] {block?}
isbinary(value)
isboolean(value)
isclass(value)
iscomplex(value)
isdatetime(value)
isdefined(`identifier)
isdict(value)
isenvironment(value)
iserror(value)
isexpr(value)
isfunction(value)
isinstance(value, type+:expr):map
isiterator(value)
islist(value)
ismatrix(value)
ismodule(value)
isnil(value)
isnumber(value)
isrational(value)
issemaphore(value)
isstring(value)
issymbol(value)
istimedelta(value)
istype(value, type+:expr):map
isuri(value)
iterator(value+) {block?}
list(value+)
local(`syms+)
locals(module?:module) {block?}
math:module = <module:math:<integrated>>
  __name__:string = math
  __source__:string = <integrated>
  __symbol__:symbol = math
  math.abs(num):map
  math.acos(num):map:[deg]
  math.arg(num):map:[deg]
  math.asin(num):map:[deg]
  math.atan(num):map:[deg]
  math.atan2(num1, num2):map:[deg]
  math.bezier(nums[]+:number)
  math.ceil(num):map
  math.conj(num):map
  math.cos(num):map:[deg]
  math.cosh(num):map
  math.covariance(a:iterator, b:iterator)
  math.cross_product(a[], b[])
  math.diff(expr:expr, var:symbol):map {block?}
  math.dot_product(a[], b[])
  e:number = 2.71828
  math.exp(num):map
  math.fft(seq[])
  math.floor(num):map
  math.gcd(a:number, b+:number):map
  math.hypot(x, y):map
  math.imag(num):map
  math.integral()
  math.lcm(a:number, b+:number):map
  math.least_square(x:iterator, y:iterator, dim:number => 1, var:symbol => `x)
  math.log(num):map
  math.log10(num):map
  math.norm(num):map
  math.optimize(expr:expr):map {block?}
  pi:number = 3.14159
  math.real(num):map
  math.sin(num):map:[deg]
  math.sinh(num):map
  math.sqrt(num):map
  math.tan(num):map:[deg]
  math.tanh(num):map
matrix(nrows:number, ncols:number, value?) {block?}
max(values+):map
min(values+):map
module() {block}
monitor() {block?}
nil:nil = nil
number:class = <class:number>
object() {block?}
open(pathname:string, mode?:string, codec?:codec):map {block?}
operator(symbol:symbol):map {block?}
ord(str:string):map
os:module = <module:os:<integrated>>
  __name__:string = os
  __source__:string = <integrated>
  __symbol__:symbol = os
  os.clock()
  os.exec(pathname:string, args*:string):map:[fork]
  os.fromnative(buff:binary):map
  os.getenv(name:string, default?:string):map
  os.putenv(name:string, value:string):void
  os.redirect(stdin:stream:nil:r, stdout:stream:nil:w, stderr?:stream:w) {block?}
  os.sleep(secs:number)
  os.symlink(src:string, tgt:string):map:void
  os.tonative(str:string):map
  os.unsetenv(name:string):void
outers() {block?}
palette(type) {block?}
path:module = <module:path:<integrated>>
  __name__:string = path
  __source__:string = <integrated>
  __symbol__:symbol = path
  path.absname(name:string):map:[uri]
  path.basename(pathname:string):map
  path.bottom(pathname:string):map
  path.cutbottom(pathname:string):map
  path.dir(directory?:directory, pattern*:string):map:flat:[dir,file,stat] {block?}
  path.dirname(pathname:string):map
  path.exists(pathname:string):map
  path.extname(pathname:string):map
  path.filename(pathname:string):map
  path.glob(pattern:string):map:flat:[dir,file,stat] {block?}
  path.join(paths+:string):map:[uri]
  path.match(pattern:string, name:string):map
  path.regulate(name:string):map:[uri]
  path.split(pathname:string):map:[bottom]
  path.splitext(pathname:string):map
  path.stat(directory:directory):map
  path.walk(directory?:directory, maxdepth?:number, pattern*:string):map:flat:[dir,file,stat] {block?}
pointer:class = <class:pointer>
print(values*):map:void
printf(format:string, values*):map:void
println(values*):map:void
public():void {block}
raise(error:error, msg:string => 'error', value?)
rand(range?:number) {block?}
rands(range?:number, num?:number) {block?}
randseed(seed:number):void
range(num:number, num_end?:number, step?:number):map {block?}
rational(numer:number, denom?:number):map {block?}
readlines(stream?:stream:r):[chop] {block?}
repeat (n?:number) {block}
root:environment = <environment:root>
scope(target?) {block}
semaphore()
set(iter+:iterator):[and,or,xor]
stream(pathname:string, mode?:string, codec?:codec):map {block?}
string:class = <class:string>
struct(`args+):nonamed:[loose] {block?}
suffixmgr(type:symbol) {block?}
super(obj):map {block?}
switch() {block}
symbol:class = <class:symbol>
sys:module = <module:sys:<integrated>>
  __name__:string = sys
  __source__:string = <integrated>
  __symbol__:symbol = sys
  sys.echo(flag:boolean)
  sys.exit(status?:number)
  ps1:string = >>> 
  ps2:string = ... 
  sys.required_version(major:number, minor:number, patch:number)
template(src?:stream:r):map:[lasteol,noindent] {block?}
timedelta(days:number => 0, secs:number => 0, usecs:number => 0):map {block?}
tonumber(value):map:[nil,raise,strict,zero]
tostring(value):map
tosymbol(str:string):map
true:boolean = true
try():leader {block}
typename(`value)
undef(`identifier+):[raise]
uri(str?:string):map {block?}
while (`cond) {block}
xlist(value+)
xset(iter+:iterator):[and,or,xor]
any
argument
  argument#finalize_trailer():void
  argument#isset(symbol:symbol)
  argument#quit_trailer():void
array@char
  array@char#dump(stream?:stream):void:[upper]
  array@char#each() {block?}
  array@char#fill(value:number):map:void
  array@char#head(n:number):map {block?}
  array@char#offset(n:number):map {block?}
  array@char#paste(offset:number, src:array@char):map
  array@char#tail(n:number):map {block?}
array@double
  array@double#dump(stream?:stream):void:[upper]
  array@double#each() {block?}
  array@double#fill(value:number):map:void
  array@double#head(n:number):map {block?}
  array@double#offset(n:number):map {block?}
  array@double#paste(offset:number, src:array@double):map
  array@double#tail(n:number):map {block?}
array@float
  array@float#dump(stream?:stream):void:[upper]
  array@float#each() {block?}
  array@float#fill(value:number):map:void
  array@float#head(n:number):map {block?}
  array@float#offset(n:number):map {block?}
  array@float#paste(offset:number, src:array@float):map
  array@float#tail(n:number):map {block?}
array@int
  array@int#dump(stream?:stream):void:[upper]
  array@int#each() {block?}
  array@int#fill(value:number):map:void
  array@int#head(n:number):map {block?}
  array@int#offset(n:number):map {block?}
  array@int#paste(offset:number, src:array@int):map
  array@int#tail(n:number):map {block?}
array@long
  array@long#dump(stream?:stream):void:[upper]
  array@long#each() {block?}
  array@long#fill(value:number):map:void
  array@long#head(n:number):map {block?}
  array@long#offset(n:number):map {block?}
  array@long#paste(offset:number, src:array@long):map
  array@long#tail(n:number):map {block?}
array@short
  array@short#dump(stream?:stream):void:[upper]
  array@short#each() {block?}
  array@short#fill(value:number):map:void
  array@short#head(n:number):map {block?}
  array@short#offset(n:number):map {block?}
  array@short#paste(offset:number, src:array@short):map
  array@short#tail(n:number):map {block?}
array@uchar
  array@uchar#dump(stream?:stream):void:[upper]
  array@uchar#each() {block?}
  array@uchar#fill(value:number):map:void
  array@uchar#head(n:number):map {block?}
  array@uchar#offset(n:number):map {block?}
  array@uchar#paste(offset:number, src:array@uchar):map
  array@uchar#tail(n:number):map {block?}
array@uint
  array@uint#dump(stream?:stream):void:[upper]
  array@uint#each() {block?}
  array@uint#fill(value:number):map:void
  array@uint#head(n:number):map {block?}
  array@uint#offset(n:number):map {block?}
  array@uint#paste(offset:number, src:array@uint):map
  array@uint#tail(n:number):map {block?}
array@ulong
  array@ulong#dump(stream?:stream):void:[upper]
  array@ulong#each() {block?}
  array@ulong#fill(value:number):map:void
  array@ulong#head(n:number):map {block?}
  array@ulong#offset(n:number):map {block?}
  array@ulong#paste(offset:number, src:array@ulong):map
  array@ulong#tail(n:number):map {block?}
array@ushort
  array@ushort#dump(stream?:stream):void:[upper]
  array@ushort#each() {block?}
  array@ushort#fill(value:number):map:void
  array@ushort#head(n:number):map {block?}
  array@ushort#offset(n:number):map {block?}
  array@ushort#paste(offset:number, src:array@ushort):map
  array@ushort#tail(n:number):map {block?}
audio
  audio#each(channel:number, offset?:number):map {block?}
  audio#get(channel:number, offset:number):map
  audio#put(channel:number, offset:number, data:number):map:reduce
  audio#sinewave(channel:number, freq:number, len:number, amplitude?:number):map:reduce
  audio#store(channel:number, offset:number, data:iterator):reduce
binary
  binary#add(buff+:binary):map:reduce
  binary.alloc(bytes:number, data?:number):static:map {block?}
  binary.decode(codec:codec)
  binary#dump(stream?:stream:w):void:[upper]
  binary#each() {block?}
  binary#encodeuri()
  binary#hex():[carray,cstr,upper]
  binary#len()
  binary.pack(format:string, value*):static:map {block?}
  binary#pointer(offset:number => 0) {block?}
  binary#reader() {block?}
  binary#store(offset:number, buff+:binary):map:reduce
  binary#unpack(format:string, values*:number):[nil]
  binary#unpacks(format:string, values*:number) {block?}
  binary#writer() {block?}
boolean
codec
  codec#addcr(flag?:boolean):reduce
  bom@utf16be:binary = <binary:R:2byte:'\xfe\xff'>
  bom@utf16le:binary = <binary:R:2byte:'\xff\xfe'>
  bom@utf32be:binary = <binary:R:4byte:'\x00\x00\xfe\xff'>
  bom@utf32le:binary = <binary:R:4byte:'\xff\xfe\x00\x00'>
  bom@utf8:binary = <binary:R:3byte:'\xef\xbb\xbf'>
  codec#decode(buff:binary):map
  codec#delcr(flag?:boolean):reduce
  codec#encode(str:string):map
color
  aqua:color = <color:#00ffff,a:ff>
  black:color = <color:#000000,a:ff>
  blue:color = <color:#0000ff,a:ff>
  fuchsia:color = <color:#ff00ff,a:ff>
  color#getgray()
  gray:color = <color:#808080,a:ff>
  green:color = <color:#008000,a:ff>
  color#html()
  lime:color = <color:#00ff00,a:ff>
  maroon:color = <color:#800000,a:ff>
  names = [black,maroon,green,olive,navy,purple,teal,gray,silver,red,lime,yellow,blue,fuchsia,aqua,white,snow,ghost white,GhostWhite,white smoke,WhiteSmoke,gainsboro,floral white,FloralWhite,old lace,OldLace,linen,antique white,AntiqueWhite,papaya whip,PapayaWhip,blanched almond,BlanchedAlmond,bisque,peach puff,PeachPuff,navajo white,NavajoWhite,moccasin,cornsilk,ivory,lemon chiffon,LemonChiffon,seashell,honeydew,mint cream,MintCream,azure,alice blue,AliceBlue,lavender,lavender blush,LavenderBlush,misty rose,MistyRose,dark slate gray,DarkSlateGray,dark slate grey,DarkSlateGrey,dim gray,DimGray,dim grey,DimGrey,slate gray,SlateGray,slate grey,SlateGrey,light slate gray,LightSlateGray,light slate grey,LightSlateGrey,grayX,grey,light grey,LightGrey,light gray,LightGray,midnight blue,MidnightBlue,navy blue,NavyBlue,cornflower blue,CornflowerBlue,dark slate blue,DarkSlateBlue,slate blue,SlateBlue,medium slate blue,MediumSlateBlue,light slate blue,LightSlateBlue,medium blue,MediumBlue,royal blue,RoyalBlue,dodger blue,DodgerBlue,deep sky blue,DeepSkyBlue,sky blue,SkyBlue,light sky blue,LightSkyBlue,steel blue,SteelBlue,light steel blue,LightSteelBlue,light blue,LightBlue,powder blue,PowderBlue,pale turquoise,PaleTurquoise,dark turquoise,DarkTurquoise,medium turquoise,MediumTurquoise,turquoise,cyan,light cyan,LightCyan,cadet blue,CadetBlue,medium aquamarine,MediumAquamarine,aquamarine,dark green,DarkGreen,dark olive green,DarkOliveGreen,dark sea green,DarkSeaGreen,sea green,SeaGreen,medium sea green,MediumSeaGreen,light sea green,LightSeaGreen,pale green,PaleGreen,spring green,SpringGreen,lawn green,LawnGreen,greenX,chartreuse,medium spring green,MediumSpringGreen,green yellow,GreenYellow,lime green,LimeGreen,yellow green,YellowGreen,forest green,ForestGreen,olive drab,OliveDrab,dark khaki,DarkKhaki,khaki,pale goldenrod,PaleGoldenrod,light goldenrod yellow,LightGoldenrodYellow,light yellow,LightYellow,gold,light goldenrod,LightGoldenrod,goldenrod,dark goldenrod,DarkGoldenrod,rosy brown,RosyBrown,indian red,IndianRed,saddle brown,SaddleBrown,sienna,peru,burlywood,beige,wheat,sandy brown,SandyBrown,tan,chocolate,firebrick,brown,dark salmon,DarkSalmon,salmon,light salmon,LightSalmon,orange,dark orange,DarkOrange,coral,light coral,LightCoral,tomato,orange red,OrangeRed,hot pink,HotPink,deep pink,DeepPink,pink,light pink,LightPink,pale violet red,PaleVioletRed,maroonX,medium violet red,MediumVioletRed,violet red,VioletRed,magenta,violet,plum,orchid,medium orchid,MediumOrchid,dark orchid,DarkOrchid,dark violet,DarkViolet,blue violet,BlueViolet,purpleX,medium purple,MediumPurple,thistle,snow1,snow2,snow3,snow4,seashell1,seashell2,seashell3,seashell4,AntiqueWhite1,AntiqueWhite2,AntiqueWhite3,AntiqueWhite4,bisque1,bisque2,bisque3,bisque4,PeachPuff1,PeachPuff2,PeachPuff3,PeachPuff4,NavajoWhite1,NavajoWhite2,NavajoWhite3,NavajoWhite4,LemonChiffon1,LemonChiffon2,LemonChiffon3,LemonChiffon4,cornsilk1,cornsilk2,cornsilk3,cornsilk4,ivory1,ivory2,ivory3,ivory4,honeydew1,honeydew2,honeydew3,honeydew4,LavenderBlush1,LavenderBlush2,LavenderBlush3,LavenderBlush4,MistyRose1,MistyRose2,MistyRose3,MistyRose4,azure1,azure2,azure3,azure4,SlateBlue1,SlateBlue2,SlateBlue3,SlateBlue4,RoyalBlue1,RoyalBlue2,RoyalBlue3,RoyalBlue4,blue1,blue2,blue3,blue4,DodgerBlue1,DodgerBlue2,DodgerBlue3,DodgerBlue4,SteelBlue1,SteelBlue2,SteelBlue3,SteelBlue4,DeepSkyBlue1,DeepSkyBlue2,DeepSkyBlue3,DeepSkyBlue4,SkyBlue1,SkyBlue2,SkyBlue3,SkyBlue4,LightSkyBlue1,LightSkyBlue2,LightSkyBlue3,LightSkyBlue4,SlateGray1,SlateGray2,SlateGray3,SlateGray4,LightSteelBlue1,LightSteelBlue2,LightSteelBlue3,LightSteelBlue4,LightBlue1,LightBlue2,LightBlue3,LightBlue4,LightCyan1,LightCyan2,LightCyan3,LightCyan4,PaleTurquoise1,PaleTurquoise2,PaleTurquoise3,PaleTurquoise4,CadetBlue1,CadetBlue2,CadetBlue3,CadetBlue4,turquoise1,turquoise2,turquoise3,turquoise4,cyan1,cyan2,cyan3,cyan4,DarkSlateGray1,DarkSlateGray2,DarkSlateGray3,DarkSlateGray4,aquamarine1,aquamarine2,aquamarine3,aquamarine4,DarkSeaGreen1,DarkSeaGreen2,DarkSeaGreen3,DarkSeaGreen4,SeaGreen1,SeaGreen2,SeaGreen3,SeaGreen4,PaleGreen1,PaleGreen2,PaleGreen3,PaleGreen4,SpringGreen1,SpringGreen2,SpringGreen3,SpringGreen4,green1,green2,green3,green4,chartreuse1,chartreuse2,chartreuse3,chartreuse4,OliveDrab1,OliveDrab2,OliveDrab3,OliveDrab4,DarkOliveGreen1,DarkOliveGreen2,DarkOliveGreen3,DarkOliveGreen4,khaki1,khaki2,khaki3,khaki4,LightGoldenrod1,LightGoldenrod2,LightGoldenrod3,LightGoldenrod4,LightYellow1,LightYellow2,LightYellow3,LightYellow4,yellow1,yellow2,yellow3,yellow4,gold1,gold2,gold3,gold4,goldenrod1,goldenrod2,goldenrod3,goldenrod4,DarkGoldenrod1,DarkGoldenrod2,DarkGoldenrod3,DarkGoldenrod4,RosyBrown1,RosyBrown2,RosyBrown3,RosyBrown4,IndianRed1,IndianRed2,IndianRed3,IndianRed4,sienna1,sienna2,sienna3,sienna4,burlywood1,burlywood2,burlywood3,burlywood4,wheat1,wheat2,wheat3,wheat4,tan1,tan2,tan3,tan4,chocolate1,chocolate2,chocolate3,chocolate4,firebrick1,firebrick2,firebrick3,firebrick4,brown1,brown2,brown3,brown4,salmon1,salmon2,salmon3,salmon4,LightSalmon1,LightSalmon2,LightSalmon3,LightSalmon4,orange1,orange2,orange3,orange4,DarkOrange1,DarkOrange2,DarkOrange3,DarkOrange4,coral1,coral2,coral3,coral4,tomato1,tomato2,tomato3,tomato4,OrangeRed1,OrangeRed2,OrangeRed3,OrangeRed4,red1,red2,red3,red4,DeepPink1,DeepPink2,DeepPink3,DeepPink4,HotPink1,HotPink2,HotPink3,HotPink4,pink1,pink2,pink3,pink4,LightPink1,LightPink2,LightPink3,LightPink4,PaleVioletRed1,PaleVioletRed2,PaleVioletRed3,PaleVioletRed4,maroon1,maroon2,maroon3,maroon4,VioletRed1,VioletRed2,VioletRed3,VioletRed4,magenta1,magenta2,magenta3,magenta4,orchid1,orchid2,orchid3,orchid4,plum1,plum2,plum3,plum4,MediumOrchid1,MediumOrchid2,MediumOrchid3,MediumOrchid4,DarkOrchid1,DarkOrchid2,DarkOrchid3,DarkOrchid4,purple1,purple2,purple3,purple4,MediumPurple1,MediumPurple2,MediumPurple3,MediumPurple4,thistle1,thistle2,thistle3,thistle4,gray0,grey0,gray1,grey1,gray2,grey2,gray3,grey3,gray4,grey4,gray5,grey5,gray6,grey6,gray7,grey7,gray8,grey8,gray9,grey9,gray10,grey10,gray11,grey11,gray12,grey12,gray13,grey13,gray14,grey14,gray15,grey15,gray16,grey16,gray17,grey17,gray18,grey18,gray19,grey19,gray20,grey20,gray21,grey21,gray22,grey22,gray23,grey23,gray24,grey24,gray25,grey25,gray26,grey26,gray27,grey27,gray28,grey28,gray29,grey29,gray30,grey30,gray31,grey31,gray32,grey32,gray33,grey33,gray34,grey34,gray35,grey35,gray36,grey36,gray37,grey37,gray38,grey38,gray39,grey39,gray40,grey40,gray41,grey41,gray42,grey42,gray43,grey43,gray44,grey44,gray45,grey45,gray46,grey46,gray47,grey47,gray48,grey48,gray49,grey49,gray50,grey50,gray51,grey51,gray52,grey52,gray53,grey53,gray54,grey54,gray55,grey55,gray56,grey56,gray57,grey57,gray58,grey58,gray59,grey59,gray60,grey60,gray61,grey61,gray62,grey62,gray63,grey63,gray64,grey64,gray65,grey65,gray66,grey66,gray67,grey67,gray68,grey68,gray69,grey69,gray70,grey70,gray71,grey71,gray72,grey72,gray73,grey73,gray74,grey74,gray75,grey75,gray76,grey76,gray77,grey77,gray78,grey78,gray79,grey79,gray80,grey80,gray81,grey81,gray82,grey82,gray83,grey83,gray84,grey84,gray85,grey85,gray86,grey86,gray87,grey87,gray88,grey88,gray89,grey89,gray90,grey90,gray91,grey91,gray92,grey92,gray93,grey93,gray94,grey94,gray95,grey95,gray96,grey96,gray97,grey97,gray98,grey98,gray99,grey99,gray100,grey100,dark grey,DarkGrey,dark gray,DarkGray,dark blue,DarkBlue,dark cyan,DarkCyan,dark magenta,DarkMagenta,dark red,DarkRed,light green,LightGreen]
  navy:color = <color:#000080,a:ff>
  olive:color = <color:#808000,a:ff>
  purple:color = <color:#800080,a:ff>
  red:color = <color:#ff0000,a:ff>
  silver:color = <color:#c0c0c0,a:ff>
  teal:color = <color:#008080,a:ff>
  color#tolist():[alpha]
  white:color = <color:#ffffff,a:ff>
  yellow:color = <color:#ffff00,a:ff>
  zero:color = <color:#000000,a:00>
complex
  complex.polar(abs:number, arg:number):static:map:[deg] {block?}
  complex.roundoff(threshold:number => 1e-10) {block?}
datetime
  Friday:number = 5
  Monday:number = 1
  Saturday:number = 6
  Sunday:number = 0
  Thursday:number = 4
  Tuesday:number = 2
  Wednesday:number = 3
  datetime#clrtzoff():reduce
  datetime#format(format => `w3c)
  datetime.isleap(year:number):static:map
  datetime.monthdays(year:number, month:number):static:map {block?}
  datetime.now():static:[utc] {block?}
  datetime.parse(str:string):static:map {block?}
  datetime#settzoff(mins:number):reduce
  datetime.time(hour:number => 0, minute:number => 0, sec:number => 0, usec:number => 0):static:map {block?}
  datetime.today():static:[utc] {block?}
  datetime#utc()
  datetime.weekday(year:number, month:number, day:number):static:map
declaration
  declaration#istype(type+:expr):map
dict
  dict#append(elems?):reduce:[overwrite,strict,timid] {block?}
  dict#clear()
  dict#erase(key):map
  dict#get(key, default?):map:[raise]
  dict#haskey(key):map
  dict#items() {block?}
  dict#keys() {block?}
  dict#len()
  dict#put(key, value):map:reduce:[overwrite,strict,timid]
  dict#values() {block?}
directory
expr
  expr#eval(env?:environment)
  expr#isassign()
  expr#isbinary()
  expr#isbinaryop()
  expr#isblock()
  expr#iscaller()
  expr#iscollector()
  expr#iscompound()
  expr#isidentifier()
  expr#isindexer()
  expr#isiterer()
  expr#islister()
  expr#ismember()
  expr#isquote()
  expr#isroot()
  expr#issuffixed()
  expr#isunary()
  expr#isunaryop()
  expr#isvalue()
  expr.parse(script:string):static:map {block?}
  expr#textize(style?:symbol, indent?:string)
  expr#tofunction(`args*)
  expr#unquote()
  expr#write(dst:stream:w, style?:symbol, indent?:string)
formatter
  formatter#getminwidth()
  formatter#getpadding()
  formatter#getplusmode()
  formatter#getprecision()
  formatter#isleftalign()
  formatter#issharp()
  formatter#isuppercase()
function
  function.addhelp(func:function, lang:symbol, format:string, help:string):static:map:void
  function.getdecls(func:function):static:map
  function.getexpr(func:function):static:map
  function.getformat(func:function):static:map
  function.getfullname(func:function):static:map
  function.gethelp(func:function, lang?:symbol):static:map
  function.getname(func:function):static:map
  function.getsymbol(func:function):static:map
  function#mathdiff(var?:symbol):reduce
help
  help.gettext_block_en(varname:string, typename:string):static {block?}
  help.gettext_iterator_en():static {block?}
image
  image#allocbuff(width:number, height:number, color?:color):reduce
  image#blur(radius:number, sigma?:number) {block?}
  image#clear():reduce
  image#crop(x:number, y:number, width?:number, height?:number):map {block?}
  image#delpalette():reduce
  image#extract(x:number, y:number, width:number, height:number, element:symbol, dst):reduce
  image#fill(color:color):reduce
  image#fillrect(x:number, y:number, width:number, height:number, color:color):map:reduce
  image#flip(orient:symbol):map {block?}
  image#getpixel(x:number, y:number):map {block?}
  image#grayscale() {block?}
  image#mapcolorlevel(map@r[]:number, map@g[]?:number, map@b[]?:number) {block?}
  image#paste(x:number, y:number, src:image, width?:number, height?:number, xoffset:number => 0, yoffset:number => 0, a:number => 255):map:reduce
  image#putpixel(x:number, y:number, color:color):map:reduce
  image#read(stream:stream:r, imagetype?:string):map:reduce
  image#reducecolor(palette?:palette) {block?}
  image#replacecolor(colorOrg:color, color:color, tolerance?:number):reduce
  image#resize(width?:number, height?:number):map:[box,ratio] {block?}
  image#rotate(rotate:number, background?:color):map {block?}
  image#scan(x?:number, y?:number, width?:number, height?:number, scandir?:symbol) {block?}
  image#setalpha(a:number, color?:color, tolerance?:number):reduce
  image#size()
  image#store(x:number, y:number, width:number, height:number, element:symbol, src):reduce
  image#thumbnail(width?:number, height?:number):map:[box] {block?}
  image#write(stream:stream:w, imagetype?:string):map:reduce
iterator
  iterator#after(criteria) {block?}
  iterator#align(n:number, value?) {block?}
  iterator#and()
  iterator#average()
  iterator#before(criteria) {block?}
  iterator#contains(value)
  iterator#count(criteria?)
  iterator#cycle(n?:number) {block?}
  iterator#delay(delay:number) {block?}
  iterator#each() {block?}
  iterator#filter(criteria?) {block?}
  iterator#find(criteria?):[index]
  iterator#flat():[bfs,dfs] {block?}
  iterator#fold(n:number, nstep?:number):map:[iteritem,neat] {block?}
  iterator#format(format:string):map {block?}
  iterator#head(n:number):map {block?}
  iterator#isinfinite()
  iterator#join(sep?:string):map
  iterator#joinb()
  iterator#len()
  iterator#map(func:function) {block?}
  iterator#max():[index,indices,last_index]
  iterator#min():[index,indices,last_index]
  iterator#next()
  iterator#nilto(replace) {block?}
  iterator#offset(n:number) {block?}
  iterator#or()
  iterator#pack(format:string) {block?}
  iterator#pingpong(n?:number):[sticky,sticky@top,sticky@btm] {block?}
  iterator#print(stream?:stream:w):void
  iterator#printf(format:string, stream?:stream:w):void
  iterator#println(stream?:stream:w):void
  iterator#prod()
  iterator#rank(directive?) {block?}
  iterator#reduce(accum) {block}
  iterator#repeater()
  iterator#replace(value, replace) {block?}
  iterator#reverse() {block?}
  iterator#roundoff(threshold:number => 1e-10) {block?}
  iterator#runlength() {block?}
  iterator#since(criteria) {block?}
  iterator#skip(n:number) {block?}
  iterator#skipnil() {block?}
  iterator#sort(directive?, keys[]?):[stable] {block?}
  iterator#stddev()
  iterator#sum()
  iterator#tail(n:number) {block?}
  iterator#until(criteria) {block?}
  iterator#variance()
  iterator#walk():[bfs,dfs] {block?}
  iterator#while (criteria) {block?}
list
  list#add(elem+):reduce
  list#after(criteria) {block?}
  list#align(n:number, value?):map {block?}
  list#and()
  list#append(elem+):reduce
  list#average()
  list#before(criteria) {block?}
  list#clear():reduce
  list#combination(n:number) {block?}
  list#contains(value)
  list#count(criteria?)
  list#cycle(n?:number) {block?}
  list#each() {block?}
  list#erase(idx*:number):reduce
  list#filter(criteria?) {block?}
  list#find(criteria?):[index]
  list#first()
  list#flat():[bfs,dfs] {block?}
  list#fold(n:number, nstep?:number):map:[iteritem,neat] {block?}
  list#format(format:string):map {block?}
  list#get(index:number):map:flat
  list#head(n:number):map {block?}
  list#insert(idx:number, elem+):reduce
  list#isempty()
  list#join(sep?:string):map
  list#joinb()
  list#last()
  list#len()
  list#map(func:function) {block?}
  list#max():[index,indices,last_index]
  list#min():[index,indices,last_index]
  list#nilto(replace) {block?}
  list#offset(n:number):map {block?}
  list#or()
  list#pack(format:string)
  list#permutation(n?:number) {block?}
  list#pingpong(n?:number):[sticky,sticky@top,sticky@btm] {block?}
  list#print(stream?:stream:w)
  list#printf(format:string, stream?:stream:w):void
  list#println(stream?:stream:w)
  list#prod()
  list#put(index:number, value:nomap):map:reduce
  list#rank(directive?):[stable] {block?}
  list#reduce(accum) {block}
  list#replace(value, replace) {block?}
  list#reverse() {block?}
  list#roundoff(threshold:number => 1e-10) {block?}
  list#runlength() {block?}
  list#shift():[raise]
  list#shuffle():reduce
  list#since(criteria) {block?}
  list#skip(n:number):map {block?}
  list#skipnil() {block?}
  list#sort(directive?, keys[]?):[stable] {block?}
  list#stddev()
  list#sum()
  list#tail(n:number):map {block?}
  list#until(criteria) {block?}
  list#variance()
  list#walk():[bfs,dfs] {block?}
  list#while (criteria) {block?}
  list.zip(values+):static {block?}
matrix
  matrix#col(col:number):map
  matrix#colsize()
  matrix#each():[transpose]
  matrix#eachcol()
  matrix#eachrow()
  matrix.identity(n:number):static:map {block?}
  matrix#invert()
  matrix#issquare()
  matrix.rotation(angle:number, tx?:number, ty?:number):static:map:[deg] {block?}
  matrix.rotation@x(angle:number, tx?:number, ty?:number, tz?:number):static:map:[deg] {block?}
  matrix.rotation@y(angle:number, tx?:number, ty?:number, tz?:number):static:map:[deg] {block?}
  matrix.rotation@z(angle:number, tx?:number, ty?:number, tz?:number):static:map:[deg] {block?}
  matrix#roundoff(threshold:number => 1e-10) {block?}
  matrix#row(row:number):map
  matrix#rowsize()
  matrix#set(value)
  matrix#setcol(col:number, value)
  matrix#setrow(row:number, value)
  matrix#submat(row:number, col:number, nrows:number, ncols:number):map
  matrix#tolist():[transpose]
  matrix#transpose()
monitor
nil
number
  number.roundoff(threshold:number => 1e-10)
object
  object#__call__(symbol:symbol, `args*):map:nonamed {block?}
  object#__iter__()
  object#clone()
  object.getprop!(symbol:symbol, default?:nomap):static:map
  object.is(obj):map
  object.isinstance(type+:expr):map
  object.isnil():map
  object.istype(type+:expr):map
  object.nomap() {block?}
  object.setprop!(symbol:symbol, value):static:map
  object.tonumber():[nil,raise,strict,zero]
  object.tostring()
operator
  operator#assign(type_l:expr, type_r?:expr):map:void {block}
  operator#entries(type?:symbol)
palette
  palette#each() {block?}
  palette#nearest(color:color):map:[index]
  palette#shrink():reduce:[align]
  palette#updateby(image_or_palette):reduce:[align,shrink]
pointer
  pointer#forward(distance:number):reduce
  pointer#pack(format:string, value+):reduce:[stay]
  pointer#reset()
  pointer#unpack(format:string, values*:number):[nil,stay]
  pointer#unpacks(format:string, values*:number)
quote
rational
  rational.reduce()
semaphore
  semaphore#release()
  semaphore#session() {block}
  semaphore#wait()
stream
  stream#addcr(flag?:boolean):reduce
  stream#close():void
  stream#compare(stream:stream:r):map
  stream.copy(src:stream:r, dst:stream:w, bytesunit:number => 65536):static:map:void:[finalize] {block?}
  stream#copyfrom(src:stream:r, bytesunit:number => 65536):map:reduce:[finalize] {block?}
  stream#copyto(stream:stream:w, bytesunit:number => 65536):map:reduce:[finalize] {block?}
  stream#delcr(flag?:boolean):reduce
  stream#deserialize()
  stream#flush():void
  stream#peek(len?:number)
  stream#print(values*):map:void
  stream#printf(format:string, values*):map:void
  stream#println(values*):map:void
  stream#read(len?:number)
  stream#readchar()
  stream#reader@base64() {block?}
  stream#readline():[chop]
  stream#readlines(nlines?:number):[chop] {block?}
  stream#readtext()
  stream#seek(offset:number, origin?:symbol):reduce
  stream#serialize(value):void
  stream#setcodec(codec:codec:nil):reduce
  stream#tell()
  stream#write(buff:binary, len?:number):reduce
  stream#writer@base64(linelen:number:nil => 76) {block?}
string
  string#align(width:number, padding:string => ' '):map:[center,left,right]
  string.binary()
  string#capitalize()
  string#chop(suffix*:string):[eol,icase]
  string#decodeuri()
  string#each():map:[utf32,utf8] {block?}
  string#eachline(nlines?:number):[chop] {block?}
  string#embed(dst?:stream:w):[lasteol,noindent]
  string.encode(codec:codec)
  string#encodeuri()
  string#endswith(suffix:string, endpos?:number):map:[icase,rest]
  string#escapehtml():[quote]
  string#find(sub:string, pos:number => 0):map:[icase,rev]
  string#fold(len:number, step?:number):[neat] {block?}
  string#foldw(width:number):[padding] {block?}
  string#format(values*):map
  string#isalnum()
  string#isalpha()
  string#isdigit()
  string#isempty()
  string#isspace()
  string#left(len?:number):map
  string#len()
  string#lower()
  string#mid(pos:number => 0, len?:number):map
  string.print(stream?:stream:w):void
  string.println(stream?:stream:w):void
  string#reader() {block?}
  string#replace(match:string, sub:string, count?:number):map:[icase] {block?}
  string#replaces(map[]:string, count?:number):map:[icase] {block?}
  string#right(len?:number):map
  string#split(sep?:string, count?:number):[icase] {block?}
  string#startswith(prefix:string, pos:number => 0):map:[icase,rest]
  string#strip():[both,left,right]
  string#template():[lasteol,noindent] {block?}
  string#tosymbol()
  string.translator():static:void {block}
  string#unescapehtml()
  string#upper()
  string#width()
  string#zentohan()
struct
  struct#tolist()
suffixmgr
  suffixmgr#assign(suffix:symbol):void:[overwrite] {block}
symbol
  symbol#eval(env?:environment)
template
  template#block(symbol:symbol):void
  template#call(symbol:symbol, args*)
  template#define(symbol:symbol, `args*):void
  template#embed(template:template)
  template#extends(template:template):void
  template#init_block(symbol:symbol):void {block}
  template#init_call(symbol:symbol, args*):void
  template#init_define(symbol:symbol, `args*):void {block}
  template#init_embed(template:template):void
  template#init_extends(template:template):void
  template#init_super(symbol:symbol):void
  template#parse(str:string):void:[lasteol,noindent]
  template#read(src:stream:r):void:[lasteol,noindent]
  template#render(dst?:stream:w)
  template#super(symbol:symbol):void
timedelta
undefined
uri
  uri#getfragment()
  uri#getpath()
  uri#getquery()
  uri.parsequery(query:string):static:map

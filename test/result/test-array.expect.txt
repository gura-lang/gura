======== #1 properties ========

x ..
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
x.elembytes .. 8
x.elemtype .. double
x.memoryid == x.offset(1).memoryid .. true
x.ndim .. 3
x.p .. <pointer:0>
x.shape .. [2, 3, 4]
x.size .. 24
x.T ..
{{{0, 0, 0},
  {0, 0, 0},
  {0, 0, 0},
  {0, 0, 0}},

 {{0, 0, 0},
  {0, 0, 0},
  {0, 0, 0},
  {0, 0, 0}}}

======== #2 constructor ========

boolean
false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false
true true true true true true true true true true true true true true true true true true true true true true true true true true true true true true
false true true true true true true true true true true true true true true true true true true true true true true true true true true true true true
false true true true true true true true true true true true true true true true true true true true true true true true true true true true true true
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
false true true true true true true true true true true true true true true true true true true true true true true true true true true true true true
int8
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint8
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
int16
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint16
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
int32
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint32
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
int64
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint64
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
half
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
float
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
double
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
complex
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29

======== #3 array.identity() ========

boolean
true
true false
false true
true false false
false true false
false false true
true false false false false
false true false false false
false false true false false
false false false true false
false false false false true
int8
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
uint8
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
int16
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
uint16
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
int32
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
uint32
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
int64
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
uint64
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
half
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
float
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
double
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
complex
1
1 0
0 1
1 0 0
0 1 0
0 0 1
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
array@boolean.identity .. boolean
{{ true, false, false, false, false},
 {false,  true, false, false, false},
 {false, false,  true, false, false},
 {false, false, false,  true, false},
 {false, false, false, false,  true}}
array@int8.identity .. int8
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@uint8.identity .. uint8
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@int16.identity .. int16
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@uint16.identity .. uint16
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@int32.identity .. int32
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@uint32.identity .. uint32
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@int64.identity .. int64
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@uint64.identity .. uint64
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@half.identity .. half
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@float.identity .. float
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@double.identity .. double
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array@complex.identity .. complex
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}

======== #4 array.interval() ========

boolean
array.interval(0, 8, 5, elemtype => elemtype) .. {false,  true,  true,  true,  true}
array.interval(0, 10, 5, elemtype => elemtype) .. {false,  true,  true,  true,  true}
int8
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
uint8
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
int16
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
uint16
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
int32
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
uint32
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
int64
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
uint64
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. { 0,  2,  5,  7, 10}
half
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. {  0, 2.5,   5, 7.5,  10}
float
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. {  0, 2.5,   5, 7.5,  10}
double
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. {  0, 2.5,   5, 7.5,  10}
complex
array.interval(0, 8, 5, elemtype => elemtype) .. {0, 2, 4, 6, 8}
array.interval(0, 10, 5, elemtype => elemtype) .. {  0, 2.5,   5, 7.5,  10}
array@boolean.interval .. boolean
{false,  true,  true,  true,  true}
array@int8.interval .. int8
{ 0,  2,  5,  7, 10}
array@uint8.interval .. uint8
{ 0,  2,  5,  7, 10}
array@int16.interval .. int16
{ 0,  2,  5,  7, 10}
array@uint16.interval .. uint16
{ 0,  2,  5,  7, 10}
array@int32.interval .. int32
{ 0,  2,  5,  7, 10}
array@uint32.interval .. uint32
{ 0,  2,  5,  7, 10}
array@int64.interval .. int64
{ 0,  2,  5,  7, 10}
array@uint64.interval .. uint64
{ 0,  2,  5,  7, 10}
array@half.interval .. half
{  0, 2.5,   5, 7.5,  10}
array@float.interval .. float
{  0, 2.5,   5, 7.5,  10}
array@double.interval .. double
{  0, 2.5,   5, 7.5,  10}
array@complex.interval .. complex
{  0, 2.5,   5, 7.5,  10}

======== #5 array.ones() ========

boolean
{{true, true, true, true},
 {true, true, true, true},
 {true, true, true, true}}
{{{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}}}
int8
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
uint8
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
int16
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
uint16
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
int32
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
uint32
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
int64
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
uint64
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
half
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
float
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
double
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}
complex
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
{{{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}},

 {{1, 1, 1, 1},
  {1, 1, 1, 1},
  {1, 1, 1, 1}}}

======== #6 array.rands() ========

boolean
{true, true, true, true, true, true, true, true, true, true, true, true}
{{true, true, true, true},
 {true, true, true, true},
 {true, true, true, true}}
{{{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}}}
{true, true, true, true, true, true, true, true, true, true, true, true}
{{true, true, true, true},
 {true, true, true, true},
 {true, true, true, true}}
{{{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}}}
int8
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
uint8
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
int16
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
uint16
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
int32
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
uint32
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
int64
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
uint64
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
half
{0.0305786,  0.213135,  0.298828,  0.381104,  0.863281,  0.133423, 0.0734253,  0.924316,  0.642578,   0.13562,   0.61377,  0.758301}
{{0.0305786,  0.213135,  0.298828,  0.381104},
 { 0.863281,  0.133423, 0.0734253,  0.924316},
 { 0.642578,   0.13562,   0.61377,  0.758301}}
{{{0.0305786,  0.213135,  0.298828,  0.381104},
  { 0.863281,  0.133423, 0.0734253,  0.924316},
  { 0.642578,   0.13562,   0.61377,  0.758301}},

 {{ 0.629395,  0.280518,  0.450195,  0.493652},
  { 0.813965,  0.167358, 0.0294647,  0.995605},
  { 0.571777,  0.820801,  0.342041,  0.623047}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
float
{ 0.030581,   0.21314,  0.299003,  0.381139,  0.863488,  0.133443, 0.0734653,  0.924736,  0.642876,  0.135658,  0.614181,  0.758658}
{{ 0.030581,   0.21314,  0.299003,  0.381139},
 { 0.863488,  0.133443, 0.0734653,  0.924736},
 { 0.642876,  0.135658,  0.614181,  0.758658}}
{{{ 0.030581,   0.21314,  0.299003,  0.381139},
  { 0.863488,  0.133443, 0.0734653,  0.924736},
  { 0.642876,  0.135658,  0.614181,  0.758658}},

 {{ 0.629676,  0.280639,  0.450236,   0.49366},
  { 0.814271,  0.167373, 0.0294783,  0.995645},
  { 0.571796,  0.820992,  0.342216,  0.623155}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
double
{ 0.030581,   0.21314,  0.299003,  0.381139,  0.863488,  0.133443, 0.0734653,  0.924736,  0.642876,  0.135658,  0.614181,  0.758658}
{{ 0.030581,   0.21314,  0.299003,  0.381139},
 { 0.863488,  0.133443, 0.0734653,  0.924736},
 { 0.642876,  0.135658,  0.614181,  0.758658}}
{{{ 0.030581,   0.21314,  0.299003,  0.381139},
  { 0.863488,  0.133443, 0.0734653,  0.924736},
  { 0.642876,  0.135658,  0.614181,  0.758658}},

 {{ 0.629676,  0.280639,  0.450236,   0.49366},
  { 0.814271,  0.167373, 0.0294783,  0.995645},
  { 0.571796,  0.820991,  0.342216,  0.623155}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}
complex
{ 0.030581,   0.21314,  0.299003,  0.381139,  0.863488,  0.133443, 0.0734653,  0.924736,  0.642876,  0.135658,  0.614181,  0.758658}
{{ 0.030581,   0.21314,  0.299003,  0.381139},
 { 0.863488,  0.133443, 0.0734653,  0.924736},
 { 0.642876,  0.135658,  0.614181,  0.758658}}
{{{ 0.030581,   0.21314,  0.299003,  0.381139},
  { 0.863488,  0.133443, 0.0734653,  0.924736},
  { 0.642876,  0.135658,  0.614181,  0.758658}},

 {{ 0.629676,  0.280639,  0.450236,   0.49366},
  { 0.814271,  0.167373, 0.0294783,  0.995645},
  { 0.571796,  0.820991,  0.342216,  0.623155}}}
{ 3, 21, 29, 38, 86, 13,  7, 92, 64, 13, 61, 75}
{{ 3, 21, 29, 38},
 {86, 13,  7, 92},
 {64, 13, 61, 75}}
{{{ 3, 21, 29, 38},
  {86, 13,  7, 92},
  {64, 13, 61, 75}},

 {{62, 28, 45, 49},
  {81, 16,  2, 99},
  {57, 82, 34, 62}}}

======== #7 array.rands@normal() ========

boolean
{true, true, true, true, true, true, true, true, true, true, true, true}
{{true, true, true, true},
 {true, true, true, true},
 {true, true, true, true}}
{{{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}}}
{true, true, true, true, true, true, true, true, true, true, true, true}
{{true, true, true, true},
 {true, true, true, true},
 {true, true, true, true}}
{{{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}}}
{true, true, true, true, true, true, true, true, true, true, true, true}
{{true, true, true, true},
 {true, true, true, true},
 {true, true, true, true}}
{{{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true},
  {true, true, true, true}}}
int8
{ 2,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0, -1}
{{ 2,  1,  0, -1},
 { 0,  0,  0,  0},
 { 0,  0,  0, -1}}
{{{ 2,  1,  0, -1},
  { 0,  0,  0,  0},
  { 0,  0,  0, -1}},

 {{ 0,  0,  0, -1},
  { 0,  0, -1,  0},
  {-1,  0,  1,  0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
uint8
{  2,   1,   0, 255,   0,   0,   0,   0,   0,   0,   0, 255}
{{  2,   1,   0, 255},
 {  0,   0,   0,   0},
 {  0,   0,   0, 255}}
{{{  2,   1,   0, 255},
  {  0,   0,   0,   0},
  {  0,   0,   0, 255}},

 {{  0,   0,   0, 255},
  {  0,   0, 255,   0},
  {255,   0,   1,   0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
int16
{ 2,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0, -1}
{{ 2,  1,  0, -1},
 { 0,  0,  0,  0},
 { 0,  0,  0, -1}}
{{{ 2,  1,  0, -1},
  { 0,  0,  0,  0},
  { 0,  0,  0, -1}},

 {{ 0,  0,  0, -1},
  { 0,  0, -1,  0},
  {-1,  0,  1,  0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
uint16
{    2,     1,     0, 65535,     0,     0,     0,     0,     0,     0,     0, 65535}
{{    2,     1,     0, 65535},
 {    0,     0,     0,     0},
 {    0,     0,     0, 65535}}
{{{    2,     1,     0, 65535},
  {    0,     0,     0,     0},
  {    0,     0,     0, 65535}},

 {{    0,     0,     0, 65535},
  {    0,     0, 65535,     0},
  {65535,     0,     1,     0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
int32
{ 2,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0, -1}
{{ 2,  1,  0, -1},
 { 0,  0,  0,  0},
 { 0,  0,  0, -1}}
{{{ 2,  1,  0, -1},
  { 0,  0,  0,  0},
  { 0,  0,  0, -1}},

 {{ 0,  0,  0, -1},
  { 0,  0, -1,  0},
  {-1,  0,  1,  0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
uint32
{         2,          1,          0, 4294967295,          0,          0,          0,          0,          0,          0,          0, 4294967295}
{{         2,          1,          0, 4294967295},
 {         0,          0,          0,          0},
 {         0,          0,          0, 4294967295}}
{{{         2,          1,          0, 4294967295},
  {         0,          0,          0,          0},
  {         0,          0,          0, 4294967295}},

 {{         0,          0,          0, 4294967295},
  {         0,          0, 4294967295,          0},
  {4294967295,          0,          1,          0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
int64
{ 2,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0, -1}
{{ 2,  1,  0, -1},
 { 0,  0,  0,  0},
 { 0,  0,  0, -1}}
{{{ 2,  1,  0, -1},
  { 0,  0,  0,  0},
  { 0,  0,  0, -1}},

 {{ 0,  0,  0, -1},
  { 0,  0, -1,  0},
  {-1,  0,  1,  0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
uint64
{                   2,                    1,                    0, 18446744073709551615,                    0,                    0,                    0,                    0,                    0,                    0,                    0, 18446744073709551615}
{{                   2,                    1,                    0, 18446744073709551615},
 {                   0,                    0,                    0,                    0},
 {                   0,                    0,                    0, 18446744073709551615}}
{{{                   2,                    1,                    0, 18446744073709551615},
  {                   0,                    0,                    0,                    0},
  {                   0,                    0,                    0, 18446744073709551615}},

 {{                   0,                    0,                    0, 18446744073709551615},
  {                   0,                    0, 18446744073709551615,                    0},
  {18446744073709551615,                    0,                    1,                    0}}}
{12, 11, 10,  8, 10,  9, 10, 10, 10,  9,  9,  8}
{{12, 11, 10,  8},
 {10,  9, 10, 10},
 {10,  9,  9,  8}}
{{{12, 11, 10,  8},
  {10,  9, 10, 10},
  {10,  9,  9,  8}},

 {{ 9, 10,  9,  8},
  {10,  9,  8, 10},
  { 8,  9, 11,  9}}}
{25, 16, 12,  3, 14,  4, 15, 10, 13,  9,  4,  3}
{{25, 16, 12,  3},
 {14,  4, 15, 10},
 {13,  9,  4,  3}}
{{{25, 16, 12,  3},
  {14,  4, 15, 10},
  {13,  9,  4,  3}},

 {{ 9, 12,  4,  2},
  {12,  6,  0, 11},
  { 2,  5, 17,  6}}}
half
{   2.57031,    1.05469,   0.402832,   -1.04004,    0.70752,   -0.98584,   0.943848,   0.050293,   0.556152, -0.0726318,  -0.953613,   -1.02344}
{{   2.57031,    1.05469,   0.402832,   -1.04004},
 {   0.70752,   -0.98584,   0.943848,   0.050293},
 {  0.556152, -0.0726318,  -0.953613,   -1.02344}}
{{{   2.57031,    1.05469,   0.402832,   -1.04004},
  {   0.70752,   -0.98584,   0.943848,   0.050293},
  {  0.556152, -0.0726318,  -0.953613,   -1.02344}},

 {{  -0.12793,   0.414062,  -0.981445,   -1.21973},
  {  0.341064,  -0.641113,   -1.61328,   0.248291},
  {  -1.19922,  -0.745605,    1.27148,  -0.605957}}}
{12.5703, 11.0547, 10.3984, 8.95312, 10.7031, 9.00781, 10.9375, 10.0469, 10.5547, 9.92188, 9.03906, 8.96875}
{{12.5703, 11.0547, 10.3984, 8.95312},
 {10.7031, 9.00781, 10.9375, 10.0469},
 {10.5547, 9.92188, 9.03906, 8.96875}}
{{{12.5703, 11.0547, 10.3984, 8.95312},
  {10.7031, 9.00781, 10.9375, 10.0469},
  {10.5547, 9.92188, 9.03906, 8.96875}},

 {{9.86719, 10.4141, 9.01562, 8.77344},
  {10.3359, 9.35156, 8.38281, 10.2422},
  {8.79688,    9.25, 11.2656, 9.39062}}}
{25.4219, 16.3281, 12.4141, 3.75391, 14.2422, 4.08203, 15.6641, 10.2969, 13.3359,  9.5625, 4.27344, 3.85742}
{{25.4219, 16.3281, 12.4141, 3.75391},
 {14.2422, 4.08203, 15.6641, 10.2969},
 {13.3359,  9.5625, 4.27344, 3.85742}}
{{{ 25.4219,  16.3281,  12.4141,  3.75391},
  { 14.2422,  4.08203,  15.6641,  10.2969},
  { 13.3359,   9.5625,  4.27344,  3.85742}},

 {{ 9.22656,  12.4844,  4.10938,  2.67578},
  { 12.0469,  6.14844, 0.317871,  11.4844},
  { 2.80273,  5.52344,   17.625,  6.35938}}}
float
{   2.57046,    1.05559,   0.402888,   -1.04081,   0.707671,  -0.985925,   0.944053,  0.0503091,   0.556569, -0.0726323,  -0.953877,   -1.02345}
{{   2.57046,    1.05559,   0.402888,   -1.04081},
 {  0.707671,  -0.985925,   0.944053,  0.0503091},
 {  0.556569, -0.0726323,  -0.953877,   -1.02345}}
{{{   2.57046,    1.05559,   0.402888,   -1.04081},
  {  0.707671,  -0.985925,   0.944053,  0.0503091},
  {  0.556569, -0.0726323,  -0.953877,   -1.02345}},

 {{ -0.128033,   0.414272,   -0.98166,   -1.22041},
  {  0.341298,  -0.641298,   -1.61368,   0.248405},
  {  -1.19946,  -0.745875,    1.27203,  -0.606229}}}
{12.5705, 11.0556, 10.4029, 8.95919, 10.7077, 9.01408, 10.9441, 10.0503, 10.5566, 9.92737, 9.04612, 8.97655}
{{12.5705, 11.0556, 10.4029, 8.95919},
 {10.7077, 9.01408, 10.9441, 10.0503},
 {10.5566, 9.92737, 9.04612, 8.97655}}
{{{12.5705, 11.0556, 10.4029, 8.95919},
  {10.7077, 9.01408, 10.9441, 10.0503},
  {10.5566, 9.92737, 9.04612, 8.97655}},

 {{9.87197, 10.4143, 9.01834, 8.77959},
  {10.3413,  9.3587, 8.38632, 10.2484},
  {8.80054, 9.25413,  11.272, 9.39377}}}
{25.4228, 16.3335, 12.4173, 3.75511,  14.246, 4.08445, 15.6643, 10.3019, 13.3394, 9.56421, 4.27674, 3.85928}
{{25.4228, 16.3335, 12.4173, 3.75511},
 { 14.246, 4.08445, 15.6643, 10.3019},
 {13.3394, 9.56421, 4.27674, 3.85928}}
{{{ 25.4228,  16.3335,  12.4173,  3.75511},
  {  14.246,  4.08445,  15.6643,  10.3019},
  { 13.3394,  9.56421,  4.27674,  3.85928}},

 {{  9.2318,  12.4856,  4.11004,  2.67756},
  { 12.0478,  6.15221, 0.317932,  11.4904},
  { 2.80324,  5.52475,  17.6322,  6.36262}}}
double
{   2.57046,    1.05559,   0.402888,   -1.04081,   0.707671,  -0.985925,   0.944053,  0.0503091,   0.556569, -0.0726323,  -0.953877,   -1.02345}
{{   2.57046,    1.05559,   0.402888,   -1.04081},
 {  0.707671,  -0.985925,   0.944053,  0.0503091},
 {  0.556569, -0.0726323,  -0.953877,   -1.02345}}
{{{   2.57046,    1.05559,   0.402888,   -1.04081},
  {  0.707671,  -0.985925,   0.944053,  0.0503091},
  {  0.556569, -0.0726323,  -0.953877,   -1.02345}},

 {{ -0.128033,   0.414272,   -0.98166,   -1.22041},
  {  0.341299,  -0.641298,   -1.61368,   0.248405},
  {  -1.19946,  -0.745875,    1.27203,  -0.606229}}}
{12.5705, 11.0556, 10.4029, 8.95919, 10.7077, 9.01407, 10.9441, 10.0503, 10.5566, 9.92737, 9.04612, 8.97655}
{{12.5705, 11.0556, 10.4029, 8.95919},
 {10.7077, 9.01407, 10.9441, 10.0503},
 {10.5566, 9.92737, 9.04612, 8.97655}}
{{{12.5705, 11.0556, 10.4029, 8.95919},
  {10.7077, 9.01407, 10.9441, 10.0503},
  {10.5566, 9.92737, 9.04612, 8.97655}},

 {{9.87197, 10.4143, 9.01834, 8.77959},
  {10.3413,  9.3587, 8.38632, 10.2484},
  {8.80054, 9.25413,  11.272, 9.39377}}}
{25.4228, 16.3335, 12.4173, 3.75511,  14.246, 4.08445, 15.6643, 10.3019, 13.3394, 9.56421, 4.27674, 3.85928}
{{25.4228, 16.3335, 12.4173, 3.75511},
 { 14.246, 4.08445, 15.6643, 10.3019},
 {13.3394, 9.56421, 4.27674, 3.85928}}
{{{ 25.4228,  16.3335,  12.4173,  3.75511},
  {  14.246,  4.08445,  15.6643,  10.3019},
  { 13.3394,  9.56421,  4.27674,  3.85928}},

 {{  9.2318,  12.4856,  4.11004,  2.67756},
  { 12.0478,  6.15221, 0.317932,  11.4904},
  { 2.80324,  5.52475,  17.6322,  6.36262}}}
complex
{   2.57046,    1.05559,   0.402888,   -1.04081,   0.707671,  -0.985925,   0.944053,  0.0503091,   0.556569, -0.0726323,  -0.953877,   -1.02345}
{{   2.57046,    1.05559,   0.402888,   -1.04081},
 {  0.707671,  -0.985925,   0.944053,  0.0503091},
 {  0.556569, -0.0726323,  -0.953877,   -1.02345}}
{{{   2.57046,    1.05559,   0.402888,   -1.04081},
  {  0.707671,  -0.985925,   0.944053,  0.0503091},
  {  0.556569, -0.0726323,  -0.953877,   -1.02345}},

 {{ -0.128033,   0.414272,   -0.98166,   -1.22041},
  {  0.341299,  -0.641298,   -1.61368,   0.248405},
  {  -1.19946,  -0.745875,    1.27203,  -0.606229}}}
{12.5705, 11.0556, 10.4029, 8.95919, 10.7077, 9.01407, 10.9441, 10.0503, 10.5566, 9.92737, 9.04612, 8.97655}
{{12.5705, 11.0556, 10.4029, 8.95919},
 {10.7077, 9.01407, 10.9441, 10.0503},
 {10.5566, 9.92737, 9.04612, 8.97655}}
{{{12.5705, 11.0556, 10.4029, 8.95919},
  {10.7077, 9.01407, 10.9441, 10.0503},
  {10.5566, 9.92737, 9.04612, 8.97655}},

 {{9.87197, 10.4143, 9.01834, 8.77959},
  {10.3413,  9.3587, 8.38632, 10.2484},
  {8.80054, 9.25413,  11.272, 9.39377}}}
{25.4228, 16.3335, 12.4173, 3.75511,  14.246, 4.08445, 15.6643, 10.3019, 13.3394, 9.56421, 4.27674, 3.85928}
{{25.4228, 16.3335, 12.4173, 3.75511},
 { 14.246, 4.08445, 15.6643, 10.3019},
 {13.3394, 9.56421, 4.27674, 3.85928}}
{{{ 25.4228,  16.3335,  12.4173,  3.75511},
  {  14.246,  4.08445,  15.6643,  10.3019},
  { 13.3394,  9.56421,  4.27674,  3.85928}},

 {{  9.2318,  12.4856,  4.11004,  2.67756},
  { 12.0478,  6.15221, 0.317932,  11.4904},
  { 2.80324,  5.52475,  17.6322,  6.36262}}}

======== #8 array.range() ========

boolean
array.range(10, elemtype => elemtype) .. {false,  true,  true,  true,  true,  true,  true,  true,  true,  true}
array.range(0, 10, elemtype => elemtype) .. {false,  true,  true,  true,  true,  true,  true,  true,  true,  true}
array.range(0, -10, elemtype => elemtype) .. {false,  true,  true,  true,  true,  true,  true,  true,  true,  true}
array.range(3, 10, elemtype => elemtype) .. {true, true, true, true, true, true, true}
array.range(3, -10, elemtype => elemtype) .. { true,  true,  true, false,  true,  true,  true,  true,  true,  true,  true,  true,  true}
array.range(-3, 10, elemtype => elemtype) .. { true,  true,  true, false,  true,  true,  true,  true,  true,  true,  true,  true,  true}
array.range(-3, -10, elemtype => elemtype) .. {true, true, true, true, true, true, true}
array.range(3, 10, 2, elemtype => elemtype) .. {true, true, true, true}
array.range(3, -10, -2, elemtype => elemtype) .. {true, true, true, true, true, true, true}
array.range(-3, 10, 2, elemtype => elemtype) .. {true, true, true, true, true, true, true}
array.range(-3, -10, -2, elemtype => elemtype) .. {true, true, true, true}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
int8
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
uint8
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. {  0, 255, 254, 253, 252, 251, 250, 249, 248, 247}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. {  3,   2,   1,   0, 255, 254, 253, 252, 251, 250, 249, 248, 247}
array.range(-3, 10, elemtype => elemtype) .. {253, 254, 255,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9}
array.range(-3, -10, elemtype => elemtype) .. {253, 252, 251, 250, 249, 248, 247}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. {  3,   1, 255, 253, 251, 249, 247}
array.range(-3, 10, 2, elemtype => elemtype) .. {253, 255,   1,   3,   5,   7,   9}
array.range(-3, -10, -2, elemtype => elemtype) .. {253, 251, 249, 247}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
int16
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
uint16
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. {    0, 65535, 65534, 65533, 65532, 65531, 65530, 65529, 65528, 65527}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. {    3,     2,     1,     0, 65535, 65534, 65533, 65532, 65531, 65530, 65529, 65528, 65527}
array.range(-3, 10, elemtype => elemtype) .. {65533, 65534, 65535,     0,     1,     2,     3,     4,     5,     6,     7,     8,     9}
array.range(-3, -10, elemtype => elemtype) .. {65533, 65532, 65531, 65530, 65529, 65528, 65527}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. {    3,     1, 65535, 65533, 65531, 65529, 65527}
array.range(-3, 10, 2, elemtype => elemtype) .. {65533, 65535,     1,     3,     5,     7,     9}
array.range(-3, -10, -2, elemtype => elemtype) .. {65533, 65531, 65529, 65527}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
int32
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
uint32
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. {         0, 4294967295, 4294967294, 4294967293, 4294967292, 4294967291, 4294967290, 4294967289, 4294967288, 4294967287}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. {         3,          2,          1,          0, 4294967295, 4294967294, 4294967293, 4294967292, 4294967291, 4294967290, 4294967289, 4294967288, 4294967287}
array.range(-3, 10, elemtype => elemtype) .. {4294967293, 4294967294, 4294967295,          0,          1,          2,          3,          4,          5,          6,          7,          8,          9}
array.range(-3, -10, elemtype => elemtype) .. {4294967293, 4294967292, 4294967291, 4294967290, 4294967289, 4294967288, 4294967287}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. {         3,          1, 4294967295, 4294967293, 4294967291, 4294967289, 4294967287}
array.range(-3, 10, 2, elemtype => elemtype) .. {4294967293, 4294967295,          1,          3,          5,          7,          9}
array.range(-3, -10, -2, elemtype => elemtype) .. {4294967293, 4294967291, 4294967289, 4294967287}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
int64
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
uint64
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. {                   0, 18446744073709551615, 18446744073709551614, 18446744073709551613, 18446744073709551612, 18446744073709551611, 18446744073709551610, 18446744073709551609, 18446744073709551608, 18446744073709551607}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. {                   3,                    2,                    1,                    0, 18446744073709551615, 18446744073709551614, 18446744073709551613, 18446744073709551612, 18446744073709551611, 18446744073709551610, 18446744073709551609, 18446744073709551608, 18446744073709551607}
array.range(-3, 10, elemtype => elemtype) .. {18446744073709551613, 18446744073709551614, 18446744073709551615,                    0,                    1,                    2,                    3,                    4,                    5,                    6,                    7,                    8,                    9}
array.range(-3, -10, elemtype => elemtype) .. {18446744073709551613, 18446744073709551612, 18446744073709551611, 18446744073709551610, 18446744073709551609, 18446744073709551608, 18446744073709551607}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. {                   3,                    1, 18446744073709551615, 18446744073709551613, 18446744073709551611, 18446744073709551609, 18446744073709551607}
array.range(-3, 10, 2, elemtype => elemtype) .. {18446744073709551613, 18446744073709551615,                    1,                    3,                    5,                    7,                    9}
array.range(-3, -10, -2, elemtype => elemtype) .. {18446744073709551613, 18446744073709551611, 18446744073709551609, 18446744073709551607}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
half
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
float
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
double
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero
complex
array.range(10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, 10, elemtype => elemtype) .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
array.range(0, -10, elemtype => elemtype) .. { 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, elemtype => elemtype) .. {3, 4, 5, 6, 7, 8, 9}
array.range(3, -10, elemtype => elemtype) .. { 3,  2,  1,  0, -1, -2, -3, -4, -5, -6, -7, -8, -9}
array.range(-3, 10, elemtype => elemtype) .. {-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9}
array.range(-3, -10, elemtype => elemtype) .. {-3, -4, -5, -6, -7, -8, -9}
array.range(3, 10, 2, elemtype => elemtype) .. {3, 5, 7, 9}
array.range(3, -10, -2, elemtype => elemtype) .. { 3,  1, -1, -3, -5, -7, -9}
array.range(-3, 10, 2, elemtype => elemtype) .. {-3, -1,  1,  3,  5,  7,  9}
array.range(-3, -10, -2, elemtype => elemtype) .. {-3, -5, -7, -9}
array.range(3, 10, -2, elemtype => elemtype) .. ValueError: step must be positive
array.range(3, -10, 2, elemtype => elemtype) .. ValueError: step must be negative
array.range(3, 10, 0, elemtype => elemtype) .. ValueError: step must not be zero

======== #9 array.rotation() ========

half
array.rotation(0, elemtype => elemtype) ..
{{ 1, -0},
 { 0,  1}}
array.rotation(0, 2, elemtype => elemtype) ..
{{ 1, -0,  2},
 { 0,  1,  0},
 { 0,  0,  1}}
array.rotation(0, 2, 3, elemtype => elemtype) ..
{{ 1, -0,  2},
 { 0,  1,  3},
 { 0,  0,  1}}
array.rotation(math.pi / 6, elemtype => elemtype) ..
{{0.865723,     -0.5},
 {     0.5, 0.865723}}
array.rotation(30, elemtype => elemtype):deg ..
{{0.865723,     -0.5},
 {     0.5, 0.865723}}
float
array.rotation(0, elemtype => elemtype) ..
{{ 1, -0},
 { 0,  1}}
array.rotation(0, 2, elemtype => elemtype) ..
{{ 1, -0,  2},
 { 0,  1,  0},
 { 0,  0,  1}}
array.rotation(0, 2, 3, elemtype => elemtype) ..
{{ 1, -0,  2},
 { 0,  1,  3},
 { 0,  0,  1}}
array.rotation(math.pi / 6, elemtype => elemtype) ..
{{0.866025,     -0.5},
 {     0.5, 0.866025}}
array.rotation(30, elemtype => elemtype):deg ..
{{0.866025,     -0.5},
 {     0.5, 0.866025}}
double
array.rotation(0, elemtype => elemtype) ..
{{ 1, -0},
 { 0,  1}}
array.rotation(0, 2, elemtype => elemtype) ..
{{ 1, -0,  2},
 { 0,  1,  0},
 { 0,  0,  1}}
array.rotation(0, 2, 3, elemtype => elemtype) ..
{{ 1, -0,  2},
 { 0,  1,  3},
 { 0,  0,  1}}
array.rotation(math.pi / 6, elemtype => elemtype) ..
{{0.866025,     -0.5},
 {     0.5, 0.866025}}
array.rotation(30, elemtype => elemtype):deg ..
{{0.866025,     -0.5},
 {     0.5, 0.866025}}
complex
array.rotation(0, elemtype => elemtype) ..
{{1, 0},
 {0, 1}}
array.rotation(0, 2, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 0},
 {0, 0, 1}}
array.rotation(0, 2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.rotation(math.pi / 6, elemtype => elemtype) ..
{{0.866025,     -0.5},
 {     0.5, 0.866025}}
array.rotation(30, elemtype => elemtype):deg ..
{{0.866025,     -0.5},
 {     0.5, 0.866025}}

======== #10 array.rotation@x() ========

half
array.rotation@x(0, elemtype => elemtype) ..
{{ 1,  0,  0},
 { 0,  1, -0},
 { 0,  0,  1}}
array.rotation@x(0, 2, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  0},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@x(0, 2, 3, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  3},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@x(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  3},
 { 0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@x(math.pi / 6, elemtype => elemtype) ..
{{       1,        0,        0},
 {       0, 0.865723,     -0.5},
 {       0,      0.5, 0.865723}}
array.rotation@x(30, elemtype => elemtype):deg ..
{{       1,        0,        0},
 {       0, 0.865723,     -0.5},
 {       0,      0.5, 0.865723}}
float
array.rotation@x(0, elemtype => elemtype) ..
{{ 1,  0,  0},
 { 0,  1, -0},
 { 0,  0,  1}}
array.rotation@x(0, 2, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  0},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@x(0, 2, 3, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  3},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@x(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  3},
 { 0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@x(math.pi / 6, elemtype => elemtype) ..
{{       1,        0,        0},
 {       0, 0.866025,     -0.5},
 {       0,      0.5, 0.866025}}
array.rotation@x(30, elemtype => elemtype):deg ..
{{       1,        0,        0},
 {       0, 0.866025,     -0.5},
 {       0,      0.5, 0.866025}}
double
array.rotation@x(0, elemtype => elemtype) ..
{{ 1,  0,  0},
 { 0,  1, -0},
 { 0,  0,  1}}
array.rotation@x(0, 2, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  0},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@x(0, 2, 3, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  3},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@x(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1, -0,  3},
 { 0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@x(math.pi / 6, elemtype => elemtype) ..
{{       1,        0,        0},
 {       0, 0.866025,     -0.5},
 {       0,      0.5, 0.866025}}
array.rotation@x(30, elemtype => elemtype):deg ..
{{       1,        0,        0},
 {       0, 0.866025,     -0.5},
 {       0,      0.5, 0.866025}}
complex
array.rotation@x(0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.rotation@x(0, 2, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.rotation@x(0, 2, 3, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.rotation@x(0, 2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
array.rotation@x(math.pi / 6, elemtype => elemtype) ..
{{       1,        0,        0},
 {       0, 0.866025,     -0.5},
 {       0,      0.5, 0.866025}}
array.rotation@x(30, elemtype => elemtype):deg ..
{{       1,        0,        0},
 {       0, 0.866025,     -0.5},
 {       0,      0.5, 0.866025}}

======== #11 array.rotation@y() ========

half
array.rotation@y(0, elemtype => elemtype) ..
{{ 1,  0,  0},
 { 0,  1,  0},
 {-0,  0,  1}}
array.rotation@y(0, 2, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  0},
 {-0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@y(0, 2, 3, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  3},
 {-0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@y(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  3},
 {-0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@y(math.pi / 6, elemtype => elemtype) ..
{{0.865723,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.865723}}
array.rotation@y(30, elemtype => elemtype):deg ..
{{0.865723,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.865723}}
float
array.rotation@y(0, elemtype => elemtype) ..
{{ 1,  0,  0},
 { 0,  1,  0},
 {-0,  0,  1}}
array.rotation@y(0, 2, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  0},
 {-0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@y(0, 2, 3, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  3},
 {-0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@y(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  3},
 {-0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@y(math.pi / 6, elemtype => elemtype) ..
{{0.866025,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.866025}}
array.rotation@y(30, elemtype => elemtype):deg ..
{{0.866025,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.866025}}
double
array.rotation@y(0, elemtype => elemtype) ..
{{ 1,  0,  0},
 { 0,  1,  0},
 {-0,  0,  1}}
array.rotation@y(0, 2, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  0},
 {-0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@y(0, 2, 3, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  3},
 {-0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@y(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1,  0,  0,  2},
 { 0,  1,  0,  3},
 {-0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@y(math.pi / 6, elemtype => elemtype) ..
{{0.866025,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.866025}}
array.rotation@y(30, elemtype => elemtype):deg ..
{{0.866025,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.866025}}
complex
array.rotation@y(0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.rotation@y(0, 2, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.rotation@y(0, 2, 3, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.rotation@y(0, 2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
array.rotation@y(math.pi / 6, elemtype => elemtype) ..
{{0.866025,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.866025}}
array.rotation@y(30, elemtype => elemtype):deg ..
{{0.866025,        0,      0.5},
 {       0,        1,        0},
 {    -0.5,        0, 0.866025}}

======== #12 array.rotation@z() ========

half
array.rotation@z(0, elemtype => elemtype) ..
{{ 1, -0,  0},
 { 0,  1,  0},
 { 0,  0,  1}}
array.rotation@z(0, 2, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  0},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@z(0, 2, 3, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  3},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@z(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  3},
 { 0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@z(math.pi / 6, elemtype => elemtype) ..
{{0.865723,     -0.5,        0},
 {     0.5, 0.865723,        0},
 {       0,        0,        1}}
array.rotation@z(30, elemtype => elemtype):deg ..
{{0.865723,     -0.5,        0},
 {     0.5, 0.865723,        0},
 {       0,        0,        1}}
float
array.rotation@z(0, elemtype => elemtype) ..
{{ 1, -0,  0},
 { 0,  1,  0},
 { 0,  0,  1}}
array.rotation@z(0, 2, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  0},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@z(0, 2, 3, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  3},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@z(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  3},
 { 0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@z(math.pi / 6, elemtype => elemtype) ..
{{0.866025,     -0.5,        0},
 {     0.5, 0.866025,        0},
 {       0,        0,        1}}
array.rotation@z(30, elemtype => elemtype):deg ..
{{0.866025,     -0.5,        0},
 {     0.5, 0.866025,        0},
 {       0,        0,        1}}
double
array.rotation@z(0, elemtype => elemtype) ..
{{ 1, -0,  0},
 { 0,  1,  0},
 { 0,  0,  1}}
array.rotation@z(0, 2, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  0},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@z(0, 2, 3, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  3},
 { 0,  0,  1,  0},
 { 0,  0,  0,  1}}
array.rotation@z(0, 2, 3, 4, elemtype => elemtype) ..
{{ 1, -0,  0,  2},
 { 0,  1,  0,  3},
 { 0,  0,  1,  4},
 { 0,  0,  0,  1}}
array.rotation@z(math.pi / 6, elemtype => elemtype) ..
{{0.866025,     -0.5,        0},
 {     0.5, 0.866025,        0},
 {       0,        0,        1}}
array.rotation@z(30, elemtype => elemtype):deg ..
{{0.866025,     -0.5,        0},
 {     0.5, 0.866025,        0},
 {       0,        0,        1}}
complex
array.rotation@z(0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.rotation@z(0, 2, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.rotation@z(0, 2, 3, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.rotation@z(0, 2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
array.rotation@z(math.pi / 6, elemtype => elemtype) ..
{{0.866025,     -0.5,        0},
 {     0.5, 0.866025,        0},
 {       0,        0,        1}}
array.rotation@z(30, elemtype => elemtype):deg ..
{{0.866025,     -0.5,        0},
 {     0.5, 0.866025,        0},
 {       0,        0,        1}}

======== #13 array.scaling() ========

boolean
array.scaling(0, 0, elemtype => elemtype) ..
{{false, false, false},
 {false, false, false},
 {false, false,  true}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{false, false, false, false},
 {false, false, false, false},
 {false, false, false, false},
 {false, false, false,  true}}
array.scaling(2, 3, elemtype => elemtype) ..
{{ true, false, false},
 {false,  true, false},
 {false, false,  true}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{ true, false, false, false},
 {false,  true, false, false},
 {false, false,  true, false},
 {false, false, false,  true}}
int8
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
uint8
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
int16
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
uint16
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
int32
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
uint32
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
int64
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
uint64
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
half
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
float
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
double
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}
complex
array.scaling(0, 0, elemtype => elemtype) ..
{{0, 0, 0},
 {0, 0, 0},
 {0, 0, 1}}
array.scaling(0, 0, 0, elemtype => elemtype) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 1}}
array.scaling(2, 3, elemtype => elemtype) ..
{{2, 0, 0},
 {0, 3, 0},
 {0, 0, 1}}
array.scaling(2, 3, 4, elemtype => elemtype) ..
{{2, 0, 0, 0},
 {0, 3, 0, 0},
 {0, 0, 4, 0},
 {0, 0, 0, 1}}

======== #14 array.translation() ========

boolean
array.translation(0, 0, elemtype => elemtype) ..
{{ true, false, false},
 {false,  true, false},
 {false, false,  true}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{ true, false, false, false},
 {false,  true, false, false},
 {false, false,  true, false},
 {false, false, false,  true}}
array.translation(2, 3, elemtype => elemtype) ..
{{ true, false,  true},
 {false,  true,  true},
 {false, false,  true}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{ true, false, false,  true},
 {false,  true, false,  true},
 {false, false,  true,  true},
 {false, false, false,  true}}
int8
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
uint8
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
int16
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
uint16
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
int32
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
uint32
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
int64
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
uint64
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
half
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
float
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
double
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}
complex
array.translation(0, 0, elemtype => elemtype) ..
{{1, 0, 0},
 {0, 1, 0},
 {0, 0, 1}}
array.translation(0, 0, 0, elemtype => elemtype) ..
{{1, 0, 0, 0},
 {0, 1, 0, 0},
 {0, 0, 1, 0},
 {0, 0, 0, 1}}
array.translation(2, 3, elemtype => elemtype) ..
{{1, 0, 2},
 {0, 1, 3},
 {0, 0, 1}}
array.translation(2, 3, 4, elemtype => elemtype) ..
{{1, 0, 0, 2},
 {0, 1, 0, 3},
 {0, 0, 1, 4},
 {0, 0, 0, 1}}

======== #15 array.zeros() ========

boolean
{{false, false, false, false},
 {false, false, false, false},
 {false, false, false, false}}
{{{false, false, false, false},
  {false, false, false, false},
  {false, false, false, false}},

 {{false, false, false, false},
  {false, false, false, false},
  {false, false, false, false}}}
int8
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
uint8
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
int16
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
uint16
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
int32
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
uint32
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
int64
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
uint64
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
half
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
float
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
double
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}
complex
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
{{{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}},

 {{0, 0, 0, 0},
  {0, 0, 0, 0},
  {0, 0, 0, 0}}}

======== #16 cast to list ========

boolean
false true true true true true true true true true true true true true true true true true true true true true true true true true true true true true
int8
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint8
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
int16
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint16
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
int32
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint32
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
int64
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
uint64
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
half
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
float
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
double
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
complex
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29

======== #17 cast from list ========

[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]

======== #18 cast from iterator ========

[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]

======== #19 tostring ========

x.tostring(0) ..
{0,
 0,
 0}
x.tostring(1) .. {0, 0, 0}
x.tostring(0) ..
{{0,
  0,
  0,
  0},

 {0,
  0,
  0,
  0},

 {0,
  0,
  0,
  0}}
x.tostring(1) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
x.tostring(2) .. {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}
x.tostring(0) ..
{{{0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0}},


 {{0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0}},


 {{0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0},

  {0,
   0,
   0,
   0,
   0}}}
x.tostring(1) ..
{{{0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0}},

 {{0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0}},

 {{0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0}}}
x.tostring(2) ..
{{{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}},
 {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}},
 {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}}
x.tostring(3) .. {{{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}}

======== #20 head/tail ========

boolean
[ 0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
[ 0  1  1  1  1  1  1  1  1  1  1  1]
[ 1  1  1  1  1  1  1  1  1  1  1  1]
[ 0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
[ 0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{false,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}}}
head(0):
{}
head(1):
{{{false,  true,  true,  true},
  { true,  true,  true,  true}}}
head(2):
{{{false,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}}}
head(3):
{{{false,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}}}
head(4):
{{{false,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}}}
tail(0):
{}
tail(1):
{{{true, true, true, true},
  {true, true, true, true}}}
tail(2):
{{{true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true}}}
tail(3):
{{{true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true}}}
tail(4):
{{{false,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}}}
offset(0):
{{{false,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}},

 {{ true,  true,  true,  true},
  { true,  true,  true,  true}}}
offset(1):
{{{true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true}}}
offset(2):
{{{true, true, true, true},
  {true, true, true, true}},

 {{true, true, true, true},
  {true, true, true, true}}}
offset(3):
{{{true, true, true, true},
  {true, true, true, true}}}
offset(4):
{}
int8
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
uint8
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
int16
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
uint16
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
int32
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
uint32
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
int64
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
uint64
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
half
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
float
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
double
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}
complex
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
expected error occurs: OutOfRange: specified size is out of range
expected error occurs: OutOfRange: specified size is out of range
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
head(0):
{}
head(1):
{{{0, 1, 2, 3},
  {4, 5, 6, 7}}}
head(2):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}}}
head(3):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}}}
head(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(0):
{}
tail(1):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(3):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
tail(4):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(0):
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7}},

 {{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(1):
{{{ 8,  9, 10, 11},
  {12, 13, 14, 15}},

 {{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(2):
{{{16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(3):
{{{24, 25, 26, 27},
  {28, 29, 30, 31}}}
offset(4):
{}

======== #21 offset ========

boolean
[ 0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
[ 1  1  1]
[ 1]
[]
expected error occurs: OutOfRange: offset is out of range
int8
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
uint8
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
int16
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
uint16
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
int32
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
uint32
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
int64
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
uint64
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
half
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
float
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
double
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range
complex
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[27 28 29]
[29]
[]
expected error occurs: OutOfRange: offset is out of range

======== #22 paste ========

boolean
[ 0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
expected error occurs: OutOfRange: out of range
[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
int8
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
uint8
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
int16
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
uint16
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
int32
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
uint32
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
int64
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
uint64
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
half
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
float
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
double
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]
complex
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
[90 91 92 93 94 95 96 97 98 99 10 11 12 13 14 15 16 17 18 19 90 91 92 93 94 95 96 97 98 99]
expected error occurs: OutOfRange: out of range
[90 91 92 93 94 95 96 97 98 99 10 11 93 94 95 96 97 98 99 19 90 91 92 93 94 95 96 97 98 99]

======== #23 initializer ========

boolean:[ 0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]
int8:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
uint8:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
int16:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
uint16:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
int32:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
uint32:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
int64:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
uint64:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
half:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
float:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
double:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
complex:[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
boolean:[[ 0  1  1  1  1  1  1  1][ 1  1  1  1  1  1  1  1][ 1  1  1  1  1  1  1  1][ 1  1  1  1  1  1  1  1]]
int8:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
uint8:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
int16:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
uint16:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
int32:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
uint32:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
int64:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
uint64:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
half:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
float:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
double:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
complex:[[ 0  1  2  3  4  5  6  7][ 8  9 10 11 12 13 14 15][16 17 18 19 20 21 22 23][24 25 26 27 28 29 30 31]]
boolean:[[[ 0  1  1  1][ 1  1  1  1]][[ 1  1  1  1][ 1  1  1  1]][[ 1  1  1  1][ 1  1  1  1]][[ 1  1  1  1][ 1  1  1  1]]]
int8:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
uint8:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
int16:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
uint16:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
int32:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
uint32:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
int64:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
uint64:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
half:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
float:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
double:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]
complex:[[[ 0  1  2  3][ 4  5  6  7]][[ 8  9 10 11][12 13 14 15]][[16 17 18 19][20 21 22 23]][[24 25 26 27][28 29 30 31]]]

======== #24 operator ========

boolean
{ +a } = [ 1  1  1  1  1  1  1  1  1  1]
{ -a } = [ 1  1  1  1  1  1  1  1  1  1]
{ a + b } = [ 2  2  2  2  2  2  2  2  2  2]
{ a - b } = [ 0  0  0  0  0  0  0  0  0  0]
{ a * b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a / b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  0  0  0  0  0  0  0  0  0]
{ a_short ** b_short } = [ 1  1  1]
{ a + 3 } = [ 4  4  4  4  4  4  4  4  4  4]
{ a - 3 } = [-2 -2 -2 -2 -2 -2 -2 -2 -2 -2]
{ a * 3 } = [ 3  3  3  3  3  3  3  3  3  3]
{ a / 3 } = [ 0  0  0  0  0  0  0  0  0  0]
{ a % 3 } = [ 1  1  1  1  1  1  1  1  1  1]
{ a ** 3 } = [ 1  1  1  1  1  1  1  1  1  1]
{ 3 + b } = [ 4  4  4  4  4  4  4  4  4  4]
{ 3 - b } = [ 2  2  2  2  2  2  2  2  2  2]
{ 3 * b } = [ 3  3  3  3  3  3  3  3  3  3]
{ 3 / b } = [ 3  3  3  3  3  3  3  3  3  3]
{ 3 % b } = [ 0  0  0  0  0  0  0  0  0  0]
{ 3 ** b } = [ 3  3  3  3  3  3  3  3  3  3]
{ a & b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a | b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a ^ b } = [ 0  0  0  0  0  0  0  0  0  0]
{ a & 3 } = [ 1  1  1  1  1  1  1  1  1  1]
{ a | 3 } = [ 3  3  3  3  3  3  3  3  3  3]
{ a ^ 3 } = [ 2  2  2  2  2  2  2  2  2  2]
{ 3 & b } = [ 1  1  1  1  1  1  1  1  1  1]
{ 3 | b } = [ 3  3  3  3  3  3  3  3  3  3]
{ 3 ^ b } = [ 2  2  2  2  2  2  2  2  2  2]

int8
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 -40 87  0 -39 -24 51]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 -13 -39 -117 -95 -29 -87]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

uint8
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [254 253 252 251 250 249 248 247 246 245]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [255  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 87  0 217 232 51]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 255 254 253 252 251 250 249]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 217 139 161 227 169]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

int16
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 -6487]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

uint16
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [65534 65533 65532 65531 65530 65529 65528 65527 65526 65525]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [65535  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 65535 65534 65533 65532 65531 65530 65529]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

int32
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

uint32
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [4294967294 4294967293 4294967292 4294967291 4294967290 4294967289 4294967288 4294967287 4294967286 4294967285]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [4294967295  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 4294967295 4294967294 4294967293 4294967292 4294967291 4294967290 4294967289]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

int64
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

uint64
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-9223372036854775808  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = [ 0  2  0  4  4  6  0  8  8 10]
{ a | b } = [ 3  3  7  5  7  7 15  9 11 11]
{ a ^ b } = [ 3  1  7  1  3  1 15  1  3  1]
{ a & 3 } = [ 2  3  0  1  2  3  0  1  2  3]
{ a | 3 } = [ 3  3  7  7  7  7 11 11 11 11]
{ a ^ 3 } = [ 1  0  7  6  5  4 11 10  9  8]
{ 3 & b } = [ 1  2  3  0  1  2  3  0  1  2]
{ 3 | b } = [ 3  3  3  7  7  7  7 11 11 11]
{ 3 ^ b } = [ 2  1  0  7  6  5  4 11 10  9]

half
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2186 6560 19680 59040]
{ a & b } = TypeError: can't apply and function on these arrays
{ a | b } = TypeError: can't apply or function on these arrays
{ a ^ b } = TypeError: can't apply xor function on these arrays
{ a & 3 } = TypeError: can't apply and function on these arrays
{ a | 3 } = TypeError: can't apply or function on these arrays
{ a ^ 3 } = TypeError: can't apply xor function on these arrays
{ 3 & b } = TypeError: can't apply and function on these arrays
{ 3 | b } = TypeError: can't apply or function on these arrays
{ 3 ^ b } = TypeError: can't apply xor function on these arrays

float
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = TypeError: can't apply and function on these arrays
{ a | b } = TypeError: can't apply or function on these arrays
{ a ^ b } = TypeError: can't apply xor function on these arrays
{ a & 3 } = TypeError: can't apply and function on these arrays
{ a | 3 } = TypeError: can't apply or function on these arrays
{ a ^ 3 } = TypeError: can't apply xor function on these arrays
{ 3 & b } = TypeError: can't apply and function on these arrays
{ 3 | b } = TypeError: can't apply or function on these arrays
{ 3 ^ b } = TypeError: can't apply xor function on these arrays

double
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 64]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 8 27 64 125 216 343 512 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = TypeError: can't apply and function on these arrays
{ a | b } = TypeError: can't apply or function on these arrays
{ a ^ b } = TypeError: can't apply xor function on these arrays
{ a & 3 } = TypeError: can't apply and function on these arrays
{ a | 3 } = TypeError: can't apply or function on these arrays
{ a ^ 3 } = TypeError: can't apply xor function on these arrays
{ 3 & b } = TypeError: can't apply and function on these arrays
{ 3 | b } = TypeError: can't apply or function on these arrays
{ 3 ^ b } = TypeError: can't apply xor function on these arrays

complex
{ +a } = [ 2  3  4  5  6  7  8  9 10 11]
{ -a } = [-2 -3 -4 -5 -6 -7 -8 -9 -10 -11]
{ a + b } = [ 3  5  7  9 11 13 15 17 19 21]
{ a - b } = [ 1  1  1  1  1  1  1  1  1  1]
{ a * b } = [ 2  6 12 20 30 42 56 72 90 110]
{ a / b } = [ 2  1  1  1  1  1  1  1  1  1]
{ a % b } = [ 0  1  1  1  1  1  1  1  1  1]
{ a_short ** b_short } = [ 2  9 63]
{ a + 3 } = [ 5  6  7  8  9 10 11 12 13 14]
{ a - 3 } = [-1  0  1  2  3  4  5  6  7  8]
{ a * 3 } = [ 6  9 12 15 18 21 24 27 30 33]
{ a / 3 } = [ 0  1  1  1  2  2  2  3  3  3]
{ a % 3 } = [ 2  0  1  2  0  1  2  0  1  2]
{ a ** 3 } = [ 7 27 63 124 216 342 511 729 1000 1331]
{ 3 + b } = [ 4  5  6  7  8  9 10 11 12 13]
{ 3 - b } = [ 2  1  0 -1 -2 -3 -4 -5 -6 -7]
{ 3 * b } = [ 3  6  9 12 15 18 21 24 27 30]
{ 3 / b } = [ 3  1  1  0  0  0  0  0  0  0]
{ 3 % b } = [ 0  1  0  3  3  3  3  3  3  3]
{ 3 ** b } = [ 3  9 27 81 243 729 2187 6561 19683 59049]
{ a & b } = TypeError: can't apply and function on these arrays
{ a | b } = TypeError: can't apply or function on these arrays
{ a ^ b } = TypeError: can't apply xor function on these arrays
{ a & 3 } = TypeError: can't apply and function on these arrays
{ a | 3 } = TypeError: can't apply or function on these arrays
{ a ^ 3 } = TypeError: can't apply xor function on these arrays
{ 3 & b } = TypeError: can't apply and function on these arrays
{ 3 | b } = TypeError: can't apply or function on these arrays
{ 3 ^ b } = TypeError: can't apply xor function on these arrays


======== #25 cast to memory ========

boolean
16bytes
00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
int8
16bytes
00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
uint8
16bytes
00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
int16
32bytes
00 00 01 00 02 00 03 00 04 00 05 00 06 00 07 00 08 00 09 00 0a 00 0b 00
0c 00 0d 00 0e 00 0f 00
uint16
32bytes
00 00 01 00 02 00 03 00 04 00 05 00 06 00 07 00 08 00 09 00 0a 00 0b 00
0c 00 0d 00 0e 00 0f 00
int32
64bytes
00 00 00 00 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00
06 00 00 00 07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00 0b 00 00 00
0c 00 00 00 0d 00 00 00 0e 00 00 00 0f 00 00 00
uint32
64bytes
00 00 00 00 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00
06 00 00 00 07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00 0b 00 00 00
0c 00 00 00 0d 00 00 00 0e 00 00 00 0f 00 00 00
int64
128bytes
00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00
03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
06 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00
09 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00
0c 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00
0f 00 00 00 00 00 00 00
uint64
128bytes
00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00
03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
06 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00
09 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00
0c 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00
0f 00 00 00 00 00 00 00
half
32bytes
00 00 00 3c 00 40 00 42 00 44 00 45 00 46 00 47 00 48 80 48 00 49 80 49
00 4a 80 4a 00 4b 80 4b
float
64bytes
00 00 00 00 00 00 80 3f 00 00 00 40 00 00 40 40 00 00 80 40 00 00 a0 40
00 00 c0 40 00 00 e0 40 00 00 00 41 00 00 10 41 00 00 20 41 00 00 30 41
00 00 40 41 00 00 50 41 00 00 60 41 00 00 70 41
double
128bytes
00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 3f 00 00 00 00 00 00 00 40
00 00 00 00 00 00 08 40 00 00 00 00 00 00 10 40 00 00 00 00 00 00 14 40
00 00 00 00 00 00 18 40 00 00 00 00 00 00 1c 40 00 00 00 00 00 00 20 40
00 00 00 00 00 00 22 40 00 00 00 00 00 00 24 40 00 00 00 00 00 00 26 40
00 00 00 00 00 00 28 40 00 00 00 00 00 00 2a 40 00 00 00 00 00 00 2c 40
00 00 00 00 00 00 2e 40
complex
256bytes
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 3f
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00
00 00 00 00 00 00 08 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 40
00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 40 00 00 00 00 00 00 00 00
00 00 00 00 00 00 18 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1c 40
00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 40 00 00 00 00 00 00 00 00
00 00 00 00 00 00 22 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 24 40
00 00 00 00 00 00 00 00 00 00 00 00 00 00 26 40 00 00 00 00 00 00 00 00
00 00 00 00 00 00 28 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2a 40
00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 40 00 00 00 00 00 00 00 00
00 00 00 00 00 00 2e 40 00 00 00 00 00 00 00 00

======== #26 error for infinite iterator ========

expected error occurs: IteratorError: cannot evaluate infinite iterator

======== #27 divide by zero ========

boolean
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
int8
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
uint8
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
int16
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
uint16
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
int32
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
uint32
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
int64
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
uint64
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
half
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
float
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
double
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero
complex
x / y .. ZeroDivisionError: divide by zero
x / 0 .. ZeroDivisionError: divide by zero
2 / y .. ZeroDivisionError: divide by zero

======== #28 sum/mean ========

boolean
sum = 10
avg = 1
int8
sum = 55
avg = 5
uint8
sum = 55
avg = 5
int16
sum = 55
avg = 5
uint16
sum = 55
avg = 5
int32
sum = 55
avg = 5
uint32
sum = 55
avg = 5
int64
sum = 55
avg = 5
uint64
sum = 55
avg = 5
half
sum = 55
avg = 5.5
float
sum = 55
avg = 5.5
double
sum = 55
avg = 5.5
complex
sum = 55
avg = 5.5

======== #29 modification on referenced instance ========

{{1, 2},
 {3, 4},
 {5, 6}}
{1, 2, 3, 4, 5, 6}
{   1,    2,    3, 3333,    5,    6}
{{1, 2},
 {3, 4},
 {5, 6}}

======== #30 array#flatten() ========

array([[1, 2], [3, 4], [5, 6]], elemtype => `int32).flatten() .. {1, 2, 3, 4, 5, 6}
array([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]], elemtype => `int32).flatten() .. { 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12}
array([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]], elemtype => `int32)[1].flatten() .. { 7,  8,  9, 10, 11, 12}

======== #31 array#reshape() ========

{ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}
x.reshape([nil]) .. { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}
x.reshape([24]) .. { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}
x.reshape([1, 24]) .. {{ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}}
x.reshape([8, 3]) ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11},
 {12, 13, 14},
 {15, 16, 17},
 {18, 19, 20},
 {21, 22, 23}}
x.reshape([4, 2, 3]) ..
{{{ 0,  1,  2},
  { 3,  4,  5}},

 {{ 6,  7,  8},
  { 9, 10, 11}},

 {{12, 13, 14},
  {15, 16, 17}},

 {{18, 19, 20},
  {21, 22, 23}}}
x.reshape([8, nil]) ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11},
 {12, 13, 14},
 {15, 16, 17},
 {18, 19, 20},
 {21, 22, 23}}
x.reshape([nil, 3]) ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11},
 {12, 13, 14},
 {15, 16, 17},
 {18, 19, 20},
 {21, 22, 23}}
x.reshape([nil, 2, 3]) ..
{{{ 0,  1,  2},
  { 3,  4,  5}},

 {{ 6,  7,  8},
  { 9, 10, 11}},

 {{12, 13, 14},
  {15, 16, 17}},

 {{18, 19, 20},
  {21, 22, 23}}}
x.reshape([4, nil, 3]) ..
{{{ 0,  1,  2},
  { 3,  4,  5}},

 {{ 6,  7,  8},
  { 9, 10, 11}},

 {{12, 13, 14},
  {15, 16, 17}},

 {{18, 19, 20},
  {21, 22, 23}}}
x.reshape([4, 2, nil]) ..
{{{ 0,  1,  2},
  { 3,  4,  5}},

 {{ 6,  7,  8},
  { 9, 10, 11}},

 {{12, 13, 14},
  {15, 16, 17}},

 {{18, 19, 20},
  {21, 22, 23}}}
x.reshape([4, nil, nil]) .. ValueError: only one dimension can be specified as an unfixed
x.reshape([4, 2, 4]) .. ValueError: incorrect shape specified
x.T.reshape([4, 2, nil]) ..
{{{ 0,  1,  2},
  { 3,  4,  5}},

 {{ 6,  7,  8},
  { 9, 10, 11}},

 {{12, 13, 14},
  {15, 16, 17}},

 {{18, 19, 20},
  {21, 22, 23}}}

======== #32 array#transpose() ========

{{ 1,  2,  3,  4},
 { 5,  6,  7,  8},
 { 9, 10, 11, 12}}
[3, 4]
{{ 1,  2,  3,  4},
 { 5,  6,  7,  8},
 { 9, 10, 11, 12}}
[4, 3]
{{ 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11},
 { 4,  8, 12}}
ValueError: specified axis is out of range
ValueError: mismatched number of axes to transpose
ValueError: mismatched number of axes to transpose
ValueError: duplicated axis is specified
{{{ 1,  2,  3,  4},
  { 5,  6,  7,  8},
  { 9, 10, 11, 12}},

 {{13, 14, 15, 16},
  {17, 18, 19, 20},
  {21, 22, 23, 24}}}
[2, 3, 4]
{{{ 1,  2,  3,  4},
  { 5,  6,  7,  8},
  { 9, 10, 11, 12}},

 {{13, 14, 15, 16},
  {17, 18, 19, 20},
  {21, 22, 23, 24}}}
[2, 4, 3]
{{{ 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11},
  { 4,  8, 12}},

 {{13, 17, 21},
  {14, 18, 22},
  {15, 19, 23},
  {16, 20, 24}}}
[3, 2, 4]
{{{ 1,  2,  3,  4},
  {13, 14, 15, 16}},

 {{ 5,  6,  7,  8},
  {17, 18, 19, 20}},

 {{ 9, 10, 11, 12},
  {21, 22, 23, 24}}}
ValueError: specified axis is out of range
ValueError: mismatched number of axes to transpose
ValueError: mismatched number of axes to transpose
ValueError: mismatched number of axes to transpose
ValueError: duplicated axis is specified

======== #33 array#T ========

{{ 1,  2,  3,  4},
 { 5,  6,  7,  8},
 { 9, 10, 11, 12}}
[4, 3]
{{ 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11},
 { 4,  8, 12}}

======== #34 array.dot() ========

elemtype: half
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}
elemtype: float
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}
elemtype: double
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}
elemtype: complex
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}
elemtype: half
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}
elemtype: float
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}
elemtype: double
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}
elemtype: complex
array.dot(a, f) .. -5
array.dot(a, d) .. {56, -2}
array.dot(a, e) .. {-50,  19,  17}
array.dot(b.reshape([2, 1]), a.reshape([1, 3])) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
array.dot(c, d) ..
{{43, 19},
 {35,  1}}
array.dot(c, e) ..
{{ 67,  40, -15},
 {-11,  12,  31}}
array.dot(d, b) ..
{{29},
 {17},
 {18}}
array.dot(d, c) ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
array.dot(e, d) ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
a |.| f .. -5
a |.| d .. {56, -2}
a |.| e .. {-50,  19,  17}
b.reshape([2, 1]) |.| a.reshape([1, 3]) ..
{{ 5, 25, 45},
 { 2, 10, 18}}
c |.| d ..
{{43, 19},
 {35,  1}}
c |.| e ..
{{ 67,  40, -15},
 {-11,  12,  31}}
d |.| b ..
{{29},
 {17},
 {18}}
d |.| c ..
{{41, 20,  5},
 {24, 12,  2},
 {25, 16, -9}}
e |.| d ..
{{ 60,  18},
 {-10,  11},
 {-15, -19}}
d |.| 3 ..
{{15,  6},
 { 9,  3},
 {12, -3}}
3 |.| d ..
{{15,  6},
 { 9,  3},
 {12, -3}}
d |.| 3j ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
3j |.| d ..
{{15j,  6j},
 { 9j,  3j},
 {12j, -3j}}
a |.| g ..
{{ 56,  -2,  38},
 {-50,  19,  17}}
g |.| a ..
{{{ 24},
  { 26},
  { 26}},

 {{ 46},
  {-38},
  { 38}}}

======== #35 array.invert() ========

elemtype: half
array([[1, 1, -1], [-2, 0, 1], [0, 2, 1]], elemtype).invert() ..
{{ -0.5, -0.75,  0.25},
 {  0.5,  0.25,  0.25},
 {   -1,  -0.5,   0.5}}
array([[1, 2, 1], [2, 1, 0], [1, 1, 2]], elemtype).invert() ..
{{-0.399658,  0.599609,  0.199951},
 { 0.799316, -0.200073, -0.399902},
 {-0.199951, -0.199951,  0.600098}}
array([[2, -1, 0], [2, -1, -1], [1, 0, -1]], elemtype).invert() ..
{{ 1, -1,  1},
 { 1, -2,  2},
 { 1, -1, -0}}
array([[[1, 1, -1], [-2, 0, 1], [0, 2, 1]], [[1, 2, 1], [2, 1, 0], [1, 1, 2]], [[2, -1, 0], [2, -1, -1], [1, 0, -1]]], elemtype).invert() ..
{{{     -0.5,     -0.75,      0.25},
  {      0.5,      0.25,      0.25},
  {       -1,      -0.5,       0.5}},

 {{-0.399658,  0.599609,  0.199951},
  { 0.799316, -0.200073, -0.399902},
  {-0.199951, -0.199951,  0.600098}},

 {{        1,        -1,         1},
  {        1,        -2,         2},
  {        1,        -1,        -0}}}
elemtype: float
array([[1, 1, -1], [-2, 0, 1], [0, 2, 1]], elemtype).invert() ..
{{ -0.5, -0.75,  0.25},
 {  0.5,  0.25,  0.25},
 {   -1,  -0.5,   0.5}}
array([[1, 2, 1], [2, 1, 0], [1, 1, 2]], elemtype).invert() ..
{{-0.4,  0.6,  0.2},
 { 0.8, -0.2, -0.4},
 {-0.2, -0.2,  0.6}}
array([[2, -1, 0], [2, -1, -1], [1, 0, -1]], elemtype).invert() ..
{{ 1, -1,  1},
 { 1, -2,  2},
 { 1, -1, -0}}
array([[[1, 1, -1], [-2, 0, 1], [0, 2, 1]], [[1, 2, 1], [2, 1, 0], [1, 1, 2]], [[2, -1, 0], [2, -1, -1], [1, 0, -1]]], elemtype).invert() ..
{{{ -0.5, -0.75,  0.25},
  {  0.5,  0.25,  0.25},
  {   -1,  -0.5,   0.5}},

 {{ -0.4,   0.6,   0.2},
  {  0.8,  -0.2,  -0.4},
  { -0.2,  -0.2,   0.6}},

 {{    1,    -1,     1},
  {    1,    -2,     2},
  {    1,    -1,    -0}}}
elemtype: double
array([[1, 1, -1], [-2, 0, 1], [0, 2, 1]], elemtype).invert() ..
{{ -0.5, -0.75,  0.25},
 {  0.5,  0.25,  0.25},
 {   -1,  -0.5,   0.5}}
array([[1, 2, 1], [2, 1, 0], [1, 1, 2]], elemtype).invert() ..
{{-0.4,  0.6,  0.2},
 { 0.8, -0.2, -0.4},
 {-0.2, -0.2,  0.6}}
array([[2, -1, 0], [2, -1, -1], [1, 0, -1]], elemtype).invert() ..
{{ 1, -1,  1},
 { 1, -2,  2},
 { 1, -1, -0}}
array([[[1, 1, -1], [-2, 0, 1], [0, 2, 1]], [[1, 2, 1], [2, 1, 0], [1, 1, 2]], [[2, -1, 0], [2, -1, -1], [1, 0, -1]]], elemtype).invert() ..
{{{ -0.5, -0.75,  0.25},
  {  0.5,  0.25,  0.25},
  {   -1,  -0.5,   0.5}},

 {{ -0.4,   0.6,   0.2},
  {  0.8,  -0.2,  -0.4},
  { -0.2,  -0.2,   0.6}},

 {{    1,    -1,     1},
  {    1,    -2,     2},
  {    1,    -1,    -0}}}
elemtype: complex
array([[1, 1, -1], [-2, 0, 1], [0, 2, 1]], elemtype).invert() ..
{{ -0.5, -0.75,  0.25},
 {  0.5,  0.25,  0.25},
 {   -1,  -0.5,   0.5}}
array([[1, 2, 1], [2, 1, 0], [1, 1, 2]], elemtype).invert() ..
{{-0.4,  0.6,  0.2},
 { 0.8, -0.2, -0.4},
 {-0.2, -0.2,  0.6}}
array([[2, -1, 0], [2, -1, -1], [1, 0, -1]], elemtype).invert() ..
{{ 1, -1,  1},
 { 1, -2,  2},
 { 1, -1,  0}}
array([[[1, 1, -1], [-2, 0, 1], [0, 2, 1]], [[1, 2, 1], [2, 1, 0], [1, 1, 2]], [[2, -1, 0], [2, -1, -1], [1, 0, -1]]], elemtype).invert() ..
{{{ -0.5, -0.75,  0.25},
  {  0.5,  0.25,  0.25},
  {   -1,  -0.5,   0.5}},

 {{ -0.4,   0.6,   0.2},
  {  0.8,  -0.2,  -0.4},
  { -0.2,  -0.2,   0.6}},

 {{    1,    -1,     1},
  {    1,    -2,     2},
  {    1,    -1,     0}}}
array.zeros([3, 3]).invert() .. ValueError: failed to calculate inverted matrix

======== #36 properties ========

boolean
elembytes: 1
elemtype: boolean
ndim: 3
shape: [4, 2, 3]
size: 24
int8
elembytes: 1
elemtype: int8
ndim: 3
shape: [4, 2, 3]
size: 24
uint8
elembytes: 1
elemtype: uint8
ndim: 3
shape: [4, 2, 3]
size: 24
int16
elembytes: 2
elemtype: int16
ndim: 3
shape: [4, 2, 3]
size: 24
uint16
elembytes: 2
elemtype: uint16
ndim: 3
shape: [4, 2, 3]
size: 24
int32
elembytes: 4
elemtype: int32
ndim: 3
shape: [4, 2, 3]
size: 24
uint32
elembytes: 4
elemtype: uint32
ndim: 3
shape: [4, 2, 3]
size: 24
int64
elembytes: 8
elemtype: int64
ndim: 3
shape: [4, 2, 3]
size: 24
uint64
elembytes: 8
elemtype: uint64
ndim: 3
shape: [4, 2, 3]
size: 24
half
elembytes: 2
elemtype: half
ndim: 3
shape: [4, 2, 3]
size: 24
float
elembytes: 4
elemtype: float
ndim: 3
shape: [4, 2, 3]
size: 24
double
elembytes: 8
elemtype: double
ndim: 3
shape: [4, 2, 3]
size: 24
complex
elembytes: 16
elemtype: complex
ndim: 3
shape: [4, 2, 3]
size: 24

======== #37 array as an alias of array@double ========

array.identity(5) ..
{{1, 0, 0, 0, 0},
 {0, 1, 0, 0, 0},
 {0, 0, 1, 0, 0},
 {0, 0, 0, 1, 0},
 {0, 0, 0, 0, 1}}
array.interval(0, 8, 5) .. {0, 2, 4, 6, 8}
array.ones([3, 4]) ..
{{1, 1, 1, 1},
 {1, 1, 1, 1},
 {1, 1, 1, 1}}
array.rands([3, 4], 10) ..
{{0, 2, 2, 3},
 {8, 1, 0, 9},
 {6, 1, 6, 7}}
array.rands@normal([3, 4], 3, 5) ..
{{ 7.72027,  3.25155,  5.78284,  2.63684},
 {-1.76938, -2.11727,  2.35984,  5.07136},
 { -1.9083, -3.10203,  4.70649, -0.20649}}
array.zeros([3, 4]) ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}

======== #38 constructor with initial values ========

boolean
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{true}
{true, true}
{true, true, true}
{true, true, true, true}
{{true, true},
 {true, true}}
{{true, true, true},
 {true, true, true}}
{true}
{true, true}
{true, true, true}
{true, true, true, true}
int8
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
uint8
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
int16
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
uint16
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
int32
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
uint32
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
int64
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
uint64
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
half
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
float
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
double
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
complex
{}
{{}}
{{},
 {}}
{{},
 {},
 {}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}
{{1, 2},
 {3, 4}}
{{1, 2, 3},
 {4, 5, 6}}
{1}
{1, 2}
{1, 2, 3}
{1, 2, 3, 4}

======== #39 dimension mismatch error ========

array { 1, 2, 3 } + array { 1, 2 } .. ValueError: failed in array calculation: (3) + (2)
array { { 1, 2 }, { 3, 4 } } + array { { 1, 2, 3 }, { 4, 5, 6 } } .. ValueError: failed in array calculation: (2, 2) + (2, 3)
array { { 1, 2 }, { 3, 4 } } |.| array { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } } .. ValueError: failed in array calculation: (2, 2) |.| (3, 3)

======== #40 sum ========

----
{}
a.sum() .. 0
a.sum(0) .. 0
a.sum(1) .. OutOfRange: specified axis is out of range
a.sum(2) .. OutOfRange: specified axis is out of range
a.sum(3) .. OutOfRange: specified axis is out of range
a.sum(4) .. OutOfRange: specified axis is out of range
----
{0, 1, 2, 3, 4, 5}
a.sum() .. 15
a.sum(0) .. 15
a.sum(1) .. OutOfRange: specified axis is out of range
a.sum(2) .. OutOfRange: specified axis is out of range
a.sum(3) .. OutOfRange: specified axis is out of range
a.sum(4) .. OutOfRange: specified axis is out of range
----
{{0, 1},
 {2, 3},
 {4, 5}}
a.sum() .. 15
a.sum(0) .. {6, 9}
a.sum(1) .. {1, 5, 9}
a.sum(2) .. OutOfRange: specified axis is out of range
a.sum(3) .. OutOfRange: specified axis is out of range
a.sum(4) .. OutOfRange: specified axis is out of range
----
{{{ 0,  1},
  { 2,  3},
  { 4,  5}},

 {{ 6,  7},
  { 8,  9},
  {10, 11}},

 {{12, 13},
  {14, 15},
  {16, 17}},

 {{18, 19},
  {20, 21},
  {22, 23}}}
a.sum() .. 276
a.sum(0) ..
{{36, 40},
 {44, 48},
 {52, 56}}
a.sum(1) ..
{{ 6,  9},
 {24, 27},
 {42, 45},
 {60, 63}}
a.sum(2) ..
{{ 1,  5,  9},
 {13, 17, 21},
 {25, 29, 33},
 {37, 41, 45}}
a.sum(3) .. OutOfRange: specified axis is out of range
a.sum(4) .. OutOfRange: specified axis is out of range
----
{{{{ 0,  1},
   { 2,  3},
   { 4,  5}},

  {{ 6,  7},
   { 8,  9},
   {10, 11}},

  {{12, 13},
   {14, 15},
   {16, 17}},

  {{18, 19},
   {20, 21},
   {22, 23}}},


 {{{24, 25},
   {26, 27},
   {28, 29}},

  {{30, 31},
   {32, 33},
   {34, 35}},

  {{36, 37},
   {38, 39},
   {40, 41}},

  {{42, 43},
   {44, 45},
   {46, 47}}}}
a.sum() .. 1128
a.sum(0) ..
{{{24, 26},
  {28, 30},
  {32, 34}},

 {{36, 38},
  {40, 42},
  {44, 46}},

 {{48, 50},
  {52, 54},
  {56, 58}},

 {{60, 62},
  {64, 66},
  {68, 70}}}
a.sum(1) ..
{{{ 36,  40},
  { 44,  48},
  { 52,  56}},

 {{132, 136},
  {140, 144},
  {148, 152}}}
a.sum(2) ..
{{{  6,   9},
  { 24,  27},
  { 42,  45},
  { 60,  63}},

 {{ 78,  81},
  { 96,  99},
  {114, 117},
  {132, 135}}}
a.sum(3) ..
{{{ 1,  5,  9},
  {13, 17, 21},
  {25, 29, 33},
  {37, 41, 45}},

 {{49, 53, 57},
  {61, 65, 69},
  {73, 77, 81},
  {85, 89, 93}}}
a.sum(4) .. OutOfRange: specified axis is out of range

======== #41 mean ========

----
{}
a.mean() .. 0
a.mean(0) .. 0
a.mean(1) .. OutOfRange: specified axis is out of range
a.mean(2) .. OutOfRange: specified axis is out of range
a.mean(3) .. OutOfRange: specified axis is out of range
a.mean(4) .. OutOfRange: specified axis is out of range
----
{0, 1, 2, 3, 4, 5}
a.mean() .. 2.5
a.mean(0) .. 2.5
a.mean(1) .. OutOfRange: specified axis is out of range
a.mean(2) .. OutOfRange: specified axis is out of range
a.mean(3) .. OutOfRange: specified axis is out of range
a.mean(4) .. OutOfRange: specified axis is out of range
----
{{0, 1},
 {2, 3},
 {4, 5}}
a.mean() .. 2.5
a.mean(0) .. {2, 3}
a.mean(1) .. {0.5, 2.5, 4.5}
a.mean(2) .. OutOfRange: specified axis is out of range
a.mean(3) .. OutOfRange: specified axis is out of range
a.mean(4) .. OutOfRange: specified axis is out of range
----
{{{ 0,  1},
  { 2,  3},
  { 4,  5}},

 {{ 6,  7},
  { 8,  9},
  {10, 11}},

 {{12, 13},
  {14, 15},
  {16, 17}},

 {{18, 19},
  {20, 21},
  {22, 23}}}
a.mean() .. 11.5
a.mean(0) ..
{{ 9, 10},
 {11, 12},
 {13, 14}}
a.mean(1) ..
{{ 2,  3},
 { 8,  9},
 {14, 15},
 {20, 21}}
a.mean(2) ..
{{ 0.5,  2.5,  4.5},
 { 6.5,  8.5, 10.5},
 {12.5, 14.5, 16.5},
 {18.5, 20.5, 22.5}}
a.mean(3) .. OutOfRange: specified axis is out of range
a.mean(4) .. OutOfRange: specified axis is out of range
----
{{{{ 0,  1},
   { 2,  3},
   { 4,  5}},

  {{ 6,  7},
   { 8,  9},
   {10, 11}},

  {{12, 13},
   {14, 15},
   {16, 17}},

  {{18, 19},
   {20, 21},
   {22, 23}}},


 {{{24, 25},
   {26, 27},
   {28, 29}},

  {{30, 31},
   {32, 33},
   {34, 35}},

  {{36, 37},
   {38, 39},
   {40, 41}},

  {{42, 43},
   {44, 45},
   {46, 47}}}}
a.mean() .. 23.5
a.mean(0) ..
{{{12, 13},
  {14, 15},
  {16, 17}},

 {{18, 19},
  {20, 21},
  {22, 23}},

 {{24, 25},
  {26, 27},
  {28, 29}},

 {{30, 31},
  {32, 33},
  {34, 35}}}
a.mean(1) ..
{{{ 9, 10},
  {11, 12},
  {13, 14}},

 {{33, 34},
  {35, 36},
  {37, 38}}}
a.mean(2) ..
{{{ 2,  3},
  { 8,  9},
  {14, 15},
  {20, 21}},

 {{26, 27},
  {32, 33},
  {38, 39},
  {44, 45}}}
a.mean(3) ..
{{{ 0.5,  2.5,  4.5},
  { 6.5,  8.5, 10.5},
  {12.5, 14.5, 16.5},
  {18.5, 20.5, 22.5}},

 {{24.5, 26.5, 28.5},
  {30.5, 32.5, 34.5},
  {36.5, 38.5, 40.5},
  {42.5, 44.5, 46.5}}}
a.mean(4) .. OutOfRange: specified axis is out of range

======== #42 constructor with elemtype ========

int8: {{0, 1, 2},
 {3, 4, 5}}
uint8: {{0, 1, 2},
 {3, 4, 5}}
int16: {{0, 1, 2},
 {3, 4, 5}}
uint16: {{0, 1, 2},
 {3, 4, 5}}
int32: {{0, 1, 2},
 {3, 4, 5}}
uint32: {{0, 1, 2},
 {3, 4, 5}}
int64: {{0, 1, 2},
 {3, 4, 5}}
uint64: {{0, 1, 2},
 {3, 4, 5}}
float: {{0, 1, 2},
 {3, 4, 5}}
double: {{0, 1, 2},
 {3, 4, 5}}
ValueError: invalid symbol for element type of array: int9

======== #43 operation test on array with offset ========

x_off .. {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}
x_off.flatten() .. {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}
x_off.reshape([4, 8]) ..
{{32, 33, 34, 35, 36, 37, 38, 39},
 {40, 41, 42, 43, 44, 45, 46, 47},
 {48, 49, 50, 51, 52, 53, 54, 55},
 {56, 57, 58, 59, 60, 61, 62, 63}}
x_off.head(16) .. {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}
x_off.tail(16) .. {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}
x_off.offset(16) .. {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}
x_off.each().head(16):list .. [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]

======== #44 tranpsose() and T ========

x .. { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11}
x.transpose() .. { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11}
x.T .. { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11}
----
x ..
{{ 0,  1,  2,  3},
 { 4,  5,  6,  7},
 { 8,  9, 10, 11}}
x.transpose() ..
{{ 0,  4,  8},
 { 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11}}
x.T ..
{{ 0,  4,  8},
 { 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11}}
----
x ..
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7},
  { 8,  9, 10, 11}},

 {{12, 13, 14, 15},
  {16, 17, 18, 19},
  {20, 21, 22, 23}}}
x.transpose() ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}}}
x.T ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}}}
----
x ..
{{{{ 0,  1,  2,  3},
   { 4,  5,  6,  7},
   { 8,  9, 10, 11}},

  {{12, 13, 14, 15},
   {16, 17, 18, 19},
   {20, 21, 22, 23}}},


 {{{24, 25, 26, 27},
   {28, 29, 30, 31},
   {32, 33, 34, 35}},

  {{36, 37, 38, 39},
   {40, 41, 42, 43},
   {44, 45, 46, 47}}},


 {{{48, 49, 50, 51},
   {52, 53, 54, 55},
   {56, 57, 58, 59}},

  {{60, 61, 62, 63},
   {64, 65, 66, 67},
   {68, 69, 70, 71}}}}
x.transpose() ..
{{{{ 0,  4,  8},
   { 1,  5,  9},
   { 2,  6, 10},
   { 3,  7, 11}},

  {{12, 16, 20},
   {13, 17, 21},
   {14, 18, 22},
   {15, 19, 23}}},


 {{{24, 28, 32},
   {25, 29, 33},
   {26, 30, 34},
   {27, 31, 35}},

  {{36, 40, 44},
   {37, 41, 45},
   {38, 42, 46},
   {39, 43, 47}}},


 {{{48, 52, 56},
   {49, 53, 57},
   {50, 54, 58},
   {51, 55, 59}},

  {{60, 64, 68},
   {61, 65, 69},
   {62, 66, 70},
   {63, 67, 71}}}}
x.T ..
{{{{ 0,  4,  8},
   { 1,  5,  9},
   { 2,  6, 10},
   { 3,  7, 11}},

  {{12, 16, 20},
   {13, 17, 21},
   {14, 18, 22},
   {15, 19, 23}}},


 {{{24, 28, 32},
   {25, 29, 33},
   {26, 30, 34},
   {27, 31, 35}},

  {{36, 40, 44},
   {37, 41, 45},
   {38, 42, 46},
   {39, 43, 47}}},


 {{{48, 52, 56},
   {49, 53, 57},
   {50, 54, 58},
   {51, 55, 59}},

  {{60, 64, 68},
   {61, 65, 69},
   {62, 66, 70},
   {63, 67, 71}}}}

======== #45 array#transpose() sharing memory ========

x =
{}
x.T =
{} .. shared
transpose([0]) =
{} .. shared
----
x =
{0, 1}
x.T =
{0, 1} .. shared
transpose([0]) =
{0, 1} .. shared
----
x =
{{0, 1}}
x.T =
{{0},
 {1}} .. shared
transpose([1, 0]) =
{{0},
 {1}} .. shared
----
x =
{{0},
 {1}}
x.T =
{{0, 1}} .. shared
transpose([1, 0]) =
{{0, 1}} .. shared
----
x =
{0, 1, 2, 3, 4, 5, 6, 7}
x.T =
{0, 1, 2, 3, 4, 5, 6, 7} .. shared
transpose([0]) =
{0, 1, 2, 3, 4, 5, 6, 7} .. shared
----
x =
{{0, 1, 2, 3, 4, 5, 6, 7}}
x.T =
{{0},
 {1},
 {2},
 {3},
 {4},
 {5},
 {6},
 {7}} .. shared
transpose([1, 0]) =
{{0},
 {1},
 {2},
 {3},
 {4},
 {5},
 {6},
 {7}} .. shared
----
x =
{{0},
 {1},
 {2},
 {3},
 {4},
 {5},
 {6},
 {7}}
x.T =
{{0, 1, 2, 3, 4, 5, 6, 7}} .. shared
transpose([1, 0]) =
{{0, 1, 2, 3, 4, 5, 6, 7}} .. shared
----
x =
{{{ 0,  1,  2}},

 {{ 3,  4,  5}},

 {{ 6,  7,  8}},

 {{ 9, 10, 11}}}
x.T =
{{{ 0},
  { 1},
  { 2}},

 {{ 3},
  { 4},
  { 5}},

 {{ 6},
  { 7},
  { 8}},

 {{ 9},
  {10},
  {11}}} .. shared
transpose([0, 2, 1]) =
{{{ 0},
  { 1},
  { 2}},

 {{ 3},
  { 4},
  { 5}},

 {{ 6},
  { 7},
  { 8}},

 {{ 9},
  {10},
  {11}}} .. shared
----
x =
{{{ 0},
  { 1},
  { 2}},

 {{ 3},
  { 4},
  { 5}},

 {{ 6},
  { 7},
  { 8}},

 {{ 9},
  {10},
  {11}}}
x.T =
{{{ 0,  1,  2}},

 {{ 3,  4,  5}},

 {{ 6,  7,  8}},

 {{ 9, 10, 11}}} .. shared
transpose([0, 2, 1]) =
{{{ 0,  1,  2}},

 {{ 3,  4,  5}},

 {{ 6,  7,  8}},

 {{ 9, 10, 11}}} .. shared
----
x =
{{{{ 0,  1,  2}},

  {{ 3,  4,  5}},

  {{ 6,  7,  8}},

  {{ 9, 10, 11}}},


 {{{12, 13, 14}},

  {{15, 16, 17}},

  {{18, 19, 20}},

  {{21, 22, 23}}}}
x.T =
{{{{ 0},
   { 1},
   { 2}},

  {{ 3},
   { 4},
   { 5}},

  {{ 6},
   { 7},
   { 8}},

  {{ 9},
   {10},
   {11}}},


 {{{12},
   {13},
   {14}},

  {{15},
   {16},
   {17}},

  {{18},
   {19},
   {20}},

  {{21},
   {22},
   {23}}}} .. shared
transpose([0, 1, 3, 2]) =
{{{{ 0},
   { 1},
   { 2}},

  {{ 3},
   { 4},
   { 5}},

  {{ 6},
   { 7},
   { 8}},

  {{ 9},
   {10},
   {11}}},


 {{{12},
   {13},
   {14}},

  {{15},
   {16},
   {17}},

  {{18},
   {19},
   {20}},

  {{21},
   {22},
   {23}}}} .. shared
transpose([1, 0, 3, 2]) =
{{{{ 0},
   { 1},
   { 2}},

  {{12},
   {13},
   {14}}},


 {{{ 3},
   { 4},
   { 5}},

  {{15},
   {16},
   {17}}},


 {{{ 6},
   { 7},
   { 8}},

  {{18},
   {19},
   {20}}},


 {{{ 9},
   {10},
   {11}},

  {{21},
   {22},
   {23}}}} .. not-shared
----
x =
{{{{ 0},
   { 1},
   { 2}},

  {{ 3},
   { 4},
   { 5}},

  {{ 6},
   { 7},
   { 8}},

  {{ 9},
   {10},
   {11}}},


 {{{12},
   {13},
   {14}},

  {{15},
   {16},
   {17}},

  {{18},
   {19},
   {20}},

  {{21},
   {22},
   {23}}}}
x.T =
{{{{ 0,  1,  2}},

  {{ 3,  4,  5}},

  {{ 6,  7,  8}},

  {{ 9, 10, 11}}},


 {{{12, 13, 14}},

  {{15, 16, 17}},

  {{18, 19, 20}},

  {{21, 22, 23}}}} .. shared
transpose([0, 1, 3, 2]) =
{{{{ 0,  1,  2}},

  {{ 3,  4,  5}},

  {{ 6,  7,  8}},

  {{ 9, 10, 11}}},


 {{{12, 13, 14}},

  {{15, 16, 17}},

  {{18, 19, 20}},

  {{21, 22, 23}}}} .. shared
transpose([1, 0, 3, 2]) =
{{{{ 0,  1,  2}},

  {{12, 13, 14}}},


 {{{ 3,  4,  5}},

  {{15, 16, 17}}},


 {{{ 6,  7,  8}},

  {{18, 19, 20}}},


 {{{ 9, 10, 11}},

  {{21, 22, 23}}}} .. not-shared
----
x =
{{0, 1},
 {2, 3}}
x.T =
{{0, 2},
 {1, 3}} .. shared
transpose([1, 0]) =
{{0, 2},
 {1, 3}} .. not-shared
----
x =
{{0, 1},
 {2, 3}}
x.T =
{{0, 2},
 {1, 3}} .. shared
transpose([1, 0]) =
{{0, 2},
 {1, 3}} .. not-shared
----
x =
{{ 0,  1,  2,  3},
 { 4,  5,  6,  7},
 { 8,  9, 10, 11}}
x.T =
{{ 0,  4,  8},
 { 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11}} .. shared
transpose([1, 0]) =
{{ 0,  4,  8},
 { 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11}} .. not-shared
----
x =
{{ 0,  1,  2,  3},
 { 4,  5,  6,  7},
 { 8,  9, 10, 11}}
x.T =
{{ 0,  4,  8},
 { 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11}} .. shared
transpose([1, 0]) =
{{ 0,  4,  8},
 { 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11}} .. not-shared
----

======== #46 sharing collapses after assignment ========

{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11}}
shared
not-shared
shared
not-shared

======== #47 array#issquare() ========

array.zeros([]).issquare() .. false
array.zeros([3]).issquare() .. false
array.zeros([3, 4]).issquare() .. false
array.zeros([3, 3]).issquare() .. true
array.zeros([2, 4, 3, 3]).issquare() .. true
array.zeros([2, 4, 3, 2]).issquare() .. false

======== #48 pointer ========

00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  ................
10 11 12 13 14 15 16 17                          ........
0a
0b
0d0c
11100f0e

======== #49 index-get ========

{{ 0,  1,  2,  3,  4,  5,  6,  7},
 { 8,  9, 10, 11, 12, 13, 14, 15},
 {16, 17, 18, 19, 20, 21, 22, 23},
 {24, 25, 26, 27, 28, 29, 30, 31},
 {32, 33, 34, 35, 36, 37, 38, 39},
 {40, 41, 42, 43, 44, 45, 46, 47}}
x[0] .. {0, 1, 2, 3, 4, 5, 6, 7}
x[5] .. {40, 41, 42, 43, 44, 45, 46, 47}
x[0, 0] .. 0
x[5, 0] .. 40
x[5, 7] .. 47
x[0, 7] .. 7
x[2, 3] .. 19
x[6, 0] .. OutOfRange: index is out of range
x[0, 8] .. OutOfRange: index is out of range
x[0, 2, 0] .. IndexError: number of indices exceeds dimensions
x[1 .. 4, 2 .. 6] ..
{{10, 11, 12, 13, 14},
 {18, 19, 20, 21, 22},
 {26, 27, 28, 29, 30},
 {34, 35, 36, 37, 38}}
x[1 .. 4] ..
{{ 8,  9, 10, 11, 12, 13, 14, 15},
 {16, 17, 18, 19, 20, 21, 22, 23},
 {24, 25, 26, 27, 28, 29, 30, 31},
 {32, 33, 34, 35, 36, 37, 38, 39}}
x[*, *] ..
{{ 0,  1,  2,  3,  4,  5,  6,  7},
 { 8,  9, 10, 11, 12, 13, 14, 15},
 {16, 17, 18, 19, 20, 21, 22, 23},
 {24, 25, 26, 27, 28, 29, 30, 31},
 {32, 33, 34, 35, 36, 37, 38, 39},
 {40, 41, 42, 43, 44, 45, 46, 47}}
x[*, 2 .. 6] ..
{{ 2,  3,  4,  5,  6},
 {10, 11, 12, 13, 14},
 {18, 19, 20, 21, 22},
 {26, 27, 28, 29, 30},
 {34, 35, 36, 37, 38},
 {42, 43, 44, 45, 46}}
x[1 .. 4, *] ..
{{ 8,  9, 10, 11, 12, 13, 14, 15},
 {16, 17, 18, 19, 20, 21, 22, 23},
 {24, 25, 26, 27, 28, 29, 30, 31},
 {32, 33, 34, 35, 36, 37, 38, 39}}
x[1 .. 4, 3] .. {11, 19, 27, 35}
x[4, 2 .. 6] .. {34, 35, 36, 37, 38}

======== #50 index-set ========

{ x[] = 3 }
{{3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3}}
{ x[0] = 1, x[1] = 2, x[2] = 3, x[3] = 4, x[4] = 5, x[5] = 6 }
{{1, 1, 1, 1, 1, 1, 1, 1},
 {2, 2, 2, 2, 2, 2, 2, 2},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {4, 4, 4, 4, 4, 4, 4, 4},
 {5, 5, 5, 5, 5, 5, 5, 5},
 {6, 6, 6, 6, 6, 6, 6, 6}}
{ x[2 .. 4] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[0, 0] = 1, x[5, 7] = 2, x[5, 0] = 3, x[0, 7] = 4, x[1 .. 4, 2 .. 6] = 5 }
{{1, 0, 0, 0, 0, 0, 0, 4},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {3, 0, 0, 0, 0, 0, 0, 2}}
{ x[*, *] = 3 }
{{3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3}}
{ x[*, 2 .. 6] = 3 }
{{0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0}}
{ x[1 .. 4, *] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 4, 3] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[4, 2 .. 6] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[4, 3] = '' }
ValueError: value of string can not be stored in array
{ x[] = '' }
ValueError: value of string can not be stored in array
{ x[*, *] = true }
{{1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1}}
{ x[*, 2 .. 6] = true }
{{0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0}}
{ x[1 .. 4, *] = true }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 4, 3] = true }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[4, 2 .. 6] = true }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}

======== #51 index-set with column-majored array ========

{ x[] = 3 }
{{3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3}}
{ x[0] = 1, x[1] = 2, x[2] = 3, x[3] = 4, x[4] = 5, x[5] = 6 }
{{1, 1, 1, 1, 1, 1, 1, 1},
 {2, 2, 2, 2, 2, 2, 2, 2},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {4, 4, 4, 4, 4, 4, 4, 4},
 {5, 5, 5, 5, 5, 5, 5, 5},
 {6, 6, 6, 6, 6, 6, 6, 6}}
{ x[2 .. 4] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[0, 0] = 1, x[5, 7] = 2, x[5, 0] = 3, x[0, 7] = 4, x[1 .. 4, 2 .. 6] = 5 }
{{1, 0, 0, 0, 0, 0, 0, 4},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {0, 0, 5, 5, 5, 5, 5, 0},
 {3, 0, 0, 0, 0, 0, 0, 2}}
{ x[*, *] = 3 }
{{3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3}}
{ x[*, 2 .. 6] = 3 }
{{0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 3, 3, 3, 3, 3, 0}}
{ x[1 .. 4, *] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {3, 3, 3, 3, 3, 3, 3, 3},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 4, 3] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[4, 2 .. 6] = 3 }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 3, 3, 3, 3, 3, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[4, 3] = '' }
ValueError: value of string can not be stored in array
{ x[] = '' }
ValueError: value of string can not be stored in array
{ x[*, *] = true }
{{1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1}}
{ x[*, 2 .. 6] = true }
{{0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 1, 1, 1, 1, 1, 0}}
{ x[1 .. 4, *] = true }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 4, 3] = true }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[4, 2 .. 6] = true }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}

======== #52 index-set with iterator assigned ========

{ x[] = 1.. }
{{ 1,  2,  3,  4,  5,  6,  7,  8},
 { 9, 10, 11, 12, 13, 14, 15, 16},
 {17, 18, 19, 20, 21, 22, 23, 24},
 {25, 26, 27, 28, 29, 30, 31, 32},
 {33, 34, 35, 36, 37, 38, 39, 40},
 {41, 42, 43, 44, 45, 46, 47, 48}}
{ x[1] = 1.., x[3] = 1.. }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {1, 2, 3, 4, 5, 6, 7, 8},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {1, 2, 3, 4, 5, 6, 7, 8},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1, 1 .. 5] = 1.. }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 2, 3, 4, 5, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 4, 3] = 1.. }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 2, 0, 0, 0, 0},
 {0, 0, 0, 3, 0, 0, 0, 0},
 {0, 0, 0, 4, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 4, 1 .. 5] = 1.. }
{{ 0,  0,  0,  0,  0,  0,  0,  0},
 { 0,  1,  2,  3,  4,  5,  0,  0},
 { 0,  6,  7,  8,  9, 10,  0,  0},
 { 0, 11, 12, 13, 14, 15,  0,  0},
 { 0, 16, 17, 18, 19, 20,  0,  0},
 { 0,  0,  0,  0,  0,  0,  0,  0}}
{ x[1 .. 3, 1 .. 3] = [1, 2, 3, 4, 5, 6, 7, 8, 9] }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 2, 3, 0, 0, 0, 0},
 {0, 4, 5, 6, 0, 0, 0, 0},
 {0, 7, 8, 9, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 3, 1 .. 3] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 2, 3, 0, 0, 0, 0},
 {0, 4, 5, 6, 0, 0, 0, 0},
 {0, 7, 8, 9, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1 .. 3, 1 .. 3] = [[1, 2, [3]], [[4, 5, 6, 7], [8, 9]]] }
{{0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 2, 3, 0, 0, 0, 0},
 {0, 4, 5, 6, 0, 0, 0, 0},
 {0, 7, 8, 9, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0}}
{ x[1.., 1] = 1.., x[1.., 5] = 6.. }
{{ 0,  0,  0,  0,  0,  0,  0,  0},
 { 0,  1,  0,  0,  0,  6,  0,  0},
 { 0,  2,  0,  0,  0,  7,  0,  0},
 { 0,  3,  0,  0,  0,  8,  0,  0},
 { 0,  4,  0,  0,  0,  9,  0,  0},
 { 0,  5,  0,  0,  0, 10,  0,  0}}
{ x[*, *] = 1.. }
{{ 1,  2,  3,  4,  5,  6,  7,  8},
 { 9, 10, 11, 12, 13, 14, 15, 16},
 {17, 18, 19, 20, 21, 22, 23, 24},
 {25, 26, 27, 28, 29, 30, 31, 32},
 {33, 34, 35, 36, 37, 38, 39, 40},
 {41, 42, 43, 44, 45, 46, 47, 48}}
{ x[*, 2 .. 6] = 1.. }
{{ 0,  0,  1,  2,  3,  4,  5,  0},
 { 0,  0,  6,  7,  8,  9, 10,  0},
 { 0,  0, 11, 12, 13, 14, 15,  0},
 { 0,  0, 16, 17, 18, 19, 20,  0},
 { 0,  0, 21, 22, 23, 24, 25,  0},
 { 0,  0, 26, 27, 28, 29, 30,  0}}
{ x[1 .. 4, *] = 1.. }
{{ 0,  0,  0,  0,  0,  0,  0,  0},
 { 1,  2,  3,  4,  5,  6,  7,  8},
 { 9, 10, 11, 12, 13, 14, 15, 16},
 {17, 18, 19, 20, 21, 22, 23, 24},
 {25, 26, 27, 28, 29, 30, 31, 32},
 { 0,  0,  0,  0,  0,  0,  0,  0}}

======== #53 index-set with array assigned ========

{ x[2] = array.range(12) + 1 }
{{{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10, 11, 12}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}}}
{ x[2] = array.range(8) + 1 }
{{{0, 0, 0},
  {0, 0, 0},
  {0, 0, 0},
  {0, 0, 0}},

 {{0, 0, 0},
  {0, 0, 0},
  {0, 0, 0},
  {0, 0, 0}},

 {{1, 2, 3},
  {4, 5, 6},
  {7, 8, 0},
  {0, 0, 0}},

 {{0, 0, 0},
  {0, 0, 0},
  {0, 0, 0},
  {0, 0, 0}},

 {{0, 0, 0},
  {0, 0, 0},
  {0, 0, 0},
  {0, 0, 0}}}
{ x[2] = (array.range(12) + 1).reshape([4, 3]) }
{{{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10, 11, 12}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}}}
{ x[2..] = array.range(12) + 1 }
{{{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10, 11, 12}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10, 11, 12}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10, 11, 12}}}
{ x[2..] = array.range(10) + 1 }
{{{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0},
  { 0,  0,  0}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10,  0,  0}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10,  0,  0}},

 {{ 1,  2,  3},
  { 4,  5,  6},
  { 7,  8,  9},
  {10,  0,  0}}}
{ x[*, *, 2] = array.range(4) + 1 }
{{{0, 0, 1},
  {0, 0, 2},
  {0, 0, 3},
  {0, 0, 4}},

 {{0, 0, 1},
  {0, 0, 2},
  {0, 0, 3},
  {0, 0, 4}},

 {{0, 0, 1},
  {0, 0, 2},
  {0, 0, 3},
  {0, 0, 4}},

 {{0, 0, 1},
  {0, 0, 2},
  {0, 0, 3},
  {0, 0, 4}},

 {{0, 0, 1},
  {0, 0, 2},
  {0, 0, 3},
  {0, 0, 4}}}
{ x[*, *, 2] = array.range(7) + 1 }
{{{0, 0, 1},
  {0, 0, 2},
  {0, 0, 3},
  {0, 0, 4}},

 {{0, 0, 5},
  {0, 0, 6},
  {0, 0, 7},
  {0, 0, 1}},

 {{0, 0, 2},
  {0, 0, 3},
  {0, 0, 4},
  {0, 0, 5}},

 {{0, 0, 6},
  {0, 0, 7},
  {0, 0, 1},
  {0, 0, 2}},

 {{0, 0, 3},
  {0, 0, 4},
  {0, 0, 5},
  {0, 0, 6}}}

======== #54 index-set between array@complex and array of other type ========

{ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11}
expected error occured: TypeError: can't copy elements from array@complex to array@double

======== #55 operation between array and complex ========

x + 2j .. { 1+2j,  2+2j,  3+2j,  4+2j,  5+2j,  6+2j,  7+2j,  8+2j,  9+2j, 10+2j}
x - 2j .. { 1-2j,  2-2j,  3-2j,  4-2j,  5-2j,  6-2j,  7-2j,  8-2j,  9-2j, 10-2j}
x * 2j .. { 2j,  4j,  6j,  8j, 10j, 12j, 14j, 16j, 18j, 20j}
x / 2j .. {-0.5j,   -1j, -1.5j,   -2j, -2.5j,   -3j, -3.5j,   -4j, -4.5j,   -5j}
x ** 2j .. {                   1,   0.183457+0.983028j,  -0.586255+0.810127j,  -0.932687+0.360687j, -0.997015-0.0772063j,   -0.90393-0.427681j,  -0.731534-0.681805j,  -0.525673-0.850687j,   -0.31261-0.949881j,  -0.107013-0.994258j}
2j + x .. { 1+2j,  2+2j,  3+2j,  4+2j,  5+2j,  6+2j,  7+2j,  8+2j,  9+2j, 10+2j}
2j - x .. { -1+2j,  -2+2j,  -3+2j,  -4+2j,  -5+2j,  -6+2j,  -7+2j,  -8+2j,  -9+2j, -10+2j}
2j * x .. { 2j,  4j,  6j,  8j, 10j, 12j, 14j, 16j, 18j, 20j}
2j / x .. {       2j,        1j, 0.666667j,      0.5j,      0.4j, 0.333333j, 0.285714j,     0.25j, 0.222222j,      0.2j}

======== #56 index-set to array@complex ========

{ x[] = 3 }
{{3, 3, 3},
 {3, 3, 3},
 {3, 3, 3},
 {3, 3, 3}}
{ x[] = 1 + 2j }
{{1+2j, 1+2j, 1+2j},
 {1+2j, 1+2j, 1+2j},
 {1+2j, 1+2j, 1+2j},
 {1+2j, 1+2j, 1+2j}}
{ x[] = 1.. }
{{ 1,  2,  3},
 { 4,  5,  6},
 { 7,  8,  9},
 {10, 11, 12}}
{ x[1 .. 3, 2] = 3 }
{{0, 0, 0},
 {0, 0, 3},
 {0, 0, 3},
 {0, 0, 3}}
{ x[1 .. 3, 2] = 2 + 3j }
{{   0,    0,    0},
 {   0,    0, 2+3j},
 {   0,    0, 2+3j},
 {   0,    0, 2+3j}}
{ x[0, 0] = 1, x[0, 2] = 2, x[3, 0] = 3, x[3, 2] = 4 }
{{1, 0, 2},
 {0, 0, 0},
 {0, 0, 0},
 {3, 0, 4}}
{ x[0, 0] = 1 + 2j, x[0, 2] = 2 + 1j, x[3, 0] = 3 - 2j, x[3, 2] = 4 + 3j }
{{1+2j,    0, 2+1j},
 {   0,    0,    0},
 {   0,    0,    0},
 {3-2j,    0, 4+3j}}
{ x[0] = 1, x[2] = 3 }
{{1, 1, 1},
 {0, 0, 0},
 {3, 3, 3},
 {0, 0, 0}}
{ x[0] = 1 + 2j, x[2] = 3 - 2j }
{{1+2j, 1+2j, 1+2j},
 {   0,    0,    0},
 {3-2j, 3-2j, 3-2j},
 {   0,    0,    0}}
{ x[1 .. 3, 2] = 3.. }
{{0, 0, 0},
 {0, 0, 3},
 {0, 0, 4},
 {0, 0, 5}}
{ x[1 .. 3, 2] = (3..) + 2j }
{{   0,    0,    0},
 {   0,    0, 3+2j},
 {   0,    0, 4+2j},
 {   0,    0, 5+2j}}
{ x[2] = array { 2, 3, 4 } }
{{0, 0, 0},
 {0, 0, 0},
 {2, 3, 4},
 {0, 0, 0}}
{ x[2] = array(elemtype => `complex) { 2 + 1j, 3 - 1j, 4 } }
{{   0,    0,    0},
 {   0,    0,    0},
 {2+1j, 3-1j,    4},
 {   0,    0,    0}}
{ x[2..] = array { 2, 3, 4 } }
{{0, 0, 0},
 {0, 0, 0},
 {2, 3, 4},
 {2, 3, 4}}
{ x[2..] = array(elemtype => `complex) { 2 + 1j, 3 - 1j, 4 } }
{{   0,    0,    0},
 {   0,    0,    0},
 {2+1j, 3-1j,    4},
 {2+1j, 3-1j,    4}}
{ x[2..] = array { 2, 3, 4, 1 } }
{{0, 0, 0},
 {0, 0, 0},
 {2, 3, 4},
 {1, 0, 0}}
{ x[2..] = array(elemtype => `complex) { 2 + 1j, 3 - 1j, 4, 1 } }
{{   0,    0,    0},
 {   0,    0,    0},
 {2+1j, 3-1j,    4},
 {   1,    0,    0}}

======== #57 array#elemcast() ========

{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- boolean [shared]
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: int8 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: uint8 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: int16 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: uint16 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: int32 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: uint32 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: int64 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: uint64 <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: half <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: float <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: double <- boolean
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1}: complex <- boolean
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- int8 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- int8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- int8
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- uint8 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- uint8
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- uint8
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- int16 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- int16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- int16
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- uint16 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- uint16
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- uint16
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- int32 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- int32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- int32
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- uint32 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- uint32
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- uint32
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- int64 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- int64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- int64
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- uint64 [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- uint64
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- uint64
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- half [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- half
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- half
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- float [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- float
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- float
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int8 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint8 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int16 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint16 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int32 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint32 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: int64 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: uint64 <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: half <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: float <- double
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: double <- double [shared]
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- double
{false,  true,  true,  true,  true,  true,  true,  true,  true,  true}: boolean <- complex
TypeError: can't copy elements from array@complex to array@int8: int8 <- complex
TypeError: can't copy elements from array@complex to array@uint8: uint8 <- complex
TypeError: can't copy elements from array@complex to array@int16: int16 <- complex
TypeError: can't copy elements from array@complex to array@uint16: uint16 <- complex
TypeError: can't copy elements from array@complex to array@int32: int32 <- complex
TypeError: can't copy elements from array@complex to array@uint32: uint32 <- complex
TypeError: can't copy elements from array@complex to array@int64: int64 <- complex
TypeError: can't copy elements from array@complex to array@uint64: uint64 <- complex
TypeError: can't copy elements from array@complex to array@half: half <- complex
TypeError: can't copy elements from array@complex to array@float: float <- complex
TypeError: can't copy elements from array@complex to array@double: double <- complex
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}: complex <- complex [shared]

======== #58 store several matrices in a multi-dimensional array ========

half
{{{       1,        0},
  {       0,        1}},

 {{     0.5,        0},
  {0.865723,      0.5}},

 {{       0,        0},
  {0.865723,        0}},

 {{       0,        0},
  {       0,        0}},

 {{       0, 0.865723},
  {       0,        0}}}
x |.| array { 1, 0 } ..
{{{       1},
  {       0}},

 {{     0.5},
  {0.865723}},

 {{       0},
  {0.865723}},

 {{       0},
  {       0}},

 {{       0},
  {       0}}}
float
{{{       1,        0},
  {       0,        1}},

 {{     0.5,        0},
  {0.866025,      0.5}},

 {{       0,        0},
  {0.866025,        0}},

 {{       0,        0},
  {       0,        0}},

 {{       0, 0.866025},
  {       0,        0}}}
x |.| array { 1, 0 } ..
{{{       1},
  {       0}},

 {{     0.5},
  {0.866025}},

 {{       0},
  {0.866025}},

 {{       0},
  {       0}},

 {{       0},
  {       0}}}
double
{{{       1,        0},
  {       0,        1}},

 {{     0.5,        0},
  {0.866025,      0.5}},

 {{       0,        0},
  {0.866025,        0}},

 {{       0,        0},
  {       0,        0}},

 {{       0, 0.866025},
  {       0,        0}}}
x |.| array { 1, 0 } ..
{{{       1},
  {       0}},

 {{     0.5},
  {0.866025}},

 {{       0},
  {0.866025}},

 {{       0},
  {       0}},

 {{       0},
  {       0}}}
complex
{{{        1,         0},
  {        0,         1}},

 {{      0.5, -0.866025},
  { 0.866025,       0.5}},

 {{     -0.5, -0.866025},
  { 0.866025,      -0.5}},

 {{       -1,         0},
  {        0,        -1}},

 {{     -0.5,  0.866025},
  {-0.866025,      -0.5}}}
x |.| array { 1, 0 } ..
{{{        1},
  {        0}},

 {{      0.5},
  { 0.866025}},

 {{     -0.5},
  { 0.866025}},

 {{       -1},
  {        0}},

 {{     -0.5},
  {-0.866025}}}

======== #59 comparator ========

boolean
x == 5 .. {false, false, false, false, false, false, false, false, false, false}
x != 5 .. {true, true, true, true, true, true, true, true, true, true}
x > 5 .. {false, false, false, false, false, false, false, false, false, false}
x < 5 .. {true, true, true, true, true, true, true, true, true, true}
x >= 5 .. {false, false, false, false, false, false, false, false, false, false}
x <= 5 .. {true, true, true, true, true, true, true, true, true, true}
int8
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
uint8
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
int16
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
uint16
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
int32
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
uint32
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
int64
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
uint64
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
half
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
float
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
double
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false,  true,  true,  true,  true}
x < 5 .. { true,  true,  true,  true,  true, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false,  true,  true,  true,  true,  true}
x <= 5 .. { true,  true,  true,  true,  true,  true, false, false, false, false}
complex
x == 5 .. {false, false, false, false, false,  true, false, false, false, false}
x != 5 .. { true,  true,  true,  true,  true, false,  true,  true,  true,  true}
x > 5 .. {false, false, false, false, false, false, false, false, false, false}
x < 5 .. {false, false, false, false, false, false, false, false, false, false}
x >= 5 .. {false, false, false, false, false, false, false, false, false, false}
x <= 5 .. {false, false, false, false, false, false, false, false, false, false}

======== #60 logical operation on array@boolean ========

{false,  true, false,  true} & {false, false,  true,  true} -> {false, false, false,  true}
{false,  true, false,  true} | {false, false,  true,  true} -> {false,  true,  true,  true}
{false,  true, false,  true} ^ {false, false,  true,  true} -> {false,  true,  true, false}

======== #61 array#iselemsame() ========

array(1 .. 1000, elemtype => `double).iselemsame(array(1 .. 1000, elemtype => `double)) .. true
array(1 .. 1000, elemtype => `double).iselemsame(array(1 .. 1000, elemtype => `float)) .. false
array(1 .. 1000, elemtype => `double).iselemsame(array(1000 .. 1, elemtype => `double)) .. false
array(1 .. 1000, elemtype => `double).iselemsame(array(1 .. 1000, elemtype => `double).reshape([nil])) .. true
array(1 .. 1000, elemtype => `double).iselemsame(array(1 .. 1000, elemtype => `double).reshape([100, nil])) .. false

======== #62 array#max(), array#min() ========

{{{ 1,  2,  1,  4},
  {-2, -2,  1, -5},
  { 2,  4,  0,  0}},

 {{ 2,  0,  1,  0},
  { 3,  2,  3, -3},
  { 4, -2,  3,  0}},

 {{-4,  3, -3,  3},
  { 0, -1,  3,  1},
  {-2, -5, -2, -3}},

 {{-3,  0,  3,  3},
  {-1, -2, -3, -1},
  { 2, -1, -3,  4}},

 {{-4, -3,  3,  1},
  { 1,  2, -1,  4},
  { 0, -3,  1,  3}}}
x.max() .. 4
x.max(0) ..
{{2, 3, 3, 4},
 {3, 2, 3, 4},
 {4, 4, 3, 4}}
x.max(1) ..
{{2, 4, 1, 4},
 {4, 2, 3, 0},
 {0, 3, 3, 3},
 {2, 0, 3, 4},
 {1, 2, 3, 4}}
x.max(2) ..
{{ 4,  1,  4},
 { 2,  3,  4},
 { 3,  3, -2},
 { 3, -1,  4},
 { 3,  4,  3}}
x.max():index .. 3
x.max(0):index ..
{{1, 2, 3, 0},
 {1, 1, 1, 4},
 {1, 0, 1, 3}}
x.max(1):index ..
{{2, 2, 0, 0},
 {2, 1, 1, 0},
 {1, 0, 1, 0},
 {2, 0, 0, 2},
 {1, 1, 0, 1}}
x.max(2):index ..
{{3, 2, 1},
 {0, 0, 0},
 {1, 2, 0},
 {2, 0, 3},
 {2, 3, 3}}
x.max():last_index .. 55
x.max(0):last_index ..
{{1, 2, 4, 0},
 {1, 4, 2, 4},
 {1, 0, 1, 3}}
x.max(1):last_index ..
{{2, 2, 1, 0},
 {2, 1, 2, 2},
 {1, 0, 1, 0},
 {2, 0, 0, 2},
 {1, 1, 0, 1}}
x.max(2):last_index ..
{{3, 2, 1},
 {0, 2, 0},
 {3, 2, 2},
 {3, 3, 3},
 {2, 3, 3}}
x.min() .. -5
x.min(0) ..
{{-4, -3, -3,  0},
 {-2, -2, -3, -5},
 {-2, -5, -3, -3}}
x.min(1) ..
{{-2, -2,  0, -5},
 { 2, -2,  1, -3},
 {-4, -5, -3, -3},
 {-3, -2, -3, -1},
 {-4, -3, -1,  1}}
x.min(2) ..
{{ 1, -5,  0},
 { 0, -3, -2},
 {-4, -1, -5},
 {-3, -3, -3},
 {-4, -1, -3}}
x.min():index .. 7
x.min(0):index ..
{{2, 4, 2, 1},
 {0, 0, 3, 0},
 {2, 2, 3, 2}}
x.min(1):index ..
{{1, 1, 2, 1},
 {0, 2, 0, 1},
 {0, 2, 0, 2},
 {0, 1, 1, 1},
 {0, 0, 1, 0}}
x.min(2):index ..
{{0, 3, 2},
 {1, 3, 1},
 {0, 1, 1},
 {0, 2, 2},
 {0, 2, 1}}
x.min():last_index .. 33
x.min(0):last_index ..
{{4, 4, 2, 1},
 {0, 3, 3, 0},
 {2, 2, 3, 2}}
x.min(1):last_index ..
{{1, 1, 2, 1},
 {0, 2, 0, 1},
 {0, 2, 0, 2},
 {0, 1, 2, 1},
 {0, 2, 1, 0}}
x.min(2):last_index ..
{{2, 3, 3},
 {3, 3, 1},
 {0, 1, 1},
 {0, 2, 2},
 {0, 2, 1}}

======== #63 array#argmax(), array#argmin() ========

{{{ 1,  2,  1,  4},
  {-2, -2,  1, -5},
  { 2,  4,  0,  0}},

 {{ 2,  0,  1,  0},
  { 3,  2,  3, -3},
  { 4, -2,  3,  0}},

 {{-4,  3, -3,  3},
  { 0, -1,  3,  1},
  {-2, -5, -2, -3}},

 {{-3,  0,  3,  3},
  {-1, -2, -3, -1},
  { 2, -1, -3,  4}},

 {{-4, -3,  3,  1},
  { 1,  2, -1,  4},
  { 0, -3,  1,  3}}}
x.argmax() .. 3
x.argmax(0) ..
{{1, 2, 3, 0},
 {1, 1, 1, 4},
 {1, 0, 1, 3}}
x.argmax(1) ..
{{2, 2, 0, 0},
 {2, 1, 1, 0},
 {1, 0, 1, 0},
 {2, 0, 0, 2},
 {1, 1, 0, 1}}
x.argmax(2) ..
{{3, 2, 1},
 {0, 0, 0},
 {1, 2, 0},
 {2, 0, 3},
 {2, 3, 3}}
x.argmax():last_index .. 55
x.argmax(0):last_index ..
{{1, 2, 4, 0},
 {1, 4, 2, 4},
 {1, 0, 1, 3}}
x.argmax(1):last_index ..
{{2, 2, 1, 0},
 {2, 1, 2, 2},
 {1, 0, 1, 0},
 {2, 0, 0, 2},
 {1, 1, 0, 1}}
x.argmax(2):last_index ..
{{3, 2, 1},
 {0, 2, 0},
 {3, 2, 2},
 {3, 3, 3},
 {2, 3, 3}}
x.argmin() .. 7
x.argmin(0) ..
{{2, 4, 2, 1},
 {0, 0, 3, 0},
 {2, 2, 3, 2}}
x.argmin(1) ..
{{1, 1, 2, 1},
 {0, 2, 0, 1},
 {0, 2, 0, 2},
 {0, 1, 1, 1},
 {0, 0, 1, 0}}
x.argmin(2) ..
{{0, 3, 2},
 {1, 3, 1},
 {0, 1, 1},
 {0, 2, 2},
 {0, 2, 1}}
x.argmin():last_index .. 33
x.argmin(0):last_index ..
{{4, 4, 2, 1},
 {0, 3, 3, 0},
 {2, 2, 3, 2}}
x.argmin(1):last_index ..
{{1, 1, 2, 1},
 {0, 2, 0, 1},
 {0, 2, 0, 2},
 {0, 1, 2, 1},
 {0, 2, 1, 0}}
x.argmin(2):last_index ..
{{2, 3, 3},
 {3, 3, 1},
 {0, 1, 1},
 {0, 2, 2},
 {0, 2, 1}}

======== #64 array#std() ========

x .. {31, 30, 27, 25, 29, 34, 32, 31, 30, 29}
x.std() .. 2.52982
x.std():p .. 2.4
x ..
{{1, 2},
 {3, 4}}
x.std() .. 1.29099
x.std():p .. 1.11803
x.std(0) .. {1.41421, 1.41421}
x.std(0):p .. {1, 1}
x.std(1) .. {0.707107, 0.707107}
x.std(1):p .. {0.5, 0.5}
x ..
{{{5, 0, 3, 3, 7},
  {9, 3, 5, 2, 4},
  {7, 6, 8, 8, 1},
  {6, 7, 7, 8, 1}},

 {{5, 9, 8, 9, 4},
  {3, 0, 3, 5, 0},
  {2, 3, 8, 1, 3},
  {3, 3, 7, 0, 1}},

 {{9, 9, 0, 4, 7},
  {3, 2, 7, 2, 0},
  {0, 4, 5, 5, 6},
  {8, 4, 1, 4, 9}}}
x.std() .. 2.90742
x.std(0) ..
{{ 2.3094, 5.19615, 4.04145, 3.21455, 1.73205},
 { 3.4641, 1.52753,       2, 1.73205,  2.3094},
 {3.60555, 1.52753, 1.73205, 3.51188, 2.51661},
 {2.51661, 2.08167,  3.4641,       4,  4.6188}}
x.std(1) ..
{{1.70783, 3.16228, 2.21736, 3.20156, 2.87228},
 {1.25831, 3.77492, 2.38048, 4.11299, 1.82574},
 {4.24264, 2.98608, 3.30404, 1.25831, 3.87298}}
x.std(2) ..
{{2.60768, 2.70185, 2.91548, 2.77489},
 {2.34521, 2.16795, 2.70185, 2.68328},
 {3.83406, 2.58844, 2.34521, 3.27109}}
x.std():p .. 2.88309
x.std(0):p ..
{{1.88562, 4.24264, 3.29983, 2.62467, 1.41421},
 {2.82843, 1.24722, 1.63299, 1.41421, 1.88562},
 {2.94392, 1.24722, 1.41421, 2.86744,  2.0548},
 { 2.0548, 1.69967, 2.82843, 3.26599, 3.77124}}
x.std(1):p ..
{{1.47902, 2.73861, 1.92029, 2.77263, 2.48747},
 {1.08972, 3.26917, 2.06155, 3.56195, 1.58114},
 {3.67423, 2.58602, 2.86138, 1.08972,  3.3541}}
x.std(2):p ..
{{2.33238, 2.41661, 2.60768, 2.48193},
 {2.09762, 1.93907, 2.41661,     2.4},
 {3.42929, 2.31517, 2.09762, 2.92575}}

======== #65 array#var() ========

x .. {31, 30, 27, 25, 29, 34, 32, 31, 30, 29}
x.var() .. 6.4
x.var():p .. 5.76
x ..
{{1, 2},
 {3, 4}}
x.var() .. 1.66667
x.var():p .. 1.25
x.var(0) .. {2, 2}
x.var(0):p .. {1, 1}
x.var(1) .. {0.5, 0.5}
x.var(1):p .. {0.25, 0.25}
x ..
{{{5, 0, 3, 3, 7},
  {9, 3, 5, 2, 4},
  {7, 6, 8, 8, 1},
  {6, 7, 7, 8, 1}},

 {{5, 9, 8, 9, 4},
  {3, 0, 3, 5, 0},
  {2, 3, 8, 1, 3},
  {3, 3, 7, 0, 1}},

 {{9, 9, 0, 4, 7},
  {3, 2, 7, 2, 0},
  {0, 4, 5, 5, 6},
  {8, 4, 1, 4, 9}}}
x.var() .. 8.45311
x.var(0) ..
{{5.33333,      27, 16.3333, 10.3333,       3},
 {     12, 2.33333,       4,       3, 5.33333},
 {     13, 2.33333,       3, 12.3333, 6.33333},
 {6.33333, 4.33333,      12,      16, 21.3333}}
x.var(1) ..
{{2.91667,      10, 4.91667,   10.25,    8.25},
 {1.58333,   14.25, 5.66667, 16.9167, 3.33333},
 {     18, 8.91667, 10.9167, 1.58333,      15}}
x.var(2) ..
{{ 6.8,  7.3,  8.5,  7.7},
 { 5.5,  4.7,  7.3,  7.2},
 {14.7,  6.7,  5.5, 10.7}}
x.var():p .. 8.31222
x.var(0):p ..
{{3.55556,      18, 10.8889, 6.88889,       2},
 {      8, 1.55556, 2.66667,       2, 3.55556},
 {8.66667, 1.55556,       2, 8.22222, 4.22222},
 {4.22222, 2.88889,       8, 10.6667, 14.2222}}
x.var(1):p ..
{{ 2.1875,     7.5,  3.6875,  7.6875,  6.1875},
 { 1.1875, 10.6875,    4.25, 12.6875,     2.5},
 {   13.5,  6.6875,  8.1875,  1.1875,   11.25}}
x.var(2):p ..
{{ 5.44,  5.84,   6.8,  6.16},
 {  4.4,  3.76,  5.84,  5.76},
 {11.76,  5.36,   4.4,  8.56}}

======== #66 index-access test ========

{{ 0,  0,  1,  2,  0,  0},
 { 0,  0,  4,  5,  0,  0},
 { 0,  0,  7,  8,  0,  0},
 { 0,  0, 10, 11,  0,  0},
 { 0,  0,  1,  2,  0,  0}}

======== #67 broadcast ========

a ..
{{{ 0,  1,  2},
  { 3,  4,  5},
  { 6,  7,  8},
  { 9, 10, 11}},

 {{12, 13, 14},
  {15, 16, 17},
  {18, 19, 20},
  {21, 22, 23}}}
b ..
{{{ 0,  1,  2},
  { 3,  4,  5},
  { 6,  7,  8},
  { 9, 10, 11}},

 {{12, 13, 14},
  {15, 16, 17},
  {18, 19, 20},
  {21, 22, 23}}}
a + b ..
{{{ 0,  2,  4},
  { 6,  8, 10},
  {12, 14, 16},
  {18, 20, 22}},

 {{24, 26, 28},
  {30, 32, 34},
  {36, 38, 40},
  {42, 44, 46}}}
b + a ..
{{{ 0,  2,  4},
  { 6,  8, 10},
  {12, 14, 16},
  {18, 20, 22}},

 {{24, 26, 28},
  {30, 32, 34},
  {36, 38, 40},
  {42, 44, 46}}}
a.T + b.T ..
{{{ 0,  6, 12, 18},
  { 2,  8, 14, 20},
  { 4, 10, 16, 22}},

 {{24, 30, 36, 42},
  {26, 32, 38, 44},
  {28, 34, 40, 46}}}
b.T + a.T ..
{{{ 0,  6, 12, 18},
  { 2,  8, 14, 20},
  { 4, 10, 16, 22}},

 {{24, 30, 36, 42},
  {26, 32, 38, 44},
  {28, 34, 40, 46}}}
a ..
{{{{ 0,  1,  2},
   { 3,  4,  5},
   { 6,  7,  8},
   { 9, 10, 11}},

  {{12, 13, 14},
   {15, 16, 17},
   {18, 19, 20},
   {21, 22, 23}}},


 {{{24, 25, 26},
   {27, 28, 29},
   {30, 31, 32},
   {33, 34, 35}},

  {{36, 37, 38},
   {39, 40, 41},
   {42, 43, 44},
   {45, 46, 47}}},


 {{{48, 49, 50},
   {51, 52, 53},
   {54, 55, 56},
   {57, 58, 59}},

  {{60, 61, 62},
   {63, 64, 65},
   {66, 67, 68},
   {69, 70, 71}}}}
b ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11}}
a + b ..
{{{{ 0,  2,  4},
   { 6,  8, 10},
   {12, 14, 16},
   {18, 20, 22}},

  {{12, 14, 16},
   {18, 20, 22},
   {24, 26, 28},
   {30, 32, 34}}},


 {{{24, 26, 28},
   {30, 32, 34},
   {36, 38, 40},
   {42, 44, 46}},

  {{36, 38, 40},
   {42, 44, 46},
   {48, 50, 52},
   {54, 56, 58}}},


 {{{48, 50, 52},
   {54, 56, 58},
   {60, 62, 64},
   {66, 68, 70}},

  {{60, 62, 64},
   {66, 68, 70},
   {72, 74, 76},
   {78, 80, 82}}}}
b + a ..
{{{{ 0,  2,  4},
   { 6,  8, 10},
   {12, 14, 16},
   {18, 20, 22}},

  {{12, 14, 16},
   {18, 20, 22},
   {24, 26, 28},
   {30, 32, 34}}},


 {{{24, 26, 28},
   {30, 32, 34},
   {36, 38, 40},
   {42, 44, 46}},

  {{36, 38, 40},
   {42, 44, 46},
   {48, 50, 52},
   {54, 56, 58}}},


 {{{48, 50, 52},
   {54, 56, 58},
   {60, 62, 64},
   {66, 68, 70}},

  {{60, 62, 64},
   {66, 68, 70},
   {72, 74, 76},
   {78, 80, 82}}}}
a.T + b.T ..
{{{{ 0,  6, 12, 18},
   { 2,  8, 14, 20},
   { 4, 10, 16, 22}},

  {{12, 18, 24, 30},
   {14, 20, 26, 32},
   {16, 22, 28, 34}}},


 {{{24, 30, 36, 42},
   {26, 32, 38, 44},
   {28, 34, 40, 46}},

  {{36, 42, 48, 54},
   {38, 44, 50, 56},
   {40, 46, 52, 58}}},


 {{{48, 54, 60, 66},
   {50, 56, 62, 68},
   {52, 58, 64, 70}},

  {{60, 66, 72, 78},
   {62, 68, 74, 80},
   {64, 70, 76, 82}}}}
b.T + a.T ..
{{{{ 0,  6, 12, 18},
   { 2,  8, 14, 20},
   { 4, 10, 16, 22}},

  {{12, 18, 24, 30},
   {14, 20, 26, 32},
   {16, 22, 28, 34}}},


 {{{24, 30, 36, 42},
   {26, 32, 38, 44},
   {28, 34, 40, 46}},

  {{36, 42, 48, 54},
   {38, 44, 50, 56},
   {40, 46, 52, 58}}},


 {{{48, 54, 60, 66},
   {50, 56, 62, 68},
   {52, 58, 64, 70}},

  {{60, 66, 72, 78},
   {62, 68, 74, 80},
   {64, 70, 76, 82}}}}

======== #68 test with transposed array ========

x ..
{{{ 1, -2,  2},
  { 2, -2,  4},
  { 1,  1,  0},
  { 4, -5,  0}},

 {{ 2,  3,  4},
  { 0,  2, -2},
  { 1,  3,  3},
  { 0, -3,  0}},

 {{-4,  0, -2},
  { 3, -1, -5},
  {-3,  3, -2},
  { 3,  1, -3}},

 {{-3, -1,  2},
  { 0, -2, -1},
  { 3, -3, -3},
  { 3, -1,  4}},

 {{-4,  1,  0},
  {-3,  2, -3},
  { 3, -1,  1},
  { 1,  4,  3}}}
-x ..
{{{-1,  2, -2},
  {-2,  2, -4},
  {-1, -1,  0},
  {-4,  5,  0}},

 {{-2, -3, -4},
  { 0, -2,  2},
  {-1, -3, -3},
  { 0,  3,  0}},

 {{ 4,  0,  2},
  {-3,  1,  5},
  { 3, -3,  2},
  {-3, -1,  3}},

 {{ 3,  1, -2},
  { 0,  2,  1},
  {-3,  3,  3},
  {-3,  1, -4}},

 {{ 4, -1,  0},
  { 3, -2,  3},
  {-3,  1, -1},
  {-1, -4, -3}}}
x + 3 ..
{{{ 4,  1,  5},
  { 5,  1,  7},
  { 4,  4,  3},
  { 7, -2,  3}},

 {{ 5,  6,  7},
  { 3,  5,  1},
  { 4,  6,  6},
  { 3,  0,  3}},

 {{-1,  3,  1},
  { 6,  2, -2},
  { 0,  6,  1},
  { 6,  4,  0}},

 {{ 0,  2,  5},
  { 3,  1,  2},
  { 6,  0,  0},
  { 6,  2,  7}},

 {{-1,  4,  3},
  { 0,  5,  0},
  { 6,  2,  4},
  { 4,  7,  6}}}
3 + x ..
{{{ 4,  1,  5},
  { 5,  1,  7},
  { 4,  4,  3},
  { 7, -2,  3}},

 {{ 5,  6,  7},
  { 3,  5,  1},
  { 4,  6,  6},
  { 3,  0,  3}},

 {{-1,  3,  1},
  { 6,  2, -2},
  { 0,  6,  1},
  { 6,  4,  0}},

 {{ 0,  2,  5},
  { 3,  1,  2},
  { 6,  0,  0},
  { 6,  2,  7}},

 {{-1,  4,  3},
  { 0,  5,  0},
  { 6,  2,  4},
  { 4,  7,  6}}}
x + 3j ..
{{{ 1+3j, -2+3j,  2+3j},
  { 2+3j, -2+3j,  4+3j},
  { 1+3j,  1+3j,    3j},
  { 4+3j, -5+3j,    3j}},

 {{ 2+3j,  3+3j,  4+3j},
  {   3j,  2+3j, -2+3j},
  { 1+3j,  3+3j,  3+3j},
  {   3j, -3+3j,    3j}},

 {{-4+3j,    3j, -2+3j},
  { 3+3j, -1+3j, -5+3j},
  {-3+3j,  3+3j, -2+3j},
  { 3+3j,  1+3j, -3+3j}},

 {{-3+3j, -1+3j,  2+3j},
  {   3j, -2+3j, -1+3j},
  { 3+3j, -3+3j, -3+3j},
  { 3+3j, -1+3j,  4+3j}},

 {{-4+3j,  1+3j,    3j},
  {-3+3j,  2+3j, -3+3j},
  { 3+3j, -1+3j,  1+3j},
  { 1+3j,  4+3j,  3+3j}}}
3j + x ..
{{{ 1+3j, -2+3j,  2+3j},
  { 2+3j, -2+3j,  4+3j},
  { 1+3j,  1+3j,    3j},
  { 4+3j, -5+3j,    3j}},

 {{ 2+3j,  3+3j,  4+3j},
  {   3j,  2+3j, -2+3j},
  { 1+3j,  3+3j,  3+3j},
  {   3j, -3+3j,    3j}},

 {{-4+3j,    3j, -2+3j},
  { 3+3j, -1+3j, -5+3j},
  {-3+3j,  3+3j, -2+3j},
  { 3+3j,  1+3j, -3+3j}},

 {{-3+3j, -1+3j,  2+3j},
  {   3j, -2+3j, -1+3j},
  { 3+3j, -3+3j, -3+3j},
  { 3+3j, -1+3j,  4+3j}},

 {{-4+3j,  1+3j,    3j},
  {-3+3j,  2+3j, -3+3j},
  { 3+3j, -1+3j,  1+3j},
  { 1+3j,  4+3j,  3+3j}}}

======== #69 transpose to an array that has been applied with T ========

x ..
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7},
  { 8,  9, 10, 11}},

 {{12, 13, 14, 15},
  {16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31},
  {32, 33, 34, 35}},

 {{36, 37, 38, 39},
  {40, 41, 42, 43},
  {44, 45, 46, 47}},

 {{48, 49, 50, 51},
  {52, 53, 54, 55},
  {56, 57, 58, 59}}}
x.transpose([0, 2, 1]) ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}},

 {{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}},

 {{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}
x.T ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}},

 {{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}},

 {{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}
x.T.T ..
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7},
  { 8,  9, 10, 11}},

 {{12, 13, 14, 15},
  {16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31},
  {32, 33, 34, 35}},

 {{36, 37, 38, 39},
  {40, 41, 42, 43},
  {44, 45, 46, 47}},

 {{48, 49, 50, 51},
  {52, 53, 54, 55},
  {56, 57, 58, 59}}}
x.transpose([2, 1, 0]) ..
{{{ 0, 12, 24, 36, 48},
  { 4, 16, 28, 40, 52},
  { 8, 20, 32, 44, 56}},

 {{ 1, 13, 25, 37, 49},
  { 5, 17, 29, 41, 53},
  { 9, 21, 33, 45, 57}},

 {{ 2, 14, 26, 38, 50},
  { 6, 18, 30, 42, 54},
  {10, 22, 34, 46, 58}},

 {{ 3, 15, 27, 39, 51},
  { 7, 19, 31, 43, 55},
  {11, 23, 35, 47, 59}}}
x.T.transpose([1, 2, 0]) ..
{{{ 0, 12, 24, 36, 48},
  { 4, 16, 28, 40, 52},
  { 8, 20, 32, 44, 56}},

 {{ 1, 13, 25, 37, 49},
  { 5, 17, 29, 41, 53},
  { 9, 21, 33, 45, 57}},

 {{ 2, 14, 26, 38, 50},
  { 6, 18, 30, 42, 54},
  {10, 22, 34, 46, 58}},

 {{ 3, 15, 27, 39, 51},
  { 7, 19, 31, 43, 55},
  {11, 23, 35, 47, 59}}}
x.T.transpose([0, 2, 1]) ..
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7},
  { 8,  9, 10, 11}},

 {{12, 13, 14, 15},
  {16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31},
  {32, 33, 34, 35}},

 {{36, 37, 38, 39},
  {40, 41, 42, 43},
  {44, 45, 46, 47}},

 {{48, 49, 50, 51},
  {52, 53, 54, 55},
  {56, 57, 58, 59}}}

======== #70 array#tolist() ========

x ..
{{{ 0,  1,  2,  3},
  { 4,  5,  6,  7},
  { 8,  9, 10, 11}},

 {{12, 13, 14, 15},
  {16, 17, 18, 19},
  {20, 21, 22, 23}},

 {{24, 25, 26, 27},
  {28, 29, 30, 31},
  {32, 33, 34, 35}},

 {{36, 37, 38, 39},
  {40, 41, 42, 43},
  {44, 45, 46, 47}},

 {{48, 49, 50, 51},
  {52, 53, 54, 55},
  {56, 57, 58, 59}}}
x.tolist() .. [[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]], [[12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]], [[24, 25, 26, 27], [28, 29, 30, 31], [32, 33, 34, 35]], [[36, 37, 38, 39], [40, 41, 42, 43], [44, 45, 46, 47]], [[48, 49, 50, 51], [52, 53, 54, 55], [56, 57, 58, 59]]]
x.T ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}},

 {{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}},

 {{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}
x.T.tolist() .. [[[0, 4, 8], [1, 5, 9], [2, 6, 10], [3, 7, 11]], [[12, 16, 20], [13, 17, 21], [14, 18, 22], [15, 19, 23]], [[24, 28, 32], [25, 29, 33], [26, 30, 34], [27, 31, 35]], [[36, 40, 44], [37, 41, 45], [38, 42, 46], [39, 43, 47]], [[48, 52, 56], [49, 53, 57], [50, 54, 58], [51, 55, 59]]]

======== #71 operation on transposed array: argmax, argmin, max, min, std, sum ========

xt = x.transpose([0, 1, 3, 2] ... shared:false
xT = x.T ... shared:true
xt.argmax(0) ..
{{{1, 0, 0},
  {1, 1, 1},
  {2, 2, 0},
  {2, 0, 0}},

 {{0, 0, 0},
  {2, 2, 0},
  {1, 2, 1},
  {2, 0, 2}}}
xT.argmax(0) ..
{{{1, 0, 0},
  {1, 1, 1},
  {2, 2, 0},
  {2, 0, 0}},

 {{0, 0, 0},
  {2, 2, 0},
  {1, 2, 1},
  {2, 0, 2}}}
xt.argmax(1) ..
{{{1, 0, 0},
  {1, 1, 1},
  {1, 0, 0},
  {1, 1, 0}},

 {{0, 0, 1},
  {0, 0, 0},
  {1, 0, 1},
  {1, 0, 1}},

 {{0, 1, 1},
  {1, 0, 1},
  {1, 1, 1},
  {0, 0, 1}}}
xT.argmax(1) ..
{{{1, 0, 0},
  {1, 1, 1},
  {1, 0, 0},
  {1, 1, 0}},

 {{0, 0, 1},
  {0, 0, 0},
  {1, 0, 1},
  {1, 0, 1}},

 {{0, 1, 1},
  {1, 0, 1},
  {1, 1, 1},
  {0, 0, 1}}}
xt.argmax(2) ..
{{{3, 3, 3},
  {0, 3, 1}},

 {{1, 1, 3},
  {2, 1, 2}},

 {{3, 1, 0},
  {1, 1, 3}}}
xT.argmax(2) ..
{{{3, 3, 3},
  {0, 3, 1}},

 {{1, 1, 3},
  {2, 1, 2}},

 {{3, 1, 0},
  {1, 1, 3}}}
xt.argmax(3) ..
{{{1, 0, 2, 1},
  {1, 2, 0, 1}},

 {{0, 0, 1, 1},
  {2, 0, 0, 2}},

 {{0, 1, 1, 0},
  {1, 0, 0, 0}}}
xT.argmax(3) ..
{{{1, 0, 2, 1},
  {1, 2, 0, 1}},

 {{0, 0, 1, 1},
  {2, 0, 0, 2}},

 {{0, 1, 1, 0},
  {1, 0, 0, 0}}}
xt.argmin(0) ..
{{{0, 2, 2},
  {0, 0, 0},
  {0, 0, 2},
  {1, 2, 2}},

 {{1, 1, 1},
  {0, 0, 1},
  {0, 0, 2},
  {1, 2, 0}}}
xT.argmin(0) ..
{{{0, 2, 2},
  {0, 0, 0},
  {0, 0, 2},
  {1, 2, 2}},

 {{1, 1, 1},
  {0, 0, 1},
  {0, 0, 2},
  {1, 2, 0}}}
xt.argmin(1) ..
{{{0, 1, 1},
  {0, 0, 0},
  {0, 1, 1},
  {0, 0, 1}},

 {{1, 1, 0},
  {1, 1, 1},
  {0, 1, 0},
  {0, 1, 0}},

 {{1, 0, 0},
  {0, 1, 0},
  {0, 0, 0},
  {1, 1, 0}}}
xT.argmin(1) ..
{{{0, 1, 1},
  {0, 0, 0},
  {0, 1, 1},
  {0, 0, 1}},

 {{1, 1, 0},
  {1, 1, 1},
  {0, 1, 0},
  {0, 1, 0}},

 {{1, 0, 0},
  {0, 1, 0},
  {0, 0, 0},
  {1, 1, 0}}}
xt.argmin(2) ..
{{{0, 2, 1},
  {1, 2, 2}},

 {{3, 0, 0},
  {0, 0, 1}},

 {{1, 0, 2},
  {0, 3, 2}}}
xT.argmin(2) ..
{{{0, 2, 1},
  {1, 2, 2}},

 {{3, 0, 0},
  {0, 0, 1}},

 {{1, 0, 2},
  {0, 3, 2}}}
xt.argmin(3) ..
{{{0, 1, 1, 0},
  {2, 1, 1, 0}},

 {{2, 2, 0, 0},
  {1, 2, 1, 0}},

 {{2, 2, 2, 2},
  {0, 2, 2, 1}}}
xT.argmin(3) ..
{{{0, 1, 1, 0},
  {2, 1, 1, 0}},

 {{2, 2, 0, 0},
  {1, 2, 1, 0}},

 {{2, 2, 2, 2},
  {0, 2, 2, 1}}}
xt.max(0) ..
{{{ 5,  7,  2},
  { 9,  6, -1},
  {-3,  3,  2},
  { 8,  8,  5}},

 {{ 2,  6,  1},
  { 8,  5,  6},
  { 7,  5,  2},
  { 7,  9,  5}}}
xT.max(0) ..
{{{ 5,  7,  2},
  { 9,  6, -1},
  {-3,  3,  2},
  { 8,  8,  5}},

 {{ 2,  6,  1},
  { 8,  5,  6},
  { 7,  5,  2},
  { 7,  9,  5}}}
xt.max(1) ..
{{{ 2,  7,  2},
  {-5, -7,  6},
  {-1, -9,  2},
  {-1,  9,  5}},

 {{ 5, -1, -3},
  { 9,  6, -1},
  { 7, -1,  2},
  {-2,  4,  2}},

 {{ 3,  3,  1},
  { 8,  6, -4},
  { 6,  5, -5},
  { 8, -3,  5}}}
xT.max(1) ..
{{{ 2,  7,  2},
  {-5, -7,  6},
  {-1, -9,  2},
  {-1,  9,  5}},

 {{ 5, -1, -3},
  { 9,  6, -1},
  { 7, -1,  2},
  {-2,  4,  2}},

 {{ 3,  3,  1},
  { 8,  6, -4},
  { 6,  5, -5},
  { 8, -3,  5}}}
xt.max(2) ..
{{{-3,  8,  5},
  { 2,  9,  6}},

 {{ 9,  6,  1},
  { 7,  2,  2}},

 {{ 8,  6, -8},
  { 8,  5,  5}}}
xT.max(2) ..
{{{-3,  8,  5},
  { 2,  9,  6}},

 {{ 9,  6,  1},
  { 7,  2,  2}},

 {{ 8,  6, -8},
  { 8,  5,  5}}}
xt.max(3) ..
{{{ 7, -6,  2,  8},
  { 6,  6, -1,  9}},

 {{ 5,  9, -1,  4},
  {-3,  6,  7,  2}},

 {{ 3,  6,  3,  8},
  { 3,  8,  6,  7}}}
xT.max(3) ..
{{{ 7, -6,  2,  8},
  { 6,  6, -1,  9}},

 {{ 5,  9, -1,  4},
  {-3,  6,  7,  2}},

 {{ 3,  6,  3,  8},
  { 3,  8,  6,  7}}}
xt.min(0) ..
{{{-10,  -7,  -8},
  { -6,  -8,  -8},
  { -5,  -9, -10},
  {-10,  -3,  -9}},

 {{ -6,  -7,  -3},
  { -5,  -7,  -7},
  { -1, -10,  -5},
  { -2,  -6,   2}}}
xT.min(0) ..
{{{-10,  -7,  -8},
  { -6,  -8,  -8},
  { -5,  -9, -10},
  {-10,  -3,  -9}},

 {{ -6,  -7,  -3},
  { -5,  -7,  -7},
  { -1, -10,  -5},
  { -2,  -6,   2}}}
xt.min(1) ..
{{{-10,   6,   1},
  { -6,  -8,  -8},
  { -5, -10,  -4},
  { -3,   8,   2}},

 {{ -6,  -7,  -5},
  {  6,   2,  -7},
  { -5,  -5,  -5},
  {-10,   1,   1}},

 {{ -1,  -7,  -8},
  { -5,   5,  -8},
  { -3,   3, -10},
  {  7,  -6,  -9}}}
xT.min(1) ..
{{{-10,   6,   1},
  { -6,  -8,  -8},
  { -5, -10,  -4},
  { -3,   8,   2}},

 {{ -6,  -7,  -5},
  {  6,   2,  -7},
  { -5,  -5,  -5},
  {-10,   1,   1}},

 {{ -1,  -7,  -8},
  { -5,   5,  -8},
  { -3,   3, -10},
  {  7,  -6,  -9}}}
xt.min(2) ..
{{{-10,  -9,  -8},
  { -5, -10,  -4}},

 {{-10,  -1,  -5},
  { -6,  -7,  -7}},

 {{ -5,  -7, -10},
  { -1,  -6,  -5}}}
xT.min(2) ..
{{{-10,  -9,  -8},
  { -5, -10,  -4}},

 {{-10,  -1,  -5},
  { -6,  -7,  -7}},

 {{ -5,  -7, -10},
  { -1,  -6,  -5}}}
xt.min(3) ..
{{{-10,  -8,  -9,  -3},
  {  1,  -7, -10,  -1}},

 {{ -5,  -1,  -5, -10},
  { -7,  -7,  -5,  -2}},

 {{ -8,  -8, -10,  -9},
  { -1,  -4,  -5,  -6}}}
xT.min(3) ..
{{{-10,  -8,  -9,  -3},
  {  1,  -7, -10,  -1}},

 {{ -5,  -1,  -5, -10},
  { -7,  -7,  -5,  -2}},

 {{ -8,  -8, -10,  -9},
  { -1,  -4,  -5,  -6}}}
xt.std(0) ..
{{{8.14453, 7.02377,  5.1316},
  { 8.3865,  8.0829, 4.04145},
  { 1.1547,  6.1101, 6.02771},
  {9.07377, 5.56776,  7.2111}},

 {{4.04145, 6.80686,  2.3094},
  {      7,   6.245, 6.80686},
  { 4.3589, 7.63763, 3.78594},
  {4.93288, 7.50555, 1.73205}}}
xT.std(0) ..
{{{8.14453, 7.02377,  5.1316},
  { 8.3865,  8.0829, 4.04145},
  { 1.1547,  6.1101, 6.02771},
  {9.07377, 5.56776,  7.2111}},

 {{4.04145, 6.80686,  2.3094},
  {      7,   6.245, 6.80686},
  { 4.3589, 7.63763, 3.78594},
  {4.93288, 7.50555, 1.73205}}}
xt.std(1) ..
{{{ 8.48528, 0.707107, 0.707107},
  {0.707107, 0.707107,  9.89949},
  { 2.82843, 0.707107,  4.24264},
  { 1.41421, 0.707107,  2.12132}},

 {{ 7.77817,  4.24264,  1.41421},
  { 2.12132,  2.82843,  4.24264},
  { 8.48528,  2.82843,  4.94975},
  { 5.65685,  2.12132, 0.707107}},

 {{ 2.82843,  7.07107,  6.36396},
  { 9.19239, 0.707107,  2.82843},
  { 6.36396,  1.41421,  3.53553},
  {0.707107,  2.12132,  9.89949}}}
xT.std(1) ..
{{{ 8.48528, 0.707107, 0.707107},
  {0.707107, 0.707107,  9.89949},
  { 2.82843, 0.707107,  4.24264},
  { 1.41421, 0.707107,  2.12132}},

 {{ 7.77817,  4.24264,  1.41421},
  { 2.12132,  2.82843,  4.24264},
  { 8.48528,  2.82843,  4.94975},
  { 5.65685,  2.12132, 0.707107}},

 {{ 2.82843,  7.07107,  6.36396},
  { 9.19239, 0.707107,  2.82843},
  { 6.36396,  1.41421,  3.53553},
  {0.707107,  2.12132,  9.89949}}}
xt.std(2) ..
{{{ 2.94392,  9.25563,  5.67891},
  { 2.87228,  9.39858,  4.11299}},

 {{ 8.77021,  3.55903,        3},
  { 6.29153,  4.42531,   4.3589}},

 {{ 5.90903,  5.85235, 0.957427},
  { 4.08248,  5.25198,  4.64579}}}
xT.std(2) ..
{{{ 2.94392,  9.25563,  5.67891},
  { 2.87228,  9.39858,  4.11299}},

 {{ 8.77021,  3.55903,        3},
  { 6.29153,  4.42531,   4.3589}},

 {{ 5.90903,  5.85235, 0.957427},
  { 4.08248,  5.25198,  4.64579}}}
xt.std(3) ..
{{{8.73689,  1.1547, 5.56776, 5.68624},
  {2.64575,       7, 4.58258,  5.1316}},

 {{5.03322,  5.1316,  2.3094, 7.37111},
  {2.08167, 6.65833, 6.02771, 2.08167}},

 {{6.08276, 7.37111, 6.50641, 8.62168},
  {      2,   6.245, 6.08276,       7}}}
xT.std(3) ..
{{{8.73689,  1.1547, 5.56776, 5.68624},
  {2.64575,       7, 4.58258,  5.1316}},

 {{5.03322,  5.1316,  2.3094, 7.37111},
  {2.08167, 6.65833, 6.02771, 2.08167}},

 {{6.08276, 7.37111, 6.50641, 8.62168},
  {      2,   6.245, 6.08276,       7}}}
xt.sum(0) ..
{{{ -2,  -1, -11},
  { -2,   4, -17},
  {-13,  -7, -13},
  { -5,   9,  -3}},

 {{ -5,   2,  -1},
  {  9,   0,  -5},
  { 12, -10,  -7},
  {  4,   4,   9}}}
xT.sum(0) ..
{{{ -2,  -1, -11},
  { -2,   4, -17},
  {-13,  -7, -13},
  { -5,   9,  -3}},

 {{ -5,   2,  -1},
  {  9,   0,  -5},
  { 12, -10,  -7},
  {  4,   4,   9}}}
xt.sum(1) ..
{{{ -8,  13,   3},
  {-11, -15,  -2},
  { -6, -19,  -2},
  { -4,  17,   7}},

 {{ -1,  -8,  -8},
  { 15,   8,  -8},
  {  2,  -6,  -3},
  {-12,   5,   3}},

 {{  2,  -4,  -7},
  {  3,  11, -12},
  {  3,   8, -15},
  { 15,  -9,  -4}}}
xT.sum(1) ..
{{{ -8,  13,   3},
  {-11, -15,  -2},
  { -6, -19,  -2},
  { -4,  17,   7}},

 {{ -1,  -8,  -8},
  { 15,   8,  -8},
  {  2,  -6,  -3},
  {-12,   5,   3}},

 {{  2,  -4,  -7},
  {  3,  11, -12},
  {  3,   8, -15},
  { 15,  -9,  -4}}}
xt.sum(2) ..
{{{-24,  -2,   1},
  { -5,  -2,   5}},

 {{ -1,   8, -10},
  {  5,  -9,  -6}},

 {{  3,  -1, -35},
  { 20,   7,  -3}}}
xT.sum(2) ..
{{{-24,  -2,   1},
  { -5,  -2,   5}},

 {{ -1,   8, -10},
  {  5,  -9,  -6}},

 {{  3,  -1, -35},
  { 20,   7,  -3}}}
xt.sum(3) ..
{{{ -1, -22, -12,  10},
  {  9,  -6, -15,  10}},

 {{ -1,  14, -11,  -5},
  {-16,   1,   4,   1}},

 {{-12,  -7, -10,  -4},
  {  3,   9,   6,   6}}}
xT.sum(3) ..
{{{ -1, -22, -12,  10},
  {  9,  -6, -15,  10}},

 {{ -1,  14, -11,  -5},
  {-16,   1,   4,   1}},

 {{-12,  -7, -10,  -4},
  {  3,   9,   6,   6}}}

======== #72 operation on transposed array: head, tail, offset ========

xt.head(3) ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}},

 {{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}}}
xT.head(3) ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}},

 {{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}}}
xt.tail(3) ..
{{{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}},

 {{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}
xT.tail(3) ..
{{{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}},

 {{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}
xt.offset(3) ..
{{{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}
xT.offset(3) ..
{{{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}

======== #73 operation on transposed array: roundoff ========

x ..
{{{0.0008, 0.0044,  0.006, 0.0078, 0.0174},
  {0.0028, 0.0016, 0.0186,  0.013, 0.0028},
  {0.0124, 0.0152, 0.0126, 0.0058, 0.0092},
  {  0.01, 0.0164, 0.0034, 0.0006,   0.02}},

 {{0.0116, 0.0166,  0.007, 0.0126, 0.0156},
  {0.0196,  0.006,  0.001, 0.0098,  0.017},
  {0.0094, 0.0146, 0.0054, 0.0094, 0.0058},
  {0.0114, 0.0044, 0.0164, 0.0176, 0.0086}},

 {{0.0038, 0.0124, 0.0054, 0.0116, 0.0074},
  {0.0036, 0.0124, 0.0122, 0.0138, 0.0056},
  {0.0078, 0.0186, 0.0038, 0.0164, 0.0136},
  {0.0078, 0.0024,  0.003,  0.001, 0.0012}}}
x.roundoff(.01) ..
{{{     0,      0,      0,      0, 0.0174},
  {     0,      0, 0.0186,  0.013,      0},
  {0.0124, 0.0152, 0.0126,      0,      0},
  {  0.01, 0.0164,      0,      0,   0.02}},

 {{0.0116, 0.0166,      0, 0.0126, 0.0156},
  {0.0196,      0,      0,      0,  0.017},
  {     0, 0.0146,      0,      0,      0},
  {0.0114,      0, 0.0164, 0.0176,      0}},

 {{     0, 0.0124,      0, 0.0116,      0},
  {     0, 0.0124, 0.0122, 0.0138,      0},
  {     0, 0.0186,      0, 0.0164, 0.0136},
  {     0,      0,      0,      0,      0}}}
xt ..
{{{0.0008, 0.0028, 0.0124,   0.01},
  {0.0044, 0.0016, 0.0152, 0.0164},
  { 0.006, 0.0186, 0.0126, 0.0034},
  {0.0078,  0.013, 0.0058, 0.0006},
  {0.0174, 0.0028, 0.0092,   0.02}},

 {{0.0116, 0.0196, 0.0094, 0.0114},
  {0.0166,  0.006, 0.0146, 0.0044},
  { 0.007,  0.001, 0.0054, 0.0164},
  {0.0126, 0.0098, 0.0094, 0.0176},
  {0.0156,  0.017, 0.0058, 0.0086}},

 {{0.0038, 0.0036, 0.0078, 0.0078},
  {0.0124, 0.0124, 0.0186, 0.0024},
  {0.0054, 0.0122, 0.0038,  0.003},
  {0.0116, 0.0138, 0.0164,  0.001},
  {0.0074, 0.0056, 0.0136, 0.0012}}}
xt.roundoff(.01) ..
{{{     0,      0, 0.0124,   0.01},
  {     0,      0, 0.0152, 0.0164},
  {     0, 0.0186, 0.0126,      0},
  {     0,  0.013,      0,      0},
  {0.0174,      0,      0,   0.02}},

 {{0.0116, 0.0196,      0, 0.0114},
  {0.0166,      0, 0.0146,      0},
  {     0,      0,      0, 0.0164},
  {0.0126,      0,      0, 0.0176},
  {0.0156,  0.017,      0,      0}},

 {{     0,      0,      0,      0},
  {0.0124, 0.0124, 0.0186,      0},
  {     0, 0.0122,      0,      0},
  {0.0116, 0.0138, 0.0164,      0},
  {     0,      0, 0.0136,      0}}}
xT.roundoff(.01) ..
{{{     0,      0, 0.0124,   0.01},
  {     0,      0, 0.0152, 0.0164},
  {     0, 0.0186, 0.0126,      0},
  {     0,  0.013,      0,      0},
  {0.0174,      0,      0,   0.02}},

 {{0.0116, 0.0196,      0, 0.0114},
  {0.0166,      0, 0.0146,      0},
  {     0,      0,      0, 0.0164},
  {0.0126,      0,      0, 0.0176},
  {0.0156,  0.017,      0,      0}},

 {{     0,      0,      0,      0},
  {0.0124, 0.0124, 0.0186,      0},
  {     0, 0.0122,      0,      0},
  {0.0116, 0.0138, 0.0164,      0},
  {     0,      0, 0.0136,      0}}}

======== #74 operation on transposed array: flatten ========

xt ..
{{ 0,  4,  8},
 { 1,  5,  9},
 { 2,  6, 10},
 { 3,  7, 11}}
xt.flatten() .. { 0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11}
xT.flatten() .. { 0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11}
xt ..
{{{ 0,  4,  8},
  { 1,  5,  9},
  { 2,  6, 10},
  { 3,  7, 11}},

 {{12, 16, 20},
  {13, 17, 21},
  {14, 18, 22},
  {15, 19, 23}},

 {{24, 28, 32},
  {25, 29, 33},
  {26, 30, 34},
  {27, 31, 35}},

 {{36, 40, 44},
  {37, 41, 45},
  {38, 42, 46},
  {39, 43, 47}},

 {{48, 52, 56},
  {49, 53, 57},
  {50, 54, 58},
  {51, 55, 59}}}
xt.flatten() .. { 0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11, 12, 16, 20, 13, 17, 21, 14, 18, 22, 15, 19, 23, 24, 28, 32, 25, 29, 33, 26, 30, 34, 27, 31, 35, 36, 40, 44, 37, 41, 45, 38, 42, 46, 39, 43, 47, 48, 52, 56, 49, 53, 57, 50, 54, 58, 51, 55, 59}
xT.flatten() .. { 0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11, 12, 16, 20, 13, 17, 21, 14, 18, 22, 15, 19, 23, 24, 28, 32, 25, 29, 33, 26, 30, 34, 27, 31, 35, 36, 40, 44, 37, 41, 45, 38, 42, 46, 39, 43, 47, 48, 52, 56, 49, 53, 57, 50, 54, 58, 51, 55, 59}

======== #75 boolean indexing - 1 ========

x ..
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
f ..
{{false, false, false, false},
 {false, false, false, false},
 {false, false, false, false}}
{{0, 0, 0, 0},
 {0, 0, 0, 0},
 {0, 0, 0, 0}}
f ..
{{ true, false, false, false},
 { true, false, false,  true},
 { true, false, false, false}}
{{3, 0, 0, 0},
 {3, 0, 0, 3},
 {3, 0, 0, 0}}
f ..
{{ true, false, false, false},
 { true, false, false,  true},
 { true, false, false, false}}
{{3, 0, 0, 0},
 {4, 0, 0, 5},
 {6, 0, 0, 0}}
x[f] .. {0, 4, 7, 8}

======== #76 boolean indexing - 2 ========

f ..
{{{ true,  true,  true,  true, false},
  {false,  true, false,  true,  true},
  { true,  true,  true,  true,  true},
  { true,  true,  true,  true, false}},

 {{ true, false,  true,  true, false},
  { true, false,  true,  true, false},
  { true,  true, false, false, false},
  {false, false,  true,  true,  true}},

 {{false, false, false, false,  true},
  {false, false,  true, false, false},
  { true,  true,  true,  true, false},
  { true,  true, false,  true,  true}}}
x ..
{{{ 1,  2,  3,  4,  0},
  { 0,  5,  0,  6,  7},
  { 8,  9, 10, 11, 12},
  {13, 14, 15, 16,  0}},

 {{17,  0, 18, 19,  0},
  {20,  0, 21, 22,  0},
  {23, 24,  0,  0,  0},
  { 0,  0, 25, 26, 27}},

 {{ 0,  0,  0,  0, 28},
  { 0,  0, 29,  0,  0},
  {30, 31, 32, 33,  0},
  {34, 35,  0, 36, 37}}}
f ..
{{false, false, false, false,  true},
 {false, false,  true, false, false},
 { true,  true,  true,  true, false},
 { true,  true, false,  true,  true}}
x ..
{{{ 0,  0,  0,  0,  1},
  { 0,  0,  2,  0,  0},
  { 3,  4,  5,  6,  0},
  { 7,  8,  0,  9, 10}},

 {{ 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0}},

 {{ 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0}}}
x ..
{{{ 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0}},

 {{ 0,  0,  0,  0,  1},
  { 0,  0,  2,  0,  0},
  { 3,  4,  5,  6,  0},
  { 7,  8,  0,  9, 10}},

 {{ 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0}}}
x ..
{{{ 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0}},

 {{ 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0},
  { 0,  0,  0,  0,  0}},

 {{ 0,  0,  0,  0,  1},
  { 0,  0,  2,  0,  0},
  { 3,  4,  5,  6,  0},
  { 7,  8,  0,  9, 10}}}
x ..
{{{ 0,  0,  0,  0,  1},
  { 0,  0,  2,  0,  0},
  { 3,  4,  5,  6,  0},
  { 7,  8,  0,  9, 10}},

 {{ 0,  0,  0,  0, 11},
  { 0,  0, 12,  0,  0},
  {13, 14, 15, 16,  0},
  {17, 18,  0, 19, 20}},

 {{ 0,  0,  0,  0, 21},
  { 0,  0, 22,  0,  0},
  {23, 24, 25, 26,  0},
  {27, 28,  0, 29, 30}}}

======== #77 boolean indexing with column-majored array ========

target..row-major, index..row-major
x ..
{{{ 1,  2,  3,  4,  0},
  { 0,  5,  0,  6,  7},
  { 8,  9, 10, 11, 12},
  {13, 14, 15, 16,  0}},

 {{17,  0, 18, 19,  0},
  {20,  0, 21, 22,  0},
  {23, 24,  0,  0,  0},
  { 0,  0, 25, 26, 27}},

 {{ 0,  0,  0,  0, 28},
  { 0,  0, 29,  0,  0},
  {30, 31, 32, 33,  0},
  {34, 35,  0, 36, 37}}}
target..row-major, index..column-major
x ..
{{{ 1,  2,  3,  4,  0},
  { 0,  5,  0,  6,  7},
  { 8,  9, 10, 11, 12},
  {13, 14, 15, 16,  0}},

 {{17,  0, 18, 19,  0},
  {20,  0, 21, 22,  0},
  {23, 24,  0,  0,  0},
  { 0,  0, 25, 26, 27}},

 {{ 0,  0,  0,  0, 28},
  { 0,  0, 29,  0,  0},
  {30, 31, 32, 33,  0},
  {34, 35,  0, 36, 37}}}
target..column-major, index..row-major
x ..
{{{ 1,  2,  3,  4,  0},
  { 0,  5,  0,  6,  7},
  { 8,  9, 10, 11, 12},
  {13, 14, 15, 16,  0}},

 {{17,  0, 18, 19,  0},
  {20,  0, 21, 22,  0},
  {23, 24,  0,  0,  0},
  { 0,  0, 25, 26, 27}},

 {{ 0,  0,  0,  0, 28},
  { 0,  0, 29,  0,  0},
  {30, 31, 32, 33,  0},
  {34, 35,  0, 36, 37}}}
target..column-major, index..column-major
x ..
{{{ 1,  2,  3,  4,  0},
  { 0,  5,  0,  6,  7},
  { 8,  9, 10, 11, 12},
  {13, 14, 15, 16,  0}},

 {{17,  0, 18, 19,  0},
  {20,  0, 21, 22,  0},
  {23, 24,  0,  0,  0},
  { 0,  0, 25, 26, 27}},

 {{ 0,  0,  0,  0, 28},
  { 0,  0, 29,  0,  0},
  {30, 31, 32, 33,  0},
  {34, 35,  0, 36, 37}}}

======== #78 array#flatten with column-majored array ========

column
{{{ 0,  1,  2},
  { 3,  4,  5},
  { 6,  7,  8},
  { 9, 10, 11},
  {12, 13, 14}},

 {{15, 16, 17},
  {18, 19, 20},
  {21, 22, 23},
  {24, 25, 26},
  {27, 28, 29}},

 {{30, 31, 32},
  {33, 34, 35},
  {36, 37, 38},
  {39, 40, 41},
  {42, 43, 44}},

 {{45, 46, 47},
  {48, 49, 50},
  {51, 52, 53},
  {54, 55, 56},
  {57, 58, 59}}}
x.flatten() .. { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}

======== #79 array#fill ========

boolean
{{true, true, true, true},
 {true, true, true, true},
 {true, true, true, true}}
int8
{{127, 127, 127, 127},
 {127, 127, 127, 127},
 {127, 127, 127, 127}}
uint8
{{255, 255, 255, 255},
 {255, 255, 255, 255},
 {255, 255, 255, 255}}
int16
{{32767, 32767, 32767, 32767},
 {32767, 32767, 32767, 32767},
 {32767, 32767, 32767, 32767}}
uint16
{{65535, 65535, 65535, 65535},
 {65535, 65535, 65535, 65535},
 {65535, 65535, 65535, 65535}}
int32
{{2147483647, 2147483647, 2147483647, 2147483647},
 {2147483647, 2147483647, 2147483647, 2147483647},
 {2147483647, 2147483647, 2147483647, 2147483647}}
uint32
{{4294967295, 4294967295, 4294967295, 4294967295},
 {4294967295, 4294967295, 4294967295, 4294967295},
 {4294967295, 4294967295, 4294967295, 4294967295}}
int64
{{281474976710655, 281474976710655, 281474976710655, 281474976710655},
 {281474976710655, 281474976710655, 281474976710655, 281474976710655},
 {281474976710655, 281474976710655, 281474976710655, 281474976710655}}
uint64
{{281474976710655, 281474976710655, 281474976710655, 281474976710655},
 {281474976710655, 281474976710655, 281474976710655, 281474976710655},
 {281474976710655, 281474976710655, 281474976710655, 281474976710655}}
half
{{3.14062, 3.14062, 3.14062, 3.14062},
 {3.14062, 3.14062, 3.14062, 3.14062},
 {3.14062, 3.14062, 3.14062, 3.14062}}
float
{{3.141, 3.141, 3.141, 3.141},
 {3.141, 3.141, 3.141, 3.141},
 {3.141, 3.141, 3.141, 3.141}}
double
{{3.141, 3.141, 3.141, 3.141},
 {3.141, 3.141, 3.141, 3.141},
 {3.141, 3.141, 3.141, 3.141}}
complex
{{3.141, 3.141, 3.141, 3.141},
 {3.141, 3.141, 3.141, 3.141},
 {3.141, 3.141, 3.141, 3.141}}

======== #80 array#dump() ========

uint8
00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17
18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46 47
48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77
78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f
90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f a0 a1 a2 a3 a4 a5 a6 a7
a8 a9 aa ab ac ad ae af b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf
c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf d0 d1 d2 d3 d4 d5 d6 d7
d8 d9 da db dc dd de df e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef
f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff
uint16
0000 0101 0202 0303 0404 0505 0606 0707 0808 0909 0a0a 0b0b 0c0c 0d0d 0e0e 0f0f
1010 1111 1212 1313 1414 1515 1616 1717 1818 1919 1a1a 1b1b 1c1c 1d1d 1e1e 1f1f
2020 2121 2222 2323 2424 2525 2626 2727 2828 2929 2a2a 2b2b 2c2c 2d2d 2e2e 2f2f
3030 3131 3232 3333 3434 3535 3636 3737 3838 3939 3a3a 3b3b 3c3c 3d3d 3e3e 3f3f
4040 4141 4242 4343 4444 4545 4646 4747 4848 4949 4a4a 4b4b 4c4c 4d4d 4e4e 4f4f
5050 5151 5252 5353 5454 5555 5656 5757 5858 5959 5a5a 5b5b 5c5c 5d5d 5e5e 5f5f
6060 6161 6262 6363 6464 6565 6666 6767 6868 6969 6a6a 6b6b 6c6c 6d6d 6e6e 6f6f
7070 7171 7272 7373 7474 7575 7676 7777 7878 7979 7a7a 7b7b 7c7c 7d7d 7e7e 7f7f
8080 8181 8282 8383 8484 8585 8686 8787 8888 8989 8a8a 8b8b 8c8c 8d8d 8e8e 8f8f
9090 9191 9292 9393 9494 9595 9696 9797 9898 9999 9a9a 9b9b 9c9c 9d9d 9e9e 9f9f
a0a0 a1a1 a2a2 a3a3 a4a4 a5a5 a6a6 a7a7 a8a8 a9a9 aaaa abab acac adad aeae afaf
b0b0 b1b1 b2b2 b3b3 b4b4 b5b5 b6b6 b7b7 b8b8 b9b9 baba bbbb bcbc bdbd bebe bfbf
c0c0 c1c1 c2c2 c3c3 c4c4 c5c5 c6c6 c7c7 c8c8 c9c9 caca cbcb cccc cdcd cece cfcf
d0d0 d1d1 d2d2 d3d3 d4d4 d5d5 d6d6 d7d7 d8d8 d9d9 dada dbdb dcdc dddd dede dfdf
e0e0 e1e1 e2e2 e3e3 e4e4 e5e5 e6e6 e7e7 e8e8 e9e9 eaea ebeb ecec eded eeee efef
f0f0 f1f1 f2f2 f3f3 f4f4 f5f5 f6f6 f7f7 f8f8 f9f9 fafa fbfb fcfc fdfd fefe ffff
uint32
00000000 01010101 02020202 03030303 04040404 05050505 06060606 07070707
08080808 09090909 0a0a0a0a 0b0b0b0b 0c0c0c0c 0d0d0d0d 0e0e0e0e 0f0f0f0f
10101010 11111111 12121212 13131313 14141414 15151515 16161616 17171717
18181818 19191919 1a1a1a1a 1b1b1b1b 1c1c1c1c 1d1d1d1d 1e1e1e1e 1f1f1f1f
20202020 21212121 22222222 23232323 24242424 25252525 26262626 27272727
28282828 29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c 2d2d2d2d 2e2e2e2e 2f2f2f2f
30303030 31313131 32323232 33333333 34343434 35353535 36363636 37373737
38383838 39393939 3a3a3a3a 3b3b3b3b 3c3c3c3c 3d3d3d3d 3e3e3e3e 3f3f3f3f
40404040 41414141 42424242 43434343 44444444 45454545 46464646 47474747
48484848 49494949 4a4a4a4a 4b4b4b4b 4c4c4c4c 4d4d4d4d 4e4e4e4e 4f4f4f4f
50505050 51515151 52525252 53535353 54545454 55555555 56565656 57575757
58585858 59595959 5a5a5a5a 5b5b5b5b 5c5c5c5c 5d5d5d5d 5e5e5e5e 5f5f5f5f
60606060 61616161 62626262 63636363 64646464 65656565 66666666 67676767
68686868 69696969 6a6a6a6a 6b6b6b6b 6c6c6c6c 6d6d6d6d 6e6e6e6e 6f6f6f6f
70707070 71717171 72727272 73737373 74747474 75757575 76767676 77777777
78787878 79797979 7a7a7a7a 7b7b7b7b 7c7c7c7c 7d7d7d7d 7e7e7e7e 7f7f7f7f
80808080 81818181 82828282 83838383 84848484 85858585 86868686 87878787
88888888 89898989 8a8a8a8a 8b8b8b8b 8c8c8c8c 8d8d8d8d 8e8e8e8e 8f8f8f8f
90909090 91919191 92929292 93939393 94949494 95959595 96969696 97979797
98989898 99999999 9a9a9a9a 9b9b9b9b 9c9c9c9c 9d9d9d9d 9e9e9e9e 9f9f9f9f
a0a0a0a0 a1a1a1a1 a2a2a2a2 a3a3a3a3 a4a4a4a4 a5a5a5a5 a6a6a6a6 a7a7a7a7
a8a8a8a8 a9a9a9a9 aaaaaaaa abababab acacacac adadadad aeaeaeae afafafaf
b0b0b0b0 b1b1b1b1 b2b2b2b2 b3b3b3b3 b4b4b4b4 b5b5b5b5 b6b6b6b6 b7b7b7b7
b8b8b8b8 b9b9b9b9 babababa bbbbbbbb bcbcbcbc bdbdbdbd bebebebe bfbfbfbf
c0c0c0c0 c1c1c1c1 c2c2c2c2 c3c3c3c3 c4c4c4c4 c5c5c5c5 c6c6c6c6 c7c7c7c7
c8c8c8c8 c9c9c9c9 cacacaca cbcbcbcb cccccccc cdcdcdcd cececece cfcfcfcf
d0d0d0d0 d1d1d1d1 d2d2d2d2 d3d3d3d3 d4d4d4d4 d5d5d5d5 d6d6d6d6 d7d7d7d7
d8d8d8d8 d9d9d9d9 dadadada dbdbdbdb dcdcdcdc dddddddd dededede dfdfdfdf
e0e0e0e0 e1e1e1e1 e2e2e2e2 e3e3e3e3 e4e4e4e4 e5e5e5e5 e6e6e6e6 e7e7e7e7
e8e8e8e8 e9e9e9e9 eaeaeaea ebebebeb ecececec edededed eeeeeeee efefefef
f0f0f0f0 f1f1f1f1 f2f2f2f2 f3f3f3f3 f4f4f4f4 f5f5f5f5 f6f6f6f6 f7f7f7f7
f8f8f8f8 f9f9f9f9 fafafafa fbfbfbfb fcfcfcfc fdfdfdfd fefefefe ffffffff
uint64
0000000000000000 0101010101010101 0202020202020202 0303030303030303
0404040404040404 0505050505050505 0606060606060606 0707070707070707
0808080808080808 0909090909090909 0a0a0a0a0a0a0a0a 0b0b0b0b0b0b0b0b
0c0c0c0c0c0c0c0c 0d0d0d0d0d0d0d0d 0e0e0e0e0e0e0e0e 0f0f0f0f0f0f0f0f
1010101010101010 1111111111111111 1212121212121212 1313131313131313
1414141414141414 1515151515151515 1616161616161616 1717171717171717
1818181818181818 1919191919191919 1a1a1a1a1a1a1a1a 1b1b1b1b1b1b1b1b
1c1c1c1c1c1c1c1c 1d1d1d1d1d1d1d1d 1e1e1e1e1e1e1e1e 1f1f1f1f1f1f1f1f
2020202020202020 2121212121212121 2222222222222222 2323232323232323
2424242424242424 2525252525252525 2626262626262626 2727272727272727
2828282828282828 2929292929292929 2a2a2a2a2a2a2a2a 2b2b2b2b2b2b2b2b
2c2c2c2c2c2c2c2c 2d2d2d2d2d2d2d2d 2e2e2e2e2e2e2e2e 2f2f2f2f2f2f2f2f
3030303030303030 3131313131313131 3232323232323232 3333333333333333
3434343434343434 3535353535353535 3636363636363636 3737373737373737
3838383838383838 3939393939393939 3a3a3a3a3a3a3a3a 3b3b3b3b3b3b3b3b
3c3c3c3c3c3c3c3c 3d3d3d3d3d3d3d3d 3e3e3e3e3e3e3e3e 3f3f3f3f3f3f3f3f
4040404040404040 4141414141414141 4242424242424242 4343434343434343
4444444444444444 4545454545454545 4646464646464646 4747474747474747
4848484848484848 4949494949494949 4a4a4a4a4a4a4a4a 4b4b4b4b4b4b4b4b
4c4c4c4c4c4c4c4c 4d4d4d4d4d4d4d4d 4e4e4e4e4e4e4e4e 4f4f4f4f4f4f4f4f
5050505050505050 5151515151515151 5252525252525252 5353535353535353
5454545454545454 5555555555555555 5656565656565656 5757575757575757
5858585858585858 5959595959595959 5a5a5a5a5a5a5a5a 5b5b5b5b5b5b5b5b
5c5c5c5c5c5c5c5c 5d5d5d5d5d5d5d5d 5e5e5e5e5e5e5e5e 5f5f5f5f5f5f5f5f
6060606060606060 6161616161616161 6262626262626262 6363636363636363
6464646464646464 6565656565656565 6666666666666666 6767676767676767
6868686868686868 6969696969696969 6a6a6a6a6a6a6a6a 6b6b6b6b6b6b6b6b
6c6c6c6c6c6c6c6c 6d6d6d6d6d6d6d6d 6e6e6e6e6e6e6e6e 6f6f6f6f6f6f6f6f
7070707070707070 7171717171717171 7272727272727272 7373737373737373
7474747474747474 7575757575757575 7676767676767676 7777777777777777
7878787878787878 7979797979797979 7a7a7a7a7a7a7a7a 7b7b7b7b7b7b7b7b
7c7c7c7c7c7c7c7c 7d7d7d7d7d7d7d7d 7e7e7e7e7e7e7e7e 7f7f7f7f7f7f7f7f
8080808080808080 8181818181818181 8282828282828282 8383838383838383
8484848484848484 8585858585858585 8686868686868686 8787878787878787
8888888888888888 8989898989898989 8a8a8a8a8a8a8a8a 8b8b8b8b8b8b8b8b
8c8c8c8c8c8c8c8c 8d8d8d8d8d8d8d8d 8e8e8e8e8e8e8e8e 8f8f8f8f8f8f8f8f
9090909090909090 9191919191919191 9292929292929292 9393939393939393
9494949494949494 9595959595959595 9696969696969696 9797979797979797
9898989898989898 9999999999999999 9a9a9a9a9a9a9a9a 9b9b9b9b9b9b9b9b
9c9c9c9c9c9c9c9c 9d9d9d9d9d9d9d9d 9e9e9e9e9e9e9e9e 9f9f9f9f9f9f9f9f
a0a0a0a0a0a0a0a0 a1a1a1a1a1a1a1a1 a2a2a2a2a2a2a2a2 a3a3a3a3a3a3a3a3
a4a4a4a4a4a4a4a4 a5a5a5a5a5a5a5a5 a6a6a6a6a6a6a6a6 a7a7a7a7a7a7a7a7
a8a8a8a8a8a8a8a8 a9a9a9a9a9a9a9a9 aaaaaaaaaaaaaaaa abababababababab
acacacacacacacac adadadadadadadad aeaeaeaeaeaeaeae afafafafafafafaf
b0b0b0b0b0b0b0b0 b1b1b1b1b1b1b1b1 b2b2b2b2b2b2b2b2 b3b3b3b3b3b3b3b3
b4b4b4b4b4b4b4b4 b5b5b5b5b5b5b5b5 b6b6b6b6b6b6b6b6 b7b7b7b7b7b7b7b7
b8b8b8b8b8b8b8b8 b9b9b9b9b9b9b9b9 babababababababa bbbbbbbbbbbbbbbb
bcbcbcbcbcbcbcbc bdbdbdbdbdbdbdbd bebebebebebebebe bfbfbfbfbfbfbfbf
c0c0c0c0c0c0c0c0 c1c1c1c1c1c1c1c1 c2c2c2c2c2c2c2c2 c3c3c3c3c3c3c3c3
c4c4c4c4c4c4c4c4 c5c5c5c5c5c5c5c5 c6c6c6c6c6c6c6c6 c7c7c7c7c7c7c7c7
c8c8c8c8c8c8c8c8 c9c9c9c9c9c9c9c9 cacacacacacacaca cbcbcbcbcbcbcbcb
cccccccccccccccc cdcdcdcdcdcdcdcd cececececececece cfcfcfcfcfcfcfcf
d0d0d0d0d0d0d0d0 d1d1d1d1d1d1d1d1 d2d2d2d2d2d2d2d2 d3d3d3d3d3d3d3d3
d4d4d4d4d4d4d4d4 d5d5d5d5d5d5d5d5 d6d6d6d6d6d6d6d6 d7d7d7d7d7d7d7d7
d8d8d8d8d8d8d8d8 d9d9d9d9d9d9d9d9 dadadadadadadada dbdbdbdbdbdbdbdb
dcdcdcdcdcdcdcdc dddddddddddddddd dededededededede dfdfdfdfdfdfdfdf
e0e0e0e0e0e0e0e0 e1e1e1e1e1e1e1e1 e2e2e2e2e2e2e2e2 e3e3e3e3e3e3e3e3
e4e4e4e4e4e4e4e4 e5e5e5e5e5e5e5e5 e6e6e6e6e6e6e6e6 e7e7e7e7e7e7e7e7
e8e8e8e8e8e8e8e8 e9e9e9e9e9e9e9e9 eaeaeaeaeaeaeaea ebebebebebebebeb
ecececececececec edededededededed eeeeeeeeeeeeeeee efefefefefefefef
f0f0f0f0f0f0f0f0 f1f1f1f1f1f1f1f1 f2f2f2f2f2f2f2f2 f3f3f3f3f3f3f3f3
f4f4f4f4f4f4f4f4 f5f5f5f5f5f5f5f5 f6f6f6f6f6f6f6f6 f7f7f7f7f7f7f7f7
f8f8f8f8f8f8f8f8 f9f9f9f9f9f9f9f9 fafafafafafafafa fbfbfbfbfbfbfbfb
fcfcfcfcfcfcfcfc fdfdfdfdfdfdfdfd fefefefefefefefe ffffffffffffffff
half
0000 3c00 4000 4200 4400 4500 4600 4700 4800 4880 4900 4980 4a00 4a80 4b00 4b80
4c00 4c40 4c80 4cc0 4d00 4d40 4d80 4dc0 4e00 4e40 4e80 4ec0 4f00 4f40 4f80 4fc0
5000 5020 5040 5060 5080 50a0 50c0 50e0 5100 5120 5140 5160 5180 51a0 51c0 51e0
5200 5220 5240 5260 5280 52a0 52c0 52e0 5300 5320 5340 5360 5380 53a0 53c0 53e0
5400 5410 5420 5430 5440 5450 5460 5470 5480 5490 54a0 54b0 54c0 54d0 54e0 54f0
5500 5510 5520 5530 5540 5550 5560 5570 5580 5590 55a0 55b0 55c0 55d0 55e0 55f0
5600 5610 5620 5630 5640 5650 5660 5670 5680 5690 56a0 56b0 56c0 56d0 56e0 56f0
5700 5710 5720 5730 5740 5750 5760 5770 5780 5790 57a0 57b0 57c0 57d0 57e0 57f0
5800 5808 5810 5818 5820 5828 5830 5838 5840 5848 5850 5858 5860 5868 5870 5878
5880 5888 5890 5898 58a0 58a8 58b0 58b8 58c0 58c8 58d0 58d8 58e0 58e8 58f0 58f8
5900 5908 5910 5918 5920 5928 5930 5938 5940 5948 5950 5958 5960 5968 5970 5978
5980 5988 5990 5998 59a0 59a8 59b0 59b8 59c0 59c8 59d0 59d8 59e0 59e8 59f0 59f8
5a00 5a08 5a10 5a18 5a20 5a28 5a30 5a38 5a40 5a48 5a50 5a58 5a60 5a68 5a70 5a78
5a80 5a88 5a90 5a98 5aa0 5aa8 5ab0 5ab8 5ac0 5ac8 5ad0 5ad8 5ae0 5ae8 5af0 5af8
5b00 5b08 5b10 5b18 5b20 5b28 5b30 5b38 5b40 5b48 5b50 5b58 5b60 5b68 5b70 5b78
5b80 5b88 5b90 5b98 5ba0 5ba8 5bb0 5bb8 5bc0 5bc8 5bd0 5bd8 5be0 5be8 5bf0 5bf8
float
00000000 3f800000 40000000 40400000 40800000 40a00000 40c00000 40e00000
41000000 41100000 41200000 41300000 41400000 41500000 41600000 41700000
41800000 41880000 41900000 41980000 41a00000 41a80000 41b00000 41b80000
41c00000 41c80000 41d00000 41d80000 41e00000 41e80000 41f00000 41f80000
42000000 42040000 42080000 420c0000 42100000 42140000 42180000 421c0000
42200000 42240000 42280000 422c0000 42300000 42340000 42380000 423c0000
42400000 42440000 42480000 424c0000 42500000 42540000 42580000 425c0000
42600000 42640000 42680000 426c0000 42700000 42740000 42780000 427c0000
42800000 42820000 42840000 42860000 42880000 428a0000 428c0000 428e0000
42900000 42920000 42940000 42960000 42980000 429a0000 429c0000 429e0000
42a00000 42a20000 42a40000 42a60000 42a80000 42aa0000 42ac0000 42ae0000
42b00000 42b20000 42b40000 42b60000 42b80000 42ba0000 42bc0000 42be0000
42c00000 42c20000 42c40000 42c60000 42c80000 42ca0000 42cc0000 42ce0000
42d00000 42d20000 42d40000 42d60000 42d80000 42da0000 42dc0000 42de0000
42e00000 42e20000 42e40000 42e60000 42e80000 42ea0000 42ec0000 42ee0000
42f00000 42f20000 42f40000 42f60000 42f80000 42fa0000 42fc0000 42fe0000
43000000 43010000 43020000 43030000 43040000 43050000 43060000 43070000
43080000 43090000 430a0000 430b0000 430c0000 430d0000 430e0000 430f0000
43100000 43110000 43120000 43130000 43140000 43150000 43160000 43170000
43180000 43190000 431a0000 431b0000 431c0000 431d0000 431e0000 431f0000
43200000 43210000 43220000 43230000 43240000 43250000 43260000 43270000
43280000 43290000 432a0000 432b0000 432c0000 432d0000 432e0000 432f0000
43300000 43310000 43320000 43330000 43340000 43350000 43360000 43370000
43380000 43390000 433a0000 433b0000 433c0000 433d0000 433e0000 433f0000
43400000 43410000 43420000 43430000 43440000 43450000 43460000 43470000
43480000 43490000 434a0000 434b0000 434c0000 434d0000 434e0000 434f0000
43500000 43510000 43520000 43530000 43540000 43550000 43560000 43570000
43580000 43590000 435a0000 435b0000 435c0000 435d0000 435e0000 435f0000
43600000 43610000 43620000 43630000 43640000 43650000 43660000 43670000
43680000 43690000 436a0000 436b0000 436c0000 436d0000 436e0000 436f0000
43700000 43710000 43720000 43730000 43740000 43750000 43760000 43770000
43780000 43790000 437a0000 437b0000 437c0000 437d0000 437e0000 437f0000
double
0000000000000000 3ff0000000000000 4000000000000000 4008000000000000
4010000000000000 4014000000000000 4018000000000000 401c000000000000
4020000000000000 4022000000000000 4024000000000000 4026000000000000
4028000000000000 402a000000000000 402c000000000000 402e000000000000
4030000000000000 4031000000000000 4032000000000000 4033000000000000
4034000000000000 4035000000000000 4036000000000000 4037000000000000
4038000000000000 4039000000000000 403a000000000000 403b000000000000
403c000000000000 403d000000000000 403e000000000000 403f000000000000
4040000000000000 4040800000000000 4041000000000000 4041800000000000
4042000000000000 4042800000000000 4043000000000000 4043800000000000
4044000000000000 4044800000000000 4045000000000000 4045800000000000
4046000000000000 4046800000000000 4047000000000000 4047800000000000
4048000000000000 4048800000000000 4049000000000000 4049800000000000
404a000000000000 404a800000000000 404b000000000000 404b800000000000
404c000000000000 404c800000000000 404d000000000000 404d800000000000
404e000000000000 404e800000000000 404f000000000000 404f800000000000
4050000000000000 4050400000000000 4050800000000000 4050c00000000000
4051000000000000 4051400000000000 4051800000000000 4051c00000000000
4052000000000000 4052400000000000 4052800000000000 4052c00000000000
4053000000000000 4053400000000000 4053800000000000 4053c00000000000
4054000000000000 4054400000000000 4054800000000000 4054c00000000000
4055000000000000 4055400000000000 4055800000000000 4055c00000000000
4056000000000000 4056400000000000 4056800000000000 4056c00000000000
4057000000000000 4057400000000000 4057800000000000 4057c00000000000
4058000000000000 4058400000000000 4058800000000000 4058c00000000000
4059000000000000 4059400000000000 4059800000000000 4059c00000000000
405a000000000000 405a400000000000 405a800000000000 405ac00000000000
405b000000000000 405b400000000000 405b800000000000 405bc00000000000
405c000000000000 405c400000000000 405c800000000000 405cc00000000000
405d000000000000 405d400000000000 405d800000000000 405dc00000000000
405e000000000000 405e400000000000 405e800000000000 405ec00000000000
405f000000000000 405f400000000000 405f800000000000 405fc00000000000
4060000000000000 4060200000000000 4060400000000000 4060600000000000
4060800000000000 4060a00000000000 4060c00000000000 4060e00000000000
4061000000000000 4061200000000000 4061400000000000 4061600000000000
4061800000000000 4061a00000000000 4061c00000000000 4061e00000000000
4062000000000000 4062200000000000 4062400000000000 4062600000000000
4062800000000000 4062a00000000000 4062c00000000000 4062e00000000000
4063000000000000 4063200000000000 4063400000000000 4063600000000000
4063800000000000 4063a00000000000 4063c00000000000 4063e00000000000
4064000000000000 4064200000000000 4064400000000000 4064600000000000
4064800000000000 4064a00000000000 4064c00000000000 4064e00000000000
4065000000000000 4065200000000000 4065400000000000 4065600000000000
4065800000000000 4065a00000000000 4065c00000000000 4065e00000000000
4066000000000000 4066200000000000 4066400000000000 4066600000000000
4066800000000000 4066a00000000000 4066c00000000000 4066e00000000000
4067000000000000 4067200000000000 4067400000000000 4067600000000000
4067800000000000 4067a00000000000 4067c00000000000 4067e00000000000
4068000000000000 4068200000000000 4068400000000000 4068600000000000
4068800000000000 4068a00000000000 4068c00000000000 4068e00000000000
4069000000000000 4069200000000000 4069400000000000 4069600000000000
4069800000000000 4069a00000000000 4069c00000000000 4069e00000000000
406a000000000000 406a200000000000 406a400000000000 406a600000000000
406a800000000000 406aa00000000000 406ac00000000000 406ae00000000000
406b000000000000 406b200000000000 406b400000000000 406b600000000000
406b800000000000 406ba00000000000 406bc00000000000 406be00000000000
406c000000000000 406c200000000000 406c400000000000 406c600000000000
406c800000000000 406ca00000000000 406cc00000000000 406ce00000000000
406d000000000000 406d200000000000 406d400000000000 406d600000000000
406d800000000000 406da00000000000 406dc00000000000 406de00000000000
406e000000000000 406e200000000000 406e400000000000 406e600000000000
406e800000000000 406ea00000000000 406ec00000000000 406ee00000000000
406f000000000000 406f200000000000 406f400000000000 406f600000000000
406f800000000000 406fa00000000000 406fc00000000000 406fe00000000000
complex
0000000000000000 0000000000000000 3ff0000000000000 0000000000000000
4000000000000000 0000000000000000 4008000000000000 0000000000000000
4010000000000000 0000000000000000 4014000000000000 0000000000000000
4018000000000000 0000000000000000 401c000000000000 0000000000000000
4020000000000000 0000000000000000 4022000000000000 0000000000000000
4024000000000000 0000000000000000 4026000000000000 0000000000000000
4028000000000000 0000000000000000 402a000000000000 0000000000000000
402c000000000000 0000000000000000 402e000000000000 0000000000000000
4030000000000000 0000000000000000 4031000000000000 0000000000000000
4032000000000000 0000000000000000 4033000000000000 0000000000000000
4034000000000000 0000000000000000 4035000000000000 0000000000000000
4036000000000000 0000000000000000 4037000000000000 0000000000000000
4038000000000000 0000000000000000 4039000000000000 0000000000000000
403a000000000000 0000000000000000 403b000000000000 0000000000000000
403c000000000000 0000000000000000 403d000000000000 0000000000000000
403e000000000000 0000000000000000 403f000000000000 0000000000000000
4040000000000000 0000000000000000 4040800000000000 0000000000000000
4041000000000000 0000000000000000 4041800000000000 0000000000000000
4042000000000000 0000000000000000 4042800000000000 0000000000000000
4043000000000000 0000000000000000 4043800000000000 0000000000000000
4044000000000000 0000000000000000 4044800000000000 0000000000000000
4045000000000000 0000000000000000 4045800000000000 0000000000000000
4046000000000000 0000000000000000 4046800000000000 0000000000000000
4047000000000000 0000000000000000 4047800000000000 0000000000000000
4048000000000000 0000000000000000 4048800000000000 0000000000000000
4049000000000000 0000000000000000 4049800000000000 0000000000000000
404a000000000000 0000000000000000 404a800000000000 0000000000000000
404b000000000000 0000000000000000 404b800000000000 0000000000000000
404c000000000000 0000000000000000 404c800000000000 0000000000000000
404d000000000000 0000000000000000 404d800000000000 0000000000000000
404e000000000000 0000000000000000 404e800000000000 0000000000000000
404f000000000000 0000000000000000 404f800000000000 0000000000000000
4050000000000000 0000000000000000 4050400000000000 0000000000000000
4050800000000000 0000000000000000 4050c00000000000 0000000000000000
4051000000000000 0000000000000000 4051400000000000 0000000000000000
4051800000000000 0000000000000000 4051c00000000000 0000000000000000
4052000000000000 0000000000000000 4052400000000000 0000000000000000
4052800000000000 0000000000000000 4052c00000000000 0000000000000000
4053000000000000 0000000000000000 4053400000000000 0000000000000000
4053800000000000 0000000000000000 4053c00000000000 0000000000000000
4054000000000000 0000000000000000 4054400000000000 0000000000000000
4054800000000000 0000000000000000 4054c00000000000 0000000000000000
4055000000000000 0000000000000000 4055400000000000 0000000000000000
4055800000000000 0000000000000000 4055c00000000000 0000000000000000
4056000000000000 0000000000000000 4056400000000000 0000000000000000
4056800000000000 0000000000000000 4056c00000000000 0000000000000000
4057000000000000 0000000000000000 4057400000000000 0000000000000000
4057800000000000 0000000000000000 4057c00000000000 0000000000000000
4058000000000000 0000000000000000 4058400000000000 0000000000000000
4058800000000000 0000000000000000 4058c00000000000 0000000000000000
4059000000000000 0000000000000000 4059400000000000 0000000000000000
4059800000000000 0000000000000000 4059c00000000000 0000000000000000
405a000000000000 0000000000000000 405a400000000000 0000000000000000
405a800000000000 0000000000000000 405ac00000000000 0000000000000000
405b000000000000 0000000000000000 405b400000000000 0000000000000000
405b800000000000 0000000000000000 405bc00000000000 0000000000000000
405c000000000000 0000000000000000 405c400000000000 0000000000000000
405c800000000000 0000000000000000 405cc00000000000 0000000000000000
405d000000000000 0000000000000000 405d400000000000 0000000000000000
405d800000000000 0000000000000000 405dc00000000000 0000000000000000
405e000000000000 0000000000000000 405e400000000000 0000000000000000
405e800000000000 0000000000000000 405ec00000000000 0000000000000000
405f000000000000 0000000000000000 405f400000000000 0000000000000000
405f800000000000 0000000000000000 405fc00000000000 0000000000000000
4060000000000000 0000000000000000 4060200000000000 0000000000000000
4060400000000000 0000000000000000 4060600000000000 0000000000000000
4060800000000000 0000000000000000 4060a00000000000 0000000000000000
4060c00000000000 0000000000000000 4060e00000000000 0000000000000000
4061000000000000 0000000000000000 4061200000000000 0000000000000000
4061400000000000 0000000000000000 4061600000000000 0000000000000000
4061800000000000 0000000000000000 4061a00000000000 0000000000000000
4061c00000000000 0000000000000000 4061e00000000000 0000000000000000
4062000000000000 0000000000000000 4062200000000000 0000000000000000
4062400000000000 0000000000000000 4062600000000000 0000000000000000
4062800000000000 0000000000000000 4062a00000000000 0000000000000000
4062c00000000000 0000000000000000 4062e00000000000 0000000000000000
4063000000000000 0000000000000000 4063200000000000 0000000000000000
4063400000000000 0000000000000000 4063600000000000 0000000000000000
4063800000000000 0000000000000000 4063a00000000000 0000000000000000
4063c00000000000 0000000000000000 4063e00000000000 0000000000000000
4064000000000000 0000000000000000 4064200000000000 0000000000000000
4064400000000000 0000000000000000 4064600000000000 0000000000000000
4064800000000000 0000000000000000 4064a00000000000 0000000000000000
4064c00000000000 0000000000000000 4064e00000000000 0000000000000000
4065000000000000 0000000000000000 4065200000000000 0000000000000000
4065400000000000 0000000000000000 4065600000000000 0000000000000000
4065800000000000 0000000000000000 4065a00000000000 0000000000000000
4065c00000000000 0000000000000000 4065e00000000000 0000000000000000
4066000000000000 0000000000000000 4066200000000000 0000000000000000
4066400000000000 0000000000000000 4066600000000000 0000000000000000
4066800000000000 0000000000000000 4066a00000000000 0000000000000000
4066c00000000000 0000000000000000 4066e00000000000 0000000000000000
4067000000000000 0000000000000000 4067200000000000 0000000000000000
4067400000000000 0000000000000000 4067600000000000 0000000000000000
4067800000000000 0000000000000000 4067a00000000000 0000000000000000
4067c00000000000 0000000000000000 4067e00000000000 0000000000000000
4068000000000000 0000000000000000 4068200000000000 0000000000000000
4068400000000000 0000000000000000 4068600000000000 0000000000000000
4068800000000000 0000000000000000 4068a00000000000 0000000000000000
4068c00000000000 0000000000000000 4068e00000000000 0000000000000000
4069000000000000 0000000000000000 4069200000000000 0000000000000000
4069400000000000 0000000000000000 4069600000000000 0000000000000000
4069800000000000 0000000000000000 4069a00000000000 0000000000000000
4069c00000000000 0000000000000000 4069e00000000000 0000000000000000
406a000000000000 0000000000000000 406a200000000000 0000000000000000
406a400000000000 0000000000000000 406a600000000000 0000000000000000
406a800000000000 0000000000000000 406aa00000000000 0000000000000000
406ac00000000000 0000000000000000 406ae00000000000 0000000000000000
406b000000000000 0000000000000000 406b200000000000 0000000000000000
406b400000000000 0000000000000000 406b600000000000 0000000000000000
406b800000000000 0000000000000000 406ba00000000000 0000000000000000
406bc00000000000 0000000000000000 406be00000000000 0000000000000000
406c000000000000 0000000000000000 406c200000000000 0000000000000000
406c400000000000 0000000000000000 406c600000000000 0000000000000000
406c800000000000 0000000000000000 406ca00000000000 0000000000000000
406cc00000000000 0000000000000000 406ce00000000000 0000000000000000
406d000000000000 0000000000000000 406d200000000000 0000000000000000
406d400000000000 0000000000000000 406d600000000000 0000000000000000
406d800000000000 0000000000000000 406da00000000000 0000000000000000
406dc00000000000 0000000000000000 406de00000000000 0000000000000000
406e000000000000 0000000000000000 406e200000000000 0000000000000000
406e400000000000 0000000000000000 406e600000000000 0000000000000000
406e800000000000 0000000000000000 406ea00000000000 0000000000000000
406ec00000000000 0000000000000000 406ee00000000000 0000000000000000
406f000000000000 0000000000000000 406f200000000000 0000000000000000
406f400000000000 0000000000000000 406f600000000000 0000000000000000
406f800000000000 0000000000000000 406fa00000000000 0000000000000000
406fc00000000000 0000000000000000 406fe00000000000 0000000000000000

======== #81 array#expand_kernelvec1d() padding test ========

x .. {0, 1, 2}
x.expand_kernelvec1d(3, 1, 0) .. {{0, 1, 2}}
x.expand_kernelvec1d(3, 1, 2) ..
{{0, 0, 1},
 {0, 1, 2},
 {1, 2, 0}}
x .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
x.expand_kernelvec1d(3, 1, 0) ..
{{0, 1, 2},
 {1, 2, 3},
 {2, 3, 4},
 {3, 4, 5},
 {4, 5, 6},
 {5, 6, 7},
 {6, 7, 8},
 {7, 8, 9}}
x.expand_kernelvec1d(3, 1, 2) ..
{{0, 0, 1},
 {0, 1, 2},
 {1, 2, 3},
 {2, 3, 4},
 {3, 4, 5},
 {4, 5, 6},
 {5, 6, 7},
 {6, 7, 8},
 {7, 8, 9},
 {8, 9, 0}}

======== #82 array#expand_kernelvec1d() strides test ========

x .. {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
x.expand_kernelvec1d(3, 2, 0) ..
{{0, 1, 2},
 {2, 3, 4},
 {4, 5, 6},
 {6, 7, 8}}
x.expand_kernelvec1d(3, 2, 2) ..
{{0, 0, 1},
 {1, 2, 3},
 {3, 4, 5},
 {5, 6, 7},
 {7, 8, 9}}
x.expand_kernelvec1d(3, 2, 4) ..
{{0, 0, 0},
 {0, 1, 2},
 {2, 3, 4},
 {4, 5, 6},
 {6, 7, 8},
 {8, 9, 0}}

======== #83 array#expand_kernelvec2d() padding test ========

x ..
{{0, 1, 2},
 {3, 4, 5},
 {6, 7, 8}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 0]) .. {{0, 1, 2, 3, 4, 5, 6, 7, 8}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 0]) ..
{{0, 0, 0, 0, 1, 2, 3, 4, 5},
 {0, 1, 2, 3, 4, 5, 6, 7, 8},
 {3, 4, 5, 6, 7, 8, 0, 0, 0}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 2]) ..
{{0, 0, 1, 0, 3, 4, 0, 6, 7},
 {0, 1, 2, 3, 4, 5, 6, 7, 8},
 {1, 2, 0, 4, 5, 0, 7, 8, 0}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 2]) ..
{{0, 0, 0, 0, 0, 1, 0, 3, 4},
 {0, 0, 0, 0, 1, 2, 3, 4, 5},
 {0, 0, 0, 1, 2, 0, 4, 5, 0},
 {0, 0, 1, 0, 3, 4, 0, 6, 7},
 {0, 1, 2, 3, 4, 5, 6, 7, 8},
 {1, 2, 0, 4, 5, 0, 7, 8, 0},
 {0, 3, 4, 0, 6, 7, 0, 0, 0},
 {3, 4, 5, 6, 7, 8, 0, 0, 0},
 {4, 5, 0, 7, 8, 0, 0, 0, 0}}
x ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11},
 {12, 13, 14}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 0]) ..
{{ 0,  1,  2,  3,  4,  5,  6,  7,  8},
 { 3,  4,  5,  6,  7,  8,  9, 10, 11},
 { 6,  7,  8,  9, 10, 11, 12, 13, 14}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 0]) ..
{{ 0,  0,  0,  0,  1,  2,  3,  4,  5},
 { 0,  1,  2,  3,  4,  5,  6,  7,  8},
 { 3,  4,  5,  6,  7,  8,  9, 10, 11},
 { 6,  7,  8,  9, 10, 11, 12, 13, 14},
 { 9, 10, 11, 12, 13, 14,  0,  0,  0}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 2]) ..
{{ 0,  0,  1,  0,  3,  4,  0,  6,  7},
 { 0,  1,  2,  3,  4,  5,  6,  7,  8},
 { 1,  2,  0,  4,  5,  0,  7,  8,  0},
 { 0,  3,  4,  0,  6,  7,  0,  9, 10},
 { 3,  4,  5,  6,  7,  8,  9, 10, 11},
 { 4,  5,  0,  7,  8,  0, 10, 11,  0},
 { 0,  6,  7,  0,  9, 10,  0, 12, 13},
 { 6,  7,  8,  9, 10, 11, 12, 13, 14},
 { 7,  8,  0, 10, 11,  0, 13, 14,  0}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 2]) ..
{{ 0,  0,  0,  0,  0,  1,  0,  3,  4},
 { 0,  0,  0,  0,  1,  2,  3,  4,  5},
 { 0,  0,  0,  1,  2,  0,  4,  5,  0},
 { 0,  0,  1,  0,  3,  4,  0,  6,  7},
 { 0,  1,  2,  3,  4,  5,  6,  7,  8},
 { 1,  2,  0,  4,  5,  0,  7,  8,  0},
 { 0,  3,  4,  0,  6,  7,  0,  9, 10},
 { 3,  4,  5,  6,  7,  8,  9, 10, 11},
 { 4,  5,  0,  7,  8,  0, 10, 11,  0},
 { 0,  6,  7,  0,  9, 10,  0, 12, 13},
 { 6,  7,  8,  9, 10, 11, 12, 13, 14},
 { 7,  8,  0, 10, 11,  0, 13, 14,  0},
 { 0,  9, 10,  0, 12, 13,  0,  0,  0},
 { 9, 10, 11, 12, 13, 14,  0,  0,  0},
 {10, 11,  0, 13, 14,  0,  0,  0,  0}}
x ..
{{ 0,  1,  2,  3,  4},
 { 5,  6,  7,  8,  9},
 {10, 11, 12, 13, 14}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 0]) ..
{{ 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 2]) ..
{{ 0,  0,  1,  0,  5,  6,  0, 10, 11},
 { 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14},
 { 3,  4,  0,  8,  9,  0, 13, 14,  0}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 0]) ..
{{ 0,  0,  0,  0,  1,  2,  5,  6,  7},
 { 0,  0,  0,  1,  2,  3,  6,  7,  8},
 { 0,  0,  0,  2,  3,  4,  7,  8,  9},
 { 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14},
 { 5,  6,  7, 10, 11, 12,  0,  0,  0},
 { 6,  7,  8, 11, 12, 13,  0,  0,  0},
 { 7,  8,  9, 12, 13, 14,  0,  0,  0}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 2]) ..
{{ 0,  0,  0,  0,  0,  1,  0,  5,  6},
 { 0,  0,  0,  0,  1,  2,  5,  6,  7},
 { 0,  0,  0,  1,  2,  3,  6,  7,  8},
 { 0,  0,  0,  2,  3,  4,  7,  8,  9},
 { 0,  0,  0,  3,  4,  0,  8,  9,  0},
 { 0,  0,  1,  0,  5,  6,  0, 10, 11},
 { 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14},
 { 3,  4,  0,  8,  9,  0, 13, 14,  0},
 { 0,  5,  6,  0, 10, 11,  0,  0,  0},
 { 5,  6,  7, 10, 11, 12,  0,  0,  0},
 { 6,  7,  8, 11, 12, 13,  0,  0,  0},
 { 7,  8,  9, 12, 13, 14,  0,  0,  0},
 { 8,  9,  0, 13, 14,  0,  0,  0,  0}}
x ..
{{ 0,  1,  2,  3,  4},
 { 5,  6,  7,  8,  9},
 {10, 11, 12, 13, 14},
 {15, 16, 17, 18, 19},
 {20, 21, 22, 23, 24}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 0]) ..
{{ 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14},
 { 5,  6,  7, 10, 11, 12, 15, 16, 17},
 { 6,  7,  8, 11, 12, 13, 16, 17, 18},
 { 7,  8,  9, 12, 13, 14, 17, 18, 19},
 {10, 11, 12, 15, 16, 17, 20, 21, 22},
 {11, 12, 13, 16, 17, 18, 21, 22, 23},
 {12, 13, 14, 17, 18, 19, 22, 23, 24}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 0]) ..
{{ 0,  0,  0,  0,  1,  2,  5,  6,  7},
 { 0,  0,  0,  1,  2,  3,  6,  7,  8},
 { 0,  0,  0,  2,  3,  4,  7,  8,  9},
 { 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14},
 { 5,  6,  7, 10, 11, 12, 15, 16, 17},
 { 6,  7,  8, 11, 12, 13, 16, 17, 18},
 { 7,  8,  9, 12, 13, 14, 17, 18, 19},
 {10, 11, 12, 15, 16, 17, 20, 21, 22},
 {11, 12, 13, 16, 17, 18, 21, 22, 23},
 {12, 13, 14, 17, 18, 19, 22, 23, 24},
 {15, 16, 17, 20, 21, 22,  0,  0,  0},
 {16, 17, 18, 21, 22, 23,  0,  0,  0},
 {17, 18, 19, 22, 23, 24,  0,  0,  0}}
x.expand_kernelvec2d([3, 3], [1, 1], [0, 2]) ..
{{ 0,  0,  1,  0,  5,  6,  0, 10, 11},
 { 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14},
 { 3,  4,  0,  8,  9,  0, 13, 14,  0},
 { 0,  5,  6,  0, 10, 11,  0, 15, 16},
 { 5,  6,  7, 10, 11, 12, 15, 16, 17},
 { 6,  7,  8, 11, 12, 13, 16, 17, 18},
 { 7,  8,  9, 12, 13, 14, 17, 18, 19},
 { 8,  9,  0, 13, 14,  0, 18, 19,  0},
 { 0, 10, 11,  0, 15, 16,  0, 20, 21},
 {10, 11, 12, 15, 16, 17, 20, 21, 22},
 {11, 12, 13, 16, 17, 18, 21, 22, 23},
 {12, 13, 14, 17, 18, 19, 22, 23, 24},
 {13, 14,  0, 18, 19,  0, 23, 24,  0}}
x.expand_kernelvec2d([3, 3], [1, 1], [2, 2]) ..
{{ 0,  0,  0,  0,  0,  1,  0,  5,  6},
 { 0,  0,  0,  0,  1,  2,  5,  6,  7},
 { 0,  0,  0,  1,  2,  3,  6,  7,  8},
 { 0,  0,  0,  2,  3,  4,  7,  8,  9},
 { 0,  0,  0,  3,  4,  0,  8,  9,  0},
 { 0,  0,  1,  0,  5,  6,  0, 10, 11},
 { 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 1,  2,  3,  6,  7,  8, 11, 12, 13},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14},
 { 3,  4,  0,  8,  9,  0, 13, 14,  0},
 { 0,  5,  6,  0, 10, 11,  0, 15, 16},
 { 5,  6,  7, 10, 11, 12, 15, 16, 17},
 { 6,  7,  8, 11, 12, 13, 16, 17, 18},
 { 7,  8,  9, 12, 13, 14, 17, 18, 19},
 { 8,  9,  0, 13, 14,  0, 18, 19,  0},
 { 0, 10, 11,  0, 15, 16,  0, 20, 21},
 {10, 11, 12, 15, 16, 17, 20, 21, 22},
 {11, 12, 13, 16, 17, 18, 21, 22, 23},
 {12, 13, 14, 17, 18, 19, 22, 23, 24},
 {13, 14,  0, 18, 19,  0, 23, 24,  0},
 { 0, 15, 16,  0, 20, 21,  0,  0,  0},
 {15, 16, 17, 20, 21, 22,  0,  0,  0},
 {16, 17, 18, 21, 22, 23,  0,  0,  0},
 {17, 18, 19, 22, 23, 24,  0,  0,  0},
 {18, 19,  0, 23, 24,  0,  0,  0,  0}}

======== #84 array#expand_kernelvec2d() strides test ========

x ..
{{0, 1, 2},
 {3, 4, 5},
 {6, 7, 8}}
x.expand_kernelvec2d([3, 3], [2, 1], [0, 0]) .. {{0, 1, 2, 3, 4, 5, 6, 7, 8}}
x.expand_kernelvec2d([3, 3], [1, 2], [0, 0]) .. {{0, 1, 2, 3, 4, 5, 6, 7, 8}}
x.expand_kernelvec2d([3, 3], [2, 2], [0, 0]) .. {{0, 1, 2, 3, 4, 5, 6, 7, 8}}
x ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11}}
x.expand_kernelvec2d([3, 3], [2, 1], [0, 0]) .. {{0, 1, 2, 3, 4, 5, 6, 7, 8}}
x ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11},
 {12, 13, 14}}
x.expand_kernelvec2d([3, 3], [2, 1], [0, 0]) ..
{{ 0,  1,  2,  3,  4,  5,  6,  7,  8},
 { 6,  7,  8,  9, 10, 11, 12, 13, 14}}
x ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11},
 {12, 13, 14},
 {15, 16, 17}}
x.expand_kernelvec2d([3, 3], [2, 1], [0, 0]) ..
{{ 0,  1,  2,  3,  4,  5,  6,  7,  8},
 { 6,  7,  8,  9, 10, 11, 12, 13, 14}}
x ..
{{ 0,  1,  2},
 { 3,  4,  5},
 { 6,  7,  8},
 { 9, 10, 11},
 {12, 13, 14},
 {15, 16, 17},
 {18, 19, 20}}
x.expand_kernelvec2d([3, 3], [2, 1], [0, 0]) ..
{{ 0,  1,  2,  3,  4,  5,  6,  7,  8},
 { 6,  7,  8,  9, 10, 11, 12, 13, 14},
 {12, 13, 14, 15, 16, 17, 18, 19, 20}}
x ..
{{ 0,  1,  2,  3},
 { 4,  5,  6,  7},
 { 8,  9, 10, 11}}
x.expand_kernelvec2d([3, 3], [1, 2], [0, 0]) .. {{ 0,  1,  2,  4,  5,  6,  8,  9, 10}}
x ..
{{ 0,  1,  2,  3,  4},
 { 5,  6,  7,  8,  9},
 {10, 11, 12, 13, 14}}
x.expand_kernelvec2d([3, 3], [1, 2], [0, 0]) ..
{{ 0,  1,  2,  5,  6,  7, 10, 11, 12},
 { 2,  3,  4,  7,  8,  9, 12, 13, 14}}
x ..
{{ 0,  1,  2,  3,  4,  5},
 { 6,  7,  8,  9, 10, 11},
 {12, 13, 14, 15, 16, 17}}
x.expand_kernelvec2d([3, 3], [1, 2], [0, 0]) ..
{{ 0,  1,  2,  6,  7,  8, 12, 13, 14},
 { 2,  3,  4,  8,  9, 10, 14, 15, 16}}
x ..
{{ 0,  1,  2,  3,  4,  5,  6},
 { 7,  8,  9, 10, 11, 12, 13},
 {14, 15, 16, 17, 18, 19, 20}}
x.expand_kernelvec2d([3, 3], [1, 2], [0, 0]) ..
{{ 0,  1,  2,  7,  8,  9, 14, 15, 16},
 { 2,  3,  4,  9, 10, 11, 16, 17, 18},
 { 4,  5,  6, 11, 12, 13, 18, 19, 20}}

======== #85 array#expand_kernelvec3d() padding test ========


======== #86 array#expand_kernelvec3d() strides test ========


======== #87 array#restore_kernelvec1d() ========

x ..
{{0, 0, 0},
 {0, 1, 0},
 {0, 1, 1}}
x.restore_kernelvec1d(5, 3, 1, `valid) .. {0, 0, 1, 1, 1}
x ..
{{{0, 0, 0},
  {0, 1, 0},
  {0, 1, 1}},

 {{0, 1, 1},
  {1, 0, 0},
  {0, 1, 0}},

 {{0, 1, 1},
  {1, 0, 1},
  {1, 1, 0}},

 {{0, 0, 1},
  {0, 1, 0},
  {0, 0, 1}}}
x.restore_kernelvec1d(5, 3, 1, `valid) ..
{{0, 0, 1, 1, 1},
 {0, 2, 1, 1, 0},
 {0, 2, 2, 2, 0},
 {0, 0, 2, 0, 1}}
x[0].restore_kernelvec1d(5, 3, 1, `valid) .. {0, 0, 1, 1, 1}
x[1].restore_kernelvec1d(5, 3, 1, `valid) .. {0, 2, 1, 1, 0}
x[2].restore_kernelvec1d(5, 3, 1, `valid) .. {0, 2, 2, 2, 0}
x[3].restore_kernelvec1d(5, 3, 1, `valid) .. {0, 0, 2, 0, 1}
x ..
{{0, 0, 0},
 {0, 1, 0},
 {0, 1, 1},
 {0, 1, 1},
 {1, 0, 0}}
x.restore_kernelvec1d(5, 3, 1, `same) .. {0, 1, 1, 3, 1}
x ..
{{0, 0, 0},
 {0, 1, 0},
 {0, 1, 1}}
x.restore_kernelvec1d(5, 3, 2, `same) .. {0, 0, 1, 0, 1}

======== #88 array#restore_kernelvec2d() ========

x ..
{{0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1},
 {1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1},
 {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1},
 {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1},
 {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1},
 {0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1},
 {0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0},
 {1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1}}
x.restore_kernelvec2d([6, 5], [4, 3], [1, 1], `valid) ..
{{0, 1, 1, 1, 0},
 {0, 3, 2, 1, 2},
 {0, 2, 7, 5, 1},
 {0, 5, 5, 2, 2},
 {0, 3, 3, 2, 2},
 {1, 2, 2, 0, 1}}
x ..
{{{0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1},
  {1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1},
  {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1},
  {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1},
  {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
  {0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1},
  {0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1},
  {0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0},
  {1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1}},

 {{0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
  {1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1},
  {0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0},
  {1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1},
  {0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1},
  {0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0},
  {1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1},
  {0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0}},

 {{0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
  {0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1},
  {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1},
  {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1},
  {0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0},
  {1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1},
  {1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
  {1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
  {0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0}}}
x.restore_kernelvec2d([6, 5], [4, 3], [1, 1], `valid) ..
{{{0, 1, 1, 1, 0},
  {0, 3, 2, 1, 2},
  {0, 2, 7, 5, 1},
  {0, 5, 5, 2, 2},
  {0, 3, 3, 2, 2},
  {1, 2, 2, 0, 1}},

 {{0, 2, 0, 2, 0},
  {1, 0, 3, 3, 0},
  {3, 3, 4, 3, 1},
  {0, 3, 4, 4, 0},
  {0, 3, 4, 2, 1},
  {1, 1, 2, 2, 0}},

 {{0, 0, 3, 2, 0},
  {1, 1, 3, 3, 1},
  {2, 2, 4, 4, 1},
  {2, 6, 4, 5, 3},
  {2, 1, 4, 3, 1},
  {0, 1, 2, 1, 0}}}
x[0].restore_kernelvec2d([6, 5], [4, 3], [1, 1], `valid) ..
{{0, 1, 1, 1, 0},
 {0, 3, 2, 1, 2},
 {0, 2, 7, 5, 1},
 {0, 5, 5, 2, 2},
 {0, 3, 3, 2, 2},
 {1, 2, 2, 0, 1}}
x[1].restore_kernelvec2d([6, 5], [4, 3], [1, 1], `valid) ..
{{0, 2, 0, 2, 0},
 {1, 0, 3, 3, 0},
 {3, 3, 4, 3, 1},
 {0, 3, 4, 4, 0},
 {0, 3, 4, 2, 1},
 {1, 1, 2, 2, 0}}
x[2].restore_kernelvec2d([6, 5], [4, 3], [1, 1], `valid) ..
{{0, 0, 3, 2, 0},
 {1, 1, 3, 3, 1},
 {2, 2, 4, 4, 1},
 {2, 6, 4, 5, 3},
 {2, 1, 4, 3, 1},
 {0, 1, 2, 1, 0}}
x ..
{{0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1},
 {1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1},
 {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1},
 {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1},
 {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1},
 {0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1},
 {0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0},
 {1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
 {0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
 {1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1},
 {0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0},
 {1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1},
 {0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1},
 {0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0},
 {1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1},
 {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1},
 {0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
 {0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1},
 {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1},
 {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1},
 {0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0},
 {1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1},
 {1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
 {1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
 {0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0},
 {0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1},
 {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
 {0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1}}
x.restore_kernelvec2d([6, 5], [4, 3], [1, 1], `same) ..
{{2, 2, 3, 3, 2},
 {2, 7, 5, 5, 1},
 {4, 9, 5, 6, 4},
 {4, 5, 8, 5, 4},
 {3, 8, 4, 6, 6},
 {2, 7, 6, 5, 4}}
x ..
{{0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1},
 {1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1},
 {1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1},
 {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1},
 {1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1},
 {0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1},
 {0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0},
 {1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1}}
x.restore_kernelvec2d([6, 5], [4, 3], [2, 2], `same) ..
{{1, 0, 1, 0, 0},
 {2, 3, 1, 1, 2},
 {1, 4, 0, 3, 1},
 {1, 2, 1, 2, 1},
 {1, 3, 1, 1, 1},
 {1, 2, 0, 2, 1}}

======== #89 array#restore_kernelvec3d() ========


======== #90 array#clone() ========

a ..
{{{4, 9, 2, 0, 1},
  {8, 6, 3, 0, 2},
  {3, 8, 5, 3, 7},
  {2, 3, 7, 8, 9}},

 {{9, 0, 6, 5, 3},
  {6, 4, 0, 7, 2},
  {0, 4, 6, 3, 8},
  {0, 6, 1, 5, 7}},

 {{3, 1, 3, 5, 4},
  {4, 6, 8, 4, 5},
  {8, 1, 3, 2, 9},
  {3, 9, 2, 1, 9}}}
b ..
{{{4, 9, 2, 0, 1},
  {8, 6, 3, 0, 2},
  {3, 8, 5, 3, 7},
  {2, 3, 7, 8, 9}},

 {{9, 0, 6, 5, 3},
  {6, 4, 0, 7, 2},
  {0, 4, 6, 3, 8},
  {0, 6, 1, 5, 7}},

 {{3, 1, 3, 5, 4},
  {4, 6, 8, 4, 5},
  {8, 1, 3, 2, 9},
  {3, 9, 2, 1, 9}}}
a.iselemsame(b) .. true
b ..
{{{9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9}},

 {{9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9}},

 {{9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9},
  {9, 9, 9, 9, 9}}}
a.iselemsame(b) .. false

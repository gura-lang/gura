#!/usr/bin/env gura
import(helper.test) {*}

testcase('expr#is*()') {
	shortBool(flag:boolean) = cond(flag, 'y', 'n')
	tests = `{
		-x
		`x
		x*
		x + y
		x = y
	    x => y
		x::y
		// blank line to separate brace bracket and its previous line
		{}
		3
		[]
		x[y]
		x(y, z)
	}
	for (test in tests.children) {
		printf('%-8s %s %s %s %s %s %s %s %s %s %s %s\n', test.tostring(),
				shortBool(test.isunaryop()),
				shortBool(test.isquote()),
				shortBool(test.isbinaryop()),
				shortBool(test.isassign()),
				shortBool(test.ismember()),
				shortBool(test.isblock()),
				shortBool(test.islister()),
				shortBool(test.isvalue()),
				shortBool(test.isidentifier()),
				shortBool(test.isindexer()),
				shortBool(test.iscaller()))
	}
}
testcase('expr#textize()') {
	x = [
		`(-3)
		`(3 + 4)
		`(f(x))
		`(f(x) = {})
		`(f(x) = {|a, b| c})
		`(f(x):attr)[0]
		`(f(x) = {|(a | b | c), (d | e | f)| g | h})
	]
	printf('%-16s %s\n', x:*typename, x:*textize(`oneline))
}
testcase('expr#textize() with string and binary') {
	x = [
		`'0123456789012345678901234567890123456789'
		`b'0123456789012345678901234567890123456789'
	]
	println(x:*textize(`oneline))
	println(x:*textize(`brief))
}
testcase('attribute') {
	x = `f():cut_extra_args:dynamic_scope:end_marker:finalizer\
		:flat:fork:leader:listvar:map:nil:nocast:nomap:nonamed\
		:private:privileged:public:r:symbol_func:trailer:w\
		:iter:a:b:c:d:e
	println(x)
	println('  ', x.attrs)
	x = `f():list
	println(x)
	println('  ', x.attrs)
	x = `f():reduce
	println(x)
	println('  ', x.attrs)
	x = `f():set
	println(x)
	println('  ', x.attrs)
	x = `f():void
	println(x)
	println('  ', x.attrs)
	x = `f():xiter
	println(x)
	println('  ', x.attrs)
	x = `f():xlist
	println(x)
	println('  ', x.attrs)
	x = `f():xreduce
	println(x)
	println('  ', x.attrs)
	x = `f():xset
	println(x)
	println('  ', x.attrs)
}
testcase('various positioning of brace bracket') {
	x = `{
		f(a, b, c) = {}
		f(a, b, c) = {
		}
		f(a, b, c) =
		{
		}
		f(a, b, c) = // comment
		{
		}
		f(a, b, c) = /* comment */
		{
		}
		f(a, b, c) = {|p1, p2, p3|}
		f(a, b, c) = {
			|p1, p2, p3|
		}
		f(a, b, c) =
		{|p1, p2, p3|
		}
		f(a, b, c) =
		{
			|p1, p2, p3|
		}
		if (cond) {}
		if (cond) {
		}
		if (cond)
		{
		}
		if (cond) // comment
		{
		}
		if (cond) /* comment */
		{
		}
	}
	println(x.children)
}

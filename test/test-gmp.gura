#!/usr/bin/env gura
import(gmp)
import(testutil) {*}

TestUnaryOperators(ops[]:symbol, values[]) = {
	for (value in values) {
		printf('%s\n', typename(value))
		operator(ops) {|op|
			try {
				result = op(value).tostring()
			} catch {|e|
				result = e.text
			}
			printf('%s%s .. %s\n', op.symbol, value, result)
		}
	}
}
TestBinaryOperators(ops[]:symbol, valueLs[], valueRs[]) = {
	cross (valueL in valueLs, valueR in valueRs) {
		printf('%s, %s\n', typename(valueL), typename(valueR))
		operator(ops) {|op|
			try {
				result = op(valueL, valueR).tostring()
			} catch {|e|
				result = e.text
			}
			printf('%s %s %s .. %s\n', valueL, op.symbol, valueR, result)
		}
	}
}
testcase('declaration') {
	tests = [
		`gmp.mpz(0)
		`gmp.mpq(0)
		`gmp.mpf(0)
		`0L
		`0Lr
		`0.L
		`gmp.mpz(1)
		`gmp.mpq(1)
		`gmp.mpf(1)
		`1L
		`1Lr
		`1.L
		`gmp.mpz(-1)
		`gmp.mpq(-1)
		`gmp.mpf(-1)
		`(-1L)
		`(-1Lr)
		`(-1.L)
		`gmp.mpz(314)
		`gmp.mpq(314)
		`gmp.mpf(314)
		`314L
		`314Lr
		`314.L
		`gmp.mpz('314')
		`gmp.mpq('314')
		`gmp.mpf('314')
		`'314'.mpz()
		`'314'.mpq()
		`'314'.mpf()
		`3.14L
		//`3.14Lr
		`123456789012345678901234567890123456789012345678901234567890L
		`123456789012345678901234567890123456789012345678901234567890Lr
		`0777777
		`0b10101010
		`0xffffffff
	]
	tester(tests)
}
testcase('generic test for unary operators') {
	ops = [`+, `-, `~, `!, `.., `?]
	values = [3L, 3.L, 3Lr]
	TestUnaryOperators(ops, values)
}
testcase('generic test for binary operators') {
	ops = [
		`+, `-, `*, `/, `%, `**,
		`==, `<, `>, `<=, `>=, `<=>,
		`in, `&, `|, `^, `<<, `>>, `||, `&&, `=>
	]
	valueLs = [3, 3L, 3.L, 3Lr]
	valueRs = [4, 4L, 4.L, 4Lr]
	TestBinaryOperators(ops, valueLs, valueRs)
}
testcase('zero-division') {
	ops = [`/, `%]
	valueLs = [3, 3L, 3.L, 3Lr]
	valueRs = [0, 0L, 0.L, 0Lr]
	TestBinaryOperators(ops, valueLs, valueRs)
}
testcase('comparator') {
	ops = [
		`==, `<, `>, `<=, `>=, `<=>,
	]
	valueLs = [3, 3L, 3.L, 3Lr, 4, 4L, 4.L, 4Lr, 5, 5L, 5.L, 5Lr]
	valueRs = [4, 4L, 4.L, 4Lr]
	TestBinaryOperators(ops, valueLs, valueRs)
	
}

#!/usr/bin/env gura
import(gmp)
import(testutil) {*}

TestUnaryOperators(ops[]:symbol, values[]) = {
	for (value in values) {
		printf('%s\n', typename(value))
		operator(ops) {|op|
			try {
				result = op(value).tostring()
			} catch {|e|
				result = e.text
			}
			printf('%s%s .. %s\n', op.symbol, value, result)
		}
	}
}
TestBinaryOperators(ops[]:symbol, valueLs[], valueRs[]) = {
	cross (valueL in valueLs, valueR in valueRs) {
		printf('%s, %s\n', typename(valueL), typename(valueR))
		operator(ops) {|op|
			try {
				result = op(valueL, valueR).tostring()
			} catch {|e|
				result = e.text
			}
			printf('%s %s %s .. %s\n', valueL, op.symbol, valueR, result)
		}
	}
}
test_format(fmt:string, nums[]):map:void = {
	printf('%-10s|%s\n', fmt, (format(fmt, nums):*align(20):left).join('|'))
}
testcase('declaration') {
	tests = [
		`gmp.mpz(0)
		`gmp.mpq(0)
		`gmp.mpf(0)
		`0L
		`0Lr
		`0.L
		`gmp.mpz(1)
		`gmp.mpq(1)
		`gmp.mpf(1)
		`1L
		`1Lr
		`1.L
		`gmp.mpz(-1)
		`gmp.mpq(-1)
		`gmp.mpf(-1)
		`(-1L)
		`(-1Lr)
		`(-1.L)
		`gmp.mpz(314)
		`gmp.mpq(314)
		`gmp.mpf(314)
		`314L
		`314Lr
		`314.L
		`gmp.mpz('314')
		`gmp.mpq('314')
		`gmp.mpf('314')
		`'314'.mpz()
		`'314'.mpq()
		`'314'.mpf()
		`3.14L
		//`3.14Lr
		`123456789012345678901234567890123456789012345678901234567890L
		`123456789012345678901234567890123456789012345678901234567890Lr
		`0777777
		`0b10101010
		`0xffffffff
	]
	tester(tests)
}
testcase('generic test for unary operators') {
	ops = [`+, `-, `~, `!, `.., `?]
	values = [3L, 3.L, 3Lr]
	TestUnaryOperators(ops, values)
}
testcase('generic test for binary operators') {
	ops = [
		`+, `-, `*, `/, `%, `**,
		`==, `<, `>, `<=, `>=, `<=>,
		`in, `&, `|, `^, `<<, `>>, `||, `&&, `=>
	]
	valueLs = [3, 3L, 3.L, 3Lr]
	valueRs = [4, 4L, 4.L, 4Lr]
	TestBinaryOperators(ops, valueLs, valueRs)
}
testcase('zero-division') {
	ops = [`/, `%]
	valueLs = [3, 3L, 3.L, 3Lr]
	valueRs = [0, 0L, 0.L, 0Lr]
	TestBinaryOperators(ops, valueLs, valueRs)
}
testcase('comparator') {
	ops = [
		`==, `<, `>, `<=, `>=, `<=>,
	]
	valueLs = [3, 3L, 3.L, 3Lr, 4, 4L, 4.L, 4Lr, 5, 5L, 5.L, 5Lr]
	valueRs = [4, 4L, 4.L, 4Lr]
	TestBinaryOperators(ops, valueLs, valueRs)
}
testcase('precision for mpf') {
	prec = gmp.mpf.get_default_prec()
	[10, 100, 1000, 10000].each {|prec|
		gmp.mpf.set_default_prec(prec)
		printf('prec=%-5d %.f\n', prec, 355L / 113)
	}
	gmp.mpf.set_default_prec(prec)
}
testcase('Formatter test - basic') {
	fmts = ['%d', '%u', '%o', '%x', '%e', '%f', '%g']
	test_format(fmts, [0, 0L])
	test_format(fmts, [0., 0.L])
	test_format(fmts, [1, 1L])
	test_format(fmts, [2, 2L])
	test_format(fmts, [8, 8L])
	test_format(fmts, [10, 10L])
	test_format(fmts, [16, 16L])
}
testcase('Formatter test - specifier in upper case') {
	nums = [12345678, 12345678L]
	test_format(['%x', '%X'], nums)
	nums = [1.2345678e-10, 1.2345678e-10L]
	test_format(['%e', '%E', '%g', '%G'], nums)
}
testcase('Formatter test - specifier d, u, o, x') {
	fmtsOrg = ['%1?', '%10?', '%-10?$', '%010?', '%-010?', '%#?', '%#010?']
	['d', 'u', 'o', 'x'].each {|specifier|
		fmts = fmtsOrg:*replace('?', specifier)
		nums = [12345678, 12345678L]
		test_format(fmts, nums)
	}
}
testcase('Formatter test - specifier e, f, g') {
	fmtsOrg = ['%1?', '%10?', '%.?', '%.0?', '%.1?', '%.6?', '%.10?', '%.20?', '%3.3?', '%13.3?', '%-13.3?$', '%013.3?']
	['e', 'f', 'g'].each {|specifier|
		fmts = fmtsOrg:*replace('?', specifier)
		nums = [0, 0L]
		test_format(fmts, nums)
		nums = [100000 / 7, 100000L / 7]
		test_format(fmts, nums)
	}
}
testcase('Formatter test - big numbers') {
	num = 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890L
	fmts = ['%d', '%10d', '%100d', '%200d', '%201d', '%210d', '%-210d$', '%0210d']
	test_format(fmts, [num])
}
testcase('sequence') {
	tester(`format('%d', 1L..10L).join(','))
	tester(`format('%d', 10L..1L).join(','))
	tester(`format('%d', (1L..).head(10)).join(','))
	tester(`format('%d', 1000000000000000L..1000000000000010L).join(','))
	tester(`format('%d', (1000000000000000L..).head(10)).join(','))
}
testcase('sort') {
	xOrg = [
	36, 14, 88, 10, 23, 83, 33, 41,  7, 74, 64, 28, 48, 97, 52, 81, 84, 42, 22, 58
	29, 38, 95, 13, 57, 66, 73, 19,  4,  3, 70, 24, 96,  1, 68,  0, 93, 60, 72,  5
	69, 55, 11, 86, 59, 78, 87,  8, 89, 31, 12, 15, 75, 40, 39, 20, 32, 25, 17, 43
	 9, 53,  2, 21, 44, 65, 92, 51, 62, 80, 77, 16, 85, 46, 54, 94, 61, 98, 90, 26
	71, 50, 82, 47, 56, 37, 99, 45, 49, 34, 30, 35, 63, 76,  6, 79, 27, 91, 67, 18
	]
	x = gmp.mpz(xOrg)
	println(x.sort().join(','))
	println(x.sort(`descend).join(','))
	x = gmp.mpf(xOrg)
	println(x.sort().join(','))
	println(x.sort(`descend).join(','))
	x = gmp.mpq(xOrg)
	println(x.sort().join(','))
	println(x.sort(`descend).join(','))
}

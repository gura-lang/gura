#!/usr/bin/env gura
import(helper.test) {*}
import(zip)
import(hash)

testcase('path.walk()') {
	path.walk('test-zip/test.zip/') {|fileName|
		println(fileName.replace('\\', '/'))
	}
	path.walk(zip.opendir('test-zip/test.zip')) {|fileName|
		println(fileName.replace('\\', '/'))
	}
}
testcase('stream out zip content') {
	path.walk('test-zip/test.zip/') {|fileName|
		md5 = hash.md5()
		stream.copy(fileName, md5)
		println(fileName.replace('\\', '/'), ': ', md5.hexdigest)
	}
}
testcase('zip.reader()') {
	Info = struct(propSym, fmt)
	z = zip.reader('test-zip/test.zip')
	z.entries {|entry|
		md5 = hash.md5()
		stream.copy(entry, md5)
		println(entry.identifier, ': ', md5.hexdigest)
		infos = @(Info) {
			[`attributes,			'%08x']
			[`comment,				'"%s"']
			[`compressed_size,		'%d']
			[`compression_method,	'%d']
			[`crc32,				'%08x']
			[`filename,				'%s']
			[`mtime,				'%s']
			[`size,					'%d']
		}
		infos.each {|info|
			printf('%-20s%s\n', info.propSym,
				   info.fmt.format(entry.stat.getprop!(info.propSym)))
		}
	}
}
testcase('archive test') {
	entries = [
		b'a' * 38009
		b'b' * 43643
		b'c' * 33517
		b'd' * 26822
		b'e' * 512
		b'f' * 28838
		b'g' * 2048
		b'h' * 24991
		b'i' * 38910
		b'j' * 56954
	]
	for (compress in [`store, `deflate, `bzip2]) {
		buff = binary()
		zip.writer(buff, compress).add(entries, 'entry' + (1..) + '.bin').close()
		printf('zip compression: %s\n', compress)
		for (entry in entries, stream in zip.reader(buff).entries()) {
			entryDec = stream.read()
			printf('%-12s %5d %s\n', stream.identifier, stream.stat.size,
										cond(entry == entryDec, 'OK', '*NG*'))
		}
	}
}

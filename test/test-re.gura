#!/usr/bin/env gura
import(re)
import(helper.test) {*}

sys.stdout.setcodec('shift_jis').addcr(false)

testcase {
	x = ['hoge 123 foo', 'no number here', '456 aaaaaa 111']
	x::sub(r'\d+', 'NUM') {|str, replaced| println(str)}
	println('---')
	x::sub(r'\d+', 'NUM') {|str, replaced| replaced && println(str)}
}

testcase {
	x = ['apple', 'orange', 'pencil', '1234', 'grape', '5678']
	tester(`x.grep(r'\w+'):*source.join(','))
	tester(`x.grep(r'r'):*source.join(','))
	tester(`x.grep(r'^a'):*source.join(','))
	tester(`x.grep(r'^o'):*source.join(','))
	tester(`x.grep(r'pe$'):*source.join(','))
	tester(`x.grep(r'\d+'):*source.join(','))
	tester(`['1-1', '11-a', '1', '00-', '1-0'].grep(r'\d+-\d+'):*source.join(','))
}

testcase {
	tester(`(0..):*tostring():*match('3').skipnil().head(30):*source.join(','))
}

testcase {
	str = 'hoge(ABCD, EFGH, IJKL), foo(MNOP, QRST), bar(UVWX, 1234)'
	tester(`str.sub(r'(\w+\()(\w+)', &{$m[1] + $m[2].lower()}))
}

testcase {
	str = 'abcdefg hijklmn opqrstu vwxyz'
	tester(`str.match(r'(\w+) (\w+) (\w+) (\w+)')[1..4].join())
}

testcase {
	str = 'あいうえお かきくけこ さしすせそ たちつてと'
	tester(`str)
	tester(`re.scan(r'\w+', str)::string)
	tester(`re.scan(r'\w+', str, 10)::string)
	tester(`re.scan(r'\w+', str, 0, 10)::string)
	tester(`re.scan(r'\w+', str):*group(0)::string)
	tester(`re.scan(r'\w+', str, 10):*group(0)::string)
	tester(`re.scan(r'\w+', str, 0, 10):*group(0)::string)
}

testcase {
	str = 'あいうえお かきくけこ さしすせそ たちつてと'
	tester(`str)
	tester(`str.scan(r'\w+')::string)
	tester(`str.scan(r'\w+', 10)::string)
	tester(`str.scan(r'\w+', 0, 10)::string)
	tester(`str.scan(r'\w+'):*group(0)::string)
	tester(`str.scan(r'\w+', 10):*group(0)::string)
	tester(`str.scan(r'\w+', 0, 10):*group(0)::string)
}

testcase {
	str = 'あいうえお かきくけこ さしすせそ たちつてと'
	tester(`str)
	tester(`str.match(r'\w+', 0)[0])
	tester(`str.match(r'\w+', 6)[0])
	tester(`str.match(r'\w+', 12)[0])
	tester(`str.match(r'\w+', 12, 13)[0])
}

testcase {
	m = '3.14'.match(r'(\d+)\.(\d*)')
	tester(`m.source)
	tester(`m[1])
	tester(`m[2])
}

testcase {
	tester(`re.scan('(ba)(.)', 'foobarbazfoobarbaz'):list {|m| [m[0], m[1, 2]] })
}

testcase {
	pattern = re.pattern(r'^http://([^/]+)')
	lines = '''\
http://sourceforge.jp/projects/
foo
http://slashdot.jp/
http://www.google.com/
hoge
'''.eachline()
	println(pattern.match(lines).skipnil():*group(1):*string)
}

testcase {
	ms = re.scan(r'\[([^]]+)\]', 'jkfdjf[hoge]kdsaa[foo]kfjdkjfkd[bar]saajkjkjfdsfdaaa');
	println(ms:*group(1)::string):nomap
	ms = re.pattern(r'\[([^]]+)\]').scan('jkfdjf[hoge]kdsaa[foo]kfjdkjfkd[bar]saajkjkjfdsfdaaa');
	println(ms:*group(1)::string):nomap
	text = 'fjdkjf[0]jfkdjk[100]fdfdsfjdsfjdkshe[300]llofkdjsk[999]fjdsfjdshello[9999]'
	println(re.scan(r'\[(\d+)\]', text):*group(1):*string)
}

testcase {
	fields = [re.split('a+', 'aaaaaaabbbbbbaaacccccDDa')];
	println(fields):nomap
	fields = [re.pattern('a+').split('aaaaaaabbbbbbaaacccccDDa')];
	println(fields):nomap
}

testcase {
	m = re.match('q[\\c\\\\]', 'q\034');
	println(m):nomap
}

testcase {
	m = re.match(r'(\b[a-z]+) \1', 'cat in the the hat')
	println(m):nomap
	tester(`re.match(r'A(a*)A', 'AA')[1])
}

testcase {
	m = re.match(r'(\d+)\.(\d*)', '3.14')
	tester(`m.source)
	tester(`m[1])
	tester(`m[2])
}

testcase {
	m = re.match(r'(?<first>\d+)\.(?<second>\d*)', '3.14')
	tester(`m.source)
	tester(`m['first'])
	tester(`m['second'])
}

testcase {
	m = re.match(r'(?<first>\d+)\.(\d*)', '3.14')
	tester(`m.source)
	tester(`m['first'])
	tester(`m[2])
}

testcase {
	m = re.match(r'(\d+)\.(?<second>\d*)', '3.14')
	tester(`m.source)
	tester(`m[1])
	tester(`m['second'])
}

testcase {
	tester(`cond(re.match(r'hello', 'HELLO WORLD'), 'match', 'not match'))
	tester(`cond(re.match(re.pattern(r'hello'):icase, 'HELLO WORLD'), 'match', 'not match'))
}
// match with pattern object

testcase {
	m = re.pattern(r'(\d+)\.(\d*)').match('3.14')
	tester(`m.source)
	tester(`m[1])
	tester(`m[2])
}

testcase {
	m = re.pattern(r'(?<first>\d+)\.(?<second>\d*)').match('3.14')
	tester(`m.source)
	tester(`m['first'])
	tester(`m['second'])
}

testcase {
	m = re.pattern(r'(?<first>\d+)\.(\d*)').match('3.14')
	tester(`m.source)
	tester(`m['first'])
	tester(`m[2])
}

testcase {
	m = re.pattern(r'(\d+)\.(?<second>\d*)').match('3.14')
	tester(`m.source)
	tester(`m[1])
	tester(`m['second'])
}

testcase {
	tester(`cond(re.pattern(r'hello').match('HELLO WORLD'), 'match', 'not match'))
	tester(`cond((re.pattern(r'hello'):icase).match('HELLO WORLD'), 'match', 'not match'))
}

testcase {
	lines = format('%08d', rands(100000000, 10))
	println(lines, ' ', lines:*sub(r'(\d)(\d)(\d)(\d)',
				&{chr(ord('A') + int($m[1..4])).join()}))
}

testcase {
	tester(`re.sub(r',\s*', ':', '1234, 567,    890,   123'))
	tester(`re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
		r'static PyObject*\npy_\1(void)\n{',
		'def myfunc():'))
	dashrepl(matchobj) = {
		if (matchobj[0] == '-') { return(' ') } else { return('-') }
	}
	print_func(dashrepl)
	tester(`re.sub('-{1,2}', dashrepl, 'pro----gram-files'))
}

testcase {
	tester(`re.pattern(r',\s*').sub(':', '1234, 567,    890,   123'))
	tester(`re.pattern(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):').sub(
		r'static PyObject*\npy_\1(void)\n{',
		'def myfunc():'))
	dashrepl(matchobj) = {
		if (matchobj[0] == '-') { return(' ') } else { return('-') }
	}
	print_func(dashrepl)
	tester(`re.pattern('-{1,2}').sub(dashrepl, 'pro----gram-files'))
}


testcase {
	lines = '''\
http://sourceforge.jp/projects/
foo
http://slashdot.jp/
http://www.google.com/
hoge
'''.eachline()
	for (line in lines) {
		(m = re.match(r'^http://([^/]+)', line)) && print(' ', m[1])
	}
	println()
}

testcase {
	lines = '''\
http://sourceforge.jp/projects/
foo
http://slashdot.jp/
http://www.google.com/
hoge
'''.eachline()
	print(' ', (re.match(r'^http://([^/]+)', lines):xlist):*group(1):*string)
	println()
}

testcase('group test') {
	str = '12 345 6789 01 234 567 890'
	ms = str.match(r'(\d+) (\d+) (\d+) (\d+) (\d+) (\d+) (\d+)')
	repeat(7) {|i|
		group = ms.group(i + 1)
		printf('%-10s %d-%d\n', group.string, group.begin, group.end)
	}
}

#!/usr/bin/env gura
# -*- coding: utf-8 -*-
import(tar)
import(zip)
import(gzip)
import(bzip2)
import(testutil) {*}

testcase {
	src = B'''
Hello world
first line
second line
third line
'''
	src.reader() {|s|
		while (ch = s.readchar()) {
			print(ch)
		}
	}
}
testcase {
	entries = [
		b'a' * 38009
		b'b' * 43643
		b'c' * 33517
		b'd' * 26822
		b'e' * 512
		b'f' * 28838
		b'g' * 2048
		b'h' * 24991
		b'i' * 38910
		b'j' * 56954
	]
	for (compress in [`none, `gzip, `bzip2]) {
		buff = binary()
		tar.writer(buff, compress).add(entries, 'entry' + (1..) + '.bin').close()
		printf('tar compression: %s\n', compress)
		for (entry in entries, stream in tar.reader(buff, compress).entries()) {
			entryDec = stream.read()
			printf('%-12s %5d %s\n', stream.identifier, stream.stat.size,
										cond(entry == entryDec, 'OK', '*NG*'))
		}
	}
	for (compress in [`store, `deflate, `bzip2]) {
		buff = binary()
		zip.writer(buff, compress).add(entries, 'entry' + (1..) + '.bin').close()
		printf('zip compression: %s\n', compress)
		for (entry in entries, stream in zip.reader(buff).entries()) {
			entryDec = stream.read()
			printf('%-12s %5d %s\n', stream.identifier, stream.stat.size,
										cond(entry == entryDec, 'OK', '*NG*'))
		}
	}
}
testcase {
	buff = binary()
	buff.writer().setcodec('shift_jis').println('こんにちは、世界')
	buff.dump()
}
testcase {
	buff = binary()
	gzip.writer(buff.writer().setcodec('shift_jis')).println('こんにちは、世界')
	//buff.dump()
	gzip.reader(buff).read().dump()
}
testcase {
	buff = binary()
	gzip.writer(buff).setcodec('shift_jis').println('こんにちは、世界')
	//buff.dump()
	gzip.reader(buff).read().dump()
}
testcase {
	buff = binary()
	bzip2.writer(buff.writer().setcodec('shift_jis')).println('こんにちは、世界')
	//buff.dump()
	bzip2.reader(buff).read().dump()
}
testcase {
	buff = binary()
	bzip2.writer(buff).setcodec('shift_jis').println('こんにちは、世界')
	//buff.dump()
	bzip2.reader(buff).read().dump()
}
testcase {
	patterns = [
		[b'ABCDEFG',							nil]
		// examples in RFC2440
		[b'\x14\xfb\x9c\x03\xd9\x7e',			nil]
		[b'\x14\xfb\x9c\x03\xd9',				nil]
		[b'\x14\xfb\x9c\x03',					nil]
		// other test patterns
		[b'\x82\xa0',							nil]
		[b'This is the data, in the clear.',	nil]
		[b'abcd' * 100,							nil]
		[b'a' * 100,							nil]
		[b'a' * 110,							76]
		[b'a' * 111,							76]
		[b'a' * 112,							76]
		[b'a' * 113,							76]
		[b'a' * 114,							76]
		[b'a' * 115,							76]
	]
	for ([buffSrc, linelen] in patterns) {
		println('-' * 32)
		buff = binary()
		base64.writer(buff, linelen).write(buffSrc).close()
		print(buff.decode('us-ascii').replace('\r', ''))
		!linelen && println()
		buffDec = base64.reader(buff).read()
		println(cond(buffSrc == buffDec, 'OK', '*NG*'))
		buffDec.dump()
	}
}
testcase {
	stream.copy(b'hello world #1\n', sys.stdout)
	stream.copy(b'hello world #2\n', sys.stdout)
	stream.copy(b'hello world #3\n', sys.stdout)
	stream.copy(b'hello world #4\n', sys.stdout)
	stream.copy(b'hello world #5\n', sys.stdout)
	stream.copy(b'hello world #6\n', sys.stdout)
	b'hello world #1\n'.reader().copyto(sys.stdout)
	b'hello world #2\n'.reader().copyto(sys.stdout)
	b'hello world #3\n'.reader().copyto(sys.stdout)
	b'hello world #4\n'.reader().copyto(sys.stdout)
	b'hello world #5\n'.reader().copyto(sys.stdout)
	b'hello world #6\n'.reader().copyto(sys.stdout)
}

#!/usr/bin/env gura
# -*- coding: utf-8 -*-
import(tar)
import(zip)
import(gzip)
import(bzip2)
import(helper.test) {*}

sys.stdout.setcodec('shift_jis').addcr(false)

testcase('readchar') {
	src = BR'''
	Hello world
	first line
	second line
	third line
	日本語
	'''
	src.reader() {|s|
		s.setcodec('utf-8')
		while (ch = s.readchar()) {
			if (ch == '\n') {
				println()
			} else {
				print('[', ch, ']')
			}
		}
	}
}
testcase {
	buff = binary()
	buff.writer().setcodec('shift_jis').println('こんにちは、世界')
	buff.dump()
}
testcase {
	buff = binary()
	gzip.writer(buff.writer().setcodec('shift_jis')).println('こんにちは、世界')
	//buff.dump()
	gzip.reader(buff).read().dump()
}
testcase {
	buff = binary()
	gzip.writer(buff).setcodec('shift_jis').println('こんにちは、世界')
	//buff.dump()
	gzip.reader(buff).read().dump()
}
testcase {
	buff = binary()
	bzip2.writer(buff.writer().setcodec('shift_jis')).println('こんにちは、世界')
	//buff.dump()
	bzip2.reader(buff).read().dump()
}
testcase {
	buff = binary()
	bzip2.writer(buff).setcodec('shift_jis').println('こんにちは、世界')
	//buff.dump()
	bzip2.reader(buff).read().dump()
}
testcase {
	patterns = [
		[b'ABCDEFG',							nil]
		// examples in RFC2440
		[b'\x14\xfb\x9c\x03\xd9\x7e',			nil]
		[b'\x14\xfb\x9c\x03\xd9',				nil]
		[b'\x14\xfb\x9c\x03',					nil]
		// other test patterns
		[b'\x82\xa0',							nil]
		[b'This is the data, in the clear.',	nil]
		[b'abcd' * 100,							nil]
		[b'a' * 100,							nil]
		[b'a' * 110,							76]
		[b'a' * 111,							76]
		[b'a' * 112,							76]
		[b'a' * 113,							76]
		[b'a' * 114,							76]
		[b'a' * 115,							76]
	]
	for ([buffSrc, linelen] in patterns) {
		println('-' * 32)
		buff = binary()
		base64.writer(buff, linelen).write(buffSrc).close()
		print(buff.p.decode('us-ascii').replace('\r', ''))
		!linelen && println()
		buffDec = base64.reader(buff).read()
		println(cond(buffSrc == buffDec, 'OK', '*NG*'))
		buffDec.dump()
	}
}
testcase('stream.copy/stream#copyto') {
	stream.copy(b'hello world #1\n', sys.stdout)
	stream.copy(b'hello world #2\n', sys.stdout)
	stream.copy(b'hello world #3\n', sys.stdout)
	stream.copy(b'hello world #4\n', sys.stdout)
	stream.copy(b'hello world #5\n', sys.stdout)
	stream.copy(b'hello world #6\n', sys.stdout)
	b'hello world #1\n'.reader().copyto(sys.stdout)
	b'hello world #2\n'.reader().copyto(sys.stdout)
	b'hello world #3\n'.reader().copyto(sys.stdout)
	b'hello world #4\n'.reader().copyto(sys.stdout)
	b'hello world #5\n'.reader().copyto(sys.stdout)
	b'hello world #6\n'.reader().copyto(sys.stdout)
}
testcase('readline/skipline') {
	src = format('line.%d\n', 1..100).join()
	src.reader {|s|
		repeat (10) {
			println('readlines(3)')
			print('  ', s.readlines(3))
		}
	}
	src.reader {|s|
		repeat (10) {
			println('readline()')
			print('  ', s.readline())
		}
	}
	src.reader {|s|
		println('skipline()')
		s.skipline()
		println('readlines(3)')
		print('  ', s.readlines(3))
		println('skipline()')
		s.skipline()
		println('readlines(3)')
		print('  ', s.readlines(3))
		println('skiplines(3)')
		s.skiplines(3)
		println('readlines(3)')
		print('  ', s.readlines(3))
		println('skiplines(3)')
		s.skiplines(3)
		println('skiplines(3)')
		s.skiplines(3)
		println('readlines(3)')
		print('  ', s.readlines(3))
	}
}

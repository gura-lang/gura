#!/usr/bin/env gura
import(helper.test)
import(re)
import(doxygen)

testcase = helper.test.testcase

TestdocInfo = struct(title:string, doc:string)

testdocInfos = []

testcase('configuration test - 1') {
	cfg:doxygen.configuration = bR'''
	ALIASES  = "english=\if english" \
           "endenglish=\endif" \
           "dutch=\if dutch" \
           "enddutch=\endif"
	'''
 	cfg.print()
	cfg.aliases.print()
}

testcase('configuration test - 2') {
	cfg:doxygen.configuration = bR'''
	ALIASES  = english="\if english" \
           endenglish="\endif" \
           dutch="\if dutch" \
           enddutch="\endif"
	'''
 	cfg.print()
	cfg.aliases.print()
}

testdoc(title:string, doc:string):void = {
	testdocInfos.add(TestdocInfo(title, doc))
}

testdoc('blank block comment', R'''
/**/
''')

testdoc('blank line comment', R'''
//
''')

testdoc('simple doxygen block', R'''
/**
*/

/*!
*/

/** test1
*/

/*! test1
*/

/**
 test2
*/

/*!
 test2
*/

/**
test3 */

/*!
test3 */
''')

testdoc('simple doxygen line', R'''
//!


///


//! test1


/// test2
''')

testdoc('multiline', R'''
/**
line.1
line.2
line.3
*/
''')

testdoc('blank line test', R'''
/*!
 * abcdefg
 * hijklmn
 *
 * opqrstu
 */
''')

testdoc('split comments', R'''
/*!
 abcdef
 */
/*!
 ghijkl
 */
/*!
 mnopqr
 */
/*!
 stuvwxyz
 */
''')

testdoc('punctuation', R'''
/*!
\a 1st.2nd \a 1st. 2nd
\a 1st,2nd \a 1st, 2nd
\a 1st;2nd \a 1st; 2nd
\a 1st?2nd \a 1st? 2nd
\a 1st!2nd \a 1st! 2nd
*/
''')

testdoc('quotation', R'''
/*!
\a word
\a "word"
\a "multi words"
*/
''')

testdoc('various styles of comment block', R'''
/**
 * ... /** style, asterisk at each line ...
 * line1
 * line2
 *   line3
 * line4
 */

/*!
 * ... /*! style, asterisk at each line  ...
 * line1
 * line2
 *   line3
 * line4
 */

/**
 ... /** style, no asterisk at each line ...
 line1
 line2
   line3
 line4
*/

/*!
 ... /*! style, no asterisk at each line ...
 line1
 line2
   line3
 line4
*/

///
/// ... /// style ...
/// line1
/// line2
///   line3
/// line4
///

//!
//! ... //! style ...
//! line1
//! line2
//!   line3
//! line4
//!

/********************************************//**
 * ... /** style, surrounded by a series of asterisks ...
 * line1
 * line2
 *   line3
 * line4
 ***********************************************/

/////////////////////////////////////////////////
/// ... /// style, surrounded by a series of slashes ...
/// line1
/// line2
///   line3
/// line4
/////////////////////////////////////////////////
''')

testdoc('test of @addtogroup', R'''
/*! \addtogroup mygrp
 *  Additional documentation for group 'mygrp'
 */

/*!
 *  A function
 */
void func1()
{
}

/*! Another function */
void func2()
{
}
''')

testdoc('test of @class', R'''
/* A dummy class */
class Test
{
};
/*! \class Test class.h "inc/class.h"
 *  \brief This is a test class.
 *
 * Some details about the Test class.
 */
''')

testdoc('test of @def', R'''
/*! \file define.h
    \brief testing defines
    
    This is to test the documentation of defines.
*/
/*!
  \def MAX(x,y)
  Computes the maximum of \a x and \a y.
*/
/*! 
   Computes the absolute value of its argument \a x.
*/
#define ABS(x) (((x)>0)?(x):-(x))
#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)>(y)?(y):(x)) 
        /*!< Computes the minimum of \a x and \a y. */
''')

testdoc('test of @enum', R'''
/*! \class Enum_Test
 * The class description.
 */
/*! \enum Enum_Test::TEnum
 * A description of the enum type.
 */
/*! \var Enum_Test::TEnum Enum_Test::Val1
 * The description of the first enum value.
 */
 ''')

testdoc('test of @example', R'''
/** A Example_Test class.
 *  More details about this class.
 */
class Example_Test
{
  public:
    /** An example member function.
     *  More details about this function.
     */
    void example();
};
void Example_Test::example() {}
/** \example example_test.cpp
 * This is an example of how to use the Example_Test class.
 * More details about this example.
 */
''')

testdoc('test of @file', R'''
/** \file file.h
 * A brief file description.
 * A more elaborated file description.
 */
/**
 * A global integer value.
 * More details about this value.
 */
extern int globalValue;
''')

testdoc('test of @fn', R'''
/*! \class Fn_Test
 * \brief Fn_Test class.
 *
 * Details about Fn_Test.
 */
/*! \fn const char *Fn_Test::member(char c,int n) 
 *  \brief A member function.
 *  \param c a character.
 *  \param n an integer.
 *  \exception std::out_of_range parameter is out of range.
 *  \return a character pointer.
 */
''')

testdoc('', R'''
E.g. if you have two event handlers @c A and @c B and a wxWindow instance
@c W and you call:
@code
    W->PushEventHandler(A);
    W->PushEventHandler(B);
@endcode
you will end up with the following situation:
    @image html overview_events_winstack.png
''')

/*
testdoc('', R'''
''')
*/

println()
testdocInfos.each {|testdocInfo, idx|
	helper.test.printtitle(idx, testdocInfo.title)
	extractedFlag = testdocInfo.doc.isempty() || !testdocInfo.doc.match(r'\s*/')
	doxygen.document(testdocInfo.doc.reader(), extracted => extractedFlag) {|doc|
		doc.structures {|structure|
			println(cond(structure.refahead, '<<<<', '----'))
			structure.elems()::print(1)
		}
	}
	println('--end--')
}

#!/usr/bin/env gura
import(helper.test) {*}

testcase('dict#put()') {
	d = %{'a' => 3, 'b' => 2, 'c' => 1}
	tester(`d)
	tester(`d.put('a', 99):timid)
	tester(`d.put('e', 99):timid)
	tester(`d)
	d.put('f', 100).put('g', 200).put('h', 300)
	tester(`d)
}
testcase('dict#append()') {
	d = %{'a' => 3, 'b' => 2, 'c' => 1}
	tester(`d)
	d.append {'a' => 33, 'b' => 22, 'c' => 11}
	tester(`d)
	d.append():timid {'a' => 333, 'b' => 222, 'c' => 111, 'd' => 444}
	tester(`d)
}
testcase('ignore case') {
	d = dict():icase { 'apple' => 100, 'orange' => 80, 'grape' => 120 }
	tester(`d['apple', 'orange', 'grape'])
	tester(`d['Apple', 'Orange', 'Grape'])
	try {
		d = dict():icase { 'apple' => 100, 'Apple' => 80 }
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	d = dict() { 'apple' => 100, 'orange' => 80, 'grape' => 120 }
	tester(`d['apple', 'orange', 'grape'])
	tester(`d['Apple', 'Orange', 'Grape'])
}
testcase('iterator indexing') {
	d = %{}
	d[0..10] = 0..10
	tester(`d)
	d[0..10] = 'hello'
	tester(`d)
}
testcase('dict#append()') {
	d = %{
		`hoge	=>	'aaaaaa'
		`foo	=>	'bbbbb'
	}
	d.append {`bar => 'cccccc'}
	tester(`d)
	d.append {`hoge => 'AAAAAA'}
	tester(`d)
	d.append([`hoge1, 'ddddd', `hoge2, 'eeeee'])
	tester(`d)
	d.append([[`hoge3, 'fffff'], [`hoge4, 'ggggg']])
	tester(`d)
	d.append([`hoge1, 'DDDDD', `hoge2, 'EEEEE'])
	tester(`d)
	d.append([[`hoge3, 'FFFFF'], [`hoge4, 'GGGGG']])
	tester(`d)
	d.append(%{`hoge3 => '*FFFFF*', `hoge4 => '*GGGGG*'})
	tester(`d)
}
testcase('dict#get()') {
	d = %{
		`hoge	=>	'aaaaaa'
		`foo	=>	'bbbbb'
		`aaaa	=>	'AAAAAAA'
		`bbbb	=>	'BBBBBBB'
		`cccc	=>	'CCCCCCC'
		`dddd	=>	'DDDDDDD'
		`eeee	=>	'EEEEEEE'
		`ffff	=>	'FFFFFFF'
	}
	tester(`d.get([`hoge, `foo, `aaaa, `bbbb, `cccc, `dddd, `eeee, `ffff, `eee]))
	tester(`d.get([`hoge, `foo, `aaaa, `bbbb, `cccc, `dddd, `eeee, `ffff, `eee], [1, 2, 3].nomap()))
	tester(`d.get([`hoge, `foo, `aaaa, `Hoge, `Foo, `Aaaa], [1, 2, 3, 1, 2, 3]))
}
testcase('dict#put()') {
	d = %{}
	d.put([1, 2, 3], [4, 5, 6].nomap())
	tester(`d)
	d = %{}
	d.put([1, 2, 3], [4, 5, 6])
	tester(`d)
}
testcase('dict#items(), dict#keys(), dict#values()') {
	PrintDict(d) = {
		println('items   = ', d.items():list):nomap
		println('keys    = ', d.keys():list):nomap
		println('values  = ', d.values():list):nomap
		println('d[keys] = ', d[d.keys()]):nomap
	}
	d = %{
		`hoge	=>	'aaaaaa'
		`foo	=>	'bbbbb'
		`aaaa	=>	'AAAAAAA'
		`bbbb	=>	'BBBBBBB'
		`cccc	=>	'CCCCCCC'
		`dddd	=>	'DDDDDDD'
		`eeee	=>	'EEEEEEE'
		`ffff	=>	'FFFFFFF'
	}
	PrintDict(d)
	try {
		d = %{
			`hoge	=>	'aaaaaa'
			`foo	=>	'bbbbb'
			`hoge	=>	'AAAA'		# causes error
		}
	} catch (error.KeyError) {|e|
		println('expected error occurs: ', e.text)
	}
	println('for loop')
	for ([key, value] in d.items()) {
		printf('%-10s %s\n', key, value)
	}
	println('implicit mapping with keys() and values()')
	printf('%-10s %s\n', d.keys(), d.values())
	println('member mapping with items()')
	d.items().printf('%-10s %s\n')
}
testcase('nested dictionary') {
	nestedDict = %{
		'key-1', %{
			'key-1-1' => 'value of 1-1'
			'key-1-2' => 'value of 1-2'
			'key-1-3' => 'value of 1-3'
			'key-1-4' => 'value of 1-4'
			'key-1-5' => 'value of 1-5'
			'key-1-6' => 'value of 1-6'
		}
		'key-2', %{
			'key-2-1' => 'value of 2-1'
			'key-2-2' => 'value of 2-2'
			'key-2-3' => 'value of 2-3'
			'key-2-4' => 'value of 2-4'
			'key-2-5' => 'value of 2-5'
		}
		'key-3', %{
			'key-3-1' => 'value of 3-1'
			'key-3-2' => 'value of 3-2'
			'key-3-3' => 'value of 3-3'
			'key-3-4' => 'value of 3-4'
			'key-3-5' => 'value of 3-5'
			'key-3-6' => 'value of 3-6'
			'key-3-7' => 'value of 3-7'
			'key-3-8' => 'value of 3-8'
			'key-3-9' => 'value of 3-9'
		}
	}
	for (test in (`nestedDict['key-1']['key-1-1'], `nestedDict['key-3']['key-3-1'])) {
		print(test, ' .. ', test.eval(), '\n')
	}
	println('--------')
	for (d in nestedDict[nestedDict.keys()]) {
		for (value in d[d.keys()]) { print(' ', value) }
		println('')
	}
}
testcase('dict#haskey()') {
	d = %{
		`key1 => 'value of key1'
		`key2 => 'value of key2'
		`key3 => 'value of key3'
		`key4 => 'value of key4'
		`key5 => 'value of key5'
		`key6 => 'value of key6'
		`key7 => 'value of key7'
	}
	print(d), println()
	println(d.haskey([`key1, `key2, `key3, `key4, `key5,
								`key6, `key7, `key0, `key8]).join(' '))
}
testcase('constructor test') {
	tester(`%{1, 2, 3, 4, 5, 6, 7, 8})
	tester(`%{{1, 2}, {3, 4}, {5, 6}, {7, 8}})
	tester(`%{1 => 2, 3 => 4, 5 => 6, 7 => 8})
	tester(`dict {1, 2, 3, 4, 5, 6, 7, 8})
	tester(`dict {{1, 2}, {3, 4}, {5, 6}, {7, 8}})
	tester(`dict {1 => 2, 3 => 4, 5 => 6, 7 => 8})
	tester(`dict([1, 2, 3, 4, 5, 6, 7, 8]))
	tester(`dict([[1, 2], [3, 4], [5, 6], [7, 8]]))
	tester(`dict([1 => 2, 3 => 4, 5 => 6, 7 => 8]))
	tester(`%{1 => ['A', 'B', 'C'], 2 => ['D', 'E', 'F'], 3 => ['G', 'H', 'I']})
	tester(`%{1, ['A', 'B', 'C'], 2, ['D', 'E', 'F'], 3, ['G', 'H', 'I']})
	tester(`%{{1, ['A', 'B', 'C']}, {2, ['D', 'E', 'F']}, {3, ['G', 'H', 'I']}})
}
testcase('readable dictionary') {
	f(dict%) = {
		println(dict)
		try {
			dict[`d] = 4
		} catch {|e|
			println('an expected error occurs: ', e.text)
		}
	}
	f(a => 1, b => 2, c => 3)
}
testcase('invalidated iterator of dict#keys()') {
	x = %{'first' => 1, 'second' => 2, 'third' => 3}
	i = x.keys()
	println(i.next())
	x['fourth'] = 4
	try {
		println(i.next())
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	i = x.keys()
	println(i.next())
	x.clear()
	try {
		println(i.next())
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase('invalidated iterator of dict#values()') {
	x = %{'first' => 1, 'second' => 2, 'third' => 3}
	i = x.values()
	println(i.next())
	x['fourth'] = 4
	try {
		println(i.next())
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	i = x.values()
	println(i.next())
	x.clear()
	try {
		println(i.next())
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase('invalidated iterator of dict#items()') {
	x = %{'first' => 1, 'second' => 2, 'third' => 3}
	i = x.items()
	println(i.next()):nomap
	x['fourth'] = 4
	try {
		println(i.next()):nomap
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	i = x.items()
	println(i.next()):nomap
	x.clear()
	try {
		println(i.next()):nomap
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase('dict#isempty()') {
	tester(`%{}.isempty())
	tester(`%{'a' => 3}.isempty())
	tester(`%{'a' => 3, 'b' => 2, 'c' => 1}.isempty())
}

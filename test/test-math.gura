#!/usr/bin/env gura
import(helper.test) {*}

testcase('math.abs()') {
	tester(`math.abs(0))
	tester(`math.abs(3))
	tester(`math.abs(-3))
	tester(`math.abs(4j))
	tester(`math.abs(4j))
	tester(`math.abs(3 + 4j))
	tester(`math.abs(3 - 4j))
}

testcase('math.acos()') {
	tester(`math.acos(0))
	tester(`math.acos(1))
	tester(`math.acos(-1))
	tester(`math.acos(0):deg)
	tester(`math.acos(1):deg)
	tester(`math.acos(-1):deg)
}

testcase('math.arg()') {
	tester(`math.arg(0))
	tester(`math.arg(3))
	tester(`math.arg(-3))
	tester(`math.arg(4j))
	tester(`math.arg(-4j))
	tester(`math.arg(1 + 1j))
	tester(`math.arg(1 - 1j))
	tester(`math.arg(0):deg)
	tester(`math.arg(3):deg)
	tester(`math.arg(-3):deg)
	tester(`math.arg(4j):deg)
	tester(`math.arg(-4j):deg)
	tester(`math.arg(1 + 1j):deg)
	tester(`math.arg(1 - 1j):deg)
}

testcase('math.asin()') {
	tester(`math.acos(0))
	tester(`math.acos(1))
	tester(`math.acos(-1))
	tester(`math.acos(0):deg)
	tester(`math.acos(1):deg)
	tester(`math.acos(-1):deg)
}

testcase('math.atan()') {
	tester(`math.atan(0))
	tester(`math.atan(1))
	tester(`math.atan(-1))
	tester(`math.atan(0):deg)
	tester(`math.atan(1):deg)
	tester(`math.atan(-1):deg)
}

testcase('math.atan2()') {
	tester(`math.atan2(1, 0))
	tester(`math.atan2(0, 1))
	tester(`math.atan2(1, 1))
	tester(`math.atan2(-1, 1))
	tester(`math.atan2(1, 0):deg)
	tester(`math.atan2(0, 1):deg)
	tester(`math.atan2(1, 1):deg)
	tester(`math.atan2(-1, 1):deg)
}

testcase('math.ceil()') {
	tester(`math.ceil(0))
	tester(`math.ceil(.1))
	tester(`math.ceil(.9))
	tester(`math.ceil(1))
	tester(`math.ceil(1.5))
	tester(`math.ceil(3.5))
	tester(`math.ceil(-.1))
	tester(`math.ceil(-.9))
	tester(`math.ceil(-1))
	tester(`math.ceil(-1.5))
	tester(`math.ceil(-3.5))
}

testcase('math.conj()') {
	tester(`math.conj(0))
	tester(`math.conj(3))
	tester(`math.conj(4j))
	tester(`math.conj(-4j))
	tester(`math.conj(3 + 4j))
	tester(`math.conj(3 - 4j))
}

testcase('math.cos()') {
	tester(`math.cos(0))
	tester(`math.cos(math.pi / 2))
	tester(`math.cos(math.pi))
	tester(`math.cos(0):deg)
	tester(`math.cos(90):deg)
	tester(`math.cos(180):deg)
}

testcase('math.cosh()') {
	tester(`math.cosh(0))
	tester(`math.cosh(1))
	tester(`((math.exp(1) + math.exp(-1)) / 2))
}

testcase('math.cross()') {
	tester(`math.cross([1, 2], [2, 3]))
	tester(`math.cross([1, 2, 3], [2, 3, 4]))
	tester(`math.cross([1, 2, 3], [2, 3]))
	tester(`math.cross([1, 2, 3, 2], [2, 3, 4, 5]))
}

testcase('math.delta()') {
	tester(`math.delta(-2))
	tester(`math.delta(-1))
	tester(`math.delta(0))
	tester(`math.delta(1))
	tester(`math.delta(2))
}

testcase('math.dot()') {
	tester(`math.dot([1, 2], [2, 3]))
	tester(`math.dot([1, 2, 3], [2, 3, 4]))
	tester(`math.dot([1, 2, 3], [2, 3]))
	tester(`math.dot([1, 2, 3, 2], [2, 3, 4, 5]))
}

testcase('math.exp()') {
	tester(`math.exp(0))
	tester(`math.exp(1))
	tester(`math.exp(-1))
	tester(`math.exp(math.pi * 1j))
}

testcase('math.floor()') {
	tester(`math.floor(0))
	tester(`math.floor(.1))
	tester(`math.floor(.9))
	tester(`math.floor(1))
	tester(`math.floor(1.5))
	tester(`math.floor(3.5))
	tester(`math.floor(-.1))
	tester(`math.floor(-.9))
	tester(`math.floor(-1))
	tester(`math.floor(-1.5))
	tester(`math.floor(-3.5))
}

testcase('math.hypot()') {
	tester(`math.hypot(0, 0))
	tester(`math.hypot(3, 4))
	tester(`math.hypot(-3, -4))
}

testcase('math.imag()') {
	tester(`math.imag(0))
	tester(`math.imag(3))
	tester(`math.imag(4j))
	tester(`math.imag(3 + 4j))
}

testcase('math.log()') {
	tester(`math.log(3))
	tester(`math.log(math.e))
	tester(`math.log(2 + 3j))
	tester(`math.log(-3))
	tester(`math.log(0))
}

testcase('math.log10()') {
	tester(`math.log10(3))
	tester(`math.log10(math.e))
	tester(`math.log10(2 + 3j))
	tester(`math.log10(-3))
	tester(`math.log10(0))
}

testcase('math.norm()') {
	tester(`math.norm(0))
	tester(`math.norm(3))
	tester(`math.norm(4j))
	tester(`math.norm(3 + 4j))
}

testcase('math.ramp()') {
	tester(`math.ramp(-2))
	tester(`math.ramp(-1))
	tester(`math.ramp(0))
	tester(`math.ramp(1))
	tester(`math.ramp(2))
}

testcase('math.real()') {
	tester(`math.real(0))
	tester(`math.real(3))
	tester(`math.real(4j))
	tester(`math.real(3 + 4j))
}

testcase('math.sin()') {
	tester(`math.sin(0))
	tester(`math.sin(math.pi / 2))
	tester(`math.sin(math.pi))
	tester(`math.sin(0):deg)
	tester(`math.sin(90):deg)
	tester(`math.sin(180):deg)
}

testcase('math.sinh()') {
	tester(`math.sinh(0))
	tester(`math.sinh(1))
	tester(`((math.exp(1) - math.exp(-1)) / 2))
}

testcase('math.sqrt()') {
	tester(`math.sqrt(0))
	tester(`math.sqrt(2))
	tester(`math.sqrt(3))
	tester(`math.sqrt(-2))
	tester(`math.sqrt(-3))
	tester(`math.sqrt(2j))
	tester(`math.sqrt(3j))
}

testcase('math.tan()') {
	tester(`math.tan(0))
	tester(`math.tan(math.pi / 4))
	tester(`math.tan(math.pi / 2))
	tester(`math.tan(math.pi))
	tester(`math.tan(0):deg)
	tester(`math.tan(45):deg)
	tester(`math.tan(90):deg)
	tester(`math.tan(180):deg)
}

testcase('math.tanh()') {
	tester(`math.tanh(0))
	tester(`math.tanh(1))
	tester(`((math.exp(1) - math.exp(-1)) / ((math.exp(1) + math.exp(-1)))))
}

testcase('math.unitstep()') {
	tester(`math.unitstep(-2))
	tester(`math.unitstep(-1))
	tester(`math.unitstep(0))
	tester(`math.unitstep(1))
	tester(`math.unitstep(2))
}

testcase {
	tester(`rational(260, 364).reduce())
}
testcase {
	tester(`math.hypot(3, 4))
}
testcase {
	TestCase = struct(a:number, b:number)
	testCases = TestCase * [
		[ 6,	3	]
		[ 3,	6	]
		[ 2,	3	]
		[ 4,	6	]
		[ 9,	6	]
		[ 16,	40	]
		[ 24,	18	]
		[ 48,	72	]
		[ 924,	360	]
	]
	printf('%-3d %-3d .. GCD:%-3d LCM:%-3d\n', testCases:*a, testCases:*b,
		math.gcd(testCases:*a, testCases:*b), math.lcm(testCases:*a, testCases:*b))
	x = [255, 459, 1122].permutation(3)
	printf('%-4d %-4d %-4d .. GCD:%-3d LCM:%-3d\n',
		x:*get(0), x:*get(1), x:*get(2), math.gcd * x, math.lcm * x)
	x = [84, 36, 60].permutation(3)
	printf('%-4d %-4d %-4d .. GCD:%-3d LCM:%-3d\n',
		x:*get(0), x:*get(1), x:*get(2), math.gcd * x, math.lcm * x)
}

testcase {
	tester(`math.cross([1, 2], [3, 1]))
	tester(`math.cross([3, 1], [1, 2]))
	tester(`math.cross([1, 2, 3], [-1, 1, 2]))
	tester(`math.cross([-1, 1, 2], [1, 2, 3]))
	tester(`math.cross([-1, -3], [2, 2, 3]))
	tester(`math.cross([-1, -3, 2, 1], [2, 2, 3, 1]))
	tester(`math.dot([-1, -3], [2, 2]))
	tester(`math.dot([-1, -3, 3], [2, 2, -1]))
	tester(`math.dot([-1, -3], [2, 2, 3]))
}
testcase {
	bezier1(nums[]:number):closure = function(t:number):map {
		numswk = nums.clone()
		while ((len = numswk.len()) > 1) {
			numswk = for (num1 in numswk.head(len - 1), num2 in numswk.offset(1)):list {
				num1 * (1 - t) + num2 * t
			}
		}
		numswk[0]
	}
	bezier2(nums[]:number):closure = {
		a = nums[0]
		b = 3 * nums[1] - 3 * nums[0]
		c = 3 * nums[2] - 6 * nums[1] + 3 * nums[0]
		d = nums[3] - 3 * nums[2] + 3 * nums[1] - nums[0]
		function(t:number):map {
			a + b * t + c * t * t + d * t * t * t
		}
	}
	[f_x, f_y] = math.bezier([6, 10, 16, 20], [12, 4, 6, 10])
	f1_x = bezier1([6, 10, 16, 20])
	f1_y = bezier1([12, 4, 6, 10])
	f2_x = bezier2([6, 10, 16, 20])
	f2_y = bezier2([12, 4, 6, 10])
	print_func(f2_x)
	print_func(f2_y)
	t = interval(0, 1, 10)
	printf('%12s,%12s,%12s, %12s,%12s,%12s\n', 'f_x', 'f1_x', 'f2_x', 'f_y', 'f1_y', 'f2_y')
	printf('%12f,%12f,%12f, %12f,%12f,%12f\n', f_x(t), f1_x(t), f2_x(t), f_y(t), f1_y(t), f2_y(t))
}
testcase {
	x = [1, 3, 5, 7, 9]
	y = [3, 6, 5.5, 5, 7]
	x_interval = interval(0, 10, 100)
	f = math.least_square(x, y, 1)
	g = math.least_square(x, y, 2, `temp)
	h = math.least_square(x, y, 3, `hoge)
	print_func(f)
	print_func(g)
	print_func(h)
}
testcase {
	x = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2]
	y = [1.0, 1.9, 3.2, 4.3, 4.8, 6.1, 7.2]
	x_interval = interval(0, 1.2, 100)
	f = math.least_square(x, y, 1)
	print_func(f)
}
testcase('ramp, unitstep and delta') {
	tester(`math.ramp([-5..5]))
	tester(`math.unitstep([-5..5]))
	tester(`math.delta([-5..5]))
}
testcase('random') {
	PrintHist(samples:iterator) = {
		samples = int(samples):list
		[sampleMin, sampleMax] = [samples.min(), samples.max()]
		hists = dim(sampleMax - sampleMin + 1) {0}
		samples.each {|sample| hists[sample - sampleMin] += 1}
		printf('%3d:%s\n', sampleMin.., hists * '*')
	}
	randseed(0)
	tester(`rand())
	randseed(0)
	tester(`rand(100))
	randseed(0)
	tester(`rand@normal())
	randseed(0)
	tester(`rand@normal(50, 30))
	randseed(0)
	tester(`rands(num => 10):list)
	randseed(0)
	tester(`rands(100, num => 10):list)
	randseed(0)
	tester(`rands@normal(num => 10):list)
	randseed(0)
	tester(`rands@normal(50, 30, num => 10):list)
	randseed(0)
	println('sigma = 3, number of samples = 300')
	PrintHist(rands@normal(0, 3, 300))
	randseed(0)
	println('sigma = 5, number of samples = 300')
	PrintHist(rands@normal(0, 5, 300))
	randseed(0)
	println('sigma = 7, number of samples = 300')
	PrintHist(rands@normal(0, 7, 300))
}

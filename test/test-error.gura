#!/usr/bin/env gura
import(testutil) {*}

sys.echo(false)
println('======== error test ========')
stderrOrg = sys.stderr
sys.stderr = sys.stdout
testcase {
	f(err) = {
		try {
			repeat(3) {|i|
				repeat(3) {|j|
					repeat(3) {|k|
						printf(' [%d,%d,%d]', i, j, k)
						(err != nil && i == 2 && j == 0 && k == 2) && raise(err)
					}
				}
			}
		} catch(IteratorError) {
			println('catch(IteratorError)')
		} catch {
			println('catch()')
		} else {
			println('else')
		}
		println('end-of-function')
	}
	f(IteratorError)
	f(IOError)
	f(nil)
}
testcase {
	f() = {
		repeat(10) {|i|
			try {
				(i % 2 == 0) && continue()
			} catch {
			}
			printf('%3d', i)
		}
		println()
		println('end-of-function')
	}
	f()
}
testcase {
	f() = {
		repeat(10) {|i|
			try {
				printf('%3d', i)
				(i == 8) && break()
			} catch {
			}
		}
		println()
		println('end-of-function')
	}
	f()
}
testcase {
	f() = {
		try {
			println('try')
			return('hello')
		} catch {
			println('catch')
		}
		println('end-of-function')
	}
	f()
}
testcase {
	Person = class()
	f(p:Person) = 3
	people = repeat(3):list { Person() }
	try {
		f(people)
	} catch(TypeError) {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase {
	b = [1]
	try {
		a
	} catch(ValueError) {|e|
		println('ValueError detected: ', e.text)
	} catch {|e|
		println('other error detected: ', e.text)
	} else {
		println('no error')
	}
	try {
		b[2]
	} catch(ValueError) {|e|
		println('ValueError detected: ', e.text)
	} catch {|e|
		println('other error detected: ', e.text)
	} else {
		println('no error')
	}
	try {
		b[0]
	} catch(ValueError) {|e|
		println('ValueError detected: ', e.text)
	} catch {|e|
		println('other error detected: ', e.text)
	} else {
		println('no error')
	}
}
testcase {
	error_tester(err) = try {
		if (err != nil) { raise(err, 'intentional error for handling test') }
	} catch(IndexError) {|e|
		println('catch(IndexError) .. ', e.text)
	} catch(ValueError) {|e|
		println('catch(ValueError) .. ', e.text)
	} catch(IOError) {|e|
		println('catch(IOError) .. ', e.text)
	} catch(SystemError, CodecError) {|e|
		println('catch(SystemError, CodecError) .. ', e.text)
	} catch {|e|
		println('catch() .. ', e.text)
	} else {
		println('else()')
	}
	error_tester(IndexError)
	error_tester(ValueError)
	error_tester(IOError)
	error_tester(SystemError)
	error_tester(CodecError)
	error_tester(AttributeError)
	error_tester(nil)
}
testcase {
	import(xml)
	test_errmsg(expr:expr):map = {
		try {
			expr.eval()
		} catch {|e|
			println(e.text)
			trace = [e.trace]
			trace.erase(-1)
			printf('  [%d] %s\n', 1.., trace)
		}
	}
	exprs = [
		`{
			for (x in b1..10) {
				b
			}
		}
		`{
			x = [1, 2, 3]
			x[b]
		}
		`{
			try {
				a
			} catch {
				b
			}
		}
		`{
			scope {
				a
			}
		}
		`{
			xml.element('hoge') {
				3
			}
		}
		`{
			f() {block} = {
				block(1, 2, 3)
			}
			f() {|a, b, c, d|
				println('hello')
			}
		}
	]
	test_errmsg(exprs)
}
try {
	raise(ValueError, 'unhandled error')
} catch(ValueError) {|e|
	println('ValueError detected: ', e.text)
}
sys.stderr = stderrOrg

#!/usr/bin/env gura
import(helper.test) {*}

println('======== error test ========')

stderrOrg = sys.stderr
sys.stderr = sys.stdout
testcase('properties of error class') {
	f(err) = {
		try {
			repeat(3) {|i|
				repeat(3) {|j|
					repeat(3) {|k|
						printf(' [%d,%d,%d]', i, j, k)
						(err != nil && i == 2 && j == 0 && k == 2) && raise(err)
					}
				}
			}
		} catch (error.IteratorError) {|e|
			println('catch(IteratorError)')
			println('text:      ', e.text)
			println('source:    ', path.filename(e.source))
			println('lineno:    ', e.lineno)
			println('linenobtm: ', e.linenobtm)
			println('postext:   ', e.postext)
			println('trace:')
			println(e.trace)
		} catch {|e|
			println('catch()')
			println('text:      ', e.text)
			println('source:    ', path.filename(e.source))
			println('lineno:    ', e.lineno)
			println('linenobtm: ', e.linenobtm)
			println('postext:   ', e.postext)
			println('trace:')
			println(e.trace)
		} else {
			println('else')
		}
		println('end-of-function')
	}
	f(error.IteratorError)
	f(error.IOError)
	f(nil)
}
testcase('continue in try statement') {
	f() = {
		repeat(10) {|i|
			try {
				(i % 2 == 0) && continue()
			} catch {
			}
			printf('%3d', i)
		}
		println()
		println('end-of-function')
	}
	f()
}
testcase('break in try statement') {
	f() = {
		repeat(10) {|i|
			try {
				printf('%3d', i)
				(i == 8) && break()
			} catch {
			}
		}
		println()
		println('end-of-function')
	}
	f()
}
testcase('return in try statement') {
	f() = {
		try {
			println('try')
			return('hello')
		} catch {
			println('catch')
		}
		println('end-of-function')
	}
	f()
}
testcase('cannot take list value') {
	Person = class()
	f(p:Person) = 3
	people = repeat(3):list { Person() }
	try {
		f(people)
	} catch (error.TypeError) {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase('index error') {
	b = [1]
	try {
		a
	} catch (error.ValueError) {|e|
		println('ValueError detected: ', e.text)
	} catch {|e|
		println('other error detected: ', e.text)
	} else {
		println('no error')
	}
	try {
		b[2]
	} catch (error.ValueError) {|e|
		println('ValueError detected: ', e.text)
	} catch {|e|
		println('other error detected: ', e.text)
	} else {
		println('no error')
	}
	try {
		b[0]
	} catch (error.ValueError) {|e|
		println('ValueError detected: ', e.text)
	} catch {|e|
		println('other error detected: ', e.text)
	} else {
		println('no error')
	}
}
testcase('multiple catches') {
	error_tester(err) = try {
		if (err != nil) { raise(err, 'intentional error for handling test') }
	} catch (error.IndexError) {|e|
		println('catch(IndexError) .. ', e.text)
	} catch (error.ValueError) {|e|
		println('catch(ValueError) .. ', e.text)
	} catch (error.IOError) {|e|
		println('catch(IOError) .. ', e.text)
	} catch (error.SystemError, error.CodecError) {|e|
		println('catch(SystemError, CodecError) .. ', e.text)
	} catch {|e|
		println('catch() .. ', e.text)
	} else {
		println('else()')
	}
	error_tester(error.IndexError)
	error_tester(error.ValueError)
	error_tester(error.IOError)
	error_tester(error.SystemError)
	error_tester(error.CodecError)
	error_tester(error.AttributeError)
	error_tester(nil)
}
testcase('error message test') {
	import(xml)
	test_errmsg(test:expr):map = {
		try {
			test.eval()
		} catch {|e|
			println(e.text)
			trace = [e.trace]
			trace.erase(-1)
			printf('  [%d] %s\n', 1.., trace)
		}
	}
	tests = [
		`{
			for (x in b1..10) {
				b
			}
		}
		`{
			x = [1, 2, 3]
			x[b]
		}
		`{
			try {
				a
			} catch {
				b
			}
		}
		`{
			scope {
				a
			}
		}
		`{
			xml.element('hoge') {
				3
			}
		}
		`{
			f() {block} = {
				block(1, 2, 3)
			}
			f() {|a, b, c, d|
				println('hello')
			}
		}
	]
	test_errmsg(tests)
}
testcase('version check') {
	[major:number, minor:number, patch:number] = sys.version.split('.')
	sys.required_version(major, minor, patch)
	try {
		sys.required_version(major + 1, minor, patch)
	} catch {|e|
		println('expected error occurs')
	}
	try {
		sys.required_version(major, minor + 1, patch)
	} catch {
		println('expected error occurs')
	}
	try {
		sys.required_version(major, minor, patch + 1)
	} catch {
		println('expected error occurs')
	}
		
}
testcase('try-catch-else-finally') {
	f(n:number) = {
		println('---')
		x = [3, 1, 4]
		try {
			println(n, ' .. ', x[n])
		} catch {|e|
			println('catch: ', e.text)
			return('return by catch')
		} else {|e|
			println('else')
			return('return by else')
		} finally {
			println('finally')
		}
		'end of function'
	}
	println('return value: ', f(0))
	println('return value: ', f(1))
	println('return value: ', f(2))
	println('return value: ', f(3))
}
testcase('type error while operator is applied with mapping') {
	try {
		[`a, `b, `c] + 1
	} catch {|e|
		println(e.text)
	}
}
try {
	raise(error.ValueError, 'unhandled error')
} catch (error.ValueError) {|e|
	println('ValueError detected: ', e.text)
}
sys.stderr = stderrOrg

#!/usr/bin/env gura
import(xml)
import(testutil) {*}

testcase {
	Parser = class(xml.parser) {
		StartElement(elem) = {
			printf('<%s%s>\n', elem.tagname,
				format(' %s="%s"', elem.attrs:*name, elem.attrs:*value:*escapehtml():quote).join())
		}
		EndElement(tagname:string) = {
			printf('</%s>\n', tagname)
		}
		CharacterData(text:string) = {
			text = text.strip()
			!text.isempty() && println(text)
		}
		ProcessingInstruction(target:string, data:string) = {
		}
		Comment(data:string) = {
		}
		StartCdataSection() = {
		}
		EndCdataSection() = {
		}
		Default(text:string) = {
		}
		DefaultExpand(text:string) = {
		}
		SkippedEntity(entityName:string, isParameterEntity:boolean) = {
		}
		StartNamespaceDecl(prefix:string, uri:string) = {
		}
		EndNamespaceDecl(prefix:string) = {
		}
		XmlDecl(version:string, encoding:string, standalone?:boolean) = {
			printf('%s %s %s\n', version, encoding, standalone)
		}
		StartDoctypeDecl(doctypeName:string, systemId:string,
									publicId:string, hasInternalSubset:boolean) = {
		}
		EndDoctypeDecl() = {
		}
		ElementDecl(name:string, type:symbol) = {
		}
		AttlistDecl(elemName:string, attName:string, attType:string,
									default:string, isRequired:boolean) = {
		}
		EntityDecl(entityName:string, isParameterEntity:boolean, value:string,
				base:string, systemId:string, publicId:string, notationName:string) = {
		}
		NotationDecl(notationName:string, base:string,
									systemId:string, publicId:string) = {
		}
		NotStandalone() = {
		}
	}
	Parser().parse('test.xml');
}
testcase {
	e = xml.element
	elem = e('hoge', attr => 'aaa', attr_2 => 'bbb') {
		e('foo') {
			'text'
			e('bar')
			'fjdkfjdsjfkldsj fjdkjfdsa fjdskfjds fjkfdsjfkds'
			e('bar')
			e('bar')
			e('bar')
			e('bar')
			e('bar')
			e('bar')
		}
		e('foo')
	}
	elem.gendoc(sys.stdout)
}
testcase {
	d = xml.document('test.xml')
	d.gendoc(sys.stdout, true)
}

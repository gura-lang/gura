#!/usr/bin/env gura
# -*- coding: utf-8 -*-
import(testutil) {*}

sys.echo(false)
sys.stdout.setencoding('shift_jis', false)

//-----------------------------------------------------------------------------
scope {
	R'''
  ${// comment}
  line.1
    ${# comment}
  line.2
      ${/* comment */}
  line.3
  line.4${//comment}

'''.template(sys.stdout)
}
//-----------------------------------------------------------------------------
scope {
	R'''
${(1..10).each() {|i|}}
  ${i}
${end}
'''.template(sys.stdout)
}
//-----------------------------------------------------------------------------
scope {
	R'''
hello
${
nil
}
${nil}
gura
${''}
world

hello ${nil}world
hello ${(1..10) + ','} world
hello ${(1..10) + '\n'} world
foo${nil}bar
foo${''}bar
'''.template(sys.stdout)
}
//-----------------------------------------------------------------------------
scope {
	companies = ['Gura company', 'Guri corporation', nil]
	products = ['apple', 'grape', 'orange']
	// iteration with for function
	R'''
[Companies]
${for (company in companies)}
  ${if (company)}
    Company: ${company}
  ${else}
    Company: (not defined)
  ${end}
${end}
[Products]
${for (product in products)}
- ${product}
${end}
'''.template(sys.stdout)
	// iteration with each method
	R'''
[Companies]
${companies.each {|company|}}
  ${if (company)}
    Company: ${company}
  ${else}
    Company: (not defined)
  ${end}
${end}
[Products]
${products.each {|product|}}
- ${product}
${end}
'''.template(sys.stdout)
}
scope {
	R'''
${for (i in 1..10)}
  ${if (i < 5)}
    ${i} is less than five
  ${elsif (i < 8)}
    ${i} is less than eight
  ${else}
    ${i} is greater or equal to eight
  ${end}
${end}
'''.template(sys.stdout)
}
//-----------------------------------------------------------------------------
scope {
	println('漢字のテスト ${"スクリプト文字列"}'.template())
}
//-----------------------------------------------------------------------------
scope {
	template = R'''
${if (company) {R"""
Company: ${company}
""".template()} else {R"""
(not defined)
"""}}
[Products]
${R"""
- %s
""".format(products)}
'''
	scope {
		company = 'hoge'
		products = ['apple', 'grape', 'orange']
		template.template(sys.stdout)
		company = nil
		products = ['car', 'bicycle', 'boat']
		template.template(sys.stdout)
	}
}
//-----------------------------------------------------------------------------
scope {
	x = format('embedded #%d line\n', 1..4)
	template = R'''
space 1
 ${x}
space 2
  ${x}
space 3
   ${x}
space 4
    ${x}
tab 1
	${x}
tab 2
		${x}
not line top:  ${x}
'''
	println('** auto-indent **')
	template.template(sys.stdout)
	template.reader().template(sys.stdout)
	println('** append last-eol **')
	template.template(sys.stdout):lasteol
	println('** no-indent **')
	template.template(sys.stdout):noindent
	println('** no-indent, append last-eol **')
	template.template(sys.stdout):noindent:lasteol
	x = 'single string'
	template.template(sys.stdout)
}
//-----------------------------------------------------------------------------
scope {
	try {
		'abcdefg${hoge}hijklmn'.template()
	} except {|e|
		println('expected error occurs: ', e.text)
	}
}
//-----------------------------------------------------------------------------
scope {
	tester(`'hello ${format("%d", 0..10).join(",")}'.template())
}
//-----------------------------------------------------------------------------
scope {
	var = 'HOGE'
	tester(`'hello ${var} world'.template())
	tester(`'hello ${var * 2} world'.template())
	tester(`'''hello '${format('%8s', var)}' world'''.template())
	var = 3.14
	tester(`'hello ${var} world'.template())
}

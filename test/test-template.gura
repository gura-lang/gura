#!/usr/bin/env gura
# -*- coding: utf-8 -*-
import(testutil) {*}

sys.echo(false)
sys.stdout.setcodec('shift_jis').addcr(false)

//-----------------------------------------------------------------------------
testcase {
	R'''
  ${// comment}
  line.1
    ${# comment}
  line.2
      ${/* comment */}
  line.3
  line.4${//comment}

'''.template().render(sys.stdout)
}
//-----------------------------------------------------------------------------
testcase {
	R'''
${(1..10).each() {|i|}}
  ${i}
${end}
'''.template().render(sys.stdout)
}
//-----------------------------------------------------------------------------
testcase {
	R'''
hello
${
nil
}
${
-
}
${nil}
${-}
gura
${''}
world

hello ${nil}world
hello ${-}world
hello ${(1..10) + ','} world
hello ${(1..10) + '\n'} world
foo${nil}bar
foo${-}bar
foo${''}bar
'''.template().render(sys.stdout)
}
//-----------------------------------------------------------------------------
testcase {
	companies = ['Gura company', 'Guri corporation', nil]
	products = ['apple', 'grape', 'orange']
	// iteration with for function
	R'''
[Companies]
${for (company in companies)}
  ${if (company)}
    Company: ${company}
  ${else}
    Company: (not defined)
  ${end}
${end}
[Products]
${for (product in products)}
- ${product}
${end}
'''.template().render(sys.stdout)
	// iteration with each method
	R'''
[Companies]
${companies.each {|company|}}
  ${if (company)}
    Company: ${company}
  ${else}
    Company: (not defined)
  ${end}
${end}
[Products]
${products.each {|product|}}
- ${product}
${end}
'''.template().render(sys.stdout)
}
testcase {
	R'''
${for (i in 1..10)}
  ${if (i < 5)}
    ${i} is less than five
  ${elsif (i < 8)}
    ${i} is less than eight
  ${else}
    ${i} is greater or equal to eight
  ${end}
${end}
'''.template().render(sys.stdout)
}
//-----------------------------------------------------------------------------
testcase {
	println('漢字のテスト ${"スクリプト文字列"}'.template().render())
}
//-----------------------------------------------------------------------------
testcase {
	tmpl = R'''
${if (company) {R"""
Company: ${company}
""".template().render()} else {R"""
(not defined)
"""}}
[Products]
${R"""
- %s
""".format(products)}
'''
	scope {
		company = 'hoge'
		products = ['apple', 'grape', 'orange']
		tmpl.template().render(sys.stdout)
		company = nil
		products = ['car', 'bicycle', 'boat']
		tmpl.template().render(sys.stdout)
	}
}
//-----------------------------------------------------------------------------
testcase {
	x = format('embedded #%d line\n', 1..4)
	tmpl = R'''
space 1
 ${x}
space 2
  ${x}
space 3
   ${x}
space 4
    ${x}
tab 1
	${x}
tab 2
		${x}
not line top:  ${x}
'''
	println('** auto-indent **')
	tmpl.template().render(sys.stdout)
	template(tmpl.reader()).render(sys.stdout)
	println('** append last-eol **')
	(tmpl.template():lasteol).render(sys.stdout)
	println('** no-indent **')
	(tmpl.template():noindent).render(sys.stdout)
	println('** no-indent, append last-eol **')
	(tmpl.template():noindent:lasteol).render(sys.stdout)
	x = 'single string'
	tmpl.template().render(sys.stdout)
}
//-----------------------------------------------------------------------------
testcase {
	try {
		'abcdefg${hoge}hijklmn'.template().render()
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
//-----------------------------------------------------------------------------
testcase {
	tester(`'hello ${format("%d", 0..10).join(",")}'.template().render())
}
//-----------------------------------------------------------------------------
testcase {
	var = 'HOGE'
	tester(`'hello ${var} world'.template().render())
	tester(`'hello ${var * 2} world'.template().render())
	tester(`'''hello '${format('%8s', var)}' world'''.template().render())
	var = 3.14
	tester(`'hello ${var} world'.template().render())
}
//-----------------------------------------------------------------------------
testcase {
	tester(`'${nil}'.template().render())
	tester(`'${-}'.template().render())
	tester(`'${3}'.template().render())
	tester(`'${"hello"}'.template().render())
	tester(`'${["first", "second", "third"]}'.template().render())
	try {
		'${color(`red)}'.template().render()
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
//-----------------------------------------------------------------------------
testcase {
	R'''
${x = 10}
${x}
hello world
  ${x = 100, -}
  ${if (x < 10)}
    A
  ${else}
    B
  ${end}
  ${for (x in 1..10)}
    ${for (y in 1..10)}XXX${end, ''}
  ${end}
hoge

${for (x in 1..10)}
    hoge ${x}
${end}

'''.template().render(sys.stdout)
}
//-----------------------------------------------------------------------------
testcase('test of inheritance') {
	// base1 template
	base1 = R'''
=== ${=block(`head)}base1-head${end} ===
<start-of-body>
${=block(`body)}
base1-body
${end}
<end-of-body>
'''.template()
	// base2 template
	base2 = R'''
${=inherit(base1)}

${=block(`head)}base2-head${end}

${=block(`body)}
${end}
'''.template()
	// base3 template
	base3 = R'''
${=inherit(base2)}

${=block(`head)}base3-head${end}

${=block(`body)}
base3-body
${end}
'''.template()
	println('inherit from base1')
	R'''
${=inherit(base1)}
'''.template().render(sys.stdout)
	println('inherit from base2')
	R'''
${=inherit(base2)}
'''.template().render(sys.stdout)
	println('inherit from base3')
	R'''
${=inherit(base3)}
'''.template().render(sys.stdout)
}
//-----------------------------------------------------------------------------
testcase('test of scope') {
	x = '${value}\n'.template()
	try {
		x.render(sys.stdout)
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	value = 'hoge'
	x.render(sys.stdout)
	scope {
		value = 'hoge-inside'
		x.render(sys.stdout)
		scope {
			value = 'hoge-inside-inside'
			x.render(sys.stdout)
		}
	}
}
//-----------------------------------------------------------------------------
testcase {
	tmpl = R'''
<h2>${title}</h2>
<p>number of people: ${people.len()}</p>

<table>
  <tr><th>No</th><th>Name</th><th>Age</th></tr>
${for (person in people) {|i|}}
  <tr><td>${i + 1}</td><td>${person.name}</td><td>${person.age}</td></tr>
${end}
</table>

<table>
  <tr><th>No</th><th>Name</th><th>Age</th></tr>
${people.each {|person, i|}}
  <tr><td>${i + 1}</td><td>${person.name}</td><td>${person.age}</td></tr>
${end}
</table>

<table>
  <tr><th>No</th><th>Name</th><th>Age</th></tr>
  ${format('<tr><td>%d</td><td>%s</td><td>%d</td></tr>\n',
  										1.., people:*name, people:*age)}
</table>
'''.template()
	scope {
		Person = struct(name:string, age:number)
		people = @(Person) {
			{'Yamada', 23}, {'Honda', 21}, {'Tanaka', 24}
		}
		title = 'Member List'
		tmpl.render(sys.stdout)
	}
}
//-----------------------------------------------------------------------------
testcase('test of comment') {
	tmpl = R'''
1st line
2nd line
3rd line
${==}
*comment-out*
*comment-out*
*comment-out*
${==}
4th line
${==}
*comment-out*
${=*comment-out*
*comment-out*
${==}
5th line
${==}
${==*comment-out*
${==}
6th line
${==}*comment-out*${==}
7th line
8th line
9th ${==}*comment-out*${==}line
10th line${==}*comment-out*${==}
11th line
'''.template().render(sys.stdout)
}

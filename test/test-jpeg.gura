#!/usr/bin/env gura
import(helper.test) {*}
import(jpeg)
import(bmp)
import(hash)

PrintIFD(ifd:jpeg.ifd, indentLevel:number => 0) = {
	ifd.each {|tag|
		printf('%s[%04x] %-32s %s\n', '  ' * indentLevel, tag.id, tag.name, tag.value:cooked):nomap
	}
}

tester_image(image:image, comment:string, hexdigestExpect:string):map:void = {
	md5 = hash.md5()
	image.write@bmp(md5)
	printf('%-20s %3dx%3d %s\n', comment, image.width, image.height,
		   md5.hexdigest in hexdigestExpect.split(';') || md5.hexdigest)
}

testcase('decode') {
	tester_image(image('test-jpeg/grayscale.jpg'), 'grayscale',
				 '070802098e5d97aa0c036b45cd65f8f4')
	tester_image(image(`rgb).read@jpeg('test-jpeg/grayscale.jpg', 100), 'grayscale shrinked',
				 'c399a55074884d6c4afd9e902bf1977a')
}
testcase('EXIF') {
	pathNames = path.glob('test-jpeg/*.jpg').sort()
	pathNames.each {|pathName, i|
		(i > 0) && println()
		printf('[%s]\n', path.filename(pathName))
		exif = jpeg.exif(pathName)
		if (!exif) {
			println("exif doesn't exist")
			continue
		}
		println('endian: ', exif.endian)
		println('= ifd0 =')
		PrintIFD(exif.ifd0)
		println('= ifd0.Exif =')
		PrintIFD(exif.ifd0.Exif)
		println('= ifd0.Exif.Interoperability =')
		try {
			PrintIFD(exif.ifd0.Exif.Interoperability)
		} catch {}
		if (exif.ifd1) {
			println('= ifd1 =')
			PrintIFD(exif.ifd1)
		}
		if (exif.thumbnail) {
			println(exif.thumbnail)
			println(exif.thumbnail@jpeg)
		}
	}
}

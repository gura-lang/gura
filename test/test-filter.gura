#!/usr/bin/env gura
import(helper.test) {*}
import(arrayt)

testcase('calculation of padding amount') {
	tester(`filter.calcpadding(13, 6, 5, `same))
	tester(`filter.calcpadding(13, 6, 5, `valid))
}
testcase('filter@conv1d') {
}
testcase('filter@conv2d') {
}
testcase('filter@conv3d') {
}
testcase('filter@maxpool1d') {
	filter@maxpool1d(4, 3, `same, `first) {|f|
		tester(`f.size)
		tester(`f.strides)
		tester(`f.padding)
		tester(`f.channel_at)
	}
	filter@maxpool1d(4, 3, `valid, `last) {|f|
		tester(`f.size)
		tester(`f.strides)
		tester(`f.padding)
		tester(`f.channel_at)
	}
	x = array@double {68, 79, 68, 92, 33, 30, 63,  2, 72, 90, 54, 52, 76, 54, 68, 52, 84, 79, 80, 24}
	tester(`(x |*| filter@maxpool1d(1, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(2, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(3, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(4, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(4, 2, `same, `first)))
	tester(`(x |*| filter@maxpool1d(4, 3, `same, `first)))
	x = array@double {
		{18,  1, 35, 28, 62, 91, 98, 10, 17,  3},
		{86, 52, 83, 23,  0, 67, 66,  5, 55, 16},
		{41, 62,  0, 61, 48, 80, 17, 61, 17, 82}
	}
	tester(`(x |*| filter@maxpool1d(1, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(2, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(2, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(3, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(4, 1, `same, `first)))
	tester(`(x |*| filter@maxpool1d(4, 2, `same, `first)))
	tester(`(x |*| filter@maxpool1d(4, 3, `same, `first)))
	x = array@double {
		{18, 86, 41},
		{ 1, 52, 62},
		{35, 83,  0},
		{28, 23, 61},
		{62,  0, 48},
		{91, 67, 80},
		{98, 66, 17},
		{10,  5, 61},
		{17, 55, 17},
		{ 3, 16, 82}
	}
	println(x.T)
	tester(`(x |*| filter@maxpool1d(1, 1, `same, `last)))
	tester(`(x |*| filter@maxpool1d(2, 1, `same, `last)))
	tester(`(x |*| filter@maxpool1d(2, 1, `same, `last)))
	tester(`(x |*| filter@maxpool1d(3, 1, `same, `last)))
	tester(`(x |*| filter@maxpool1d(4, 1, `same, `last)))
	tester(`(x |*| filter@maxpool1d(4, 2, `same, `last)))
	tester(`(x |*| filter@maxpool1d(4, 3, `same, `last)))
}
testcase('filter@maxpool2d') {
}
testcase('filter@maxpool3d') {
}
testcase('filter@relu') {
	x = (array@double.range(21) - 10) * .1
	tester(`x)
	tester(`(x |*| filter@relu.inst))
}
testcase('filter@sigmoid') {
	x = (array@double.range(21) - 10) * .1
	tester(`x)
	tester(`(x |*| filter@sigmoid.inst))
}
testcase('filter@softmax') {
	filter@softmax {|f|
		tester(`f.axis)
	}
	filter@softmax(3) {|f|
		tester(`f.axis)
	}
	tester(`(array {0.3, 2.9, 4.0} |*| filter@softmax()))
	[
		// axis=0, [*, 0, 0] and [*, 2, 3]
		array@double {1, 2, -4, -3, -4}
		array@double {0, 0, -3, 4, 3}
		// axis=1, [*, *, 0] and [*, *, 3]
		array@double {1, -2, 2}
		array@double {2, -2, 4}
		array@double {1, 1, 0}
		array@double {4, -5, 0}
		array@double {-3, -1, 2}
		array@double {0, -2, -1}
		array@double {3, -3, -3}
		array@double {3, -1, 4}
		// axis=2, [*, *, 0] and [*, *, 3]
		array@double {1, 2, 1, 4}
		array@double {-2, -2, 1, -5}
		array@double {2, 4, 0, 0}
		array@double {-3,  0,  3,  3},
		array@double {-1, -2, -3, -1},
		array@double { 2, -1, -3,  4}
	].each {|x|
		ans1 = x |*| filter@softmax()
		ans2 = math.exp(x) / math.exp(x).sum()
		println(x, ' .. ', ans1, ' ', ans2)
	}
	x = array@double {
		{
			{ 1,  2,  1,  4},
			{-2, -2,  1, -5},
			{ 2,  4,  0,  0}
		}, {
			{ 2,  0,  1,  0},
			{ 3,  2,  3, -3},
			{ 4, -2,  3,  0}
		}, {
			{-4,  3, -3,  3},
			{ 0, -1,  3,  1},
			{-2, -5, -2, -3}
		}, {
			{-3,  0,  3,  3},
			{-1, -2, -3, -1},
			{ 2, -1, -3,  4}
		}, {
			{-4, -3,  3,  1},
			{ 1,  2, -1,  4},
			{ 0, -3,  1,  3}
		}
	}
	println(x)
	tester(`(x |*| filter@softmax(0)))
	tester(`(x |*| filter@softmax(1)))
	tester(`(x |*| filter@softmax(2)))
	tester(`(x |*| filter@softmax()))
}
testcase('filter@softmax with large number') {
	x = array@double {
		{
			{ 1,  2,  1,  4},
			{-2, -2,  1, -5},
			{ 2,  4,  0,  0}
		}, {
			{ 2,  0,  1,  0},
			{ 3,  2,  3, -3},
			{ 4, -2,  3,  0}
		}, {
			{-4,  3, -3,  3},
			{ 0, -1,  3,  1},
			{-2, -5, -2, -3}
		}, {
			{-3,  0,  3,  3},
			{-1, -2, -3, -1},
			{ 2, -1, -3,  4}
		}, {
			{-4, -3,  3,  1},
			{ 1,  2, -1,  4},
			{ 0, -3,  1,  3}
		}
	} + 1000000
	println(x)
	tester(`(x |*| filter@softmax(0)))
	tester(`(x |*| filter@softmax(1)))
	tester(`(x |*| filter@softmax(2)))
	tester(`(x |*| filter@softmax()))
}
testcase('filter@tanh') {
	x = (array@double.range(21) - 10) * .1
	tester(`x)
	tester(`(x |*| filter@tanh.inst))
}

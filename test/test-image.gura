#!/usr/bin/env gura
import(bmp)
import(msico)
import(jpeg)
import(png)
import(gif)
import(xpm)
import(hash)
import(helper.test) {*}

tester_image(image:image, comment:string, hexdigestExpect:string):map:void = {
	md5 = hash.md5()
	image.write@bmp(md5)
	printf('%-20s %3dx%3d %s\n', comment, image.width, image.height,
		   md5.hexdigest in hexdigestExpect.split(';') || md5.hexdigest)
}
testcase {
	charLines = nil
	['arrow-green-u.gif', 'arrow-green-l.gif',
	 'arrow-green-d.gif', 'arrow-green-r.gif'].each {|fileName|
		img = image(I(fileName), `rgb)
		if (!charLines?) {
			charLines = dim(img.height) {''}
		}
		charLines = for (charLine in charLines, row in img.scan():*getgray().fold(img.width)):list {
			charLine + ' ' + choose(int(row / 64), '@', '*', '.', ' ').join()
		}
	}
	println(charLines)
}
testcase {
	tester_image(gif.content(I('chicken-anim.gif'), `rgba).images:*delpalette(),
													format('chicken #%d', 0..), [
		'1872079fdec22dccdc1202092a10f7d6'
		'5c82e6b72ddaf9945d79e3630f461080'
		'0c70fc6a0c89ef85b4e42bc1533dfc47'
		'd49c97df970da1c820292142d0d08d3f'
		'569b7f051a9d2fb0408cd618efb77426'
		'603940e448ba6278a3c0c7a474eea50e'
	])
}
testcase {
	img = image(I('seashore.jpg'), `rgb)
	tester_image(img.reducecolor(palette(`win256)).delpalette(), 'reducecolor',
		 '41c6034439cdb599016da021c72dc028;47d39efa2c7503108c874c8c483d6098'):nomap
	img = image(I('kangaroo.png'), `rgba)
	tester_image(img, 'normal kangaroo', '4710c4ce4b37c7de6426ed6067d9ac2d')
	tester_image(img.flip(`horz), 'flip horizontal', 'fe02358ec3635a0d6f16ed5ae44425f3')
	tester_image(img.flip(`vert), 'flip vertical', '83c7ab596abf8bae352319ee6326b9ab')
	tester_image(img.flip(`both), 'flip both', '34d45877e4ff503f92def52274e0988c')
	tester_image(img.rotate(90), 'rotate 90', 'd6c552a3eea5d0dae6e85dca99dd23c6')
	tester_image(img.rotate(-90), 'rotate -90', '1489559c319d1c3fcc6b8766b2f2751a')
	degrees = range(0, 360, 30)
	tester_image(img.rotate(degrees), format('rotate %d', degrees), [
		'4710c4ce4b37c7de6426ed6067d9ac2d'
		'8c831acf6a14041c96143b59e8d71e96'
		'fd1e49195948257786387bb3c7cec0df'
		'd6c552a3eea5d0dae6e85dca99dd23c6'
		'013deb8ce58671c0f9b13ceb654bea7b'
		'e9b381be1b4bfaa6e6a349a2e147725c'
		'34d45877e4ff503f92def52274e0988c'
		'8b134ce77644f5ade9d6310a8c04d5e0;1d698b81667b06b77bc36565d8310272',
		'ba827a85fad6591724a7741dbdcea660'
		'1489559c319d1c3fcc6b8766b2f2751a'
		'0e7f247eca23acd79238303cc19c3cac'
		'1e2611222ea534bbd21a2ab303ac7c69'
	])
}
testcase {
	img = image(\
		b'\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52' \
		b'\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff' \
		b'\x61\x00\x00\x02\xc3\x49\x44\x41\x54\x38\x8d\x75\x92\x4f\x68\x54' \
		b'\x57\x14\xc6\x7f\xf7\xe5\xbe\x37\x93\x99\x89\xa3\x4e\x44\x4d\x26' \
		b'\x31\x3a\x8b\xd2\x50\x6a\x02\x49\x83\x6d\xd3\x12\x41\x2c\x95\x8a' \
		b'\x7f\xc2\x98\x95\x05\xed\x4e\xdc\xb5\x1b\x97\x95\x0a\xee\x5c\xb9' \
		b'\xd4\x8d\x56\x8d\x06\x8a\xd3\x45\x57\x52\x52\x69\x6d\xc7\xa2\x09' \
		b'\x2a\x51\x82\xc6\x7f\x99\x60\x62\xfe\xcc\x64\x32\xf3\xee\xbb\xf7' \
		b'\xdd\x2e\x42\x86\xa8\xf5\x83\x03\xe7\x70\xee\xf7\xf1\x9d\x8f\x2b' \
		b'\xac\xb5\xac\x86\x31\x78\x77\xee\xd8\xef\x46\x47\xc3\xa3\xbe\x6f' \
		b'\xd7\x82\x20\x1e\x17\x85\xf6\x76\x71\xb1\xa3\x43\x9c\x97\x92\xea' \
		b'\xea\xf7\x62\xb5\xc0\x8b\x17\x76\x47\x2e\xa7\x7f\x1e\x8e\xfe\x94' \
		b'\x6e\xab\x6f\x91\x9d\xce\x6e\x94\x92\x54\xab\x2e\xa5\x52\xdc\x17' \
		b'\x22\x32\x9d\xcd\x8a\x83\x4d\x4d\xfc\xb3\xc2\x71\x56\x9a\xe7\xcf' \
		b'\xe9\x3d\x97\x1b\xbb\x7e\x25\x71\xb0\xed\x9a\x3e\x25\x87\xfd\x5f' \
		b'\x28\x9b\x25\x8c\x71\xb0\x56\xe0\xba\x2a\x62\x4c\x35\x7d\xf9\xb2' \
		b'\xbd\xfe\xf2\x25\x3d\x35\x81\x52\x89\xe6\x5b\xb7\xec\xf7\xb9\x5c' \
		b'\x70\x21\xd2\x74\xbb\xf1\x76\xf5\x77\xb4\x0d\xf8\xd3\xff\x95\x93' \
		b'\xe5\x2c\xc6\x38\x68\xed\x60\x8c\x43\x18\x0a\x2a\x15\xb3\xf1\xea' \
		b'\x55\xae\x68\x4d\x14\xc0\x09\x02\x9b\x78\xfa\x54\x7f\x55\x29\x9b' \
		b'\x54\x63\x61\x97\x3d\x1c\xfd\x11\x80\xa3\xd1\xd3\xec\xab\xfb\x01' \
		b'\x63\x9c\x77\x6a\xb1\x14\x6e\x1a\x19\xe1\xdb\x37\x32\xf8\xe3\xd8' \
		b'\xf1\x89\x35\xcd\x9f\x6f\xc9\xd7\xb5\xf2\xaf\x53\xa0\xdd\xf9\x02' \
		b'\x19\x73\x01\x8b\x52\xb2\x56\x5a\x4b\x00\x5a\x5a\xf8\xeb\xc8\x11' \
		b'\x3e\x95\x00\xc5\x89\x89\x8f\xb7\xf4\x7e\x96\x6a\xfa\xa4\x9b\xcc' \
		b'\xd8\x18\x5f\xe7\xef\xf1\xaa\x6e\x9e\x57\xf1\x2e\x1e\xcd\x35\xa3' \
		b'\x03\x83\x96\x1e\xc6\xd4\x22\xa3\x38\xaf\xd3\x20\x91\x00\xfe\xec' \
		b'\x6c\x6f\xeb\xa1\x43\x89\xbe\x9d\x3b\x01\x18\xcc\x66\xf9\x68\x60' \
		b'\x3f\x37\xf2\x79\xb6\x15\x1f\xb1\xf6\xef\xc7\x3c\x66\x3b\x85\x48' \
		b'\x07\x5a\x44\x50\x75\x0d\x28\xdf\x26\x2b\x15\x52\x12\x40\x2d\x2c' \
		b'\x6c\x02\xb0\xd6\x22\x84\x40\xae\x5f\x8f\x5c\xb7\x8e\xfe\xfe\x7e' \
		b'\x84\x10\xe4\x4f\x9c\xc0\x1b\xbf\x46\x26\xb8\x44\xd1\x26\x29\xc4' \
		b'\x7b\x74\x29\xb3\x7f\xfe\xe1\x43\xf7\x1b\x09\xe0\x0e\x0e\x76\xe9' \
		b'\xe1\x61\x6e\x9c\x39\xc3\xd2\xe4\x24\x8b\x77\xef\xa2\x5f\xbf\x66' \
		b'\x68\x68\x08\xbd\xb0\x80\x7f\xf3\x66\xcd\x7a\x34\x98\xa6\x65\xf1' \
		b'\xb7\xb9\xee\x03\x3b\xf6\x36\xb4\x6d\xbd\x27\xac\xb5\xa8\xce\xce' \
		b'\x79\x2f\x9d\x4e\x86\xcf\x9e\x31\x37\x30\x80\x52\x0a\x1d\x86\xd8' \
		b'\x64\x92\xa5\xc9\x49\xfc\x4a\x85\x40\x29\x82\x20\x58\xde\x79\xde' \
		b'\xd4\x97\x67\xcf\x7e\x20\x63\xb1\xa2\x03\x50\xa9\x56\x3d\x3b\x33' \
		b'\x83\x75\x96\x43\x5a\x2a\x97\xb1\x5a\xa3\xa6\xa6\xb0\x5a\xf3\x36' \
		b'\x84\x10\x5a\xc6\x62\x45\x60\x39\xc4\xf1\x3d\x7b\xee\x3b\x0f\x1e' \
		b'\x74\xd5\x67\x32\x2c\x3e\x79\x82\x03\x34\x6e\xd8\xf0\x0e\xb1\xf6' \
		b'\xfb\x5c\xd7\x5f\xe9\x25\x80\x06\xef\xc3\xbe\x3e\x66\x66\x67\x49' \
		b'\x25\x12\x44\xa3\x51\x02\xa5\xfe\x97\x6c\xad\xc5\x4d\x26\xa7\xdf' \
		b'\x10\x30\x41\x50\xef\x7a\x1e\x8d\xa9\x54\xed\xce\xf7\x21\xb4\x96' \
		b'\xf8\xe6\xcd\xe3\x35\x37\x00\x22\x0c\xe5\x7b\x19\x6f\x3b\x08\x43' \
		b'\x1a\x5a\x5b\xef\xaf\xcc\xff\x01\xdd\xd6\x51\x0f\x51\x11\xe8\xba' \
		b'\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82' \
	)
	md5 = hash.md5()
	img.write@bmp(md5.init())
	println('image written in script binary: ', md5.hexdigest == 'd8e123ea43ac83a77e489f9da0256951' || md5.hexdigest)
}
testcase {
	md5 = hash.md5()
	image(I('chicken256.bmp'), `rgb).delpalette().write@bmp(md5.init())
	println('chicken256.bmp to BMP: ', md5.hexdigest == '3224bf2c42fdb023ff99e30ba5b08544' || md5.hexdigest)
	image(I('chicken16.bmp'), `rgb).delpalette().write@bmp(md5.init())
	println('chicken16.bmp to BMP: ', md5.hexdigest == '8712312fbe16655082a66fced12c525a' || md5.hexdigest)
	image(I('seashore.jpg'), `rgb).write@bmp(md5.init())
	println('seashore.jpg to BMP: ',
			md5.hexdigest in ['acc0d75162f7df885b55142c45443af5', '0dfd13b6089ba7de71190ffba78c23e4'] || md5.hexdigest)
	image(I('kangaroo.png'), `rgb).write@bmp(md5.init())
	println('kangaroo.png to BMP: ', md5.hexdigest == '2ec680a08f0303d449d0888158aeb529' || md5.hexdigest)
	image(I('kangaroo.gif'), `rgb).delpalette().write@bmp(md5.init())
	println('kangaroo.gif to BMP: ', md5.hexdigest == 'bf9664470d42a077fdca8afce5394f76' || md5.hexdigest)
	image(I('kangaroo.png'), `rgb).write@gif(md5.init())
	println('kangaroo.png to GIF: ', md5.hexdigest == '9a78d811875c996748f1b317c2bf8e97' || md5.hexdigest)
	image(I('kangaroo.png'), `rgba).write@gif(md5.init())
	println('kangaroo.png to GIF (alpha): ', md5.hexdigest == '66d0bf310167e78ba4162ba64c8166ec' || md5.hexdigest)
	img:image = I('kangaroo.png'), img.write@gif(md5.init())
	println('kangaroo.png to GIF (cast): ', md5.hexdigest == '66d0bf310167e78ba4162ba64c8166ec' || md5.hexdigest)
	image(I('seashore.jpg'), `rgb).jpegwrite(md5.init())
	println('seashore.jpg to JPEG: ',
			md5.hexdigest in ['9111b04ed5fc4dc03ff6c98e99fdda9c', 'c31c720589e8dd6daf05378da8de186e'] || md5.hexdigest)
	image(I('seashore.jpg'), `rgb).pngwrite(md5.init())
	println('seashore.jpg to PNG: ',
			md5.hexdigest in ['a87795bc780d23e88053f065d51fc684', '4c18a8fa71b3a0bf2e00aa85410b1cd2'] || md5.hexdigest)
	try {
		image(I('seashore.jpg'), `rgb, 'png')
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	try {
		image(I('kangaroo.png'), `rgb, 'jpeg')
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	try {
		image(I('kangaroo.png'), `rgb, 'gif')
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
	try {
		image(I('kangaroo.png'), `rgb, 'bmp')
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase('test of scan') {
	char_xpm = @{
	"13 13 2 2 0 0",
	"   c #000000",
	"#  c #ffffff",
	"          #               ",
	"          #               ",
	"  # # # # # # # # # #     ",
	"          #               ",
	"          #     #         ",
	"        # # # # # #       ",
	"      #   #     #   #     ",
	"    #     #   #       #   ",
	"  #       #   #       #   ",
	"  #       #   #       #   ",
	"  #       # #         #   ",
	"    # # #           #     ",
	"                # #       ",
	}
	img = image(`rgb).xpmdata(char_xpm)
	doScan(scandirs[]) = {
		lines = dim(img.height) {''}
		scandirs.each {|scandir|
			lines += img.scan(scandir => scandir):*getgray().fold(img.width):list {|row|
				choose(int(row / 64), ' ', '*', '.', '@').join()
			}
		}
		println(lines)
	}
	doScan([`left_top_horz, `right_top_vert, `right_bottom_horz, `left_bottom_vert])
	doScan([`left_top_vert, `right_top_horz, `right_bottom_vert, `left_bottom_horz])
}
testcase {
	map = interval(128, 160, 256)
	img = image(I('seashore.jpg'), `rgb)
	tester_image(img.mapcolorlevel(map), 'mapcolorlevel',
		 '22a381f713261948d4130b870d1339ef;3c2a51535ccf96c983e285c55835913f'):nomap
	tester_image(img.mapcolorlevel(map, map), 'mapcolorlevel',
		 '22a381f713261948d4130b870d1339ef;3c2a51535ccf96c983e285c55835913f'):nomap
	tester_image(img.mapcolorlevel(map, map, map), 'mapcolorlevel',
		 '22a381f713261948d4130b870d1339ef;3c2a51535ccf96c983e285c55835913f'):nomap
}
testcase('image#resize') {
	img = image(I('seashore.jpg'), `rgb)
	tester_image(img.resize(100), 'resize - smaller',
		 '58181fc0e45ce0732edf561fc2791ac9;ebcfefa6a7e4487d14e529e7c1fb66e7'):nomap
	img = image(I('chicken-anim.gif'), `rgb)
	tester_image(img, 'resize - original',
		'f9b52fb52a4133c74d831a724e9d5810'):nomap
	tester_image(img.resize(img.width, img.height), 'resize - same',
		'f9b52fb52a4133c74d831a724e9d5810'):nomap
	tester_image(img.resize(500), 'resize - larger',
		'cec7e321ced90540096172df0f9eb25f'):nomap
	img = image(I('chicken-anim.gif'), `rgba)
	tester_image(img, 'resize - original',
		'bdd6fbb4f3eaff784351e13d35a9e944'):nomap
	tester_image(img.resize(img.width, img.height), 'resize - same',
		'bdd6fbb4f3eaff784351e13d35a9e944'):nomap
	tester_image(img.resize(500), 'resize - larger',
		'bb8ddfaf65c61218a36f35cdc8733c41'):nomap
}

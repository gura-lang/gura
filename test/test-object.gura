#!/usr/bin/env gura
import(helper.test) {*}

testcase {
	A = class {
		var = 100
		__init__() = {
			println(var)
		}
	}
	a = A()
}
testcase {
	T = struct(a, b, c) {
		Print(t:T):static = {
			printf('%d, %d, %d\n', t.a, t.b, t.c)
		}
		store(t:T) = {
			[this.a, this.b, this.c] = [t.a, t.b, t.c]
		}
	}
	println(T)
	t = T(7, 5, 3)
	T.Print(t)
	t1 = T(0, 0, 0)
	T.Print(t1)
	t1.store(t)
	T.Print(t1)
	try {
		T1 = struct(a, b, c) {
			__init__(xx) = {}
		}
	} catch {|e|
		println('expected error: ', e.text)
	}
}
testcase {
	M = module {
		varPrivate = 3
		public {
			varPublic = 4
		}
		varPublic2:public = 5
	}
	try {
		println(M.varPrivate)
	} catch {|e|
		println('expected error: ', e.text)
	}
	println('varPublic = ', M.varPublic)
	println('varPublic2 = ', M.varPublic2)
	A = class {
		public {
			namePublic
			varPublic = 100
		}
		varPrivate = 200
		__init__() = {
			this.namePublic = 'hoge'
			this.namePrivate = 'hoge2'
			this.namePublic2:public = 'hoge3'
		}
		funcPublic() = {
			this.funcPrivate()
		}
		funcPrivate():private = {
			println('funcPrivate: ', this.namePrivate)
		}
	}
	funcOut(a:A) = {
		println(a.namePrivate)
	}
	funcOutPrivileged(a:A:privileged) = {
		println(a.namePrivate)
	}
	a = A()
	try {
		funcOut(a)
	} catch {|e|
		println('expected error: ', e.text)
	}
	funcOutPrivileged(a)
	println('a.namePublic  = ', a.namePublic)
	println('a.varPublic   = ', a.varPublic)
	println('a.namePublic2 = ', a.namePublic2)
	try {
		println(a.namePrivate)
	} catch {|e|
		println('expected error: ', e.text)
	}
	try {
		println(a.varPrivate)
	} catch {|e|
		println('expected error: ', e.text)
	}
	a.funcPublic()
	try {
		a.funcPrivate()
	} catch {|e|
		println('expected error: ', e.text)
	}
}
testcase {
	A = struct(x, y, z)
	f(a1:A, a2:A) = {
		println(a1.x, ' ', a1.y, ' ', a1.z)
		println(a2.x, ' ', a2.y, ' ', a2.z)
	}
	f([1, 2, 3], [4, 5, 6])
}
testcase {
	point_t = struct(x:number, y:number)
	knots_t = struct(a:point_t, b:point_t, c:point_t, d:point_t)
	knots = @(knots_t) {
	    { {0, 0}, {0, 100}, {100, 100}, {100, 0} },
	    { {0, 0}, {75, 100}, {25, 100}, {100, 0} },
	    { {0, 0}, {100, 100}, {0, 100}, {100, 0} },
	    { {0, 0}, {150, 100}, {-50, 100}, {100, 0} },
	    { {0, 0}, {100, 200}, {0, -100}, {100, 100} },
	};
	println(knots)
}
testcase {
	A = class {
		str = 'class variable'
		test1() = {
			println(str)
		}
		test2() = {
			str = 'local variable'
			println(str)
		}
		modify_1() = {
			str:extern = 'modified class variable'
		}
		modify_2() = {
			this.str = 'again, modified class variable'
		}
		modify_3() = {
			str += ': added'
		}
	}
	A().test1()
	A().test2()
	A().modify_1()
	A().test1()
	A().test2()
	A().modify_2()
	A().test1()
	A().test2()
	A().modify_3()
	A().test1()
	A().test2()
}
testcase {
	A = class {
		f():static = println('A.f()')
		g() = println('A#g()')
	}
	a = A()
	a.f()
	a.g()
	A.f()
	try {
		A.g()
	} catch (error.ValueError) {
		println('expected error occurs')
	}
}
testcase {
	A = class {
		public {
			x = 'X in A'
		}
		func() = {
			println('A.func()')
		}
	}
	B = class(A) {
		public {
			x = 'X in B'
		}
		func() = {
			println('B.func()')
			super(this).func()
		}
	}
	C = class(B) {
		public {
			x = 'X in C'
		}
		func() = {
			println('C.func()')
			super(this).func()
		}
	}
	D = class(C) {
		public {
			x = 'X in D'
		}
		func() = {
			println('D.func()')
			super(this).func()
		}
	}
	A().func()
	println('----')
	B().func()
	println('----')
	C().func()
	println('----')
	D().func()
	println('----')
	d = D()
	d.func()
	println(d.x)
	println('----')
	super(d).func()
	println(super(d).x)
	println('----')
	super(super(d)).func()
	println(super(super(d)).x)
	println('----')
	super(super(super(d))).func()
	println(super(super(super(d))).x)
}
testcase {
	Person = class {
		public {
			name, age
		}
		__init__(name:string => '(no name)', age:number => 0) = {
			[this.name, this.age] = [name, age]
		}
		assign(person:Person) = {
			[this.name, this.age] = [person.name, person.age]
		}
		HasSameName(person:Person) = (this.name == person.name)
		IsAtSameAge(person:Person) = (this.age == person.age)
		Print():void = printf('%-10s is %d years old.\n', this.name, this.age)
	}
	people = Person * [
		['Inari', 23], ['Maruyama', 27], ['Akai', 23], ['Maruyama', 32]
	]
	people::Print()
	person = Person()
	person.Print()
	person.assign(people[2])
	person.Print()
	cross (person1 in people, person2 in people) {|i, i1, i2|
		(i1 == i2) && continue
		printf('%-10s:%2d %-10s:%2d .. %-5s:%-5s\n',
				person1.name, person1.age, person2.name, person2.age,
				person1.HasSameName(person2), person1.IsAtSameAge(person2))
	}
}
testcase {
	A = class {
		__init__(x, y, z) = {
			println(x, ' ', y, ' ', z)
		}
	}
	B = class(A) {
		__init__() = {|(1 | 2 | 4 | 8 | 16), (1 | 2 | 4), (1 | 2 | 4 | 8)|
		}
	}
	B()
}
testcase {
	A = class {
		__init__() = {
			this.prop = 'property'
		}
		__getprop__(symbol:symbol):closure = {
			function(args*) {
				symbol.tostring() + ' OK (' + args.join(',') + ') ' + this.prop
			}
		}
		func1(args*) = 'func1 OK (' + args.join(',') + ') ' + this.prop
		func2(args*) = 'func2 OK (' + args.join(',') + ') ' + this.prop
	}
	a = A()
	tester(`a.__call__(`dynamic1, 1, 2, 3, 4))
	tester(`a.__call__(`dynamic2, 1, 2, 3, 4))
	tester(`a.__call__(`func1, 1, 2, 3, 4))
	tester(`a.__call__(`func2, 1, 2, 3, 4))
	/*
	tester(`a.getprop!(`dynamic1)(1, 2, 3, 4))
	tester(`a.getprop!(`dynamic2)(1, 2, 3, 4))
	tester(`a.getprop!(`func1)(1, 2, 3, 4))
	tester(`a.getprop!(`func2)(1, 2, 3, 4))
	*/
}
testcase {
	A = class {
		__getitem__(index:string) = {
			'indexed at ' + index
		}
		__setitem__(index:string, value) = {
			println(index, ' = ', value)
		}
	}
	a = A()
	tester(`a['hello'])
	tester(`a['hoge'])
	tester(`a[[1, 2]])
	a['foo'] = 'aaaaa'
	a['bar'] = 'bbbbb'
	a['aaa', 'bbb'] = 3
}
testcase {
	classref(`string) {|ref|
		ref.len2() = this.len() * 2
		ref.len3() = this.len() * 3
	}
	tester(`'hello world'.len())
	tester(`'hello world'.len2())
	tester(`'hello world'.len3())
}
testcase {
	A = class {
		inst = nil
		__init__(name:string) = {
			this.name = name
		}
		getInst():static = {
			this.inst = this.inst || A('hoge')
			this.inst
		}
		print() = println(this.name)
	}
	a = A.getInst()
	a.print()
	a.name = 'mod-hoge'
	b = A.getInst()
	b.print()
}
testcase {
	A = class {
		__setprop__(symbol:symbol, value) = {
			printf('__setprop__: %s = %s\n', symbol, value)
			true
		}
		__getprop__(symbol:symbol) = {
			'symbol-' + symbol.tostring()
		}
	}
	a = A()
	a.hoge = 2
	a.foo = 'hello world'
	println(a.hoge)
	println(a.foo)
}
testcase {
	A = class {
		__getprop__(symbol:symbol):closure = {
			function { println('symbol-' + symbol.tostring()) }
		}
	}
	a = A()
	a.func_hoge()
	a.func_foo()
}
testcase {
	A = class {
		func1(n:number) = {
			if (n == 0) {
				printf('%d is zero\n', n)
			} else {
				printf('%d is not zero\n', n)
			}
		}
		func2(n:number):static = {
			if (n == 0) {
				printf('%d is zero\n', n)
			} else {
				printf('%d is not zero\n', n)
			}
		}
	}
	a = A()
	a.func1(0)
	a.func1(2)
	A.func2(0)
	A.func2(2)
}
testcase {
	obj = object()
	syms = tosymbol(format('attr%02d', 0..99))
	for (sym in syms) {|i| obj.setprop!(sym, i) }
	println((syms::tostring() + '=' + obj.getprop!(syms)).join(','))
}
testcase {
	Person = struct(name:string, workplace:string)
	Teacher = class(Person) {
		__init__(name:string) = {|name, 'school'|}
	}
	Businessman = class(Person) {
		__init__(name:string) = {|name, 'office'|}
	}
	Lawyer = class(Person) {
		__init__(name:string) = {|name, 'court'|}
	}
	people = [ Teacher('Yamada'), Businessman('Honda'), Lawyer('Kimura') ]
	println(people::tolist()::join(' works at '))
}
testcase {
	Person1 = class {
		__init__(name:string, age:number) = {
			this.name = name, this.age = age
		}
		__str__() = format('name: %s, age:%s', this.name, this.age)
	}
	p1 = Person1('yamada', 30)
	printf('%s %s\n', typename(p1), p1)
	Person2 = struct(name:string, age:number) {
		__str__() = format('name: %s, age:%s', this.name, this.age)
	}
	p2 = Person2('yamada', 30)
	printf('%s %s\n', typename(p2), p2)
}
testcase {
	B = class {
		cntAll = 0
		__init__() = {
			this.n = cntAll
			cntAll += 1
		}
		print() = printf('%d\n', this.n)
	}
	B().print()
	B().print()
	B().print()
	B().print()
	B().print()
	B().print()
	B().print()
}
testcase {
	Person = class {
		__init__(name:string) = {
			this.name = name
		}
		introduce() = format('my name is %s', this.name)
		work() = 'do what?'
	}
	Student = class(Person) {
		__init__(name:string) = {|name|}
		work() = 'study'
	}
	Worker = class(Person) {
		__init__(name:string, workplace:string) = {|name|
			this.workplace = workplace
		}
		work() = format('work at %s', this.workplace)
	}
	Teacher = class(Worker) {
		__init__(name:string) = {|name, 'school'|}
	}
	Businessman = class(Worker) {
		__init__(name:string) = {|name, 'office'|}
	}
	f(p:Person):map = p.introduce()
	people = [
		Person('Hayasaka Hiroko')
		Student('Kikuchi Takao')
		Teacher('Nagao Erika')
		Businessman('Kikuchi Shigeo')
	]
	tester(`f(people))
	tester(`isinstance(people, `number))
	tester(`isinstance(people, `string))
	tester(`isinstance(people, `object))
	tester(`isinstance(people, `Person))
	tester(`isinstance(people, `Student))
	tester(`isinstance(people, `Worker))
	tester(`isinstance(people, `Businessman))
	tester(`isinstance(people, `Teacher))
	tester(`people::work())
}
testcase {
	Person = class {
		__init__(job, name, age) = {
			this.job = job, this.name = name, this.age = age
		}
		Print() = printf('job:%s, name:%s, age:%d\n', this.job, this.name, this.age)
	}
	Student = class(Person) {
		__init__(name, age) = {|'student', name, age|
		}
	}
	Teacher = class(Person) {
		__init__(name, age) = {|'teacher', name, age|
		}
	}
	list = [
		Student('Hayasaka Hiroko',	14)
		Teacher('Hannda Yumiko',	40)
		Student('Honma Chise',		13)
		Student('Kikuchi Takao',	15)
		Teacher('Aoi Tatsuya',		30)
	]
	list::Print()
}
testcase {
	A = class {
		nn = 0
		__init__() = {
			this.n = this.nn, this.nn += 1
			printf('+created %d\n', this.n)
		}
		__del__() = {
			printf('-deleted %d\n', this.n)
		}
		Print() = {
			printf(' print   %d\n', this.n)
		}
	}
	scope {
		scope {
			a = A()
			a.Print()
			a = A()
			a.Print()
			A().Print()
			printf('----\n')
		}
		scope {
			a = A()
			a.Print()
			a = A()
			a.Print()
			A().Print()
			printf('----\n')
		}
		printf('done\n')
	}
	repeat(3) {
		a = A()
	}
	printf('----\n')
}
testcase {
	Person = class {
		public {
			name, age
		}
		__init__(name:string, age:number) = {
			this.name = name
			this.age = age
		}
		Print() = {
			print(this.name, ' is ', this.age, ' years old.\n')
		}
	}
	people = @(Person) {
		['hoge',	15]		# comma at each end of line can be omitted
		['aaaa',	18]
		['saito',	19]
		['tanaka',	20]
		['sato',	17]
	}
	println('before sort')
	people::Print()
	println('sort by name')
	people.sort(&{$person1.name <=> $person2.name})::Print()
	println('sort by age')
	people.sort(&{$person1.age <=> $person2.age})::Print()
}
testcase {
	Object = class {
		public {a, b}
	}
	obj = Object()
	obj.a = 10
	obj.b = 20
	obj.func1(x) = math.sin(x)
	obj.func2(x) = math.sqrt(x)
	obj.func3() = math.sqrt(this.a)
	print('obj.a + obj.b = ', obj.a + obj.b, '\n')
	println(obj.func1(3))
	println(obj.func2(2))
	println(obj.func3())
	println('--------')
}
testcase {
	Person = class {
		public {
			name = 'aaa'
			age = 10
		}
		__str__() = format('name: %s, age:%s', this.name, this.age)
		Print() = {
			print(this.name, ' is ', this.age, ' years old', '  pi=', math.pi, '\n')
		}
	}
	a = Person()
	println(a)
	print('a.name = ', a.name, '\n')
	print('a.age = ', a.age, '\n')
	a.Print()
	a.name = 'bbbb'
	a.Print()
	println('--------')
}
testcase {
	Person = class {
		__init__(name) = {
			print('Person constructor\n')
			this.name = name
			this.cnt = 0
		}
		__del__() = {
			print('Person destructor\n')
		}
		func(n) = {
			print('Person#func() cnt = ', this.cnt, '\n')
			this.cnt = this.cnt + n
		}
		Print() = {
			print('My name is ', this.name, '\n')
		}
	}
	p = Person('Yutaka')
	p.Print()
	repeat (10) {
		p.func(1)
	}
	#p.Print('hoge')
}
testcase {
	[A, B, C] = [class(), class(), class()]
	println(A())
	println(B())
	println(C())
}
testcase {
	Axis = class {
		__init__(title) = {
			this.title = title
			this.axis_step = 1
			this.guide_step = 10
			this.min = 0
			this.max = 100
			this.samples = 10
		}
		Print() = {
			print(
				'axis.title=',		this.title,
				', axis_step=',		this.axis_step,
				', guide_step=',	this.guide_step,
				', min=',			this.min,
				', max=',			this.max,
				', samples=',		this.samples, '\n')
			println([interval(this.min, this.max, this.samples)].tostring())
		}
	}
	Graph = class {
		__init__(title) = {
			this.title = title
			this.x = Axis('x-title')
			this.y = Axis('y-title')
			this.z = Axis('z-title')
		}
		Print() = {
			print('title=', this.title, '\n')
			this.x.Print()
			this.y.Print()
			this.z.Print()
		}
	}
	g = Graph('hogehoge')
	g.Print()
	println('--------')
}
testcase {
	Graph = class {
		Axis = class {
			__init__(title) = {
				this.title = title
				this.axis_step = 1
				this.guide_step = 10
				this.min = 0
				this.max = 100
				this.samples = 10
			}
			Print() = {
				print(
					'axis.title=',		this.title,
					', axis_step=',		this.axis_step,
					', guide_step=',	this.guide_step,
					', min=',			this.min,
					', max=',			this.max,
					', samples=',		this.samples, '\n')
				println([interval(this.min, this.max, this.samples)].tostring())
			}
		}
		__init__(title) = {
			this.title = title
			this.x = Graph.Axis('x-title')
			this.y = Graph.Axis('y-title')
			this.z = Graph.Axis('z-title')
		}
		Print() = {
			print('title=', this.title, '\n')
			this.x.Print()
			this.y.Print()
			this.z.Print()
		}
	}
	g = Graph('hogehoge')
	g.Print()
	println('--------')
}
testcase {
	A = class {
		func(x) = { print('A.func(', x, ')\n') }
	}
	a = A()
	for (x in range(1, 5)) {
		a.func(x)
	}
	println('--------')
}
function {
	ListEx = class(List) {
		__init__() = {
			repeat(3) { this.add('init') }
		}
		__del__() = {
			println('destroyed')
		}
	}
	a = ListEx()
	repeat(5) { a.add('1', '2', '3') }
	println(a)
}
testcase {
	A = class {
		public {
			hoge
		}
		val1 = 1
		val2 = 'hello'
		func1():static = { println(this.val1) }
		func2() = { println(this.val2) }
	}
	A.func1()
	A().func2()
	A.hoge = 1
	print(`A.hoge, ' = ', A.hoge, '\n')
	A.hoge += 1
	print(`A.hoge, ' = ', A.hoge, '\n')
	try {
		A.func2()
	} catch (error.ValueError) {
		println('expected error occurs')
	}
}
testcase {
	A = class {
		__init__() = {
			this.num = 0
			this.str = ''
		}
		__cast__(value) = {
			rtn = A()
			if (isnumber(value)) {
				rtn.num:public = value
			} elsif (isstring(value)) {
				rtn.str:public = value
			} else {
				raise(error.TypeError, 'number or string must be specified')
			}
			rtn
		}
		__format_d__(fmt:formatter) = this.num.tostring()
		__format_s__(fmt:formatter) = this.str
	}
	// It would occur a fatal error when you destruct an object created from
	// a class that is declared in a local scope (Aug.31, 2014).
	a:A = 'hoge'
	printf('%d "%s"\n', a, a)
	a:A = 3
	printf('%d "%s"\n', a, a)
	try {
		a:A = `x
	} catch {|e| println('expected error: ', e.text) }
}
testcase('forward-declaration of class') {
	A = class()
	f(a:A) = {}
	A = class()
	f(a:A) = {}
	a = A()
	errorFlag = false
	try {
		f(a)	// error wouldn't happen
	} catch {
		errorFlag = true
	}
	println(cond(errorFlag, '***NG***', 'OK'))
}
testcase('struct declaration with arguments that has default value') {
	A = struct(name:string => 'Taro', age:number => 23)
	a = A()
	printf('%s: %d\n', a.name, a.age)
	a = A('Jiro')
	printf('%s: %d\n', a.name, a.age)
	a = A(name => 'Jiro')
	printf('%s: %d\n', a.name, a.age)
	a = A(age => 25)
	printf('%s: %d\n', a.name, a.age)
	a = A('Takeshi', 21)
	printf('%s: %d\n', a.name, a.age)
}
testcase('object#__call__()') {
	tester(`'hello'.__call__(`len))
	[1..10].__call__(`each) {|x| println(x)}
}
testcase('struct with implicit-mapping') {
	Card = struct(suit:symbol, rank:number):map
	cards = Card(`spade, 1..13)
	println(cards::suit, ' ', cards::rank)
}

println('<<end of script>>')

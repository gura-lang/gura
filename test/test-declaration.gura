#!/usr/bin/env gura
import(helper.test)
import(arrayt)

listSymbols(skipWords:list, indent:number => 0, m?:module) = {
	skipWordsMap = %{
		'sys' => ['stdin', 'stdout', 'stderr', 'path', 'argv',
				'executable', 'build', 'platform', 'banner', "timestamp",
				'datadir', 'libdir', 'localdir', 'maindir', 'moddir', 'incdir',
				'appdir', 'cfgdir', 'workdir', 'fontdir', 'langcode', 'version']
		'path' => ['sep_file']
		'os' => ['stdin', 'stdout', 'stderr']
	}
	skipWordsDef = ['__source__'].nomap()
	for (word in tostring(dir(m))) {
		if (word in skipWords) { continue }
		value = locals(m).lookup(tosymbol(word))
		printf('%*s', indent * 2, '')
		if (isfunction(value)) {
			printf('%s\n', value)
		} elsif (islist(value)) {
			printf('%s = [%s]\n', word, value.join(','))
		} elsif (ismodule(value)) {
			printf('%s:%s\n', word, typename(value))
		} else {
			printf('%s:%s = %s\n', word, typename(value), value)
		}
		if (ismodule(value)) {
			listSymbols(skipWordsMap.get(word, skipWordsDef), indent + 1, value)
		}
	}
}
listSymbols(['break', 'return', 'continue', 'listSymbols', 'helper', '*', 'argopt'])
scope {
	indent = 0
	dirtype().each {|symbol|
		(symbol in [`Sequence, `class, `module, `environment, `error]) && continue
		printf('%*s%s\n', indent * 2, '', symbol)
		c = classref(symbol)
		for (word in tostring(dir(c):noesc)) {
			try {
				value = c.getprop!(tosymbol(word))
			} catch {
				// nothing to do
			} else {
				printf('  %*s', indent * 2, '')
				if (isfunction(value)) {
					printf('%s\n', value)
				} elsif (islist(value)) {
					printf('%s = [%s]\n', word, value.join(','))
				} elsif (ismodule(value)) {
					printf('%s:%s\n', word, typename(value))
				} else {
					printf('%s:%s = %s\n', word, typename(value), value)
				}
			}
		}
	}
}

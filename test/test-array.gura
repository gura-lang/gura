#!/usr/bin/env gura
import(helper.test) {*}

funcs = [
	array@char
	array@uchar
	array@short
	array@ushort
	array@int32
	array@uint32
	array@int64
	array@uint64
	array@float
	array@double
]

PrintArray(fmt:string, array) = println(format(fmt, array.each()).join(' '))

/*
testcase {
	f(m:memory) = {
		println(m)
	}
	f(array@char([1..100]))
}
sys.exit()
*/
testcase('construct') {
	funcs.each {|func|
		println(func)
		x = func(30)
		println(x[0..29].join(' '))
		x = func(30, 12)
		println(x[0..29].join(' '))
		x = func([0..29])
		println(x[0..29].join(' '))
		println(x.each().join(' '))
		x.each {|n| printf('%d ', n)}, println()
	}
}
testcase('cast to list') {
	funcs.each {|func|
		println(func)
		x:list = func([0..29])
		println(x.join(' '))
	}
}
testcase('cast from list') {
	x:array@char = [0..29]
	PrintArray('%2d', x)
	x:array@uchar = [0..29]
	PrintArray('%2d', x)
	x:array@short = [0..29]
	PrintArray('%2d', x)
	x:array@ushort = [0..29]
	PrintArray('%2d', x)
	x:array@int32 = [0..29]
	PrintArray('%2d', x)
	x:array@uint32 = [0..29]
	PrintArray('%2d', x)
	x:array@float = [0..29]
	PrintArray('%2d', x)
	x:array@double = [0..29]
	PrintArray('%2d', x)
}
testcase('head/tail') {
	funcs.each {|func|
		println(func)
		x = func([0..29])
		PrintArray('%2d', x)
		PrintArray('%2d', x.head(12))
		PrintArray('%2d', x.tail(12))
		PrintArray('%2d', x.head(30))
		PrintArray('%2d', x.tail(30))
		try {
			PrintArray('%2d', x.head(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		try {
			PrintArray('%2d', x.tail(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
	}
}
testcase('offset') {
	funcs.each {|func|
		println(func)
		x = func([0..29])
		PrintArray('%2d', x)
		PrintArray('%2d', x.offset(3))
		PrintArray('%2d', x.offset(27))
		PrintArray('%2d', x.offset(29))
		PrintArray('%2d', x.offset(30))
		try {
			PrintArray('%2d', x.offset(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
	}
}
testcase('paste') {
	funcs.each {|func|
		println(func)
		x = func([0..29])
		y = func([90..99])
		PrintArray('%2d', x)
		x.paste(0, y)
		PrintArray('%2d', x)
		x.paste(20, y)
		PrintArray('%2d', x)
		try {
			x.paste(21, y)
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		x.paste(12, y.offset(3))
		PrintArray('%2d', x)
	}	
}
testcase('initializer') {
	funcs = [
		@char
		@uchar
		@short
		@ushort
		@int32
		@uint32
		@int64
		@uint64
		@float
		@double
	]
	funcs.each {|func|
		x = func {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
			16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
		}
		print(func.name, ':')
		PrintArray('%2d', x)
	}
}

testcase('operator') {
	funcs.each {|func|
		println(func)
		a = func([2..11])
		b = func([1..10])
		a_short = func([2..4])
		b_short = func([1..3])
		print('+a = '), PrintArray('%2d', +a)
		print('-a = '), PrintArray('%2d', -a)
		print('a + b = '), PrintArray('%2d', a + b)
		print('a - b = '), PrintArray('%2d', a - b)
		print('a * b = '), PrintArray('%2d', a * b)
		print('a / b = '), PrintArray('%2d', a / b)
		print('a % b = '), PrintArray('%2d', a % b)
		print('a ** b = '), PrintArray('%2d', a_short ** b_short)
		print('a + 3 = '), PrintArray('%2d', a + 3)
		print('a - 3 = '), PrintArray('%2d', a - 3)
		print('a * 3 = '), PrintArray('%2d', a * 3)
		print('a / 3 = '), PrintArray('%2d', a / 3)
		print('a % 3 = '), PrintArray('%2d', a % 3)
		print('a ** 3 = '), PrintArray('%2d', a ** 3)
		print('3 + b = '), PrintArray('%2d', 3 + b)
		print('3 - b = '), PrintArray('%2d', 3 - b)
		print('3 * b = '), PrintArray('%2d', 3 * b)
		print('3 / b = '), PrintArray('%2d', 3 / b)
		print('3 / b = '), PrintArray('%2d', 3 % b)
		print('3 ** b = '), PrintArray('%2d', 3 ** b)
		print('a & b = ')
		try {
			PrintArray('%2d', a & b)
		} catch {
			println('error')
		}
		print('a | b = ')
		try {
			PrintArray('%2d', a | b)
		} catch {
			println('error')
		}
		print('a ^ b = ')
		try {
			PrintArray('%2d', a ^ b)
		} catch {
			println('error')
		}
		print('a & 3 = ')
		try {
			PrintArray('%2d', a & 3)
		} catch {
			println('error')
		}
		print('a | 3 = ')
		try {
			PrintArray('%2d', a | 3)
		} catch {
			println('error')
		}
		print('a ^ 3 = ')
		try {
			PrintArray('%2d', a ^ 3)
		} catch {
			println('error')
		}
		print('3 & b = ')
		try {
			PrintArray('%2d', 3 & b)
		} catch {
			println('error')
		}
		print('3 | b = ')
		try {
			PrintArray('%2d', 3 | b)
		} catch {
			println('error')
		}
		print('3 ^ b = ')
		try {
			PrintArray('%2d', 3 ^ b)
		} catch {
			println('error')
		}
		println()
	}
}

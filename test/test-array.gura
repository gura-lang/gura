#!/usr/bin/env gura
import(helper.test) {*}

funcs = [
	array@int8
	array@uint8
	array@int16
	array@uint16
	array@int32
	array@uint32
	array@int64
	array@uint64
	array@float
	array@double
]

FormatArray(fmt:string, array:array):map = {
	if (array.ndim == 1) {
		'[' + format(fmt, array.each()).join(' ') + ']'
	} else {
		'[' + FormatArray(fmt, array.each()).join() + ']'
	}
}

PrintArray(fmt:string, array:array) = println(FormatArray(fmt, array))

testcase('constructor') {
	funcs.each {|func|
		println(func)
		x = func.zeros([30])
		println(x[0..29].join(' '))
		x = func.ones([30])
		println(x[0..29].join(' '))
		x = func([0..29])
		println(x[0..29].join(' '))
		println(x.each().join(' '))
		x.each {|n| printf('%d ', n)}, println()
		x = func(0..29)
		println(x[0..29].join(' '))
		println(func.zeros([3, 4]))
		println(func.zeros([2, 3, 4]))
		println(func.ones([3, 4]))
		println(func.ones([2, 3, 4]))
		randseed(0), println(func.rands([12]))
		randseed(0), println(func.rands([3, 4]))
		randseed(0), println(func.rands([2, 3, 4]))
		randseed(0), println(func.rands([12], 100))
		randseed(0), println(func.rands([3, 4], 100))
		randseed(0), println(func.rands([2, 3, 4], 100))
		randseed(0), println(func.rands@normal([12]))
		randseed(0), println(func.rands@normal([3, 4]))
		randseed(0), println(func.rands@normal([2, 3, 4]))
		randseed(0), println(func.rands@normal([12], 10))
		randseed(0), println(func.rands@normal([3, 4], 10))
		randseed(0), println(func.rands@normal([2, 3, 4], 10))
		randseed(0), println(func.rands@normal([12], 10, 6))
		randseed(0), println(func.rands@normal([3, 4], 10, 6))
		randseed(0), println(func.rands@normal([2, 3, 4], 10, 6))
	}
}
testcase('cast to list') {
	funcs.each {|func|
		println(func)
		x:list = func([0..29])
		println(x.join(' '))
	}
}
testcase('cast from list') {
	x:array@int8 = [0..29]
	PrintArray('%2d', x)
	x:array@uint8 = [0..29]
	PrintArray('%2d', x)
	x:array@int16 = [0..29]
	PrintArray('%2d', x)
	x:array@uint16 = [0..29]
	PrintArray('%2d', x)
	x:array@int32 = [0..29]
	PrintArray('%2d', x)
	x:array@uint32 = [0..29]
	PrintArray('%2d', x)
	x:array@float = [0..29]
	PrintArray('%2d', x)
	x:array@double = [0..29]
	PrintArray('%2d', x)
}
testcase('cast from iterator') {
	x:array@int8 = 0..29
	PrintArray('%2d', x)
	x:array@uint8 = 0..29
	PrintArray('%2d', x)
	x:array@int16 = 0..29
	PrintArray('%2d', x)
	x:array@uint16 = 0..29
	PrintArray('%2d', x)
	x:array@int32 = 0..29
	PrintArray('%2d', x)
	x:array@uint32 = 0..29
	PrintArray('%2d', x)
	x:array@float = 0..29
	PrintArray('%2d', x)
	x:array@double = 0..29
	PrintArray('%2d', x)
}
testcase('head/tail') {
	funcs.each {|func|
		println(func)
		x = func([0..29])
		PrintArray('%2d', x)
		PrintArray('%2d', x.head(12))
		PrintArray('%2d', x.tail(12))
		PrintArray('%2d', x.head(30))
		PrintArray('%2d', x.tail(30))
		try {
			PrintArray('%2d', x.head(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		try {
			PrintArray('%2d', x.tail(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		x = func([
			[[0, 1, 2, 3], [4, 5, 6, 7]], [[8, 9, 10, 11], [12, 13, 14, 15]],
			[[16, 17, 18, 19], [20, 21, 22, 23]], [[24, 25, 26, 27], [28, 29, 30, 31]]])
		println(x)
		printf('head(%d):\n%s\n', 0..4, x.head(0..4))
		printf('tail(%d):\n%s\n', 0..4, x.tail(0..4))
		printf('offset(%d):\n%s\n', 0..4, x.offset(0..4))
	}
}
testcase('offset') {
	funcs.each {|func|
		println(func)
		x = func([0..29])
		PrintArray('%2d', x)
		PrintArray('%2d', x.offset(3))
		PrintArray('%2d', x.offset(27))
		PrintArray('%2d', x.offset(29))
		PrintArray('%2d', x.offset(30))
		try {
			PrintArray('%2d', x.offset(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
	}
}
testcase('paste') {
	funcs.each {|func|
		println(func)
		x = func([0..29])
		y = func([90..99])
		PrintArray('%2d', x)
		x.paste(0, y)
		PrintArray('%2d', x)
		x.paste(20, y)
		PrintArray('%2d', x)
		try {
			x.paste(21, y)
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		x.paste(12, y.offset(3))
		PrintArray('%2d', x)
	}	
}
testcase('initializer') {
	funcs = [
		@int8
		@uint8
		@int16
		@uint16
		@int32
		@uint32
		@int64
		@uint64
		@float
		@double
	]
	funcs.each {|func|
		x = func {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
			16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
		}
		print(func.name, ':')
		PrintArray('%2d', x)
	}
	funcs.each {|func|
		x = func {
			{0, 1, 2, 3, 4, 5, 6, 7}, {8, 9, 10, 11, 12, 13, 14, 15},
			{16, 17, 18, 19, 20, 21, 22, 23}, {24, 25, 26, 27, 28, 29, 30, 31},
		}
		print(func.name, ':')
		PrintArray('%2d', x)
	}
	funcs.each {|func|
		x = func {
			{{0, 1, 2, 3}, {4, 5, 6, 7}}, {{8, 9, 10, 11}, {12, 13, 14, 15}},
			{{16, 17, 18, 19}, {20, 21, 22, 23}}, {{24, 25, 26, 27}, {28, 29, 30, 31}},
		}
		print(func.name, ':')
		PrintArray('%2d', x)
	}
}
testcase('operator') {
	funcs.each {|func|
		println(func)
		a = func([2..11])
		b = func([1..10])
		a_short = func([2..4])
		b_short = func([1..3])
		print('+a = '), PrintArray('%2d', +a)
		print('-a = '), PrintArray('%2d', -a)
		print('a + b = '), PrintArray('%2d', a + b)
		print('a - b = '), PrintArray('%2d', a - b)
		print('a * b = '), PrintArray('%2d', a * b)
		print('a / b = '), PrintArray('%2d', a / b)
		print('a % b = '), PrintArray('%2d', a % b)
		print('a ** b = '), PrintArray('%2d', a_short ** b_short)
		print('a + 3 = '), PrintArray('%2d', a + 3)
		print('a - 3 = '), PrintArray('%2d', a - 3)
		print('a * 3 = '), PrintArray('%2d', a * 3)
		print('a / 3 = '), PrintArray('%2d', a / 3)
		print('a % 3 = '), PrintArray('%2d', a % 3)
		print('a ** 3 = '), PrintArray('%2d', a ** 3)
		print('3 + b = '), PrintArray('%2d', 3 + b)
		print('3 - b = '), PrintArray('%2d', 3 - b)
		print('3 * b = '), PrintArray('%2d', 3 * b)
		print('3 / b = '), PrintArray('%2d', 3 / b)
		print('3 / b = '), PrintArray('%2d', 3 % b)
		print('3 ** b = '), PrintArray('%2d', 3 ** b)
		print('a & b = ')
		try {
			PrintArray('%2d', a & b)
		} catch {
			println('error')
		}
		print('a | b = ')
		try {
			PrintArray('%2d', a | b)
		} catch {
			println('error')
		}
		print('a ^ b = ')
		try {
			PrintArray('%2d', a ^ b)
		} catch {
			println('error')
		}
		print('a & 3 = ')
		try {
			PrintArray('%2d', a & 3)
		} catch {
			println('error')
		}
		print('a | 3 = ')
		try {
			PrintArray('%2d', a | 3)
		} catch {
			println('error')
		}
		print('a ^ 3 = ')
		try {
			PrintArray('%2d', a ^ 3)
		} catch {
			println('error')
		}
		print('3 & b = ')
		try {
			PrintArray('%2d', 3 & b)
		} catch {
			println('error')
		}
		print('3 | b = ')
		try {
			PrintArray('%2d', 3 | b)
		} catch {
			println('error')
		}
		print('3 ^ b = ')
		try {
			PrintArray('%2d', 3 ^ b)
		} catch {
			println('error')
		}
		println()
	}
}
testcase('cast to memory') {
	f(m:memory) = {
		printf('%dbytes\n', m.size)
		m.array@uint8().dump()
	}
	funcs.each {|func|
		println(func)
		f(func([0..15]))
	}
}
testcase('error for infinite iterator') {
	try {
		x:array@int32 = 0..
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase('divide by zero') {
	funcs.each {|func|
		x = func([1, 2, 3])
		y = func([1, 0, 3])
		println(func)
		tester(`(x / y))
		tester(`(x / 0))
		tester(`(2 / y))
	}
}
testcase('sum/average') {
	funcs.each {|func|
		println(func)
		x = func([1..10])
		println('sum = ', x.sum())
		println('avg = ', x.average())
	}	
}
testcase('identity') {
	funcs.each {|func|
		println(func)
		x = func.identity(1)
		println((x.each():flat).fold(1):*join(' '))
		x = func.identity(2)
		println((x.each():flat).fold(2):*join(' '))
		x = func.identity(3)
		println((x.each():flat).fold(3):*join(' '))
		x = func.identity(5)
		println((x.each():flat).fold(5):*join(' '))
	}
}
testcase('modification on referenced instance') {
	x = array@int32([[1, 2], [3, 4], [5, 6]])
	println(x)
	x.flatten {|xref|
		println(xref)
		xref[3] = 3333
		println(xref)
	}
	println(x)
}
testcase('array#flatten()') {
	tester(`array@int32([[1, 2], [3, 4], [5, 6]]).flatten())
	tester(`array@int32([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]]).flatten())
	tester(`array@int32([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]])[1].flatten())
}
testcase('array#reshape()') {
	x = array@int32([0..23])
	println(x)
	tester(`x.reshape([nil]))
	tester(`x.reshape([24]))
	tester(`x.reshape([1, 24]))
	tester(`x.reshape([8, 3]))
	tester(`x.reshape([4, 2, 3]))
	tester(`x.reshape([8, nil]))
	tester(`x.reshape([nil, 3]))
	tester(`x.reshape([nil, 2, 3]))
	tester(`x.reshape([4, nil, 3]))
	tester(`x.reshape([4, 2, nil]))
	tester(`x.reshape([4, nil, nil]))
	tester(`x.reshape([4, 2, 4]))
}
testcase('array#transpose()') {
	func(src:array, axesTbl[]) = {
		println(src)
		for (axes in axesTbl) {
			try {
				result = src.transpose(axes)
				println(result.shape):nomap
				println(result)
			} catch {|e|
				println(e.text)
			}
		}
	}
	src = array@int32([1..12]).reshape([3, 4])
	axesTbl = [[0, 1], [1, 0], [0, 2], [], [0], [0, 0]]
	func(src, axesTbl)
	src = array@int32([1..24]).reshape([2, 3, 4])
	axesTbl = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [0, 1, 3], [], [0], [0, 1], [0, 1, 1]]
	func(src, axesTbl)
}
testcase('array#T') {
	func(src:array) = {
		println(src)
		try {
			result = src.T
			println(result.shape):nomap
			println(result)
		} catch {|e|
			println(e.text)
		}
	}
	src = array@int32([1..12]).reshape([3, 4])
	func(src)
}
testcase('array.dot()') {
	a = @double {1, 5, 9}
	b = @double {5, 2}
	c = @double {{7, 4, -1}, {3, 0, 5}}
	d = @double {{5, 2}, {3, 1}, {4, -1}}
	e = @double {{8, 4, 2}, {1, 3, -6}, {-7, 0, 5}}
	tester(`array.dot(a, d))
	tester(`array.dot(a, e))
	tester(`array.dot(b.reshape([2, 1]), a.reshape([1, 3])))
	tester(`array.dot(c, d))
	tester(`array.dot(c, e))
	tester(`array.dot(d, b))
	tester(`array.dot(d, c))
	tester(`array.dot(e, d))
}
testcase('array.invert()') {
	tester(`array@double([[1, 1, -1], [-2, 0, 1], [0, 2, 1]]).invert())
	tester(`array@double([[1, 2, 1], [2, 1, 0], [1, 1, 2]]).invert())
}

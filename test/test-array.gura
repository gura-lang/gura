#!/usr/bin/env gura
import(helper.test) {*}
import(arrayutil)

elemtypeTbl = [
	`boolean, `int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64,
	`half, `float, `double, `complex
]

funcTbl = [
	array@boolean, array@int8, array@uint8, array@int16, array@uint16,
	array@int32, array@uint32, array@int64, array@uint64,
	array@half, array@float, array@double, array@complex,
]

elemtypeTbl_float = [
	`half, `float, `double, `complex
]

FormatArray(fmt:string, array:array):map = {
	if (array.ndim == 1) {
		'[' + format(fmt, array.each()).join(' ') + ']'
	} else {
		'[' + FormatArray(fmt, array.each()).join() + ']'
	}
}

PrintArray(fmt:string, array:array) = println(FormatArray(fmt, array))

testcase('properties') {
	x = array.zeros([2, 3, 4])
	tester(`x)
	tester(`x.elembytes)
	tester(`x.elemtype)
	tester(`(x.memoryid == x.offset(1).memoryid))
	tester(`x.ndim)
	tester(`x.p)
	tester(`x.shape)
	tester(`x.size)
	tester(`x.T)
}
testcase('constructor') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array.zeros([30], elemtype => elemtype)
		println(x[0..29].each().join(' '))
		x = array.ones([30], elemtype => elemtype)
		println(x[0..29].each().join(' '))
		x = array([0..29], elemtype => elemtype)
		println(x[0..29].each().join(' '))
		println(x.each().join(' '))
		x.each {|n| printf('%d ', n)}, println()
		x = array(0..29, elemtype => elemtype)
		println(x[0..29].each().join(' '))
	}
}
testcase('array.identity()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array.identity(1, elemtype => elemtype)
		println((x.each():flat).fold(1):*join(' '))
		x = array.identity(2, elemtype => elemtype)
		println((x.each():flat).fold(2):*join(' '))
		x = array.identity(3, elemtype => elemtype)
		println((x.each():flat).fold(3):*join(' '))
		x = array.identity(5, elemtype => elemtype)
		println((x.each():flat).fold(5):*join(' '))
	}
	funcTbl.each {|func|
		method = func.interval
		method(5) {|x|
			println(function.getfullname(method), ' .. ', x.elemtype)
			println(x)
		}
	}
}
testcase('array.interval()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		tester(`array.interval(0, 8, 5, elemtype => elemtype))
		tester(`array.interval(0, 10, 5, elemtype => elemtype))
	}
	funcTbl.each {|func|
		method = func.interval
		method(0, 10, 5) {|x|
			println(function.getfullname(method), ' .. ', x.elemtype)
			println(x)
		}
	}
}
testcase('array.ones()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		println(array.ones([3, 4], elemtype => elemtype))
		println(array.ones([2, 3, 4], elemtype => elemtype))
	}
}
testcase('array.rands()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		randseed(0), println(array.rands([12], elemtype => elemtype))
		randseed(0), println(array.rands([3, 4], elemtype => elemtype))
		randseed(0), println(array.rands([2, 3, 4], elemtype => elemtype))
		randseed(0), println(array.rands([12], 100, elemtype => elemtype))
		randseed(0), println(array.rands([3, 4], 100, elemtype => elemtype))
		randseed(0), println(array.rands([2, 3, 4], 100, elemtype => elemtype))
	}
}
testcase('array.rands@normal()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		randseed(0), println(array.rands@normal([12], elemtype => elemtype))
		randseed(0), println(array.rands@normal([3, 4], elemtype => elemtype))
		randseed(0), println(array.rands@normal([2, 3, 4], elemtype => elemtype))
		randseed(0), println(array.rands@normal([12], 10, elemtype => elemtype))
		randseed(0), println(array.rands@normal([3, 4], 10, elemtype => elemtype))
		randseed(0), println(array.rands@normal([2, 3, 4], 10, elemtype => elemtype))
		randseed(0), println(array.rands@normal([12], 10, 6, elemtype => elemtype))
		randseed(0), println(array.rands@normal([3, 4], 10, 6, elemtype => elemtype))
		randseed(0), println(array.rands@normal([2, 3, 4], 10, 6, elemtype => elemtype))
	}
}
testcase('array.range()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		tester(`array.range(10, elemtype => elemtype))
		tester(`array.range(0, 10, elemtype => elemtype))
		tester(`array.range(0, -10, elemtype => elemtype))
		tester(`array.range(3, 10, elemtype => elemtype))
		tester(`array.range(3, -10, elemtype => elemtype))
		tester(`array.range(-3, 10, elemtype => elemtype))
		tester(`array.range(-3, -10, elemtype => elemtype))
		tester(`array.range(3, 10, 2, elemtype => elemtype))
		tester(`array.range(3, -10, -2, elemtype => elemtype))
		tester(`array.range(-3, 10, 2, elemtype => elemtype))
		tester(`array.range(-3, -10, -2, elemtype => elemtype))
		tester(`array.range(3, 10, -2, elemtype => elemtype))
		tester(`array.range(3, -10, 2, elemtype => elemtype))
		tester(`array.range(3, 10, 0, elemtype => elemtype))
	}
}
testcase('array.rotation()') {
	elemtypeTbl_float.each {|elemtype|
		println(elemtype)
		tester(`array.rotation(0, elemtype => elemtype))
		tester(`array.rotation(0, 2, elemtype => elemtype))
		tester(`array.rotation(0, 2, 3, elemtype => elemtype))
		tester(`array.rotation(math.pi / 6, elemtype => elemtype))
		tester(`array.rotation(30, elemtype => elemtype):deg)
	}
}
testcase('array.rotation@x()') {
	elemtypeTbl_float.each {|elemtype|
		println(elemtype)
		tester(`array.rotation@x(0, elemtype => elemtype))
		tester(`array.rotation@x(0, 2, elemtype => elemtype))
		tester(`array.rotation@x(0, 2, 3, elemtype => elemtype))
		tester(`array.rotation@x(0, 2, 3, 4, elemtype => elemtype))
		tester(`array.rotation@x(math.pi / 6, elemtype => elemtype))
		tester(`array.rotation@x(30, elemtype => elemtype):deg)
	}
}
testcase('array.rotation@y()') {
	elemtypeTbl_float.each {|elemtype|
		println(elemtype)
		tester(`array.rotation@y(0, elemtype => elemtype))
		tester(`array.rotation@y(0, 2, elemtype => elemtype))
		tester(`array.rotation@y(0, 2, 3, elemtype => elemtype))
		tester(`array.rotation@y(0, 2, 3, 4, elemtype => elemtype))
		tester(`array.rotation@y(math.pi / 6, elemtype => elemtype))
		tester(`array.rotation@y(30, elemtype => elemtype):deg)
	}
}
testcase('array.rotation@z()') {
	elemtypeTbl_float.each {|elemtype|
		println(elemtype)
		tester(`array.rotation@z(0, elemtype => elemtype))
		tester(`array.rotation@z(0, 2, elemtype => elemtype))
		tester(`array.rotation@z(0, 2, 3, elemtype => elemtype))
		tester(`array.rotation@z(0, 2, 3, 4, elemtype => elemtype))
		tester(`array.rotation@z(math.pi / 6, elemtype => elemtype))
		tester(`array.rotation@z(30, elemtype => elemtype):deg)
	}
}
testcase('array.scaling()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		tester(`array.scaling(0, 0, elemtype => elemtype))
		tester(`array.scaling(0, 0, 0, elemtype => elemtype))
		tester(`array.scaling(2, 3, elemtype => elemtype))
		tester(`array.scaling(2, 3, 4, elemtype => elemtype))
	}
}
testcase('array.translation()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		tester(`array.translation(0, 0, elemtype => elemtype))
		tester(`array.translation(0, 0, 0, elemtype => elemtype))
		tester(`array.translation(2, 3, elemtype => elemtype))
		tester(`array.translation(2, 3, 4, elemtype => elemtype))
	}
}
testcase('array.zeros()') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		println(array.zeros([3, 4], elemtype => elemtype))
		println(array.zeros([2, 3, 4], elemtype => elemtype))
	}
}
testcase('cast to list') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x:list = array([0..29], elemtype => elemtype)
		println(x.join(' '))
	}
}
testcase('cast from list') {
	x:array@int8 = [0..29]
	PrintArray('%2d', x)
	x:array@uint8 = [0..29]
	PrintArray('%2d', x)
	x:array@int16 = [0..29]
	PrintArray('%2d', x)
	x:array@uint16 = [0..29]
	PrintArray('%2d', x)
	x:array@int32 = [0..29]
	PrintArray('%2d', x)
	x:array@uint32 = [0..29]
	PrintArray('%2d', x)
	x:array@float = [0..29]
	PrintArray('%2d', x)
	x:array@double = [0..29]
	PrintArray('%2d', x)
}
testcase('cast from iterator') {
	x:array@int8 = 0..29
	PrintArray('%2d', x)
	x:array@uint8 = 0..29
	PrintArray('%2d', x)
	x:array@int16 = 0..29
	PrintArray('%2d', x)
	x:array@uint16 = 0..29
	PrintArray('%2d', x)
	x:array@int32 = 0..29
	PrintArray('%2d', x)
	x:array@uint32 = 0..29
	PrintArray('%2d', x)
	x:array@float = 0..29
	PrintArray('%2d', x)
	x:array@double = 0..29
	PrintArray('%2d', x)
}
testcase('head/tail') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array([0..29], elemtype => elemtype)
		PrintArray('%2d', x)
		PrintArray('%2d', x.head(12))
		PrintArray('%2d', x.tail(12))
		PrintArray('%2d', x.head(30))
		PrintArray('%2d', x.tail(30))
		try {
			PrintArray('%2d', x.head(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		try {
			PrintArray('%2d', x.tail(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		x = array([
			[[0, 1, 2, 3], [4, 5, 6, 7]], [[8, 9, 10, 11], [12, 13, 14, 15]],
			 [[16, 17, 18, 19], [20, 21, 22, 23]], [[24, 25, 26, 27], [28, 29, 30, 31]]],
			elemtype => elemtype)
		println(x)
		printf('head(%d):\n%s\n', 0..4, x.head(0..4))
		printf('tail(%d):\n%s\n', 0..4, x.tail(0..4))
		printf('offset(%d):\n%s\n', 0..4, x.offset(0..4))
	}
}
testcase('offset') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array([0..29], elemtype => elemtype)
		PrintArray('%2d', x)
		PrintArray('%2d', x.offset(3))
		PrintArray('%2d', x.offset(27))
		PrintArray('%2d', x.offset(29))
		PrintArray('%2d', x.offset(30))
		try {
			PrintArray('%2d', x.offset(31))
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
	}
}
testcase('paste') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array([0..29], elemtype => elemtype)
		y = array([90..99], elemtype => elemtype)
		PrintArray('%2d', x)
		x.paste(0, y)
		PrintArray('%2d', x)
		x.paste(20, y)
		PrintArray('%2d', x)
		try {
			x.paste(21, y)
		} catch {|e|
			println('expected error occurs: ', e.text)
		}
		x.paste(12, y.offset(3))
		PrintArray('%2d', x)
	}	
}
testcase('initializer') {
	elemtypeTbl.each {|elemtype|
		x = array(elemtype => elemtype) {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
			16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
		}
		print(elemtype, ':')
		PrintArray('%2d', x)
	}
	elemtypeTbl.each {|elemtype|
		x = array(elemtype => elemtype) {
			{0, 1, 2, 3, 4, 5, 6, 7}, {8, 9, 10, 11, 12, 13, 14, 15},
			{16, 17, 18, 19, 20, 21, 22, 23}, {24, 25, 26, 27, 28, 29, 30, 31},
		}
		print(elemtype, ':')
		PrintArray('%2d', x)
	}
	elemtypeTbl.each {|elemtype|
		x = array(elemtype => elemtype) {
			{{0, 1, 2, 3}, {4, 5, 6, 7}}, {{8, 9, 10, 11}, {12, 13, 14, 15}},
			{{16, 17, 18, 19}, {20, 21, 22, 23}}, {{24, 25, 26, 27}, {28, 29, 30, 31}},
		}
		print(elemtype, ':')
		PrintArray('%2d', x)
	}
}
testcase('operator') {
	f() {`block} = {
		printf('%s = ', block)
		try {
			PrintArray('%2d', block.eval())
		} catch {|e|
			println(e.text)
		}
	}
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		a = array([2..11], elemtype => elemtype)
		b = array([1..10], elemtype => elemtype)
		a_short = array([2..4], elemtype => elemtype)
		b_short = array([1..3], elemtype => elemtype)
		f { +a }
		f { -a }
		f { a + b }
		f { a - b }
		f { a * b }
		f { a / b }
		f { a % b }
		f { a_short ** b_short }
		f { a + 3 }
		f { a - 3 }
		f { a * 3 }
		f { a / 3 }
		f { a % 3 }
		f { a ** 3 }
		f { 3 + b }
		f { 3 - b }
		f { 3 * b }
		f { 3 / b }
		f { 3 % b }
		f { 3 ** b }
		f { a & b }
		f { a | b }
		f { a ^ b }
		f { a & 3 }
		f { a | 3 }
		f { a ^ 3 }
		f { 3 & b }
		f { 3 | b }
		f { 3 ^ b }
		println()
	}
}
testcase('cast to memory') {
	f(m:memory) = {
		printf('%dbytes\n', m.size)
		m.array@uint8().dump()
	}
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		f(array([0..15], elemtype => elemtype))
	}
}
testcase('error for infinite iterator') {
	try {
		x:array@int32 = 0..
	} catch {|e|
		println('expected error occurs: ', e.text)
	}
}
testcase('divide by zero') {
	elemtypeTbl.each {|elemtype|
		x = array([1, 2, 3], elemtype => elemtype)
		y = array([1, 0, 3], elemtype => elemtype)
		println(elemtype)
		tester(`(x / y))
		tester(`(x / 0))
		tester(`(2 / y))
	}
}
testcase('sum/mean') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array([1..10], elemtype => elemtype)
		println('sum = ', x.sum())
		println('avg = ', x.mean())
	}	
}
testcase('modification on referenced instance') {
	x = array([[1, 2], [3, 4], [5, 6]], elemtype => `int32)
	println(x)
	x.flatten {|xref|
		println(xref)
		xref[3] = 3333
		println(xref)
	}
	println(x)
}
testcase('array#flatten()') {
	tester(`array([[1, 2], [3, 4], [5, 6]], elemtype => `int32).flatten())
	tester(`array([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]], elemtype => `int32).flatten())
	tester(`array([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]], elemtype => `int32)[1].flatten())
}
testcase('array#reshape()') {
	x = array([0..23], elemtype => `int32)
	println(x)
	tester(`x.reshape([nil]))
	tester(`x.reshape([24]))
	tester(`x.reshape([1, 24]))
	tester(`x.reshape([8, 3]))
	tester(`x.reshape([4, 2, 3]))
	tester(`x.reshape([8, nil]))
	tester(`x.reshape([nil, 3]))
	tester(`x.reshape([nil, 2, 3]))
	tester(`x.reshape([4, nil, 3]))
	tester(`x.reshape([4, 2, nil]))
	tester(`x.reshape([4, nil, nil]))
	tester(`x.reshape([4, 2, 4]))
}
testcase('array#transpose()') {
	func(src:array, axesTbl[]) = {
		println(src)
		for (axes in axesTbl) {
			try {
				result = src.transpose(axes)
				println(result.shape):nomap
				println(result)
			} catch {|e|
				println(e.text)
			}
		}
	}
	src = array([1..12], elemtype => `int32).reshape([3, 4])
	axesTbl = [[0, 1], [1, 0], [0, 2], [], [0], [0, 0]]
	func(src, axesTbl)
	src = array([1..24], elemtype => `int32).reshape([2, 3, 4])
	axesTbl = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [0, 1, 3], [], [0], [0, 1], [0, 1, 1]]
	func(src, axesTbl)
}
testcase('array#T') {
	func(src:array) = {
		println(src)
		try {
			result = src.T
			println(result.shape):nomap
			println(result)
		} catch {|e|
			println(e.text)
		}
	}
	src = array([1..12], elemtype => `int32).reshape([3, 4])
	func(src)
}
testcase('array.dot()') {
	[`half, `float, `double, `complex].each {|elemtype|
		println('elemtype: ', elemtype)
		a = array(elemtype => elemtype) {1, 5, 9}
		b = array(elemtype => elemtype) {5, 2}
		c = array(elemtype => elemtype) {{7, 4, -1}, {3, 0, 5}}
		d = array(elemtype => elemtype) {{5, 2}, {3, 1}, {4, -1}}
		e = array(elemtype => elemtype) {{8, 4, 2}, {1, 3, -6}, {-7, 0, 5}}
		tester(`array.dot(a, d))
		tester(`array.dot(a, e))
		tester(`array.dot(b.reshape([2, 1]), a.reshape([1, 3])))
		tester(`array.dot(c, d))
		tester(`array.dot(c, e))
		tester(`array.dot(d, b))
		tester(`array.dot(d, c))
		tester(`array.dot(e, d))
		tester(`(a |.| d))
		tester(`(a |.| e))
		tester(`(b.reshape([2, 1]) |.| a.reshape([1, 3])))
		tester(`(c |.| d))
		tester(`(c |.| e))
		tester(`(d |.| b))
		tester(`(d |.| c))
		tester(`(e |.| d))
	}
}
testcase('array.invert()') {
	[`half, `float, `double, `complex].each {|elemtype|
		println('elemtype: ', elemtype)
		tester(`array([[1, 1, -1], [-2, 0, 1], [0, 2, 1]], elemtype).invert())
		tester(`array([[1, 2, 1], [2, 1, 0], [1, 1, 2]], elemtype).invert())
		tester(`array([[2, -1, 0], [2, -1, -1], [1, 0, -1]], elemtype).invert())
		tester(`array([
			[[1, 1, -1], [-2, 0, 1], [0, 2, 1]],
			[[1, 2, 1], [2, 1, 0], [1, 1, 2]],
			[[2, -1, 0], [2, -1, -1], [1, 0, -1]]], elemtype).invert())
	}
	tester(`array.zeros([3, 3]).invert())
}
testcase('properties') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array.zeros([4, 2, 3], elemtype => elemtype)
		println('elembytes: ', x.elembytes)
		println('elemtype: ', x.elemtype)
		println('ndim: ', x.ndim)
		println('shape: ', x.shape):nomap
		println('size: ', x.size)
	}
}
testcase('array as an alias of array@double') {
	randseed(0)
	tester(`array.identity(5))
	tester(`array.interval(0, 8, 5))
	tester(`array.ones([3, 4]))
	tester(`array.rands([3, 4], 10))
	tester(`array.rands@normal([3, 4], 3, 5))
	tester(`array.zeros([3, 4]))
}
testcase('constructor with initial values') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		println(array([], elemtype => elemtype))
		println(array([[]], elemtype => elemtype))
		println(array([[], []], elemtype => elemtype))
		println(array([[], [], []], elemtype => elemtype))
		println(array([1], elemtype => elemtype))
		println(array([1, 2], elemtype => elemtype))
		println(array([1, 2, 3], elemtype => elemtype))
		println(array([1, 2, 3, 4], elemtype => elemtype))
		println(array([[1, 2], [3, 4]], elemtype => elemtype))
		println(array([[1, 2, 3], [4, 5, 6]], elemtype => elemtype))
		println(array([1].each(), elemtype => elemtype))
		println(array([1, 2].each(), elemtype => elemtype))
		println(array([1, 2, 3].each(), elemtype => elemtype))
		println(array([1, 2, 3, 4].each(), elemtype => elemtype))
		//println(array([[1, 2], [3, 4]].each(), elemtype => elemtype))
		//println(array([[1, 2, 3], [4, 5, 6]].each(), elemtype => elemtype))
	}
}
testcase('dimension mismatch error') {
	tester(`(array {1, 2, 3} + array {1, 2}))
	tester(`(array {{1, 2}, {3, 4}} + array {{1, 2, 3}, {4, 5, 6}}))
	tester(`(array {{1, 2}, {3, 4}} |.| array {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}))
}
testcase('sum') {
	[
		array {}
		array.range(6)
		array.range(6).reshape([3, 2])
		array.range(24).reshape([4, 3, 2])
		array.range(48).reshape([2, 4, 3, 2])
	].each {|a|
		println('----')
		println(a)
		tester(`a.sum())
		tester(`a.sum(0))
		tester(`a.sum(1))
		tester(`a.sum(2))
		tester(`a.sum(3))
		tester(`a.sum(4))
	}
}
testcase('mean') {
	[
		array {}
		array.range(6)
		array.range(6).reshape([3, 2])
		array.range(24).reshape([4, 3, 2])
		array.range(48).reshape([2, 4, 3, 2])
	].each {|a|
		println('----')
		println(a)
		tester(`a.mean())
		tester(`a.mean(0))
		tester(`a.mean(1))
		tester(`a.mean(2))
		tester(`a.mean(3))
		tester(`a.mean(4))
	}
}
testcase('constructor with elemtype') {
	[
		`int8, `uint8, `int16, `uint16, `int32, `uint32, `int64, `uint64, `float, `double,
		`int9
	].each {|elemtype|
		try {
			x = array(elemtype => elemtype) {{0, 1, 2}, {3, 4, 5}}
			println(x.elemtype, ': ', x)
		} catch {|e|
			println(e.text)
		}
	}
}
testcase('operation test on array with offset') {
	x = array.range(64, elemtype => `int32)
	x_off = x.offset(32)
	tester(`x_off)
	tester(`x_off.flatten())
	tester(`x_off.reshape([4, 8]))
	tester(`x_off.head(16))
	tester(`x_off.tail(16))
	tester(`x_off.offset(16))
	tester(`x_off.each().head(16):list)
}
testcase('tranpsose() and T') {
	array.range(12) {|x|
		tester(`x)
		tester(`x.transpose())
		tester(`x.T)
	}
	println('----')
	array.range(12).reshape([3, 4]) {|x|
		tester(`x)
		tester(`x.transpose())
		tester(`x.T)
	}
	println('----')
	array.range(24).reshape([2, 3, 4]) {|x|
		tester(`x)
		tester(`x.transpose())
		tester(`x.T)
	}
	println('----')
	array.range(72).reshape([3, 2, 3, 4]) {|x|
		tester(`x)
		tester(`x.transpose())
		tester(`x.T)
	}
}
testcase('array#transpose() sharing memory') {
	testcases = [
		array {}
		array.range(2).reshape([nil])
		array.range(2).reshape([1, nil])
		array.range(2).reshape([nil, 1])
		array.range(8).reshape([nil])
		array.range(8).reshape([1, nil])
		array.range(8).reshape([nil, 1])
		array.range(12).reshape([4, 1, nil])
		array.range(12).reshape([4, nil, 1])
		array.range(24).reshape([2, 4, 1, nil])
		array.range(24).reshape([2, 4, nil, 1])
		array.range(4).reshape([2, nil])
		array.range(4).reshape([2, nil])
		array.range(12).reshape([3, nil])
		array.range(12).reshape([3, nil])
	]
	for (x in testcases) {
		println('x =')
		println(x)
		println('x.T =')
		print(xt = x.T)
		println(' .. ', cond(x.memoryid == xt.memoryid, 'shared', 'not-shared'))
		if (x.ndim == 1) {
			println('transpose([0]) =')
			print(xt = x.transpose([0]))
			println(' .. ', cond(x.memoryid == xt.memoryid, 'shared', 'not-shared'))
		} elsif (x.ndim == 2) {
			println('transpose([1, 0]) =')
			print(xt = x.transpose([1, 0]))
			println(' .. ', cond(x.memoryid == xt.memoryid, 'shared', 'not-shared'))
		} elsif (x.ndim == 3) {
			println('transpose([0, 2, 1]) =')
			print(xt = x.transpose([0, 2, 1]))
			println(' .. ', cond(x.memoryid == xt.memoryid, 'shared', 'not-shared'))
		} elsif (x.ndim == 4) {
			println('transpose([0, 1, 3, 2]) =')
			print(xt = x.transpose([0, 1, 3, 2]))
			println(' .. ', cond(x.memoryid == xt.memoryid, 'shared', 'not-shared'))
			println('transpose([1, 0, 3, 2]) =')
			print(xt = x.transpose([1, 0, 3, 2]))
			println(' .. ', cond(x.memoryid == xt.memoryid, 'shared', 'not-shared'))
		}
		println('----')
	}
}
testcase('sharing collapses after assignment') {
	x1 = array.range(12).reshape([4, nil])
	println(x1)
	x2 = x1.offset(0)
	println(cond(x1.memoryid == x2.memoryid, 'shared', 'not-shared'))
	x2[0] = 3
	println(cond(x1.memoryid == x2.memoryid, 'shared', 'not-shared'))
	x2 = x1.offset(0)
	println(cond(x1.memoryid == x2.memoryid, 'shared', 'not-shared'))
	x1[0] = 3
	println(cond(x1.memoryid == x2.memoryid, 'shared', 'not-shared'))
}
testcase('array#issquare()') {
	tester(`array.zeros([]).issquare())
	tester(`array.zeros([3]).issquare())
	tester(`array.zeros([3, 4]).issquare())
	tester(`array.zeros([3, 3]).issquare())
	tester(`array.zeros([2, 4, 3, 3]).issquare())
	tester(`array.zeros([2, 4, 3, 2]).issquare())
}
testcase('pointer') {
	x = array.range(24, elemtype => `uint8).reshape([2, 3, 4])
	p = x.p
	p.dump()
	p += 10
	printf('%02x\n', p.get@int8())
	printf('%02x\n', p.get@int8())
	printf('%04x\n', p.get@int16())
	printf('%08x\n', p.get@int32())
}
testcase('index-get') {
	x = array.range(48).reshape([6, nil])
	println(x)
	tester(`x[0])
	tester(`x[5])
	tester(`x[0, 0])
	tester(`x[5, 0])
	tester(`x[5, 7])
	tester(`x[0, 7])
	tester(`x[2, 3])
	tester(`x[6, 0])
	tester(`x[0, 8])
	tester(`x[0, 2, 0])
	tester(`x[1..4, 2..6])
	tester(`x[1..4])
	tester(`x[*, *])
	tester(`x[*, 2..6])
	tester(`x[1..4, *])
	tester(`x[1..4, 3])
	tester(`x[4, 2..6])
}
testcase('index-set') {
	f() {`block} = array.zeros([6, 8], elemtype => `complex) {|x|
		println(block)
		try {
			block.eval()
			println(x)
		} catch {|e|
			println(e.text)
		}
	}
	f { x[] = 3 }
	f {
		x[0] = 1
		x[1] = 2
		x[2] = 3
		x[3] = 4
		x[4] = 5
		x[5] = 6
	}
	f { x[2..4] = 3 }
	f {
		x[0, 0] = 1
		x[5, 7] = 2
		x[5, 0] = 3
		x[0, 7] = 4
		x[1..4, 2..6] = 5
	}
	f { x[*, *] = 3 }
	f { x[*, 2..6] = 3 }
	f { x[1..4, *] = 3 }
	f { x[1..4, 3] = 3 }
	f { x[4, 2..6] = 3 }
	f { x[4, 3] = '' }
	f { x[] = '' }
	f { x[*, *] = true }
	f { x[*, 2..6] = true }
	f { x[1..4, *] = true }
	f { x[1..4, 3] = true }
	f { x[4, 2..6] = true }
}
testcase('index-set with iterator assigned') {
	f() {`block} = array.zeros([6, 8], elemtype => `complex) {|x|
		println(block)
		try {
			block.eval()
			println(x)
		} catch {|e|
			println(e.text)
		}
	}
	f{ x[] = 1.. }
	f {
		x[1] = 1..
		x[3] = 1..
	}
	f { x[1, 1..5] = 1.. }
	f { x[1..4, 3] = 1.. }
	f { x[1..4, 1..5] = 1.. }
	f { x[1..3, 1..3] = [1, 2, 3, 4, 5, 6, 7, 8, 9] }
	f { x[1..3, 1..3] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] }
	f { x[1..3, 1..3] = [[1, 2, [3]], [[4, 5, 6, 7], [8, 9]]] }
	f {
		x[1.., 1] = 1..
		x[1.., 5] = 6..
	}
	f { x[*, *] = 1.. }
	f { x[*, 2..6] = 1.. }
	f { x[1..4, *] = 1.. }
}
testcase('index-set with array assigned') {
	f() {`block} = array.zeros([5, 4, 3], elemtype => `complex) {|x|
		println(block)
		try {
			block.eval()
			println(x)
		} catch {|e|
			println(e.text)
		}
	}
	f { x[2] = array.range(12) + 1 }
	f { x[2] = array.range(8) + 1 }
	f { x[2] = (array.range(12) + 1).reshape([4, 3]) }
	f { x[2..] = array.range(12) + 1 }
	f { x[2..] = array.range(10) + 1 }
	f { x[*, *, 2] = array.range(4) + 1 }
	f { x[*, *, 2] = array.range(7) + 1 }
}
testcase('index-set between array@complex and array of other type') {
	x = array.zeros([12], elemtype => `complex)
	y = array.range(12)
	x[0..] = y
	println(x)
	x = array.zeros([12])
	y = array.range(12, elemtype => `complex)
	try {
		x[0..] = y
		println(x)
	} catch {|e|
		println('expected error occured: ', e.text)
	}
}
testcase('operation between array and complex') {
	x = array.range(10) + 1
	tester(`(x + 2j))
	tester(`(x - 2j))
	tester(`(x * 2j))
	tester(`(x / 2j))
	tester(`(x ** 2j))
	tester(`(2j + x))
	tester(`(2j - x))
	tester(`(2j * x))
	tester(`(2j / x))
}
testcase('index-set to array@complex') {
	f() {`block} = array.zeros([4, 3], elemtype => `complex) {|x|
		block.eval()
		println(block)
		println(x)
	}
	f { x[] = 3 }
	f { x[] = 1 + 2j }
	f { x[] = 1.. }
	f { x[1..3, 2] = 3 }
	f { x[1..3, 2] = 2 + 3j }
	f {
		x[0, 0] = 1
		x[0, 2] = 2
		x[3, 0] = 3
		x[3, 2] = 4
	}
	f {
		x[0, 0] = 1 + 2j
		x[0, 2] = 2 + 1j
		x[3, 0] = 3 - 2j
		x[3, 2] = 4 + 3j
	}
	f {
		x[0] = 1
		x[2] = 3
	}
	f {
		x[0] = 1 + 2j
		x[2] = 3 - 2j
	}
	f { x[1..3, 2] = 3.. }
	f { x[1..3, 2] = (3..) + 2j }
	f { x[2] = array {2, 3, 4} }
	f { x[2] = array(elemtype => `complex) {2 + 1j, 3 - 1j, 4} }
	f { x[2..] = array {2, 3, 4} }
	f { x[2..] = array(elemtype => `complex) {2 + 1j, 3 - 1j, 4} }
	f { x[2..] = array {2, 3, 4, 1} }
	f { x[2..] = array(elemtype => `complex) {2 + 1j, 3 - 1j, 4, 1} }
}
testcase('array#elemcast()') {
	cross (elemtypeSrc in elemtypeTbl, elemtypeDst in elemtypeTbl) {
		x = array([0..9], elemtypeSrc)
		try {
			y = x.elemcast(elemtypeDst)
			print(y)
		} catch {|e|
			print(e.text)
		}
		println(': ', elemtypeDst, ' <- ', elemtypeSrc,
				cond(x.memoryid == y.memoryid, ' [shared]', ''))
	}
}
testcase('store several matrices in a multi-dimensional array') {
	[`half, `float, `double, `complex].each {|elemtype|
		println(elemtype)
		x = array.zeros([5, 2, 2], elemtype => elemtype)
		repeat(5) {|i|
			x[i] = (array.rotation(60 * i, elemtype => elemtype):deg).roundoff()
		}
		println(x)
		tester(`(x |.| array {1, 0}))
	}
}
testcase('comparator') {
	elemtypeTbl.each {|elemtype|
		println(elemtype)
		x = array(0..9, elemtype => elemtype)
		tester(`(x == 5))
		tester(`(x != 5))
		tester(`(x > 5))
		tester(`(x < 5))
		tester(`(x >= 5))
		tester(`(x <= 5))
	}	
}
testcase('logical operation on array@boolean') {
	x = array(elemtype => `boolean) {false, true, false, true}
	y = array(elemtype => `boolean) {false, false, true, true}
	println(x, ' & ', y, ' -> ', x & y)
	println(x, ' | ', y, ' -> ', x | y)
	println(x, ' ^ ', y, ' -> ', x ^ y)
}
testcase('array#iselemsame()') {
	tester(`array(1..1000, elemtype => `double).iselemsame(array(1..1000, elemtype => `double)))
	tester(`array(1..1000, elemtype => `double).iselemsame(array(1..1000, elemtype => `float)))
	tester(`array(1..1000, elemtype => `double).iselemsame(array(1000..1, elemtype => `double)))
	tester(`array(1..1000, elemtype => `double).iselemsame(array(1..1000, elemtype => `double).reshape([nil])))
	tester(`array(1..1000, elemtype => `double).iselemsame(array(1..1000, elemtype => `double).reshape([100, nil])))
}
testcase('array#max(), array#min()') {
	x = array@int32 {
		{{ 1,  2,  1,  4},
		 {-2, -2,  1, -5},
		 { 2,  4,  0,  0}},
		
		{{ 2,  0,  1,  0},
		 { 3,  2,  3, -3},
		 { 4, -2,  3,  0}},
		
		{{-4,  3, -3,  3},
		 { 0, -1,  3,  1},
		 {-2, -5, -2, -3}},
		
		{{-3,  0,  3,  3},
		 {-1, -2, -3, -1},
		 { 2, -1, -3,  4}},
		
		{{-4, -3,  3,  1},
		 { 1,  2, -1,  4},
		 { 0, -3,  1,  3}}}
	println(x)
	tester(`x.max())
	tester(`x.max(0))
	tester(`x.max(1))
	tester(`x.max(2))
	tester(`x.max():index)
	tester(`x.max(0):index)
	tester(`x.max(1):index)
	tester(`x.max(2):index)
	tester(`x.max():last_index)
	tester(`x.max(0):last_index)
	tester(`x.max(1):last_index)
	tester(`x.max(2):last_index)
	tester(`x.min())
	tester(`x.min(0))
	tester(`x.min(1))
	tester(`x.min(2))
	tester(`x.min():index)
	tester(`x.min(0):index)
	tester(`x.min(1):index)
	tester(`x.min(2):index)
	tester(`x.min():last_index)
	tester(`x.min(0):last_index)
	tester(`x.min(1):last_index)
	tester(`x.min(2):last_index)
}
testcase('array#argmax(), array#argmin()') {
	x = array@int32 {
		{{ 1,  2,  1,  4},
		 {-2, -2,  1, -5},
		 { 2,  4,  0,  0}},
		
		{{ 2,  0,  1,  0},
		 { 3,  2,  3, -3},
		 { 4, -2,  3,  0}},
		
		{{-4,  3, -3,  3},
		 { 0, -1,  3,  1},
		 {-2, -5, -2, -3}},
		
		{{-3,  0,  3,  3},
		 {-1, -2, -3, -1},
		 { 2, -1, -3,  4}},
		
		{{-4, -3,  3,  1},
		 { 1,  2, -1,  4},
		 { 0, -3,  1,  3}}}
	println(x)
	tester(`x.argmax())
	tester(`x.argmax(0))
	tester(`x.argmax(1))
	tester(`x.argmax(2))
	tester(`x.argmax():last_index)
	tester(`x.argmax(0):last_index)
	tester(`x.argmax(1):last_index)
	tester(`x.argmax(2):last_index)
	tester(`x.argmin())
	tester(`x.argmin(0))
	tester(`x.argmin(1))
	tester(`x.argmin(2))
	tester(`x.argmin():last_index)
	tester(`x.argmin(0):last_index)
	tester(`x.argmin(1):last_index)
	tester(`x.argmin(2):last_index)
}
testcase('array#std()') {
	x = array@double {31, 30, 27, 25, 29, 34, 32, 31, 30, 29}
	tester(`x)
	tester(`x.std())
	tester(`x.std():p)
	x = array@double {{1, 2}, {3, 4}}
	tester(`x)
	tester(`x.std())
	tester(`x.std():p)
	tester(`x.std(0))
	tester(`x.std(0):p)
	tester(`x.std(1))
	tester(`x.std(1):p)
	x = array {
		{
			{5, 0, 3, 3, 7}
			{9, 3, 5, 2, 4}
			{7, 6, 8, 8, 1}
			{6, 7, 7, 8, 1}
		}, {
			{5, 9, 8, 9, 4}
			{3, 0, 3, 5, 0}
			{2, 3, 8, 1, 3}
			{3, 3, 7, 0, 1}
		}, {
			{9, 9, 0, 4, 7}
			{3, 2, 7, 2, 0}
			{0, 4, 5, 5, 6}
			{8, 4, 1, 4, 9}
		}
	}
	tester(`x)
	tester(`x.std())
	tester(`x.std(0))
	tester(`x.std(1))
	tester(`x.std(2))
	tester(`x.std():p)
	tester(`x.std(0):p)
	tester(`x.std(1):p)
	tester(`x.std(2):p)
}
testcase('array#var()') {
	x = array@double {31, 30, 27, 25, 29, 34, 32, 31, 30, 29}
	tester(`x)
	tester(`x.var())
	tester(`x.var():p)
	x = array@double {{1, 2}, {3, 4}}
	tester(`x)
	tester(`x.var())
	tester(`x.var():p)
	tester(`x.var(0))
	tester(`x.var(0):p)
	tester(`x.var(1))
	tester(`x.var(1):p)
	x = array {
		{
			{5, 0, 3, 3, 7}
			{9, 3, 5, 2, 4}
			{7, 6, 8, 8, 1}
			{6, 7, 7, 8, 1}
		}, {
			{5, 9, 8, 9, 4}
			{3, 0, 3, 5, 0}
			{2, 3, 8, 1, 3}
			{3, 3, 7, 0, 1}
		}, {
			{9, 9, 0, 4, 7}
			{3, 2, 7, 2, 0}
			{0, 4, 5, 5, 6}
			{8, 4, 1, 4, 9}
		}
	}
	tester(`x)
	tester(`x.var())
	tester(`x.var(0))
	tester(`x.var(1))
	tester(`x.var(2))
	tester(`x.var():p)
	tester(`x.var(0):p)
	tester(`x.var(1):p)
	tester(`x.var(2):p)
}
testcase('index-access test') {
	dst = array.zeros([5, 6])
	src = array.range(12).reshape([nil, 3])
	dst[*, [2, 3]] = src[*, [1, 2]]
	println(dst)
}

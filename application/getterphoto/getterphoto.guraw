#!/usr/bin/env gura
# encoding: utf-8
import(wx)
import(re)
import(gif)
import(jpeg)
import(yaml)
import(msico)

//-----------------------------------------------------------------------------
// main module
//-----------------------------------------------------------------------------
main = module {
	patternImgList:public = ['*.jpg']
	patternAviList:public = ['*.avi', '*.mov']
	charsAtoZ:public = chr(ord('A')..ord('Z'))
	if (sys.argv.len() < 2) {
		fileNameCfg:public = path.join(sys.localdir, 'getterphoto.yml')
	} else {
		fileNameCfg:public = sys.argv[1]
	}
	try {
		cfg:public = yaml.read(fileNameCfg)
	} except {
		cfg:public = %{}
	}
	main() = {
		cfg.store():default {
			'xFrame'			=> -1
			'yFrame'			=> -1
			'wdFrame'			=> 480
			'htFrame'			=> 680
			'dirNamesSrc'		=> []
			'dirNameDstBase'	=> path.join(sys.localdir, 'getterphoto')
			'dirNameStamperTgt'	=> ''
		}
		wx.IMPLEMENT_APP(App)
		yaml.write(fileNameCfg, cfg)
	}
}

//-----------------------------------------------------------------------------
// Page_Getter
//-----------------------------------------------------------------------------
Page_Getter = class(wx.Panel) {
	wdLabel = 80
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.AddSpacer(4)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.LEFT | wx.RIGHT, 2))
		outerBox.AddSpacer(4)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			wx.StaticText(this, wx.ID_ANY, 'Source', size => wx.Size(wdLabel, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTER_VERTICAL))
			}
			wx.ComboBox(this, wx.ID_ANY, '', style => wx.CB_READONLY) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.comboSourceDirNames = ctrl
			}
			wx.Button(this, wx.ID_ANY, 'Refresh') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 2))
				ctrl.Bind(wx.EVT_BUTTON) {
					this.UpdateSourceDirNames()
				}
			}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 2))
			wx.StaticText(this, wx.ID_ANY, 'Destination', size => wx.Size(wdLabel, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTER_VERTICAL))
			}
			wx.TextCtrl(this, wx.ID_ANY, '') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textDirNameDstBase = ctrl
			}
			wx.Button(this, wx.ID_ANY, '...', size => wx.Size(20, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 2))
				ctrl.Bind(wx.EVT_BUTTON) {
					dirName = this.textDirNameDstBase.GetValue()
					style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
					dlg = wx.DirDialog(this,
								'Choose a destination directory'
								dirName, style)
					if (dlg.ShowModal() == wx.ID_OK) {
						dirName = dlg.GetPath()
						this.textDirNameDstBase.SetValue(dirName)
						main.cfg['dirNameDstBase'] = dirName
					}
				}
			}
		}
		wx.ListCtrl(this, wx.ID_ANY, style => wx.LC_REPORT | wx.LC_HRULES) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 2))
			ctrl.SetImageList(App.imageList, wx.IMAGE_LIST_SMALL)
			ctrl.InsertColumn(0.., ['Source', 'Destination'])
			ctrl.Bind(wx.EVT_SIZE) {|event|
				size = event.GetSize()
				width = size.GetWidth() - 20
				wdColumn = width / 2
				ctrl.SetColumnWidth(0, wdColumn)
				width -= wdColumn
				ctrl.SetColumnWidth(1, width)
				event.Skip()
			}
			this.listFileNames = ctrl
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 2))
			wx.Button(this, wx.ID_ANY, 'Get Photo') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand())
				this.btnGetPhoto = ctrl
				ctrl.Bind(wx.EVT_BUTTON) {
					dirNameDstBase = this.textDirNameDstBase.GetValue()
					main.cfg['dirNameDstBase'] = dirNameDstBase
					indices = range(this.listFileNames.GetItemCount())
					this.GetPhoto(dirNameDstBase:string, indices)
				}
			}
			wx.Gauge(this, wx.ID_ANY, 100, style => wx.GA_HORIZONTAL) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.LEFT, 2))
				this.gauge = ctrl
			}
		}
		this.textDirNameDstBase.SetValue(main.cfg['dirNameDstBase'])
		this.UpdateSourceDirNames()
	}
	UpdateSourceDirNames() = {
		dirNames = path.join(chr(ord('A')..ord('K')) + ':', 'DCIM')
		dirNames = path.dir(dirNames.filter(path.exists(dirNames))):dir:list
		this.comboSourceDirNames.Clear()
		if (dirNames.len() == 0) {
			this.comboSourceDirNames.SetValue('')
		} else {
			this.comboSourceDirNames.Append(dirNames)
			this.comboSourceDirNames.Select(0)
		}
		this.UpdateFileNames()
	}
	UpdateFileNames() = {
		this.listFileNames.DeleteAllItems()
		dirName = this.comboSourceDirNames.GetValue()
		if (dirName == '') {
			this.btnGetPhoto.Enable(false)
			return
		}
		pathNames = path.dir(dirName, main.patternImgList*,
								main.patternAviList*):icase:file:list
		this.pathNames = pathNames
		pathNames.each {|pathName, idx|
			wx.ListItem {|item|
				item.SetId(idx)
				item.SetText(path.filename(pathName))
				item.SetImage(App.IMG_Image)
				this.listFileNames.InsertItem(item)
			}
		}
		this.btnGetPhoto.Enable(!pathNames.isempty())
	}
	GetPhoto(dirNameDstBase:string, index:number):map = {
		pathName = this.pathNames[index]
		pathNameDst = MakeUniqPathName(pathName, dirNameDstBase, true)
		!pathNameDst && return
		item = wx.ListItem()
		item.SetMask(wx.LIST_MASK_TEXT | wx.LIST_MASK_STATE)
		item.SetId(index)
		item.SetColumn(1)
		item.SetText(path.filename(pathNameDst))
		this.listFileNames.SetItem(item)
		this.listFileNames.Refresh()
		this.listFileNames.Update()
		this.listFileNames.SetItemState(index,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
		this.listFileNames.EnsureVisible(index)
		bytesProgress = 0
		stat = path.stat(pathName)
		copy(pathName, pathNameDst) {|buff|
			if (stat.size > 0) {
				this.gauge.SetValue(bytesProgress * 100 / stat.size)
				bytesProgress += buff.len()
			}
			this.Update()
		}
		this.gauge.SetValue(0)
		this.Update()
	}
}

//-----------------------------------------------------------------------------
// Page_Stamper
//-----------------------------------------------------------------------------
Page_Stamper = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.AddSpacer(4)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.LEFT | wx.RIGHT, 2))
		outerBox.AddSpacer(4)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			wx.StaticText(this, wx.ID_ANY, 'Target') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTER_VERTICAL))
			}
			wx.TextCtrl(this, wx.ID_ANY, '') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.LEFT, 8))
				this.textTargetDirName = ctrl
			}
			wx.Button(this, wx.ID_ANY, '..', size => wx.Size(20, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 2))
				ctrl.Bind(wx.EVT_BUTTON) {
					dirName = this.textTargetDirName.GetValue()
					style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
					dlg = wx.DirDialog(this,
								'Choose a directory containing image files',
								dirName, style)
					if (dlg.ShowModal() == wx.ID_OK) {
						dirName = dlg.GetPath()
						this.textTargetDirName.SetValue(dirName)
						main.cfg['dirNameStamperTgt'] = dirName
					}
					this.UpdateFileNames()
				}
			}
		}
		wx.ListCtrl(this, wx.ID_ANY, style => wx.LC_REPORT | wx.LC_HRULES) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 2))
			ctrl.SetImageList(App.imageList, wx.IMAGE_LIST_SMALL)
			ctrl.InsertColumn(0.., ['Original', 'Renamed'])
			ctrl.Bind(wx.EVT_SIZE) {|event|
				size = event.GetSize()
				width = size.GetWidth() - 20
				wdColumn = width / 2
				ctrl.SetColumnWidth(0, wdColumn)
				width -= wdColumn
				ctrl.SetColumnWidth(1, width)
				event.Skip()
			}
			ctrl.Bind(wx.EVT_LEFT_DOWN) {|event|
				[idx, flags, subitem] = ctrl.HitTest(event.GetPosition())
				if (flags == wx.LIST_HITTEST_ONITEMICON) {
					checkSymbol = this.checkSymbolTbl[idx]
					if (checkSymbol != `disabled) {
						checkSymbol = cond(checkSymbol == `checked,
														`unchecked, `checked)
						this.checkSymbolTbl[idx] = checkSymbol
						wx.ListItem {|item|
							item.SetId(idx)
							item.SetImage(cond(checkSymbol == `checked,
										App.IMG_BoxChecked, App.IMG_BoxUnckecked))
							this.listFileNames.SetItem(item)
						}
					}
				}
				event.Skip()
			}
			this.listFileNames = ctrl
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 4))
			wx.Button(this, wx.ID_ANY, 'Do Rename') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Centre())
				ctrl.Bind(wx.EVT_BUTTON) {
					this.DoRename()
					this.UpdateFileNames()
				}
				this.btnDoRename = ctrl
			}
		}
		this.textTargetDirName.SetValue(main.cfg['dirNameStamperTgt'])
		this.UpdateFileNames()
	}
	UpdateFileNames() = {
		this.listFileNames.DeleteAllItems()
		this.checkSymbolTbl = []
		dirName = this.textTargetDirName.GetValue()
		if (dirName == '') {
			this.btnDoRename.Enable(false)
			return
		}
		try {
			pathNames = path.dir(dirName, main.patternImgList*,
								main.patternAviList*):icase:file:list
		} except {
			pathNames = []
		}
		this.pathNames = pathNames
		pathNames.each {|pathName, idx|
			fileName = path.filename(pathName)
			renameFlag = !fileName.match(r'\d{4}_\d{2}\d{2}_\d{2}\d{2}\d{2}[A-Z][A-Z]')
			this.checkSymbolTbl.add(cond(renameFlag, `checked, `disabled))
			wx.ListItem {|item|
				item.SetId(idx)
				item.SetText(fileName)
				item.SetImage(cond(renameFlag,
							App.IMG_BoxChecked, App.IMG_BoxDisabled))
				this.listFileNames.InsertItem(item)
			}
			!renameFlag && continue
			pathNameDst = MakeUniqPathName(pathName, dirName, false)
			fileNameDst = path.filename(pathNameDst)
			wx.ListItem {|item|
				item.SetId(idx)
				item.SetColumn(1)
				item.SetText(fileNameDst)
				this.listFileNames.SetItem(item)
			}
		}
		this.btnDoRename.Enable(!this.checkSymbolTbl.isempty() && \
								(this.checkSymbolTbl == `checked).or())
	}
	DoRename() = {
		this.pathNames.each {|pathName, idx|
			(this.checkSymbolTbl[idx] != `checked) && continue
			[dirName, fileName] = path.split(pathName)
			pathNameDst = MakeUniqPathName(pathName, dirName, false)
			fs.rename(pathName, pathNameDst)
		}
	}
}

//-----------------------------------------------------------------------------
// Panel
//-----------------------------------------------------------------------------
Panel = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		wx.Notebook(this, wx.ID_ANY) {|note|
			note.SetPadding(wx.Size(8, 4))
			outerBox.Add(note, wx.SizerFlags(1).Expand())
			note.AddPage(Page_Getter(note), 'Getter', false, -1)
			note.AddPage(Page_Stamper(note), 'Stamper', false, -1)
		}
	}
}

//-----------------------------------------------------------------------------
// Frame
//-----------------------------------------------------------------------------
Frame = class(wx.Frame) {
	__init__(parent:wx.Window) = {|parent, wx.ID_ANY, 'Getter Photo',
							pos => wx.Point(main.cfg['xFrame', 'yFrame']*),
							size => wx.Size(main.cfg['wdFrame', 'htFrame']*)|
		this.SetIcon(wx.IconFromXPMData(mainicon_xpm))
		Panel(this)
		this.Bind(wx.EVT_MOVE) {|event|
			pt = this.GetPosition()
			main.cfg['xFrame', 'yFrame'] = [pt.x, pt.y]
			event.Skip()
		}
		this.Bind(wx.EVT_SIZE) {|event|
			size = event.GetSize()
			main.cfg['wdFrame', 'htFrame'] = [size.GetWidth(), size.GetHeight()]
			event.Skip()
		}
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		App.imageList:public = wx.ImageList(16, 16, true)
		App.IMG_Image:public = App.imageList.Add(wx.BitmapFromXPMData(Image_xpm))
		App.IMG_BoxChecked:public = App.imageList.Add(wx.BitmapFromXPMData(BoxChecked_xpm))
		App.IMG_BoxUnckecked:public = App.imageList.Add(wx.BitmapFromXPMData(BoxUnchecked_xpm))
		App.IMG_BoxDisabled:public = App.imageList.Add(wx.BitmapFromXPMData(BoxDisabled_xpm))
		frame = Frame(nil)
		//wx.StatusBar(frame)
		frame.Show()
		this.SetTopWindow(frame)
		true
	}
}

mainicon_xpm = @{
"32 32 495 2 0 0",
"   c None",
"!  c #000000",
"#  c #ffffff",
"$  c #ecd8d4",
"%  c #dca4a2",
"&  c #f6efed",
"'  c #f3f1ed",
"(  c #cc544b",
")  c #b70000",
"*  c #c14341",
"+  c #f5f1ee",
",  c #fdfcfc",
"-  c #fbfaf9",
".  c #fcfcfb",
"/  c #f5f3ef",
"0  c #faf9f8",
"1  c #e8e3d6",
"2  c #d35c41",
"3  c #c71209",
"4  c #b8211f",
"5  c #e9d9d3",
"6  c #e9e4dd",
"7  c #ebe7e0",
"8  c #ebe6e0",
"9  c #eae5de",
":  c #eae6e0",
";  c #f1efea",
"<  c #f6f4f1",
"=  c #e6c5c0",
">  c #c66b68",
"?  c #d4a9a1",
"@  c #e0d9cf",
"A  c #dc8d68",
"B  c #db9e87",
"C  c #d9cdc6",
"D  c #f2efea",
"E  c #f8f7f5",
"F  c #fafaf9",
"G  c #f2efeb",
"H  c #ede9e3",
"I  c #debcb8",
"J  c #a80504",
"K  c #b00301",
"L  c #c96c62",
"M  c #f9f8f6",
"N  c #ded6cc",
"O  c #e5dfd6",
"P  c #a29f99",
"Q  c #b6b2ad",
"R  c #f3f2f0",
"S  c #fbfbfa",
"T  c #fefefe",
"U  c #fdfdfd",
"V  c #f9f9f7",
"W  c #efece7",
"X  c #d7c6bb",
"Y  c #bf342b",
"Z  c #d13a1d",
"[  c #d5977a",
"]  c #fbfbfb",
"^  c #ebe6df",
"_  c #e7e2da",
"`  c #e0d294",
"a  c #cdbd61",
"b  c #e5dbb1",
"c  c #f0f0ef",
"d  c #f5f4f2",
"e  c #e9e7e4",
"f  c #b0aca5",
"g  c #baada4",
"h  c #d28d69",
"i  c #d3bdaa",
"j  c #eeeeec",
"k  c #f7f6f5",
"l  c #e8e4df",
"m  c #d8cfc2",
"n  c #e1dbd2",
"o  c #e6ddb0",
"p  c #494212",
"q  c #888682",
"r  c #ac9d38",
"s  c #f0efed",
"t  c #fdfdfc",
"u  c #e8e5dd",
"v  c #d9c665",
"w  c #d5c265",
"x  c #c6c0af",
"y  c #cfc5b6",
"z  c #cec4b4",
"{  c #e2ded7",
"|  c #b4b3b0",
"}  c #c8c8c6",
"~  c #cfc9c0",
"!! c #d6cec0",
"#! c #e2ddd4",
"$! c #eadfa5",
"%! c #504a26",
"&! c #3b3933",
"'! c #ccbd61",
"(! c #f6f6f5",
")! c #f8f8f8",
"*! c #ecde94",
"+! c #767159",
",! c #4f4d46",
"-! c #cebd6b",
".! c #d1c9bc",
"/! c #c1b4a0",
"0! c #f8f7f4",
"1! c #c4bbac",
"2! c #928a7b",
"3! c #a3998a",
"4! c #bcb3a5",
"5! c #b3aca0",
"6! c #a4a098",
"7! c #d0ccc1",
"8! c #f0e5a2",
"9! c #f1e69c",
":! c #fbf8ed",
";! c #edcecb",
"<! c #e2ada8",
"=! c #f3eab7",
">! c #665f34",
"?! c #2c2a22",
"@! c #c6b762",
"A! c #d1cabd",
"B! c #c0b39f",
"C! c #eeeae4",
"D! c #bcb7aa",
"E! c #97886e",
"F! c #95876c",
"G! c #b7ac98",
"H! c #a49e93",
"I! c #a5a19b",
"J! c #d9d5d0",
"K! c #f4f3f0",
"L! c #fdfafa",
"M! c #efccc9",
"N! c #e4b0ae",
"O! c #fcfbf8",
"P! c #f1e7a3",
"Q! c #e2d48c",
"R! c #e4dcb8",
"S! c #cfc7b9",
"T! c #b1a48d",
"U! c #e7e3dc",
"V! c #ceccc7",
"W! c #b6b1a8",
"X! c #b2ada2",
"Y! c #b6aea3",
"Z! c #bbb1a2",
"[! c #a39d96",
"]! c #c4bfb8",
"^! c #f1eee9",
"_! c #f7f6f3",
"`! c #fbfbf9",
"a! c #f6e5e5",
"b! c #ebc2bd",
"c! c #e9b8b4",
"d! c #f2dad9",
"e! c #eae5df",
"f! c #cec7bd",
"g! c #928a7f",
"h! c #aaa08f",
"i! c #edeae5",
"j! c #dbd7d1",
"k! c #dad8d4",
"l! c #e4e1dc",
"m! c #c7c1b7",
"n! c #c8bdad",
"o! c #ded7cc",
"p! c #e8e4dd",
"q! c #f0ede8",
"r! c #f7f6f4",
"s! c #f9f7f5",
"t! c #f6f5f2",
"u! c #f2f0ec",
"v! c #ebe7e1",
"w! c #e0dad0",
"x! c #bab3a8",
"y! c #898072",
"z! c #9e9181",
"{! c #faf9f7",
"|! c #e3e0db",
"}! c #f6f5f3",
"~! c #e0ded9",
"!# c #c2b6a3",
"## c #c4b8a5",
"$# c #cfc6b8",
"%# c #dbd3c8",
"&# c #e3ded6",
"'# c #e9e5de",
"(# c #eeebe5",
")# c #ede9e4",
"*# c #e5e0d8",
"+# c #ded7cd",
",# c #d2c9bb",
"-# c #a99f8f",
".# c #857b6c",
"/# c #b9af9f",
"0# c #e3e0da",
"1# c #fcfcfc",
"2# c #e0ddd7",
"3# c #b19d8a",
"4# c #bca894",
"5# c #c0b4a1",
"6# c #c9bead",
"7# c #d1c8ba",
"8# c #d7cfc3",
"9# c #dad3c8",
":# c #dbd4ca",
";# c #d8d0c3",
"<# c #d1c9bb",
"=# c #c9bfae",
"># c #bdb19d",
"?# c #b4a58d",
"@# c #af9c83",
"A# c #e6e1d8",
"B# c #ddd8d0",
"C# c #f2f0ee",
"D# c #efece8",
"E# c #c9bfaf",
"F# c #ae443b",
"G# c #b46a58",
"H# c #b99781",
"I# c #bba791",
"J# c #bdb09a",
"K# c #bfb3a0",
"L# c #c3b7a4",
"M# c #c4b7a5",
"N# c #c2b5a2",
"O# c #beb29e",
"P# c #baad97",
"Q# c #b5a68f",
"R# c #b19e84",
"S# c #b08c74",
"T# c #a15243",
"U# c #f6eaea",
"V# c #d4ccbf",
"W# c #d9d2c8",
"X# c #cec4b5",
"Y# c #b8ab95",
"Z# c #a82c25",
"[# c #b20000",
"]# c #b43a2e",
"^# c #b57864",
"_# c #bd9471",
"`# c #c0a178",
"a# c #bda67f",
"b# c #baa079",
"c# c #bb9974",
"d# c #b98a6e",
"e# c #b1725a",
"f# c #973326",
"g# c #a10302",
"h# c #e4bcbb",
"i# c #d9d2c6",
"j# c #b8aa94",
"k# c #b4a68e",
"l# c #b1a289",
"m# c #ae443c",
"n# c #bf3313",
"o# c #af2e0d",
"p# c #aa311c",
"q# c #a04536",
"r# c #a7543b",
"s# c #a96946",
"t# c #a76246",
"u# c #a24636",
"v# c #9d3924",
"w# c #a0180a",
"x# c #ad0000",
"y# c #aa0b0a",
"z# c #efe3e0",
"{# c #f2efec",
"|# c #b1a188",
"}# c #af9e83",
"~# c #b09f84",
"!$ c #d9cbc1",
"#$ c #c64c44",
"$$ c #b81206",
"%$ c #c5170b",
"&$ c #b94c1c",
"'$ c #c05d21",
"($ c #d14c25",
")$ c #c75928",
"*$ c #c84220",
"+$ c #b93d18",
",$ c #b25d1f",
"-$ c #ba2d0e",
".$ c #bb280d",
"/$ c #c12522",
"0$ c #c79e92",
"1$ c #f0eeea",
"2$ c #cbc1af",
"3$ c #a79577",
"4$ c #e4dfd8",
"5$ c #ece9e5",
"6$ c #e6b3ac",
"7$ c #d56056",
"8$ c #d4562c",
"9$ c #df9443",
":$ c #e9c35b",
";$ c #e2b04f",
"<$ c #da7732",
"=$ c #cd4120",
">$ c #c4361b",
"?$ c #c9453e",
"@$ c #d2928b",
"A$ c #d9d3ca",
"B$ c #d1c8bb",
"C$ c #e7e1da",
"D$ c #ae9e85",
"E$ c #e4dfd7",
"F$ c #eeeae5",
"G$ c #f5f3f1",
"H$ c #f9f2d9",
"I$ c #e2c573",
"J$ c #e0b953",
"K$ c #f2d064",
"L$ c #f7d769",
"M$ c #ca9c3e",
"N$ c #d6b38c",
"O$ c #e4e4e1",
"P$ c #f1f0ee",
"Q$ c #dfdcd6",
"R$ c #d5cec1",
"S$ c #efebe7",
"T$ c #dfd9cf",
"U$ c #f6f4f2",
"V$ c #f4f2ee",
"W$ c #f9f0cf",
"X$ c #cba045",
"Y$ c #d4a947",
"Z$ c #d4a846",
"[$ c #cc9f40",
"]$ c #c99b3d",
"^$ c #cbaa78",
"_$ c #fdfbf9",
"`$ c #f7f5f3",
"a$ c #dad6ce",
"b$ c #cbc1b1",
"c$ c #f4f1ea",
"d$ c #f3f0eb",
"e$ c #f9efcd",
"f$ c #b28439",
"g$ c #a3691a",
"h$ c #a56d1b",
"i$ c #ac7722",
"j$ c #ae7824",
"k$ c #dcc89b",
"l$ c #fcfbf9",
"m$ c #f5f4f1",
"n$ c #e0deda",
"o$ c #cec6b8",
"p$ c #bcad97",
"q$ c #fafaf8",
"r$ c #fdfbf7",
"s$ c #efebe0",
"t$ c #f5efdd",
"u$ c #ccb284",
"v$ c #ae7924",
"w$ c #b6832b",
"x$ c #b5802a",
"y$ c #cda958",
"z$ c #f3ecd7",
"{$ c #f9f8f3",
"|$ c #efedea",
"}$ c #d2ccc3",
"~$ c #c6baa9",
"!% c #cfc4b4",
"#% c #c7bcaa",
"$% c #d3cabd",
"%% c #d3cbbe",
"&% c #ece8e2",
"'% c #f8f6f4",
"(% c #fefdfd",
")% c #f9f6ee",
"*% c #e7e1d7",
"+% c #f0eadb",
",% c #decfab",
"-% c #d6c08a",
".% c #dac996",
"/% c #ece3ca",
"0% c #faf3df",
"1% c #e1ddd6",
"2% c #c5baa8",
"3% c #c7bba9",
"4% c #ddd5ca",
"5% c #d7cec1",
"6% c #c6baa7",
"7% c #cbc0b0",
"8% c #bbae99",
"9% c #f4f3ef",
":% c #ede7d8",
";% c #dcd5cb",
"<% c #e8e2db",
"=% c #ebe6dc",
">% c #ebe6dd",
"?% c #eee8da",
"@% c #f7f2e7",
"A% c #f0ede9",
"B% c #cdc5b8",
"C% c #ccc1b0",
"D% c #ece8e1",
"E% c #ddd6cb",
"F% c #bfb19c",
"G% c #d2cabb",
"H% c #b2a289",
"I% c #b9ac96",
"J% c #d0c6b7",
"K% c #e2dcd2",
"L% c #edeae4",
"M% c #f3efe9",
"N% c #d3c9b7",
"O% c #cdc3b3",
"P% c #d5ccbe",
"Q% c #d4cbbc",
"R% c #ede9e0",
"S% c #e3ded7",
"T% c #bdb09b",
"U% c #b1a086",
"V% c #d6cdbf",
"W% c #f4f2ed",
"X% c #c2b7a3",
"Y% c #ab997d",
"Z% c #b0a086",
"[% c #cabead",
"]% c #e3ddd4",
"^% c #ddd5c9",
"_% c #ad9c80",
"`% c #b4a48c",
"a% c #f5f3f0",
"b% c #cec6b9",
"c% c #ac9c80",
"d% c #ac9a7e",
"e% c #e4dfd6",
"f% c #e9e4de",
"g% c #b5a58b",
"h% c #d1cbc2",
"i% c #faf9f9",
"j% c #b7ac9a",
"k% c #a69475",
"l% c #ae9e84",
"m% c #b7a993",
"n% c #c2b6a2",
"o% c #d4cbbf",
"p% c #eae7e4",
"q% c #dbd6cc",
"r% c #a3906f",
"s% c #cabfad",
"t% c #baab95",
"u% c #9f8a68",
"v% c #cac1b1",
"w% c #a39275",
"x% c #ededec",
"y% c #eaeaea",
"z% c #b0a594",
"{% c #a28e6d",
"|% c #ad9b80",
"}% c #d3ccbf",
"~% c #eeebe7",
"!& c #e5e0d9",
"#& c #b7a992",
"$& c #e0dbd3",
"%& c #f4f2ef",
"&& c #dfdbd2",
"'& c #b4a68d",
"(& c #99835d",
")& c #a79576",
"*& c #b4a58b",
"+& c #ab9a7d",
",& c #c8c3bb",
"-& c #cbc7bf",
".& c #a89a82",
"/& c #a59273",
"0& c #b5a790",
"1& c #c1b5a2",
"2& c #b7a891",
"3& c #a39378",
"4& c #b8a992",
"5& c #bbaf99",
"6& c #a59272",
"7& c #a4967f",
"8& c #a7977c",
"9& c #ab997c",
":& c #cbc0af",
";& c #f5f4f4",
"<& c #dcdad7",
"=& c #c4baaa",
">& c #c2b8a7",
"?& c #d3d0cb",
"@& c #bcaf9a",
"A& c #b1a085",
"B& c #ccc4b6",
"C& c #f8f8f7",
"                      $ %                                       ",
"                      ( ) * +                                   ",
"                    1 2 3 4 5 6 7 8 9 :   < = > ?               ",
"                    @ A B C D E F F E G H I J K L               ",
"                    N O P Q R S T # U V W X Y Z [               ",
"                  ^ @ _ ` a b c T # T d e f g h i               ",
"            j k l m n o p q r s t # F u v w x y z               ",
"          { | } ~ !!#!$!%!&!'!(!U # )!*!+!,!-!.!/!              ",
"          1!2!3!4!5!6!7!8!9!:!U ;!<!. =!>!?!@!A!B!              ",
"          D!E!F!G!H!I!J!K!F T L!M!N!T O!P!Q!R!S!T!              ",
"          V!W!X!Y!Z![!]!^!_!`!a!b!c!d!M ' e!f!g!h!              ",
"          j!k!l!m!n!y o!p!q!/ r!E s!t!u!v!w!x!y!z!              ",
"          |!}!, ~!!###$#%#&#'#H (#)#7 *#+#,#-#.#/#              ",
"          0#V 1#2#3#4#5#6#7#8#9#:#9#;#<#=#>#?#@#                ",
"          B#C#D#E#F#G#H#I#J#K#L#M#N#O#P#Q#R#S#T#                ",
"          V#W#X#Y#Z#[#]#^#_#`#a#a#a#b#c#d#e#f#g#                ",
"          i#j#k#l#m#[#n#o#p#q#r#s#s#t#u#v#w#x#y#                ",
"            |#}#~#!$#$$$%$&$'$($)$*$+$,$-$.$/$0$                ",
"            2$3$L#4$5$6$7$8$9$:$;$<$=$>$?$@$A$B$                ",
"              D$i#E$F$G$H$I$J$K$L$M$N$O$P$)#Q$$#R$              ",
"              T$U$q!C!V$W$X$Y$Z$[$]$^$_$`$e a$b$5#              ",
"            7 t!# t c$d$e$f$g$h$i$j$k$l$m$n$o$6#p$              ",
"            n W q$T r$s$t$u$v$w$x$y$z${$|$}$~$!%#%;#            ",
"            $%%%&%'%(%)%*%+%,%-%.%/%0%< 1%2%3%4%5%6%            ",
"            7%8%$#6 9%- :%;%<%=%>%?%@%A%B%8%C%D%E%F%            ",
"            G%H%I%J%K%L%M%N%O%P%Q%R%M S%T%U%V%W%P%X%            ",
"              Y%Z%I%[%5%]%^%_%`%/!a%t b%c%d%e%f%g%h%            ",
"              j%k%l%m%n%o%p%q%r%s%d A%t%u%$#{ v%w%x%            ",
"              y%z%{%|%?#}%~%!&#&$&%&&&'&(&)&*&+&,&              ",
"                  -&.&/&0&1&2&3&4&3%5&6&7&8&9&:&                ",
"                      <&=&8%>&?&@&U%A&B&                        ",
"                                                                ",
};

Image_xpm = @{
"16 16 28 2 0 0",
"   c None",
"!  c #000000",
"#  c #ff0000",
"$  c #c0c0c0",
"%  c #a0a0a4",
"&  c #ffffff",
"'  c #808080",
"(  c #a6caf0",
")  c #408080",
"*  c #80c0c0",
"+  c #408040",
",  c #40a080",
"-  c #60a0c0",
".  c #fffbf0",
"/  c #206040",
"0  c #208040",
"1  c #20a080",
"2  c #60a080",
"3  c #204040",
"4  c #20a040",
"5  c #2080c0",
"6  c #6080c0",
"7  c #80a0c0",
"8  c #60c0c0",
"9  c #0060c0",
":  c #4080c0",
";  c #40a0c0",
"<  c #2060c0",
"                                ",
"$ % % % % % % % % % % % % % % $ ",
"% & & & & & & & & & & & & & & ' ",
"% & ( ( ( ( ( ( ( ( ( ( ( ( & ' ",
"% & ( ( & & ( ( ( ( ( & & ( & ' ",
"% & ) * ( & ( ( ( & & & & ( & ' ",
"% & + , - * . ( & & & & & ( & ' ",
"% & / 0 + 1 2 * ( ( ( ( ( ( & ' ",
"% & 3 3 / / 0 0 0 0 4 , 1 , & ' ",
"% & 5 6 - - - 7 * * * * 8 - & ' ",
"% & 9 9 5 5 5 : : ; ; ; - - & ' ",
"% & 9 9 9 < 5 5 5 5 5 5 : : & ' ",
"% & & & & & & & & & & & & & & ' ",
"$ ' ' ' ' ' ' ' ' ' ' ' ' ' ' $ ",
"                                ",
"                                ",
}

BoxChecked_xpm = @{
"16 16 4 2 0 0",
"   c None",
"!  c #000000",
"#  c #ff0000",
"$  c #ffffff",
"                                ",
"  ! ! ! ! ! ! ! ! ! ! ! ! ! !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ ! $ $ !   ",
"  ! $ $ $ $ $ $ $ $ ! ! $ $ !   ",
"  ! $ $ $ ! $ $ $ ! ! ! $ $ !   ",
"  ! $ $ $ ! ! $ ! ! ! $ $ $ !   ",
"  ! $ $ $ ! ! ! ! ! $ $ $ $ !   ",
"  ! $ $ $ $ ! ! ! $ $ $ $ $ !   ",
"  ! $ $ $ $ $ ! $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! ! ! ! ! ! ! ! ! ! ! ! ! !   ",
"                                ",
}

BoxUnchecked_xpm = @{
"16 16 4 2 0 0",
"   c None",
"!  c #000000",
"#  c #ff0000",
"$  c #ffffff",
"                                ",
"  ! ! ! ! ! ! ! ! ! ! ! ! ! !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! ! ! ! ! ! ! ! ! ! ! ! ! !   ",
"                                ",
}

BoxDisabled_xpm = @{
"16 16 4 2 0 0",
"   c None",
"!  c #000000",
"#  c #ff0000",
"$  c #c0c0c0",
"                                ",
"  ! ! ! ! ! ! ! ! ! ! ! ! ! !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! $ $ $ $ $ $ $ $ $ $ $ $ !   ",
"  ! ! ! ! ! ! ! ! ! ! ! ! ! !   ",
"                                ",
}

//-----------------------------------------------------------------------------
// utilities
//-----------------------------------------------------------------------------
MakeUniqPathName(pathName:string, dirNameDstBase:string, makeDirFlag:boolean):map = {
	try {
		stat = path.stat(pathName)
	} except { stat = nil }
	(!stat || stat.isdir) && return(nil)
	charsAtoZ = chr(ord('A')..ord('Z'))
	try { exif = jpeg.exif(pathName) } except { exif = nil }
	if (exif) {
		try {
			exif.DateTime.value.match(r'(\d{4}):(\d{2}):(\d{2})\s+(\d{2}):(\d{2}):(\d{2})') {|m|
				[year, month, day, hour, min, sec] = int(m[1..6])
			}
		} except { exif = nil }
	}
	if (!exif) {
		mtime = stat.mtime
		[year, month, day, hour, min, sec] = \
			[mtime.year, mtime.month, mtime.day, mtime.hour, mtime.min, mtime.sec]
	}
	if (makeDirFlag) {
		dirNameDst = path.join(dirNameDstBase, '%04d%02d%02d xxxx' % [year, month, day])
		!path.exists(dirNameDst) && fs.mkdir(dirNameDst):tree
	} else {
		dirNameDst = dirNameDstBase
	}
	[dirName, fileName] = path.split(pathName)
	[baseName, extName] = path.splitext(fileName)
	cross (upper in charsAtoZ, lower in charsAtoZ) {
		fileNameUniq = format('%04d_%02d%02d_%02d%02d%02d%s%s.%s',
			year, month, day, hour, min, sec, upper, lower, extName)
		pathNameUniq = path.join(dirNameDst, fileNameUniq)
		!path.exists(pathNameUniq) && break
		pathNameUniq = nil
	}
	pathNameUniq
}

//-----------------------------------------------------------------------------
// main function call
//-----------------------------------------------------------------------------
main.main()

#!/usr/bin/env gura
import(wx)
import(jpeg)
import(cairo)
import(resource)
import(units)

//-----------------------------------------------------------------------------
// Layout
//-----------------------------------------------------------------------------
Layout = struct(wdPaper:number, htPaper:number,
			wdImg:number, htImg:number, htTop:number, htFace:number)

layout = Layout(127 - 10, 89 - 10, 30, 40, 2, 30)
layout = Layout(127 - 10, 89 - 10, 24, 30, 2, 20)
//layout = Layout(89 - 10, 127 - 10, 30, 40, 2, 30)
layout = Layout(127 - 10, 89 - 10, 35, 45, 4, 34)

//-----------------------------------------------------------------------------
// FaceRatio
//-----------------------------------------------------------------------------
FaceRatio = struct(center:number, top:number, bottom:number)

//-----------------------------------------------------------------------------
// ComposeProduct
//-----------------------------------------------------------------------------
ComposeProduct(cr:cairo.context, layout:Layout, imgOrg:image, faceRatio:FaceRatio) = {
	[wdMgn, htMgn] = [2, 2]
	[wdGuide, htGuide] = [2, 2]
	htBottom = layout.htImg - layout.htTop - layout.htFace
	ratioBase = faceRatio.bottom - faceRatio.top
	imgExtract = scope {
		yTop = imgOrg.height * (faceRatio.top - ratioBase * layout.htTop / layout.htFace)
		yBottom = imgOrg.height * (faceRatio.bottom + ratioBase * htBottom / layout.htFace)
		height = yBottom - yTop
		width = height * layout.wdImg / layout.htImg
		xLeft = imgOrg.width * faceRatio.center - width / 2
		[wdDotMgn, htDotMgn] = imgOrg.height * ratioBase * [wdMgn, htMgn] / layout.htFace
		[xCrop, yCrop] = [xLeft - wdDotMgn, yTop - htDotMgn]
		[wdCrop, htCrop] = [width + wdDotMgn * 2, height + htDotMgn * 2]
		[wdDummy, htDummy] = [imgOrg.width / 4, imgOrg.height / 4]
		imgSrc = image(`rgba, imgOrg.width + wdDummy * 2, imgOrg.height + htDummy * 2, `gray)
		imgSrc.paste(wdDummy, htDummy, imgOrg)
		imgSrc.paste(wdDummy, 0, imgOrg.crop(0, 0, imgOrg.width, htDummy).flip(`vert))
		imgSrc.crop(xCrop + wdDummy, yCrop + htDummy, wdCrop, htCrop)
	}
	cairo.pattern.create_for_surface(imgExtract) {|pattern|
		[wdImgEx, htImgEx] = [layout.wdImg + wdMgn * 2,  layout.htImg + htMgn * 2]
		cr.set_line_width(.1)
		cr.set_source_rgb(.2, .2, 1)
		nx = int((layout.wdPaper - wdGuide) / (wdImgEx + wdGuide))
		ny = int((layout.htPaper - htGuide) / (htImgEx + htGuide))
		wdFrame = layout.wdPaper / nx
		htFrame = layout.htPaper / ny
		repeat(ny) {|iy|
			yFrame = htFrame * iy
			y = yFrame + (htFrame - htImgEx) / 2
			cr.move_to(0, y + htMgn)
			cr.line_to(layout.wdPaper, y + htMgn)
			cr.move_to(0, y + htImgEx - htMgn)
			cr.line_to(layout.wdPaper, y + htImgEx - htMgn)
			cr.stroke()
			repeat(nx) {|ix|
				xFrame = wdFrame * ix
				x = xFrame + (wdFrame - wdImgEx) / 2
				cr.move_to(x + wdMgn, y - htGuide)
				cr.line_to(x + wdMgn, y + htImgEx + htGuide)
				cr.move_to(x + wdImgEx - wdMgn, y - htGuide)
				cr.line_to(x + wdImgEx - wdMgn, y + htImgEx + htGuide)
				cr.stroke()
				cr.save {
					scale = htImgEx / imgExtract.height
					cr.translate(x, y)
					cr.scale(scale, scale)
					cr.set_source(pattern)
					cr.paint()
				}
			}
		}
	}
}

//-----------------------------------------------------------------------------
// ProductViewer
//-----------------------------------------------------------------------------
ProductViewer = class(wx.Panel) {
	// constructor
	__init__(parent:wx.Window) = {|parent|
		this.imgScreen = nil
		this.imgOrg = nil
		this.faceRatio = nil
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
	}
	// methods
	SetExtractedImage(imgOrg:image, faceRatio:FaceRatio) = {
		this.imgOrg = imgOrg
		this.faceRatio = faceRatio
	}
	UpdateContent() = {
		!this.imgOrg && return
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen.fill(`gray)
		wdImg = 600, htImg = int(wdImg * layout.htPaper / layout.wdPaper)
		img = image(`rgba, wdImg, htImg, `white)
		img.cairo {|cr|
			scale = wdImg / layout.wdPaper
			cr.scale(scale, scale)
			ComposeProduct(cr, layout, this.imgOrg, this.faceRatio)
		}
		//[x, y] = [(wdClient - img.width) / 2, (htClient - img.height) / 2]
		[x, y] = [0, 0]
		this.imgScreen.paste(x, y, img)
		this.Refresh()
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen = image(`rgb, wdClient, htClient, `gray)
		this.UpdateContent()
		this.Refresh()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		dc.DrawBitmap(this.imgScreen, 0, 0, false)
		dc = nil
	}
}

//-----------------------------------------------------------------------------
// Extractor
//-----------------------------------------------------------------------------
Extractor = class(wx.Panel) {
	public {
		faceRatio
		imgOrg
	}
	RatioCursor = .3
	// constructor
	__init__(parent:wx.Window, productViewer:ProductViewer) = {|parent, size => wx.Size(200, 200)|
		this.productViewer = productViewer
		this.grabTgt = nil
		this.faceRatio = FaceRatio(.5, .1, .6)
		this.imgOrg = image('face.jpg')
		this.imgScreen = nil
		this.rcImg = wx.Rect(0, 0, 0, 0)
		this.rcBox = wx.Rect(0, 0, 0, 0)
		this.penBox = wx.Pen(wx.Colour(255, 0, 0), 2, wx.SHORT_DASH)
		this.productViewer.SetExtractedImage(this.imgOrg, this.faceRatio)
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_LEFT_DOWN) {|event| this.OnLeftDown(event)}
		this.Bind(wx.EVT_LEFT_UP) {|event| this.OnLeftUp(event)}
		this.Bind(wx.EVT_MOTION) {|event| this.OnMotion(event)}
	}
	// methods
	SenseBox(pt:wx.Point) = {
		[wdSense, htSense] = [6, 6]
		wx.Rect((this.rcBox.GetLeft() + this.rcBox.GetRight() - wdSense) / 2, this.rcBox.GetTop(),
			wdSense, this.rcBox.height).Contains(pt) && return(`center)
		wx.Rect(this.rcBox.GetLeft(), this.rcBox.GetTop() - htSense / 2,
			this.rcBox.width, htSense).Contains(pt) && return(`top)
		wx.Rect(this.rcBox.GetLeft(), this.rcBox.GetBottom() - htSense / 2,
			this.rcBox.width, htSense).Contains(pt) && return(`bottom)
		nil
	}
	UpdateImageScreen() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen = image(`rgb, wdClient, htClient, `gray)
		img = this.imgOrg.thumbnail(wdClient, htClient)
		[x, y] = [(wdClient - img.width) / 2, (htClient - img.height) / 2]
		this.imgScreen.paste(x, y, img)
		this.rcImg = wx.Rect(x, y, img.width, img.height)
		this.UpdateRectBox()
	}
	UpdateRectBox() = {
		xLeft = this.rcImg.x + this.rcImg.width * (this.faceRatio.center - RatioCursor / 2)
		xRight = this.rcImg.x + this.rcImg.width * (this.faceRatio.center + RatioCursor / 2)
		yTop = this.rcImg.y + this.rcImg.height * this.faceRatio.top
		yBottom = this.rcImg.y + this.rcImg.height * this.faceRatio.bottom
		this.rcBox = wx.Rect(xLeft, yTop, xRight - xLeft, yBottom - yTop)
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		this.UpdateImageScreen()
		this.Refresh()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		!this.imgScreen && this.UpdateImageScreen()
		dc.DrawBitmap(this.imgScreen, 0, 0, false)
		dc.SetBrush(wx.TRANSPARENT_BRUSH)
		dc.SetPen(this.penBox)
		xCenter = (this.rcBox.GetLeft() + this.rcBox.GetRight()) / 2
		dc.DrawLine(xCenter, this.rcBox.GetTop(), xCenter, this.rcBox.GetBottom())
		dc.DrawLine(this.rcBox.GetLeft(), this.rcBox.GetTop(),
						this.rcBox.GetRight(), this.rcBox.GetTop())
		dc.DrawLine(this.rcBox.GetLeft(), this.rcBox.GetBottom(),
						this.rcBox.GetRight(), this.rcBox.GetBottom())
		dc = nil
	}
	OnLeftDown(event:wx.MouseEvent) = {
		if (!this.grabTgt) {
			this.grabTgt = this.SenseBox(event.GetPosition())
		}
		!this.HasCapture() && this.CaptureMouse()
	}
	OnLeftUp(event:wx.MouseEvent) = {
		this.HasCapture() && this.ReleaseMouse()
		if (this.grabTgt) {
			this.grabTgt = nil
			this.productViewer.SetExtractedImage(this.imgOrg, this.faceRatio)
			this.productViewer.UpdateContent()
		}
	}
	OnMotion(event:wx.MouseEvent) = {
		rtn = this.SenseBox(event.GetPosition())
		if (rtn == `center) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZEWE))
		} elsif (rtn in [`top, `bottom]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZENS))
		} else {
			this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
		}
		pt = event.GetPosition()
		if (this.grabTgt == `center) {
			this.faceRatio.center = (pt.x - this.rcImg.x) / this.rcImg.width
			if (this.faceRatio.center > 1 - RatioCursor / 2) {
				this.faceRatio.center = 1 - RatioCursor / 2
			} elsif (this.faceRatio.center < RatioCursor / 2) {
				this.faceRatio.center = RatioCursor / 2
			}
			this.UpdateRectBox()
			this.Refresh()
		} elsif (this.grabTgt == `top) {
			this.faceRatio.top = (pt.y - this.rcImg.y) / this.rcImg.height
			if (this.faceRatio.top < 0) {
				this.faceRatio.top = 0
			} elsif (this.faceRatio.top > this.faceRatio.bottom - .1) {
				this.faceRatio.top = this.faceRatio.bottom - .1
			}
			this.UpdateRectBox()
			this.Refresh()
		} elsif (this.grabTgt == `bottom) {
			this.faceRatio.bottom = (pt.y - this.rcImg.y) / this.rcImg.height
			if (this.faceRatio.bottom > 1) {
				this.faceRatio.bottom = 1
			} elsif (this.faceRatio.bottom < this.faceRatio.top + .1) {
				this.faceRatio.bottom = this.faceRatio.top + .1
			}
			this.UpdateRectBox()
			this.Refresh()
		}
	}
}

//-----------------------------------------------------------------------------
// Panel
//-----------------------------------------------------------------------------
Panel = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand())
		wx.StaticLine(this, wx.ID_ANY, style => wx.HORIZONTAL) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand())
		}
		productViewer = ProductViewer(this)
		this.extractor = Extractor(this, productViewer)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			hbox.Add(this.extractor, wx.SizerFlags())
			wx.Button(this, wx.ID_ANY, 'PDF') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 4))
				ctrl.Bind(wx.EVT_BUTTON) {
					cairo.create(cairo.pdf_surface.create('test.pdf',
								units.mm$pt(layout.wdPaper), units.mm$pt(layout.htPaper))) {|cr|
						scale = 72 / 25.4
						cr.scale(scale, scale)
						ComposeProduct(cr, layout, this.extractor.imgOrg, this.extractor.faceRatio)
						cr.show_page()
					}
				}
			}
		}
		wx.StaticLine(this, wx.ID_ANY, style => wx.HORIZONTAL) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand())
		}
		vbox.Add(productViewer, wx.SizerFlags(1).Expand())
	}
}

//-----------------------------------------------------------------------------
// Frame
//-----------------------------------------------------------------------------
Frame = class(wx.Frame) {
	__init__(title:string, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.Size(800, 700)) = {|nil, wx.ID_ANY, title, pos, size|
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		wx.MenuBar() {|menuBar|
			this.SetMenuBar(menuBar)
			wx.Menu() {|menu|
				menuBar.Append(menu, '&File')
				//menu.Append(wx.ID_ANY, 'Save')
				//menu.Append(wx.ID_ANY, 'Load')
				//menu.Append(wx.ID_ANY, 'Exit')
			}
		}
		Panel(this)
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		frame = Frame('gurashot')
		frame.Show()
		true
	}
}

wx.IMPLEMENT_APP(App)

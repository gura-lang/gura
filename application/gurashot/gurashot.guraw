#!/usr/bin/env gura
//=============================================================================
// gurashot
// Copyright (C) 2014 ypsitau
//=============================================================================
import(wx)
import(re)
import(yaml)
import(gif)
import(png)
import(jpeg)
import(xpm)
import(msico)
import(cairo)
import(resource)
import(mswin)
import(units)

//-----------------------------------------------------------------------------
// Layout
//-----------------------------------------------------------------------------
Layout = struct(htImg:number, wdImg:number, htTop:number, htFace:number,
						purpose:string, htPaper:number, wdPaper:number)

//-----------------------------------------------------------------------------
// ImageInfo
//-----------------------------------------------------------------------------
ImageInfo = class {
	public {
		fileName,	fileName_init
		rotate,		rotate_init
		center,		center_init
		top,		top_init
		bottom,		bottom_init
	}
	fileName_init	= ''
	rotate_init		= 0
	center_init		= .5
	top_init		= .1
	bottom_init		= .6
	__init__() = {
		this.Initialize()
	}
	Initialize() = {
		this.fileName	= fileName_init
		this.rotate		= rotate_init
		this.center		= center_init
		this.top		= top_init
		this.bottom		= bottom_init
	}
}

LoadConfig(fileNameCfg:string) = {
	try {
		cfg = yaml.read(fileNameCfg)
	} catch {|e|
		cfg = %{}
	}
	cfg.store():default {
		'wdFrame'			=> 600
		'htFrame'			=> 730
		'imgInfo'			=> %{
			'fileName'		=> ImageInfo.fileName_init
			'rotate'		=> ImageInfo.rotate_init
			'center'		=> ImageInfo.center_init
			'top'			=> ImageInfo.top_init
			'bottom'		=> ImageInfo.bottom_init
		}
	}
	cfg
}

SaveConfig() = {
	g.cfg['imgInfo'] = %{
		'fileName'	=> g.imgInfo.fileName
		'rotate'	=> g.imgInfo.rotate
		'center'	=> g.imgInfo.center
		'top'		=> g.imgInfo.top
		'bottom'	=> g.imgInfo.bottom
	}
	yaml.write(g.fileNameCfg, g.cfg)
}

//-----------------------------------------------------------------------------
// Global variables
//-----------------------------------------------------------------------------
g = module {
	fileNameTmpPDF:public = path.join(sys.localdir, 'gurashot.pdf')
	//fileNameCfg:public = path.join(sys.localdir, 'gurashot.yml')
	fileNameCfg:public = 'gurashot.yml'
	fileNameIcon:public = 'gurashot.ico'
	imgBlank:public = image(`rgba, 800, 800, color(240, 240, 255))
	imgBlank.cairo {|cr|
		cr.set_source_rgb(.8, 0.8, 0.8)
		cr.save {
			cr.scale(1, 1.1)
			cr.arc(400, 250, 180, 0, math.pi * 2)
			cr.fill()
		}
		cr.save {
			cr.scale(1, 5)
			cr.arc(400, 1090, 1000, 0, math.pi * 2)
			cr.fill()
		}
		cr.set_source_rgb(.5, 0.5, 0.5)
		cr.select_font_face('Sans', cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
		cr.set_font_size(100.0)
		cr.move_to(210, 400)
		cr.show_text('no image')
	}
	I(src:binary) = image(base64.reader(src))
	imgOpen:public = I(resource.book_open_png)
	imgRotateL:public = I(resource.arrow_rotate_anticlockwise_png)
	imgRotateR:public = I(resource.arrow_rotate_clockwise_png)
	imgShowList:public = I(resource.report_picture_png)
	layoutTbl:public = @(Layout) {
		{ 30, 24, 2, 23, "Driver's license",				 89 - 10, 127 - 10 }
		{ 30, 25, 2, 23, '',								 89 - 10, 127 - 10 }
		{ 30, 30, 2, 23, '',								 89 - 10, 127 - 10 }
		{ 35, 24, 2, 26, '',								127 - 10,  89 - 10 }
		{ 36, 24, 2, 27, '',								127 - 10,  89 - 10 }
		{ 36, 25, 2, 27, '',								127 - 10,  89 - 10 }
		{ 40, 30, 2, 30, 'Resume',							127 - 10,  89 - 10 }
		{ 40, 40, 2, 36, '',								 89 - 10, 127 - 10 }
		{ 45, 35, 4, 34, 'Passport',						 89 - 10, 127 - 10 }
		{ 50, 40, 4, 38, "International driver's license",	 89 - 10, 127 - 10 }
		{ 50, 50, 4, 35, 'Visa',							 89 - 10, 127 - 10 }
		{ 55, 40, 2, 41, '',								 89 - 10, 127 - 10 }
		{ 55, 45, 2, 41, '',								 89 - 10, 127 - 10 }
		{ 60, 45, 2, 45, '',								 89 - 10, 127 - 10 }
	}
	layoutCur:public = layoutTbl[0]
	cfg:public = LoadConfig(fileNameCfg)
	imgInfo:public = ImageInfo()
	try {
		imgInfo.fileName	= cfg['imgInfo']['fileName']
		imgInfo.rotate		= cfg['imgInfo']['rotate'].tonumber()
		imgInfo.center		= cfg['imgInfo']['center'].tonumber()
		imgInfo.top			= cfg['imgInfo']['top'].tonumber()
		imgInfo.bottom		= cfg['imgInfo']['bottom'].tonumber()
	} catch {
		imgInfo.Initialize()
	}
	imgRaw:public = imgBlank
	if (!imgInfo.fileName.isempty()) {
		try {
			imgRaw = image(imgInfo.fileName)
		} catch {
			imgInfo.fileName = ''
		}
	}
	imgOrg:public = imgRaw.rotate(imgInfo.rotate)
}

//-----------------------------------------------------------------------------
// ReadImageFile
//-----------------------------------------------------------------------------
ReadImageFile(parent:wx.Window, fileName:string) = {
	try {
		img = image(fileName)
	} catch {
		wx.MessageDialog(parent, 'Failed to read the image file',
								'Error', wx.OK | wx.ICON_ERROR) {|dlg|
			dlg.CentreOnParent()
			dlg.ShowModal()
		}
		return
	}
	g.imgInfo.Initialize()
	g.imgInfo.fileName = fileName
	g.imgRaw = img
	g.imgOrg = g.imgRaw
}

//-----------------------------------------------------------------------------
// RotateImageL / RotateImageR
//-----------------------------------------------------------------------------
RotateImageL() = {
	g.imgInfo.rotate = (g.imgInfo.rotate + 270) % 360
	g.imgOrg = g.imgRaw.rotate(g.imgInfo.rotate)
}

RotateImageR() = {
	g.imgInfo.rotate = (g.imgInfo.rotate + 90) % 360
	g.imgOrg = g.imgRaw.rotate(g.imgInfo.rotate)
}

//-----------------------------------------------------------------------------
// OpenWithApp
//-----------------------------------------------------------------------------
OpenWithApp(fileName:string) = {
	mswin.ole('Wscript.shell') {|wsh| wsh.Run(fileName)}
}

//-----------------------------------------------------------------------------
// ComposeProduct
//-----------------------------------------------------------------------------
ComposeProduct(cr:cairo.context, layout:Layout) = {
	fontName = 'Sans'
	[wdMgn, htMgn] = [2, 2]
	[wdGuide, htGuide] = [2, 2]
	htMessage = 5
	htBottom = layout.htImg - layout.htTop - layout.htFace
	ratioBase = g.imgInfo.bottom - g.imgInfo.top
	scope {
		cr.select_font_face(fontName, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
		cr.set_source_rgb(.2, .2, 1)
		cr.set_font_size(3.0)
		cr.move_to(0, layout.htPaper - 1)
		text = if (layout.purpose.isempty()) {
			format('[%dmm x %dmm]', layout.htImg, layout.wdImg)
		} else {
			format('[%dmm x %dmm] for %s', layout.htImg, layout.wdImg, layout.purpose)
		}
		cr.show_text(text)
	}
	imgExtract = scope {
		yTop = g.imgOrg.height * (g.imgInfo.top - ratioBase * layout.htTop / layout.htFace)
		yBottom = g.imgOrg.height * (g.imgInfo.bottom + ratioBase * htBottom / layout.htFace)
		height = yBottom - yTop
		width = height * layout.wdImg / layout.htImg
		xLeft = g.imgOrg.width * g.imgInfo.center - width / 2
		[wdDotMgn, htDotMgn] = g.imgOrg.height * ratioBase * [wdMgn, htMgn] / layout.htFace
		[xCrop, yCrop] = [xLeft - wdDotMgn, yTop - htDotMgn]
		[wdCrop, htCrop] = [width + wdDotMgn * 2, height + htDotMgn * 2]
		[wdDummy, htDummy] = [g.imgOrg.width / 2, g.imgOrg.height / 2]
		imgSrc = image(`rgba, g.imgOrg.width + wdDummy * 2, g.imgOrg.height + htDummy * 2, `gray)
		imgSrc.paste(wdDummy, htDummy, g.imgOrg)
		imgSrc.paste(wdDummy, 0,
			g.imgOrg.crop(0, 0, g.imgOrg.width, htDummy).flip(`vert))
		imgSrc.paste(wdDummy, htDummy + g.imgOrg.height,
			g.imgOrg.crop(0, g.imgOrg.height - htDummy, g.imgOrg.width, htDummy).flip(`vert))
		imgSrc.crop(xCrop + wdDummy, yCrop + htDummy, wdCrop, htCrop)
	}
	cairo.pattern.create_for_surface(imgExtract) {|pattern|
		[wdImgEx, htImgEx] = [layout.wdImg + wdMgn * 2,  layout.htImg + htMgn * 2]
		cr.set_line_width(.1)
		cr.set_source_rgb(.2, .2, 1)
		nx = int((layout.wdPaper - wdGuide) / (wdImgEx + wdGuide))
		ny = int((layout.htPaper - htGuide - htMessage) / (htImgEx + htGuide))
		wdFrame = layout.wdPaper / nx
		htFrame = (layout.htPaper - htMessage) / ny
		repeat(nx) {|ix|
			xFrame = wdFrame * ix
			x = xFrame + (wdFrame - wdImgEx) / 2
			cr.move_to(x + wdMgn, 0)
			cr.line_to(x + wdMgn, layout.htPaper - htMessage)
			cr.move_to(x + wdImgEx - wdMgn, 0)
			cr.line_to(x + wdImgEx - wdMgn, layout.htPaper - htMessage)
			cr.stroke()
		}
		repeat(ny) {|iy|
			yFrame = htFrame * iy
			y = yFrame + (htFrame - htImgEx) / 2
			cr.move_to(0, y + htMgn)
			cr.line_to(layout.wdPaper, y + htMgn)
			cr.move_to(0, y + htImgEx - htMgn)
			cr.line_to(layout.wdPaper, y + htImgEx - htMgn)
			cr.stroke()
		}
		cross(ix in range(nx), iy in range(ny)) {
			xFrame = wdFrame * ix
			yFrame = htFrame * iy
			x = xFrame + (wdFrame - wdImgEx) / 2
			y = yFrame + (htFrame - htImgEx) / 2
			cr.save {
				scale = htImgEx / imgExtract.height
				cr.translate(x, y)
				cr.scale(scale, scale)
				cr.set_source(pattern)
				cr.paint()
			}
		}
	}
}

ComposeProductPDF(fileName:string, layout:Layout) = {
	cairo.create(cairo.pdf_surface.create(fileName,
			units.mm$pt(g.layoutCur.wdPaper), units.mm$pt(g.layoutCur.htPaper))) {|cr|
		scale = 72 / 25.4
		cr.scale(scale, scale)
		ComposeProduct(cr, g.layoutCur)
		cr.show_page()
	}
}

//-----------------------------------------------------------------------------
// ProductViewer
//-----------------------------------------------------------------------------
ProductViewer = class(wx.Panel) {
	// constructor
	__init__(parent:wx.Windowm, style:number) = {|parent, style => style|
		this.imgScreen = nil
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
	}
	// methods
	UpdateContent() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen.fill(color(240, 240, 240))
		if (g.layoutCur.wdPaper > g.layoutCur.htPaper) {
			wdImg = 400, htImg = int(wdImg * g.layoutCur.htPaper / g.layoutCur.wdPaper)
		} else {
			htImg = 400, wdImg = int(htImg * g.layoutCur.wdPaper / g.layoutCur.htPaper)
		}
		img = image(`rgba, wdImg, htImg, `white)
		img.cairo {|cr|
			scale = wdImg / g.layoutCur.wdPaper
			cr.scale(scale, scale)
			ComposeProduct(cr, g.layoutCur)
		}
		if (wdClient < img.width) {
			x = 0
		} else {
			x = (wdClient - img.width) / 2
		}
		if (htClient < img.height) {
			y = 0
		} else {
			y = (htClient - img.height) / 2
		}
		this.imgScreen.paste(x, y, img)
		this.Refresh()
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen = image(`rgb, wdClient, htClient, `gray)
		this.UpdateContent()
		this.Refresh()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		dc.DrawBitmap(this.imgScreen, 0, 0, false)
		dc = nil
	}
}

//-----------------------------------------------------------------------------
// Extractor
//-----------------------------------------------------------------------------
Extractor = class(wx.Panel) {
	EdgeSize = 20
	// constructor
	__init__(parent:wx.Window, style:number, productViewer:ProductViewer) = \
							{|parent, style => style, size => wx.Size(250, 250)|
		this.productViewer = productViewer
		this.grabTgt = nil
		this.imgScreen = nil
		this.rcImg = wx.Rect(0, 0, 0, 0)
		this.rcBox = wx.Rect(0, 0, 0, 0)
		this.penBox = wx.Pen(wx.Colour(2552, 128, 128), 3, wx.PENSTYLE_SOLID)
		this.DragAcceptFiles(true)
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_LEFT_DOWN) {|event| this.OnLeftDown(event)}
		this.Bind(wx.EVT_LEFT_UP) {|event| this.OnLeftUp(event)}
		this.Bind(wx.EVT_MOTION) {|event| this.OnMotion(event)}
		this.Bind(wx.EVT_DROP_FILES) {|event| this.OnDropFiles(event)}
	}
	// methods
	SenseBox(pt:wx.Point) = {
		[wdSense, htSense] = [6, 6]
		wx.Rect(this.rcBox.GetLeft(), this.rcBox.GetTop() - htSense / 2,
			this.rcBox.width, htSense).Contains(pt) && return(`top)
		wx.Rect(this.rcBox.GetLeft(), this.rcBox.GetBottom() - htSense / 2,
			this.rcBox.width, htSense).Contains(pt) && return(`bottom)
		wx.Rect((this.rcBox.GetLeft() + this.rcBox.GetRight() - wdSense) / 2, this.rcBox.GetTop(),
			wdSense, this.rcBox.height).Contains(pt) && return(`center)
		nil
	}
	UpdateContent() = {
		this.UpdateImageScreen()
		this.Refresh()
	}
	UpdateImageScreen() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen = image(`rgb, wdClient, htClient + 1, `gray)
		img = g.imgOrg.thumbnail(wdClient, htClient)
		[x, y] = [(wdClient - img.width) / 2, (htClient - img.height) / 2]
		this.imgScreen.paste(x, y, img)
		this.rcImg = wx.Rect(x, y, img.width, img.height)
		this.UpdateRectBox()
	}
	UpdateRectBox() = {
		xLeft = this.rcImg.x + this.rcImg.width * g.imgInfo.center - EdgeSize / 2
		xRight = this.rcImg.x + this.rcImg.width * g.imgInfo.center + EdgeSize / 2
		yTop = this.rcImg.y + this.rcImg.height * g.imgInfo.top
		yBottom = this.rcImg.y + this.rcImg.height * g.imgInfo.bottom
		this.rcBox = wx.Rect(xLeft, yTop, xRight - xLeft, yBottom - yTop)
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		this.UpdateContent()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		!this.imgScreen && this.UpdateImageScreen()
		dc.DrawBitmap(this.imgScreen, 0, 0, false)
		dc.SetBrush(wx.TRANSPARENT_BRUSH)
		dc.SetPen(this.penBox)
		xCenter = (this.rcBox.GetLeft() + this.rcBox.GetRight()) / 2
		dc.DrawLine(xCenter, this.rcBox.GetTop(), xCenter, this.rcBox.GetBottom())
		dc.DrawLine(this.rcBox.GetLeft(), this.rcBox.GetTop(),
						this.rcBox.GetRight(), this.rcBox.GetTop())
		dc.DrawLine(this.rcBox.GetLeft(), this.rcBox.GetBottom(),
						this.rcBox.GetRight(), this.rcBox.GetBottom())
		dc = nil
	}
	OnLeftDown(event:wx.MouseEvent) = {
		if (!this.grabTgt) {
			this.grabTgt = this.SenseBox(event.GetPosition())
		}
		!this.HasCapture() && this.CaptureMouse()
	}
	OnLeftUp(event:wx.MouseEvent) = {
		this.HasCapture() && this.ReleaseMouse()
		if (this.grabTgt) {
			this.grabTgt = nil
			this.productViewer.UpdateContent()
		}
	}
	OnMotion(event:wx.MouseEvent) = {
		rtn = this.SenseBox(event.GetPosition())
		if (rtn == `center) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZEWE))
		} elsif (rtn in [`top, `bottom]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZENS))
		} else {
			this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
		}
		pt = event.GetPosition()
		if (this.grabTgt == `center) {
			g.imgInfo.center = (pt.x - this.rcImg.x) / this.rcImg.width
			if (g.imgInfo.center > 1) {
				g.imgInfo.center = 1
			} elsif (g.imgInfo.center < 0) {
				g.imgInfo.center = 0
			}
			this.UpdateRectBox()
			this.Refresh()
		} elsif (this.grabTgt == `top) {
			g.imgInfo.top = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfo.top < 0) {
				g.imgInfo.top = 0
			} elsif (g.imgInfo.top > g.imgInfo.bottom - .1) {
				g.imgInfo.top = g.imgInfo.bottom - .1
			}
			this.UpdateRectBox()
			this.Refresh()
		} elsif (this.grabTgt == `bottom) {
			g.imgInfo.bottom = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfo.bottom > 1) {
				g.imgInfo.bottom = 1
			} elsif (g.imgInfo.bottom < g.imgInfo.top + .1) {
				g.imgInfo.bottom = g.imgInfo.top + .1
			}
			this.UpdateRectBox()
			this.Refresh()
		}
	}
	OnDropFiles(event:wx.DropFilesEvent) = {
		fileNames = event.GetFiles()
		ReadImageFile(this, fileNames[0])
		this.UpdateContent()
		this.productViewer.UpdateContent()
	}
}

//-----------------------------------------------------------------------------
// Panel
//-----------------------------------------------------------------------------
Panel = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand())
		//wx.StaticLine(this, wx.ID_ANY, style => wx.HORIZONTAL) {|ctrl|
		//	vbox.Add(ctrl, wx.SizerFlags().Expand())
		//}
		this.productViewer = ProductViewer(this, wx.BORDER_SUNKEN)
		this.extractor = Extractor(this, wx.BORDER_SUNKEN, this.productViewer)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			hbox.Add(this.extractor, wx.SizerFlags())
			wx.BoxSizer(wx.VERTICAL) {|vbox|
				hbox.Add(vbox, wx.SizerFlags().Border(wx.LEFT, 2))
				wx.BitmapButton(this, wx.ID_ANY, g.imgOpen) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Border(wx.TOP, 2))
					ctrl.Bind(wx.EVT_BUTTON) {|event| this.OnButton_Open(event) }
				}
				wx.BitmapButton(this, wx.ID_ANY, g.imgShowList) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Border(wx.TOP, 4))
					ctrl.Bind(wx.EVT_BUTTON) {|event| this.OnButton_ShowList(event) }
				}
				wx.BitmapButton(this, wx.ID_ANY, g.imgRotateL) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Border(wx.TOP, 12))
					ctrl.Bind(wx.EVT_BUTTON) {|event| this.OnButton_RotateL(event) }
				}
				wx.BitmapButton(this, wx.ID_ANY, g.imgRotateR) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Border(wx.TOP, 4))
					ctrl.Bind(wx.EVT_BUTTON) {|event| this.OnButton_RotateR(event) }
				}
			}
			wx.BoxSizer(wx.VERTICAL) {|vbox|
				hbox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.LEFT, 2))
				wx.ListCtrl(this, wx.ID_ANY, style => wx.BORDER_SUNKEN | wx.LC_REPORT) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags(1).Expand())
					font = ctrl.GetFont()
					font.SetPointSize(11)
					ctrl.SetFont(font)
					ctrl.InsertColumn(0.., ['Size', 'Purpose'])
					ctrl.Bind(wx.EVT_SIZE) {|event|
						size = event.GetSize()
						width = size.GetWidth() - 22
						wdColumn = 150
						ctrl.SetColumnWidth(0, wdColumn)
						width -= wdColumn
						ctrl.SetColumnWidth(1, width)
						event.Skip()
					}
					g.layoutTbl.each {|layout, idx|
						wx.ListItem {|item|
							item.SetId(idx)
							item.SetText('%dmm x %dmm' % [layout.htImg, layout.wdImg])
							ctrl.InsertItem(item)
						}
						wx.ListItem {|item|
							item.SetId(idx)
							item.SetColumn(1)
							item.SetText(layout.purpose)
							ctrl.SetItem(item)
						}
					}
					ctrl.SetItemState(0,
							wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
							wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
					ctrl.Bind(wx.EVT_LIST_ITEM_SELECTED) {|event| this.OnListItemSelected(event) }
				}
				wx.BoxSizer(wx.HORIZONTAL) {|hbox|
					vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 4))
					wx.Button(this, wx.ID_ANY, 'Output PDF') {|ctrl|
						hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 2))
						ctrl.Bind(wx.EVT_BUTTON) {|event| this.OnButton_OutputPDF(event) }
					}
					wx.Button(this, wx.ID_ANY, 'View PDF') {|ctrl|
						hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 2))
						ctrl.Bind(wx.EVT_BUTTON) {|event| this.OnButton_ViewPDF(event) }
					}
				}
			}
		}
		vbox.Add(this.productViewer, wx.SizerFlags(1).Expand().Border(wx.TOP, 2))
	}
	OnListItemSelected(event:wx.ListEvent) = {
		idx = event.GetIndex()
		g.layoutCur = g.layoutTbl[idx]
		this.productViewer.UpdateContent()
	}
	OnButton_OutputPDF(event:wx.CommandEvent) = {
		filter = 'PDF file (*.pdf)|*.pdf|All files (*.*)|*.*'
		dlg = wx.FileDialog(this, 'Choose a PDF file to output',
								'', '', filter, wx.FD_SAVE)
		if (dlg.ShowModal() == wx.ID_OK) {
			fileNamePDF = dlg.GetPath()
			ComposeProductPDF(fileNamePDF, g.layoutCur)
		}
	}
	OnButton_ViewPDF(event:wx.CommandEvent) = {
		ComposeProductPDF(g.fileNameTmpPDF, g.layoutCur)
		try {
			OpenWithApp(g.fileNameTmpPDF)
		} catch {
			wx.MessageDialog(parent, 'Failed to launch PDF viewer',
									'Error', wx.OK | wx.ICON_ERROR) {|dlg|
				dlg.CentreOnParent()
				dlg.ShowModal()
			}
		}
	}
	OnButton_Open(event:wx.CommandEvent) = {
		filter = 'Image files (*.jpg;*.png;*.gif)|*.jpg;*.png;*.gif|All files (*.*)|*.*'
		dlg = wx.FileDialog(this, 'Choose an image file',
								'', g.imgInfo.fileName, filter, wx.FD_OPEN)
		if (dlg.ShowModal() == wx.ID_OK) {
			fileName = dlg.GetPath()
			ReadImageFile(this, fileName)
			this.extractor.UpdateContent()
			this.productViewer.UpdateContent()
		}
	}
	OnButton_ShowList(event:wx.CommandEvent) = {
		dlg = ImageListDialog(this)
		dlg.ShowModal()
	}
	OnButton_RotateL(event:wx.CommandEvent) = {
		RotateImageL()
		this.extractor.UpdateContent()
		this.productViewer.UpdateContent()
	}
	OnButton_RotateR(event:wx.CommandEvent) = {
		RotateImageR()
		this.extractor.UpdateContent()
		this.productViewer.UpdateContent()
	}
}

//-----------------------------------------------------------------------------
// Frame
//-----------------------------------------------------------------------------
Frame = class(wx.Frame) {
	__init__(title:string, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.Size(g.cfg['wdFrame', 'htFrame']*)) = {|nil, wx.ID_ANY, title, pos, size|
		this.SetIcon(wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO))
		/*
		wx.MenuBar() {|menuBar|
			this.SetMenuBar(menuBar)
			wx.Menu() {|menu|
				menuBar.Append(menu, '&File')
				//menu.Append(wx.ID_ANY, 'Exit')
			}
		}
		*/
		Panel(this)
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
	}
	OnSize(event:wx.SizeEvent) = {
		size = event.GetSize()
		g.cfg['wdFrame', 'htFrame'] = [size.GetWidth(), size.GetHeight()]
		event.Skip()
	}
}

//-----------------------------------------------------------------------------
// ImageListPanel
//-----------------------------------------------------------------------------
ImageListPanel = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand())
		size = 128
		imgList = wx.ImageList(size, size)
		imgInfos.each {|imgInfo|
			imgSrc = (image(imgInfo.fileName).thumbnail(size):box).rotate(imgInfo.rotate)
			img = image(`rgb, size, size, `gray)
			img.paste((size - imgSrc.width) / 2, (size - imgSrc.height) / 2, imgSrc)
			imgList.Add(img)
		}
		wx.ListView(this, wx.ID_ANY, style => wx.LC_ICON) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand())
			ctrl.SetImageList(imgList, wx.IMAGE_LIST_NORMAL)
			n = imgInfos.len()
			ctrl.InsertImageItem(0.., range(n)):void
			ctrl.SetItemPosition(range(n), wx.Point(140 * (0..), 0)):void
			ctrl.SetItemState(0,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
		}
	}
}

//-----------------------------------------------------------------------------
// ImageListDialog
//-----------------------------------------------------------------------------
ImageListDialog = class(wx.Dialog) {
	__init__(parent:wx.Window, imgInfos[]:ImageInfo, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.Size(640, 480)) = {|parent, wx.ID_ANY,
						'Image List', pos, size,
						style => (wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER)|
		this.SetIcon(wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO))
		ImageListPanel(this)
	}
	//OnSize(event:wx.SizeEvent) = {
	//	size = event.GetSize()
	//	g.cfg['wdFrame', 'htFrame'] = [size.GetWidth(), size.GetHeight()]
	//	event.Skip()
	//}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		frame = Frame('Gura Shot')
		frame.Show()
		true
		/*
		imgInfos = ImageInfo(path.glob('*.jpg'), -90)
		ImageListDialog(nil, imgInfos).ShowModal()
		false
		*/
	}
	OnExit() = {
		SaveConfig()
		0
	}
}

wx.IMPLEMENT_APP(App)

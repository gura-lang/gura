#!/usr/bin/env gura
//=============================================================================
// gurashot
// Copyright (C) 2014 ypsitau
//=============================================================================
import(wx)
import(re)
import(yaml)
import(gif)
import(png)
import(jpeg)
import(xpm)
import(msico)
import(cairo)
import(resource)
import(mswin)
import(units)

//-----------------------------------------------------------------------------
// Layout
//-----------------------------------------------------------------------------
Layout = struct(htImg:number, wdImg:number, htTop:number, htFace:number,
						purpose:string, htPaper:number, wdPaper:number)

//-----------------------------------------------------------------------------
// CursorCoord
//-----------------------------------------------------------------------------
CursorCoord = struct(xTop:number, xBtm:number, yTop:number, yBtm:number)

//-----------------------------------------------------------------------------
// FrameCoord
//-----------------------------------------------------------------------------
FrameCoord = struct(xTop:number, xBtm:number,
				yTop:number, yBtm:number, width:number, height:number)

//-----------------------------------------------------------------------------
// ImageInfo
//-----------------------------------------------------------------------------
ImageInfo = class {
	public {
		title,			title_init
		fileName,		fileName_init
		rotate,			rotate_init
		xrateTop,		xrateTop_init
		xrateBtm,		xrateBtm_init
		yrateTop,		yrateTop_init
		yrateBtm,		yrateBtm_init
		tiltAdjFlag,	tiltAdjFlag_init
	}
	title_init			= ''
	fileName_init		= ''
	rotate_init			= 0
	xrateTop_init		= .5
	xrateBtm_init		= .5
	yrateTop_init		= .1
	yrateBtm_init		= .6
	tiltAdjFlag_init	= false
	__init__() = {
		this.title			= title_init
		this.fileName		= fileName_init
		this.rotate			= rotate_init
		this.xrateTop		= xrateTop_init
		this.xrateBtm		= xrateBtm_init
		this.yrateTop		= yrateTop_init
		this.yrateBtm		= yrateBtm_init
		this.tiltAdjFlag	= tiltAdjFlag_init
	}
	CalcCursorCoord(rcImg:wx.Rect) = {
		CursorCoord(
			rcImg.x + rcImg.width * this.xrateTop,
			rcImg.x + rcImg.width * this.xrateBtm,
			rcImg.y + rcImg.height * this.yrateTop,
			rcImg.y + rcImg.height * this.yrateBtm)
	}
	CalcFrameCoord(rcImg:wx.Rect, layout:Layout) = {
		htBtm = layout.htImg - layout.htTop - layout.htFace
		xrateDiff = this.xrateBtm - this.xrateTop
		yrateDiff = this.yrateBtm - this.yrateTop
		xTop = rcImg.x + rcImg.width * (this.xrateTop - xrateDiff * layout.htTop / layout.htFace),
		xBtm = rcImg.x + rcImg.width * (this.xrateBtm + xrateDiff * htBtm / layout.htFace),
		yTop = rcImg.y + rcImg.height * (this.yrateTop - yrateDiff * layout.htTop / layout.htFace),
		yBtm = rcImg.y + rcImg.height * (this.yrateBtm + yrateDiff * htBtm / layout.htFace)
		height = math.sqrt((xBtm - xTop) ** 2 + (yBtm - yTop) ** 2)
		width = height * layout.wdImg / layout.htImg
		FrameCoord(xTop, xBtm, yTop, yBtm, width, height)
	}
}

//-----------------------------------------------------------------------------
// Global variables
//-----------------------------------------------------------------------------
g = module {
	fileNameTmpPDF:public	= path.join(sys.workdir, 'gurashot.pdf')
	fileNameCfg:public		= path.join(sys.cfgdir, 'gurashot.yml')
	//fileNameCfg:public	= 'gurashot.yml'
	fileNameIcon:public		= 'gurashot.ico'
	imgBlank:public = image(`rgba, 800, 800, color(240, 240, 255))
	imgBlank.cairo {|cr|
		cr.set_source_rgb(.8, 0.8, 0.8)
		cr.save {
			cr.scale(1, 1.1)
			cr.arc(400, 250, 180, 0, math.pi * 2)
			cr.fill()
		}
		cr.save {
			cr.scale(1, 5)
			cr.arc(400, 1090, 1000, 0, math.pi * 2)
			cr.fill()
		}
		cr.set_source_rgb(.5, 0.5, 0.5)
		cr.select_font_face('Sans', cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
		cr.set_font_size(100.0)
		cr.move_to(210, 400)
		cr.show_text('no image')
	}
	I(src:binary) = image(base64.reader(src))
	imgOpen:public			= I(resource.folder_image_png)
	imgShowList:public		= I(resource.report_picture_png)
	imgNext:public			= I(resource.resultset_next_png)
	imgPrev:public			= I(resource.resultset_previous_png)
	imgRotateL:public		= I(resource.arrow_rotate_anticlockwise_png)
	imgRotateR:public		= I(resource.arrow_rotate_clockwise_png)
	imgTiltAdj:public		= I(resource.tilt_adj_png)
	imgCenterGuide:public	= I(resource.center_guide_png)
	imgFrostFrame:public	= I(resource.user_frosted_png)
	layoutTbl:public = @(Layout) {
		{ 30, 24, 2, 23, "Driver's license",				 89 - 10, 127 - 10 }
		{ 30, 25, 2, 23, '',								 89 - 10, 127 - 10 }
		{ 30, 30, 2, 23, '',								 89 - 10, 127 - 10 }
		{ 35, 24, 2, 26, '',								127 - 10,  89 - 10 }
		{ 36, 24, 2, 27, '',								127 - 10,  89 - 10 }
		{ 36, 25, 2, 27, '',								127 - 10,  89 - 10 }
		{ 40, 30, 2, 30, 'Resume',							127 - 10,  89 - 10 }
		{ 40, 40, 2, 36, '',								 89 - 10, 127 - 10 }
		{ 45, 35, 4, 34, 'Passport',						 89 - 10, 127 - 10 }
		{ 50, 40, 4, 38, "International driver's license",	 89 - 10, 127 - 10 }
		{ 50, 50, 4, 35, 'Visa',							 89 - 10, 127 - 10 }
		{ 55, 40, 2, 41, '',								 89 - 10, 127 - 10 }
		{ 55, 45, 2, 41, '',								 89 - 10, 127 - 10 }
		{ 60, 45, 2, 45, '',								 89 - 10, 127 - 10 }
	}
	layoutCur:public		= layoutTbl[0]
	cfg:public				= %{}
	imgInfos:public			= []
	imgInfoCur:public		= nil
	imgPhotoRaw:public		= imgBlank
	imgPhotoHighRes:public	= nil
	imgPhotoLowRes:public	= nil
	frame:public			= nil
	frostFrameFlag:public	= false
	centerGuideFlag:public	= false
}

//-----------------------------------------------------------------------------
// LoadConfig / SaveConfig
//-----------------------------------------------------------------------------
LoadConfig() = {
	try {
		g.cfg = yaml.read(g.fileNameCfg)
	} catch {}
	g.cfg.store():default {
		'wdFrame'			=> 650
		'htFrame'			=> 730
		'frostFrameFlag'	=> 'false'
		'centerGuideFlag'	=> 'false'
		'idxImgInfoCur'		=> -1
		'imgInfos'			=> []
	}
	g.frostFrameFlag = (g.cfg['frostFrameFlag'] == 'true')
	g.centerGuideFlag = (g.cfg['centerGuideFlag'] == 'true')
	g.cfg['imgInfos'].each {|dict|
		imgInfo = ImageInfo()
		try {
			imgInfo.title		= dict['title']
			imgInfo.fileName	= dict['fileName']
			imgInfo.rotate		= dict['rotate'].tonumber()
			imgInfo.xrateTop	= dict['xrateTop'].tonumber()
			imgInfo.xrateBtm	= dict['xrateBtm'].tonumber()
			imgInfo.yrateTop	= dict['yrateTop'].tonumber()
			imgInfo.yrateBtm	= dict['yrateBtm'].tonumber()
			imgInfo.tiltAdjFlag	= (dict['tiltAdjFlag'] == 'true')
			g.imgInfos.add(imgInfo)
		} catch {}
	}
	if (g.imgInfos.isempty()) {
		g.imgInfoCur = ImageInfo()
	} else {
		try {
			idxImgInfoCur = g.cfg['idxImgInfoCur'].tonumber()
			g.imgInfoCur = g.imgInfos[idxImgInfoCur]
		} catch {|e|
			g.imgInfoCur = g.imgInfos.last()
		}
	}
	if (!g.imgInfoCur.fileName.isempty()) {
		try {
			g.imgPhotoRaw = image(g.imgInfoCur.fileName)
		} catch {
			g.imgInfoCur.fileName = ''
		}
	}
}

LoadConfig()

SaveConfig() = {
	g.cfg['frostFrameFlag'] = g.frostFrameFlag
	g.cfg['centerGuideFlag'] = g.centerGuideFlag
	g.cfg['imgInfos'] = g.imgInfos.each():list {|imgInfo|
		%{
			'title'			=> imgInfo.title
			'fileName'		=> imgInfo.fileName
			'rotate'		=> imgInfo.rotate
			'xrateTop'		=> imgInfo.xrateTop
			'xrateBtm'		=> imgInfo.xrateBtm
			'yrateTop'		=> imgInfo.yrateTop
			'yrateBtm'		=> imgInfo.yrateBtm
			'tiltAdjFlag'	=> imgInfo.tiltAdjFlag
		}
	}
	g.cfg['idxImgInfoCur'] = g.imgInfos.find(g.imgInfoCur):index || -1
	yaml.write(g.fileNameCfg, g.cfg)
}

//-----------------------------------------------------------------------------
// UpdateImagePhoto
//-----------------------------------------------------------------------------
UpdateImagePhoto() = {
	g.imgPhotoHighRes = g.imgPhotoRaw.rotate(g.imgInfoCur.rotate)
	g.imgPhotoLowRes = g.imgPhotoHighRes.thumbnail(1000):box
}

UpdateImagePhoto()

//-----------------------------------------------------------------------------
// ReadImageFile
//-----------------------------------------------------------------------------
ReadImageFile(parent:wx.Window, fileName:string) = {
	try {
		img = image(fileName)
	} catch {
		wx.MessageDialog(parent, 'Failed to read the image file',
								'Error', wx.OK | wx.ICON_ERROR) {|dlg|
			dlg.CentreOnParent()
			dlg.ShowModal()
		}
		return
	}
	idx = g.imgInfos:*fileName.find(fileName):index
	if (idx) {
		g.imgInfoCur = g.imgInfos[idx]
	} else {
		g.imgInfoCur = ImageInfo()
		g.imgInfoCur.title = path.basename(path.filename(fileName))
		g.imgInfoCur.fileName = fileName
		g.imgInfos.add(g.imgInfoCur)
	}
	g.imgPhotoRaw = img
	UpdateImagePhoto()
}

//-----------------------------------------------------------------------------
// RotateImageL / RotateImageR
//-----------------------------------------------------------------------------
RotateImageL() = {
	g.imgInfoCur.rotate = (g.imgInfoCur.rotate + 270) % 360
	UpdateImagePhoto()
}

RotateImageR() = {
	g.imgInfoCur.rotate = (g.imgInfoCur.rotate + 90) % 360
	UpdateImagePhoto()
}

//-----------------------------------------------------------------------------
// OpenWithApp
//-----------------------------------------------------------------------------
OpenWithApp(fileName:string) = {
	mswin.ole('Wscript.shell') {|wsh| wsh.Run(fileName)}
}

//-----------------------------------------------------------------------------
// ComposeProduct
//-----------------------------------------------------------------------------
ComposeProduct(cr:cairo.context, imgPhoto:image, layout:Layout) = {
	fontName = 'Sans'
	[wdMgn, htMgn] = [2, 2]
	[wdGuide, htGuide] = [2, 2]
	htMessage = 5
	scope {
		cr.select_font_face(fontName, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
		cr.set_source_rgb(.2, .2, 1)
		cr.set_font_size(3.0)
		cr.move_to(0, layout.htPaper - 1)
		text = if (layout.purpose.isempty()) {
			format('[%dmm x %dmm]', layout.htImg, layout.wdImg)
		} else {
			format('[%dmm x %dmm] for %s', layout.htImg, layout.wdImg, layout.purpose)
		}
		cr.show_text(text)
	}
	bgColor = `gray
	[wdDummy, htDummy] = [imgPhoto.width / 2, imgPhoto.height / 2]
	imgSrc = image(`rgba, imgPhoto.width + wdDummy * 2, imgPhoto.height + htDummy * 2, bgColor)
	// +----+----+----+
	// | NW | N  | NE |
	// +----+----+----+
	// | W  | c  | E  |
	// +----+----+----+
	// | SW | S  | SE |
	// +----+----+----+
	imgSrc.paste(wdDummy, htDummy, imgPhoto)
	// paste dummy on N
	imgSrc.paste(wdDummy, 0,
		imgPhoto.crop(0, 0, imgPhoto.width, htDummy).flip(`vert))
	// paste dummy on S
	imgSrc.paste(wdDummy, htDummy + imgPhoto.height,
		imgPhoto.crop(0, imgPhoto.height - htDummy, imgPhoto.width, htDummy).flip(`vert))
	// paste dummy on W
	imgSrc.paste(0, htDummy,
		imgPhoto.crop(0, 0, wdDummy, imgPhoto.height).flip(`horz))
	// paste dummy on E
	imgSrc.paste(wdDummy + imgPhoto.width, htDummy,
		imgPhoto.crop(imgPhoto.width - wdDummy, 0, wdDummy, imgPhoto.height).flip(`horz))
	// paste dummy on NW
	imgSrc.paste(0, 0,
		imgPhoto.crop(0, 0, wdDummy, htDummy).rotate(180))
	// paste dummy on NE
	imgSrc.paste(wdDummy + imgPhoto.width, 0,
		imgPhoto.crop(imgPhoto.width - wdDummy, 0, wdDummy, htDummy).rotate(180))
	// paste dummy on SW
	imgSrc.paste(0, htDummy + imgPhoto.height,
		imgPhoto.crop(0, imgPhoto.height - htDummy, wdDummy, htDummy).rotate(180))
	// paste dummy on SE
	imgSrc.paste(wdDummy + imgPhoto.width, htDummy + imgPhoto.height,
		imgPhoto.crop(imgPhoto.width - wdDummy, imgPhoto.height - htDummy, wdDummy, htDummy).rotate(180))
	f = g.imgInfoCur.CalcFrameCoord(wx.Rect(wdDummy, htDummy, imgPhoto.width, imgPhoto.height), layout)
	[wdDotMgn, htDotMgn] = f.height * [wdMgn, htMgn] / layout.htImg
	if (g.imgInfoCur.tiltAdjFlag) {
		angleAdj = math.atan2(f.xBtm - f.xTop, f.yBtm - f.yTop):deg
		[xCenter, yCenter] = [imgSrc.width / 2, imgSrc.height / 2]
		imgSrc = imgSrc.rotate(angleAdj, `gray)
		[xPivot, yPivot] = [f.xTop - xCenter, -f.yTop + yCenter]
		[yPivot, xPivot] = matrix.rotation(angleAdj):deg * [yPivot, xPivot]
		[xPivot, yPivot] = [xPivot + imgSrc.width / 2, -yPivot + imgSrc.height / 2]
	} else {
		[xPivot, yPivot] = [f.xTop, f.yTop]
	}
	[xCrop, yCrop] = [xPivot - f.width / 2 - wdDotMgn, yPivot - htDotMgn]
	[wdCrop, htCrop] = [f.width + wdDotMgn * 2, f.height + htDotMgn * 2]
	imgExtract = imgSrc.crop(xCrop, yCrop, wdCrop, htCrop)
	cairo.pattern.create_for_surface(imgExtract) {|pattern|
		[wdImgEx, htImgEx] = [layout.wdImg + wdMgn * 2,  layout.htImg + htMgn * 2]
		cr.set_line_width(.1)
		cr.set_source_rgb(.2, .2, 1)
		nx = int((layout.wdPaper - wdGuide) / (wdImgEx + wdGuide))
		ny = int((layout.htPaper - htGuide - htMessage) / (htImgEx + htGuide))
		wdFrame = layout.wdPaper / nx
		htFrame = (layout.htPaper - htMessage) / ny
		repeat(nx) {|ix|
			xFrame = wdFrame * ix
			x = xFrame + (wdFrame - wdImgEx) / 2
			cr.move_to(x + wdMgn, 0)
			cr.line_to(x + wdMgn, layout.htPaper - htMessage)
			cr.move_to(x + wdImgEx - wdMgn, 0)
			cr.line_to(x + wdImgEx - wdMgn, layout.htPaper - htMessage)
			cr.stroke()
		}
		repeat(ny) {|iy|
			yFrame = htFrame * iy
			y = yFrame + (htFrame - htImgEx) / 2
			cr.move_to(0, y + htMgn)
			cr.line_to(layout.wdPaper, y + htMgn)
			cr.move_to(0, y + htImgEx - htMgn)
			cr.line_to(layout.wdPaper, y + htImgEx - htMgn)
			cr.stroke()
		}
		cross(ix in range(nx), iy in range(ny)) {
			xFrame = wdFrame * ix
			yFrame = htFrame * iy
			x = xFrame + (wdFrame - wdImgEx) / 2
			y = yFrame + (htFrame - htImgEx) / 2
			cr.save {
				scale = htImgEx / imgExtract.height
				cr.translate(x, y)
				cr.scale(scale, scale)
				cr.set_source(pattern)
				cr.paint()
			}
		}
	}
}

ComposeProductPDF(fileName:string, imgPhoto:image, layout:Layout) = {
	cairo.create(cairo.pdf_surface.create(fileName,
			units.mm$pt(layout.wdPaper), units.mm$pt(layout.htPaper))) {|cr|
		scale = 72 / 25.4
		cr.scale(scale, scale)
		ComposeProduct(cr, imgPhoto, layout)
		cr.show_page()
	}
}

//-----------------------------------------------------------------------------
// ProductViewer
//-----------------------------------------------------------------------------
ProductViewer = class(wx.Panel) {
	// constructor
	__init__(parent:wx.Windowm, style:number) = {|parent, style => style|
		this.imgScreen = nil
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
	}
	// methods
	UpdateContent(blankFlag:boolean => false) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen.fill(color(240, 240, 240))
		if (g.layoutCur.wdPaper > g.layoutCur.htPaper) {
			wdImg = 400, htImg = int(wdImg * g.layoutCur.htPaper / g.layoutCur.wdPaper)
		} else {
			htImg = 400, wdImg = int(htImg * g.layoutCur.wdPaper / g.layoutCur.htPaper)
		}
		img = image(`rgba, wdImg, htImg, `white)
		if (!blankFlag) {
			img.cairo {|cr|
				scale = wdImg / g.layoutCur.wdPaper
				cr.scale(scale, scale)
				ComposeProduct(cr, g.imgPhotoLowRes, g.layoutCur)
			}
		}
		if (wdClient < img.width) {
			x = 0
		} else {
			x = (wdClient - img.width) / 2
		}
		if (htClient < img.height) {
			y = 0
		} else {
			y = (htClient - img.height) / 2
		}
		this.imgScreen.paste(x, y, img)
		this.Refresh()
		this.Update()
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen = image(`rgb, wdClient, htClient, `gray)
		this.UpdateContent()
		this.Refresh()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		dc.DrawBitmap(this.imgScreen, 0, 0, false)
		dc = nil
	}
}

//-----------------------------------------------------------------------------
// Extractor
//-----------------------------------------------------------------------------
Extractor = class(wx.Panel) {
	EdgeGuideSize	= 20
	CenterGuideSize	= 40
	// constructor
	__init__(parent:wx.Window, style:number, productViewer:ProductViewer) = \
							{|parent, style => style, size => wx.Size(250, 250)|
		this.productViewer = productViewer
		this.grabTgt = nil
		this.bmpScreen = nil
		this.rcImg = wx.Rect(0, 0, 0, 0)
		this.penCursor = wx.Pen(wx.Colour(255, 128, 128), 2, wx.PENSTYLE_SOLID)
		this.penCenterGuide = wx.Pen(wx.Colour(255, 128, 128), 1, wx.PENSTYLE_SOLID)
		this.brushBg = wx.Brush(wx.Colour(128, 128, 128), wx.BRUSHSTYLE_SOLID)
		this.brushCursor = wx.Brush(wx.Colour(255, 255, 255), wx.BRUSHSTYLE_SOLID)
		this.DragAcceptFiles(true)
		this.mapColorLevel = interval(64, 140, 256):list
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_LEFT_DOWN) {|event| this.OnLeftDown(event)}
		this.Bind(wx.EVT_LEFT_UP) {|event| this.OnLeftUp(event)}
		this.Bind(wx.EVT_MOTION) {|event| this.OnMotion(event)}
		this.Bind(wx.EVT_DROP_FILES) {|event| this.OnDropFiles(event)}
	}
	// methods
	SenseBox(pt:wx.Point) = {
		c = g.imgInfoCur.CalcCursorCoord(this.rcImg)
		if (g.imgInfoCur.tiltAdjFlag) {
			[wdSense, htSense] = [6, 6]
			wx.Rect(c.xTop - wdSense / 2, c.yTop - htSense / 2, wdSense, htSense).Contains(pt) && return (`topPoint)
			wx.Rect(c.xBtm - wdSense / 2, c.yBtm - htSense / 2, wdSense, htSense).Contains(pt) && return (`btmPoint)
		} else {
			[wdSense, htSense] = [6, 6]
			wx.Rect(c.xTop - EdgeGuideSize / 2, c.yTop - htSense / 2, EdgeGuideSize, htSense).Contains(pt) && return(`topLine)
			wx.Rect(c.xTop - EdgeGuideSize / 2, c.yBtm - htSense / 2, EdgeGuideSize, htSense).Contains(pt) && return(`btmLine)
			wx.Rect(c.xTop - wdSense / 2, c.yTop, wdSense, c.yBtm - c.yTop).Contains(pt) && return(`center)
		}
		nil
	}
	UpdateContent(blankFlag:boolean => false) = {
		if (blankFlag) {
			this.BlankImageScreen()
		} else {
			this.UpdateImageScreen()
		}
		this.Refresh()
		this.Update()
	}
	BlankImageScreen() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.bmpScreen = wx.BitmapWH(wdClient, htClient)
		wx.MemoryDC(this.bmpScreen) {|dc|
			dc.SetBackground(this.brushBg)
			dc.Clear()
		}
	}
	UpdateImageScreen() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.bmpScreen = wx.BitmapWH(wdClient, htClient)
		img = g.imgPhotoLowRes.thumbnail(wdClient, htClient)
		imgFrosted = img.mapcolorlevel(this.mapColorLevel)
		[xOffset, yOffset] = [(wdClient - img.width) / 2, (htClient - img.height) / 2]
		this.rcImg = wx.Rect(xOffset, yOffset, img.width, img.height)
		wx.MemoryDC(this.bmpScreen) {|dc|
			dc.SetBackground(this.brushBg)
			dc.Clear()
			if (g.frostFrameFlag) {
				dc.DrawBitmap(imgFrosted, xOffset, yOffset, false)
				f = g.imgInfoCur.CalcFrameCoord(this.rcImg, g.layoutCur)
				angle = math.atan2(f.yBtm - f.yTop, f.xBtm - f.xTop)
				[xOffset1, yOffset1] = [
					math.cos(angle - math.pi / 2) * f.width / 2
					math.sin(angle - math.pi / 2) * f.width / 2
				]
				[xOffset2, yOffset2] = [
					math.cos(angle + math.pi / 2) * f.width / 2
					math.sin(angle + math.pi / 2) * f.width / 2
				]
				ptTbl = @(wx.Point) {
					{f.xTop + xOffset1, f.yTop + yOffset1},
					{f.xTop + xOffset2, f.yTop + yOffset2},
					{f.xBtm + xOffset2, f.yBtm + yOffset2},
					{f.xBtm + xOffset1, f.yBtm + yOffset1},
				}
				dc.SetClippingRegionAsRegion(wx.RegionPoints(ptTbl))
			}
			dc.DrawBitmap(img, xOffset, yOffset, false)
		}
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		this.UpdateContent()
		[wdClient, htClient] = this.GetClientSizeWH()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		this.UpdateImageScreen()
		dc.DrawBitmap(this.bmpScreen, 0, 0, false)
		c = g.imgInfoCur.CalcCursorCoord(this.rcImg)
		dc.SetPen(this.penCursor)
		dc.SetBrush(this.brushCursor)
		angle = math.atan2(c.yBtm - c.yTop, c.xBtm - c.xTop)
		[xOffset1, yOffset1, xOffset2, yOffset2] = [
			math.cos(angle - math.pi / 2)
			math.sin(angle - math.pi / 2)
			math.cos(angle + math.pi / 2)
			math.sin(angle + math.pi / 2)
		] * EdgeGuideSize / 2
		[xCenter, yCenter] = [(c.xTop + c.xBtm) / 2, (c.yTop + c.yBtm) / 2]
		dc.DrawLine(c.xTop, c.yTop, c.xBtm, c.yBtm)
		dc.DrawLine(c.xTop + xOffset1, c.yTop + yOffset1, c.xTop + xOffset2, c.yTop + yOffset2)
		dc.DrawLine(c.xBtm + xOffset1, c.yBtm + yOffset1, c.xBtm + xOffset2, c.yBtm + yOffset2)
		if (g.centerGuideFlag) {
			[xOffset1, yOffset1, xOffset2, yOffset2] = [
				math.cos(angle - math.pi / 2)
				math.sin(angle - math.pi / 2)
				math.cos(angle + math.pi / 2)
				math.sin(angle + math.pi / 2)
			] * CenterGuideSize / 2
			dc.SetPen(this.penCenterGuide)
			dc.DrawLine(xCenter + xOffset1, yCenter + yOffset1, xCenter + xOffset2, yCenter + yOffset2)
		}
		if (g.imgInfoCur.tiltAdjFlag) {
			dc.DrawCircle(c.xTop, c.yTop, 3)
			dc.DrawCircle(c.xBtm, c.yBtm, 3)
		}
		dc = nil
	}
	OnLeftDown(event:wx.MouseEvent) = {
		if (!this.grabTgt) {
			this.grabTgt = this.SenseBox(event.GetPosition())
		}
		!this.HasCapture() && this.CaptureMouse()
	}
	OnLeftUp(event:wx.MouseEvent) = {
		this.HasCapture() && this.ReleaseMouse()
		if (this.grabTgt) {
			this.grabTgt = nil
			wx.BusyCursor {
				this.productViewer.UpdateContent(true)
				this.productViewer.UpdateContent()
			}
		}
	}
	OnMotion(event:wx.MouseEvent) = {
		rtn = this.SenseBox(event.GetPosition())
		if (rtn == `center) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZEWE))
		} elsif (rtn in [`topLine, `btmLine]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZENS))
		} elsif (rtn in [`topPoint, `btmPoint]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_CROSS))
		} else {
			this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
		}
		pt = event.GetPosition()
		if (this.grabTgt == `center) {
			g.imgInfoCur.xrateTop = (pt.x - this.rcImg.x) / this.rcImg.width
			if (g.imgInfoCur.xrateTop > 1) {
				g.imgInfoCur.xrateTop = 1
			} elsif (g.imgInfoCur.xrateTop < 0) {
				g.imgInfoCur.xrateTop = 0
			}
			g.imgInfoCur.xrateBtm = g.imgInfoCur.xrateTop
			this.Refresh()
		} elsif (this.grabTgt == `topLine) {
			g.imgInfoCur.yrateTop = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.yrateTop < 0) {
				g.imgInfoCur.yrateTop = 0
			} elsif (g.imgInfoCur.yrateTop > g.imgInfoCur.yrateBtm - .1) {
				g.imgInfoCur.yrateTop = g.imgInfoCur.yrateBtm - .1
			}
			this.Refresh()
		} elsif (this.grabTgt == `btmLine) {
			g.imgInfoCur.yrateBtm = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.yrateBtm > 1) {
				g.imgInfoCur.yrateBtm = 1
			} elsif (g.imgInfoCur.yrateBtm < g.imgInfoCur.yrateTop + .1) {
				g.imgInfoCur.yrateBtm = g.imgInfoCur.yrateTop + .1
			}
			this.Refresh()
		} elsif (this.grabTgt == `topPoint) {
			g.imgInfoCur.xrateTop = (pt.x - this.rcImg.x) / this.rcImg.width
			g.imgInfoCur.yrateTop = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.xrateTop > 1) {
				g.imgInfoCur.xrateTop = 1
			} elsif (g.imgInfoCur.xrateTop < 0) {
				g.imgInfoCur.xrateTop = 0
			}
			if (g.imgInfoCur.yrateTop < 0) {
				g.imgInfoCur.yrateTop = 0
			} elsif (g.imgInfoCur.yrateTop > g.imgInfoCur.yrateBtm - .1) {
				g.imgInfoCur.yrateTop = g.imgInfoCur.yrateBtm - .1
			}
			this.Refresh()
		} elsif (this.grabTgt == `btmPoint) {
			g.imgInfoCur.xrateBtm = (pt.x - this.rcImg.x) / this.rcImg.width
			g.imgInfoCur.yrateBtm = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.xrateBtm > 1) {
				g.imgInfoCur.xrateBtm = 1
			} elsif (g.imgInfoCur.xrateBtm < 0) {
				g.imgInfoCur.xrateBtm = 0
			}
			if (g.imgInfoCur.yrateBtm > 1) {
				g.imgInfoCur.yrateBtm = 1
			} elsif (g.imgInfoCur.yrateBtm < g.imgInfoCur.yrateTop + .1) {
				g.imgInfoCur.yrateBtm = g.imgInfoCur.yrateTop + .1
			}
			this.Refresh()
		}
	}
	OnDropFiles(event:wx.DropFilesEvent) = {
		fileNames = event.GetFiles()
		ReadImageFile(this, fileNames[0])
		this.UpdateContent()
		this.productViewer.UpdateContent()
	}
}

//-----------------------------------------------------------------------------
// wx.Menu expansion
//-----------------------------------------------------------------------------
wx.Menu.AppendEx(id:number, text:string, img:image, kind:number => wx.ITEM_NORMAL) = {
	imgTmp = image(`rgba, img.width + 8, img.height)
	imgTmp.paste(0, 0, img)
	item = wx.MenuItem(this, id, text, kind => kind)
	item.SetBitmap(imgTmp)
	this.AppendItem(item)
}

//-----------------------------------------------------------------------------
// Frame
//-----------------------------------------------------------------------------
Frame = class(wx.Frame) {
	[
		ID_Open, ID_ShowList, ID_Prev, ID_Next,
		ID_OutputPDF, ID_ViewPDF,
		ID_RotateL, ID_RotateR, ID_TiltAdj,
		ID_FrostFrame, ID_CenterGuide,
	] = wx.ID_HIGHEST..
	__init__(title:string, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.Size(g.cfg['wdFrame', 'htFrame']*)) = {|nil, wx.ID_ANY, title, pos, size|
		this.SetIcon(wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO))
		menuBar = wx.MenuBar()
		wx.Menu {|m|
			menuBar.Append(m, '&File')
			m.AppendEx(ID_Open,			'&Open...\tCtrl-O',			g.imgOpen)
			m.AppendEx(ID_ShowList,		'&Show List...\tCtrl-S',	g.imgShowList)
			m.AppendEx(ID_Prev,			'&Previous\tCtrl-P',		g.imgPrev)
			m.AppendEx(ID_Next,			'&Next\tCtrl-N',			g.imgNext)
			m.AppendSeparator()
			m.Append(ID_OutputPDF,		'&Output PDF...\tCtrl-U')
			m.Append(ID_ViewPDF,		'&View PDF...\tCtrl-V')
			m.AppendSeparator()
			m.Append(wx.ID_CLOSE,		'E&xit\tAlt-X')
		}
		wx.Menu {|m|
			menuBar.Append(m, '&Image')
			m.AppendEx(ID_RotateL,				'Rotate &Left\tCtrl-L',		g.imgRotateL)
			m.AppendEx(ID_RotateR,				'Rotate &Right\tCtrl-R',	g.imgRotateR)
			m.AppendCheckItem(ID_TiltAdj,		'Tilt AdjustSlan&t\tCtrl-T')
			m.AppendSeparator()
			m.AppendCheckItem(ID_FrostFrame,	'&Frost Frame')
			m.AppendCheckItem(ID_CenterGuide,	'&Center Guide')
		}
		wx.Menu {|m|
			menuBar.Append(m, '&Help')
			m.Append(wx.ID_ABOUT,		'&About')
		}
		this.SetMenuBar(menuBar)
		this.CreateToolBar(wx.TB_FLAT) {|tb|
			tb.AddTool(ID_Open,			'Open',			g.imgOpen,			wx.NullBitmap, wx.ITEM_NORMAL,	'Open')
			tb.AddTool(ID_ShowList,		'Show List',	g.imgShowList,		wx.NullBitmap, wx.ITEM_NORMAL,	'Show List')
			tb.AddSeparator()
			tb.AddTool(ID_Prev,			'Previous',		g.imgPrev,			wx.NullBitmap, wx.ITEM_NORMAL,	'Previous')
			tb.AddTool(ID_Next,			'Next',			g.imgNext,			wx.NullBitmap, wx.ITEM_NORMAL,	'Next')
			tb.AddSeparator()
			tb.AddTool(ID_RotateL,		'Rotate Left',	g.imgRotateL,		wx.NullBitmap, wx.ITEM_NORMAL,	'Rotate Left')
			tb.AddTool(ID_RotateR,		'Rotate Right',	g.imgRotateR,		wx.NullBitmap, wx.ITEM_NORMAL,	'Rotate Right')
			tb.AddTool(ID_TiltAdj,		'Tilt Adjust',	g.imgTiltAdj,		wx.NullBitmap, wx.ITEM_CHECK,	'Tilt Adjust')
			tb.AddSeparator()
			tb.AddTool(ID_FrostFrame,	'Frost Frame',	g.imgFrostFrame,	wx.NullBitmap, wx.ITEM_CHECK,	'Frost Frame')
			tb.AddTool(ID_CenterGuide,	'Center Guide',	g.imgCenterGuide,	wx.NullBitmap, wx.ITEM_CHECK,	'Center Guide')
			tb.Realize()
		}
		panel = wx.Panel(this)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		panel.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand())
		this.productViewer = ProductViewer(panel, wx.BORDER_SUNKEN)
		this.extractor = Extractor(panel, wx.BORDER_SUNKEN, this.productViewer)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			hbox.Add(this.extractor, wx.SizerFlags())
			wx.BoxSizer(wx.VERTICAL) {|vbox|
				hbox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.LEFT, 2))
				wx.ListCtrl(panel, wx.ID_ANY, style => wx.BORDER_SUNKEN | wx.LC_REPORT) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags(1).Expand())
					font = ctrl.GetFont()
					font.SetPointSize(11)
					ctrl.SetFont(font)
					ctrl.InsertColumn(0.., ['Size', 'Purpose'])
					ctrl.Bind(wx.EVT_SIZE) {|event|
						size = event.GetSize()
						width = size.GetWidth() - 22
						wdColumn = 150
						ctrl.SetColumnWidth(0, wdColumn)
						width -= wdColumn
						ctrl.SetColumnWidth(1, width)
						event.Skip()
					}
					g.layoutTbl.each {|layout, idx|
						wx.ListItem {|item|
							item.SetId(idx)
							item.SetText('%dmm x %dmm' % [layout.htImg, layout.wdImg])
							ctrl.InsertItem(item)
						}
						wx.ListItem {|item|
							item.SetId(idx)
							item.SetColumn(1)
							item.SetText(layout.purpose)
							ctrl.SetItem(item)
						}
					}
					ctrl.SetItemState(0,
							wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
							wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
					ctrl.Bind(wx.EVT_LIST_ITEM_SELECTED) {|event| this.OnListItemSelected(event) }
				}
			}
		}
		vbox.Add(this.productViewer, wx.SizerFlags(1).Expand().Border(wx.TOP, 2))
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event) }
		this.Bind(wx.EVT_MENU, wx.ID_CLOSE)		{|event| this.Close()}
		this.Bind(wx.EVT_MENU, ID_Open)			{|event| this.OnMenu_Open(event)}
		this.Bind(wx.EVT_MENU, ID_ShowList)		{|event| this.OnMenu_ShowList(event)}
		this.Bind(wx.EVT_MENU, ID_Prev)			{|event| this.OnMenu_Prev(event)}
		this.Bind(wx.EVT_MENU, ID_Next)			{|event| this.OnMenu_Next(event)}
		this.Bind(wx.EVT_MENU, ID_OutputPDF)	{|event| this.OnMenu_OutputPDF(event)}
		this.Bind(wx.EVT_MENU, ID_ViewPDF)		{|event| this.OnMenu_ViewPDF(event)}
		this.Bind(wx.EVT_MENU, ID_RotateL)		{|event| this.OnMenu_RotateL(event)}
		this.Bind(wx.EVT_MENU, ID_RotateR)		{|event| this.OnMenu_RotateR(event)}
		this.Bind(wx.EVT_MENU, ID_TiltAdj)		{|event| this.OnMenu_TiltAdj(event)}
		this.Bind(wx.EVT_MENU, ID_FrostFrame)	{|event| this.OnMenu_FrostFrame(event)}
		this.Bind(wx.EVT_MENU, ID_CenterGuide)	{|event| this.OnMenu_CenterGuide(event)}
		this.Bind(wx.EVT_MENU, wx.ID_ABOUT)		{|event| this.OnMenu_About(event)}
		this.Bind(wx.EVT_UPDATE_UI,	ID_Prev) {|event|
			idx = g.imgInfos.find(g.imgInfoCur):index
			event.Enable(idx && idx > 0)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_Next) {|event|
			idx = g.imgInfos.find(g.imgInfoCur):index
			event.Enable(idx && idx < g.imgInfos.len() - 1)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_TiltAdj) {|event|
			event.Check(g.imgInfoCur.tiltAdjFlag)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_FrostFrame) {|event|
			event.Check(g.frostFrameFlag)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_CenterGuide) {|event|
			event.Check(g.centerGuideFlag)
		}
	}
	OnSize(event:wx.SizeEvent) = {
		size = event.GetSize()
		g.cfg['wdFrame', 'htFrame'] = [size.GetWidth(), size.GetHeight()]
		event.Skip()
	}
	UpdateWholeContent(blankFlag:boolean => false) = {
		this.extractor.UpdateContent(blankFlag)
		this.productViewer.UpdateContent(blankFlag)
	}
	ProcessImage() {block} = {
		wx.BusyCursor {
			this.UpdateWholeContent(true)
			block()
			this.UpdateWholeContent()
		}
	}
	OnListItemSelected(event:wx.ListEvent) = {
		idx = event.GetIndex()
		g.layoutCur = g.layoutTbl[idx]
		this.Update()
		wx.BusyCursor {
			this.UpdateWholeContent()
		}
	}
	OnMenu_Open(event:wx.CommandEvent) = {
		filter = 'Image files (*.jpg;*.png;*.gif)|*.jpg;*.png;*.gif|All files (*.*)|*.*'
		dlg = wx.FileDialog(this, 'Choose an image file',
								'', g.imgInfoCur.fileName, filter, wx.FD_OPEN)
		if (dlg.ShowModal() == wx.ID_OK) {
			fileName = dlg.GetPath()
			ReadImageFile(this, fileName)
			this.UpdateWholeContent()
		}
	}
	OnMenu_ShowList(event:wx.CommandEvent) = {
		dlg = ImageListDialog(this, g.imgInfos, g.imgInfos.find(g.imgInfoCur):index)
		dlg.ShowModal()
		g.imgInfos = dlg.GetImageInfos()
		if (imgInfo = dlg.GetImageInfo()) {
			this.ProcessImage {
				ReadImageFile(this, imgInfo.fileName)
			}
		}
	}
	OnMenu_Prev(event:wx.CommandEvent) = {
		idx = g.imgInfos.find(g.imgInfoCur):index
		if (idx && idx > 0) {
			imgInfo = g.imgInfos[idx - 1]
			this.ProcessImage {
				ReadImageFile(this, imgInfo.fileName)
			}
		}
	}
	OnMenu_Next(event:wx.CommandEvent) = {
		idx = g.imgInfos.find(g.imgInfoCur):index
		if (idx && idx < g.imgInfos.len() - 1) {
			imgInfo = g.imgInfos[idx + 1]
			this.ProcessImage {
				ReadImageFile(this, imgInfo.fileName)
			}
		}
	}
	OnMenu_OutputPDF(event:wx.CommandEvent) = {
		filter = 'PDF file (*.pdf)|*.pdf|All files (*.*)|*.*'
		dlg = wx.FileDialog(this, 'Choose a PDF file to output',
								'', '', filter, wx.FD_SAVE)
		if (dlg.ShowModal() == wx.ID_OK) {
			fileNamePDF = dlg.GetPath()
			ComposeProductPDF(fileNamePDF, g.imgPhotoHighRes, g.layoutCur)
		}
	}
	OnMenu_ViewPDF(event:wx.CommandEvent) = {
		ComposeProductPDF(g.fileNameTmpPDF, g.imgPhotoHighRes, g.layoutCur)
		try {
			OpenWithApp(g.fileNameTmpPDF)
		} catch {
			wx.MessageDialog(parent, 'Failed to launch PDF viewer',
									'Error', wx.OK | wx.ICON_ERROR) {|dlg|
				dlg.CentreOnParent()
				dlg.ShowModal()
			}
		}
	}
	OnMenu_RotateL(event:wx.CommandEvent) = {
		this.ProcessImage {
			RotateImageL()
		}
	}
	OnMenu_RotateR(event:wx.CommandEvent) = {
		this.ProcessImage {
			RotateImageR()
		}
	}
	OnMenu_TiltAdj(event:wx.CommandEvent) = {
		g.imgInfoCur.tiltAdjFlag = event.IsChecked()
		if (g.imgInfoCur.tiltAdjFlag) {
			this.extractor.Refresh()
		} else {
			xrateMid = (g.imgInfoCur.xrateTop + g.imgInfoCur.xrateBtm) / 2
			g.imgInfoCur.xrateTop = g.imgInfoCur.xrateBtm = xrateMid
			this.extractor.Refresh()
			wx.BusyCursor {
				this.productViewer.UpdateContent(this)
				this.productViewer.UpdateContent()
			}
		}
	}
	OnMenu_FrostFrame(event:wx.CommandEvent) = {
		g.frostFrameFlag = event.IsChecked()
		this.extractor.Refresh()
	}
	OnMenu_CenterGuide(event:wx.CommandEvent) = {
		g.centerGuideFlag = event.IsChecked()
		this.extractor.Refresh()
	}
	OnMenu_About(event:wx.CommandEvent) = {
		dlg = AboutDialog(this)
		dlg.CentreOnParent()
		dlg.ShowModal()
	}
}

//-----------------------------------------------------------------------------
// ImageListDialog
//-----------------------------------------------------------------------------
ImageListDialog = class(wx.Dialog) {
	__init__(parent:wx.Window, imgInfos[]:ImageInfo, idxSel:number,
			pos:wx.Point => wx.DefaultPosition, size:wx.Size => wx.Size(640, 480)) = {|parent, wx.ID_ANY,
						'Image List', pos, size, style => wx.DEFAULT_DIALOG_STYLE|
		this.SetIcon(wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO))
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		this.imgInfos = imgInfos
		this.imgInfoCur = nil
		wx.ListView(this, wx.ID_ANY, style => wx.LC_ICON | wx.LC_SINGLE_SEL | wx.LC_AUTOARRANGE) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand())
			this.listCtrl = ctrl
			ctrl.Bind(wx.EVT_LIST_ITEM_ACTIVATED) {|event| this.OnListItemActivated(event)}
			ctrl.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK) {|event| this.OnListItemRightClick(event)}
			ctrl.Bind(wx.EVT_LIST_KEY_DOWN) {|event| this.OnListKeyDown(event)}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Border(wx.TOP, 4).Centre())
			wx.Button(this, wx.ID_OK, 'OK') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
				ctrl.SetDefault()
			}
			wx.Button(this, wx.ID_CANCEL, 'Cancel') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 16))
			}
		}
		wx.BusyCursor {
			this.PrepareContent(idxSel)
		}
		this.Bind(wx.EVT_BUTTON, wx.ID_OK) {|event| this.OnButton_OK(event)}
	}
	PrepareContent(idxSel:number) = {
		size = 128
		imgList = wx.ImageList(size, size)
		this.imgInfos.each {|imgInfo|
			imgSrc = (image(imgInfo.fileName).thumbnail(size):box).rotate(imgInfo.rotate)
			img = image(`rgb, size, size, `gray)
			img.paste((size - imgSrc.width) / 2, (size - imgSrc.height) / 2, imgSrc)
			imgList.Add(img)
		}
		this.listCtrl.SetImageList(imgList, wx.IMAGE_LIST_NORMAL)
		this.imgInfos.each {|imgInfo, idx|
			this.listCtrl.InsertImageStringItem(idx, imgInfo.title, idx)
			this.listCtrl.SetItemData(idx, idx)
		}
		this.listCtrl.SetItemState(0,
				wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED, 0)
		this.listCtrl.SetItemState(idxSel,
				wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
				wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
		this.listCtrl.EnsureVisible(idxSel)
	}
	GetImageInfos() = this.imgInfos
	GetImageInfo() = this.imgInfoCur
	UpdateImageInfos() = {
		this.imgInfos = repeat (this.listCtrl.GetItemCount()):list {|idx|
			idxImgInfo = this.listCtrl.GetItemData(idx)
			this.imgInfos[idxImgInfo]
		}
	}
	OnButton_OK(event:wx.CommandEvent) = {
		idxImgInfo = this.listCtrl.GetItemData(this.listCtrl.GetFirstSelected())
		this.imgInfoCur = this.imgInfos[idxImgInfo]
		this.UpdateImageInfos()
		this.EndModal(wx.OK)
	}
	OnListItemActivated(event:wx.ListEvent) = {
		idxImgInfo = this.listCtrl.GetItemData(event.GetIndex())
		this.imgInfoCur = this.imgInfos[idxImgInfo]
		this.UpdateImageInfos()
		this.EndModal(wx.OK)
	}
	OnListItemRightClick(event:wx.ListEvent) = {
	}
	OnListKeyDown(event:wx.ListEvent) = {
		if (event.GetKeyCode() == wx.WXK_DELETE) {
			idx = this.listCtrl.GetFirstSelected()
			this.listCtrl.DeleteItem(idx)
			//if (idx >= this.listCtrl.GetItemCount()) {
			//	idx = this.listCtrl.GetItemCount() - 1
			//}
			this.listCtrl.Select(idx)
		}
	}
}

//-----------------------------------------------------------------------------
// AboutDialog
//-----------------------------------------------------------------------------
AboutDialog = class(wx.Dialog) {
	__init__(parent:wx.Window) = {|parent, wx.ID_ANY, 'About', size => wx.Size(320, 180)|
		icon = wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO)
		this.SetIcon(icon)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		vbox.AddStretchSpacer(1)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Centre())
			wx.StaticBitmap(this, wx.ID_ANY, wx.NullBitmap) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
				ctrl.SetIcon(icon)
			}
			wx.StaticText(this, wx.ID_ANY, 'Gura Shot') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Centre().Border(wx.LEFT, 12))
				font = ctrl.GetFont()
				font.SetPointSize(12)
				font.SetWeight(wx.FONTWEIGHT_BOLD)
				ctrl.SetFont(font)
			}
		}
		wx.StaticText(this, wx.ID_ANY, 'Version 0.0.0') {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Centre().Border(wx.TOP, 8))
		}
		vbox.AddStretchSpacer(1)
		wx.StaticText(this, wx.ID_ANY, 'Copyright (C) 2014 ypsitau') {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Centre())
		}
		vbox.AddStretchSpacer(1)
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand())
		}
		//vbox.AddStretchSpacer(1)
		wx.Button(this, wx.ID_OK, 'OK') {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Centre().Border(wx.TOP | wx.BOTTOM, 4))
		}
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		if (true) {
			frame = Frame('Gura Shot')
			frame.Show()
			g.frame = frame
			true
		} else {
			ImageListDialog(nil, g.imgInfos, 0).ShowModal()
			false
		}
	}
	OnExit() = {
		SaveConfig()
		0
	}
}

wx.IMPLEMENT_APP(App)

#!/usr/bin/env gura
import(wx)
import(jpeg)
import(resource)

App = class(wx.App) {
	OnInit() = {
		frame = Frame('gurashot')
		frame.Show()
		true
	}
}

ProductViewer = class(wx.Panel) {
	//-------------------------------------------------------------------------
	// constructor
	//-------------------------------------------------------------------------
	__init__(parent:wx.Window) = {|parent|
		this.imgScreen = nil
		this.imgExtract = nil
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
	}
	//-------------------------------------------------------------------------
	// methods
	//-------------------------------------------------------------------------
	UpdateContent(imgExtract:image, refreshFlag:boolean) = {
		this.imgExtract = imgExtract
		if (refreshFlag) {
			this.ComposeImage()
			this.Refresh()
		}
	}
	ComposeImage() = {
		!this.imgExtract && return
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen.fill(`gray)
		this.imgScreen.paste(0, 0, this.imgExtract.thumbnail(wdClient, htClient))
	}
	//-------------------------------------------------------------------------
	// event handler
	//-------------------------------------------------------------------------
	OnSize(event:wx.SizeEvent) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen = image(`rgb, wdClient, htClient, `gray)
		this.ComposeImage()
		this.Refresh()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		dc.DrawBitmap(this.imgScreen, 0, 0, false)
		dc = nil
	}
}

Extractor = class(wx.Panel) {
	//-------------------------------------------------------------------------
	// constructor
	//-------------------------------------------------------------------------
	__init__(parent:wx.Window, productViewer:ProductViewer) = {|parent|
		this.productViewer = productViewer
		this.grabTgt = nil
		this.leftRatio = .2
		this.rightRatio = .8
		this.topRatio = .1
		this.bottomRatio = .6
		this.imgOriginal = image('face.jpg')
		this.imgScreen = nil
		this.rcImg = wx.Rect(0, 0, 0, 0)
		this.rcBox = wx.Rect(0, 0, 0, 0)
		this.penBox = wx.Pen(wx.Colour(255, 0, 0), 2, wx.SHORT_DASH)
		this.productViewer.UpdateContent(this.DoExtract(), false)
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_LEFT_DOWN) {|event| this.OnLeftDown(event)}
		this.Bind(wx.EVT_LEFT_UP) {|event| this.OnLeftUp(event)}
		this.Bind(wx.EVT_MOTION) {|event| this.OnMotion(event)}
	}
	//-------------------------------------------------------------------------
	// methods
	//-------------------------------------------------------------------------
	DoExtract() = {
		xLeft = this.imgOriginal.width * this.leftRatio
		xRight = this.imgOriginal.width * this.rightRatio
		yTop = this.imgOriginal.height * this.topRatio
		yBottom = this.imgOriginal.height * this.bottomRatio
		this.imgOriginal.crop(xLeft, yTop, xRight - xLeft, yBottom - yTop)
	}
	SenseBox(pt:wx.Point) = {
		[wdSense, htSense] = [6, 6]
		wx.Rect(this.rcBox.GetLeft() - wdSense / 2, this.rcBox.GetTop(),
			wdSense, this.rcBox.height).Contains(pt) && return(`left)
		wx.Rect(this.rcBox.GetRight() - wdSense / 2, this.rcBox.GetTop(),
			wdSense, this.rcBox.height).Contains(pt) && return(`right)
		wx.Rect(this.rcBox.GetLeft(), this.rcBox.GetTop() - htSense / 2,
			this.rcBox.width, htSense).Contains(pt) && return(`top)
		wx.Rect(this.rcBox.GetLeft(), this.rcBox.GetBottom() - htSense / 2,
			this.rcBox.width, htSense).Contains(pt) && return(`bottom)
		nil
	}
	UpdateRectBox() = {
		xLeft = this.rcImg.x + this.rcImg.width * this.leftRatio
		xRight = this.rcImg.x + this.rcImg.width * this.rightRatio
		yTop = this.rcImg.y + this.rcImg.height * this.topRatio
		yBottom = this.rcImg.y + this.rcImg.height * this.bottomRatio
		this.rcBox = wx.Rect(xLeft, yTop, xRight - xLeft, yBottom - yTop)
	}
	//-------------------------------------------------------------------------
	// event handler
	//-------------------------------------------------------------------------
	OnSize(event:wx.SizeEvent) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.imgScreen = image(`rgb, wdClient, htClient, `gray)
		img = this.imgOriginal.thumbnail(wdClient, htClient)
		[x, y] = [(wdClient - img.width) / 2, (htClient - img.height) / 2]
		this.imgScreen.paste(x, y, img)
		this.rcImg = wx.Rect(x, y, img.width, img.height)
		this.UpdateRectBox()
		this.Refresh()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		dc.DrawBitmap(this.imgScreen, 0, 0, false)
		dc.SetBrush(wx.TRANSPARENT_BRUSH)
		dc.SetPen(this.penBox)
		dc.DrawRectangleRect(this.rcBox)
		dc = nil
	}
	OnLeftDown(event:wx.MouseEvent) = {
		this.grabTgt = this.SenseBox(event.GetPosition())
		this.CaptureMouse()
	}
	OnLeftUp(event:wx.MouseEvent) = {
		if (this.grabTgt) {
			this.grabTgt = nil
			this.productViewer.UpdateContent(this.DoExtract(), true)
		}
		this.ReleaseMouse()
	}
	OnMotion(event:wx.MouseEvent) = {
		rtn = this.SenseBox(event.GetPosition())
		if (rtn in [`left, `right]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZEWE))
		} elsif (rtn in [`top, `bottom]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZENS))
		} else {
			this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
		}
		pt = event.GetPosition()
		if (this.grabTgt == `left) {
			this.leftRatio = (pt.x - this.rcImg.x) / this.rcImg.width
			this.UpdateRectBox()
			this.Refresh()
		} elsif (this.grabTgt == `right) {
			this.rightRatio = (pt.x - this.rcImg.x) / this.rcImg.width
			this.UpdateRectBox()
			this.Refresh()
		} elsif (this.grabTgt == `top) {
			this.topRatio = (pt.y - this.rcImg.y) / this.rcImg.height
			this.UpdateRectBox()
			this.Refresh()
		} elsif (this.grabTgt == `bottom) {
			this.bottomRatio = (pt.y - this.rcImg.y) / this.rcImg.height
			this.UpdateRectBox()
			this.Refresh()
		}
	}
}

Panel = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		productViewer = ProductViewer(this)
		extractor = Extractor(this, productViewer)
		outerBox.Add(extractor, wx.SizerFlags(1).Expand())
		outerBox.Add(productViewer, wx.SizerFlags(1).Expand())
	}
}

Frame = class(wx.Frame) {
	__init__(title:string, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.DefaultSize) = {|nil, wx.ID_ANY, title, pos, size|
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		Panel(this)
	}
}

wx.IMPLEMENT_APP(App)

#!/usr/bin/env gura
import(cairo)
import(png)
import(msico)
import(argopt)

main() = {
	argopt.Parser {|p|
		p.addParam('image',		'i',	'output image file', 'SIZE')
		p.addFlag('icon',		'I',	'output icon file')
		p.addFlag('macicon',	'M',	'output Mac icon file')
		try {
			[cfg, argv] = p.parse(sys.argv)
		} catch {|e|
			sys.stderr.println(e.text)
			sys.exit(1)
		}
	}
	if (value = cfg['image']) {
		size = int(value)
		fileName = format('gura-icon-%d.png', size)
		CreateImage(size, size).pngwrite(fileName)
		println(fileName, ' was created')
	} elsif (cfg['icon']) {
		image64 = CreateImage(64, 64)
		image32 = CreateImage(32, 32)
		image16 = CreateImage(16, 16)
		msico.content().addimage([image64, image32, image16]).write('gura.ico')
		println('gura.ico was created')
	} elsif (cfg['macicon']) {
		Entry = struct(size:number, fileName:string)
		dirName = 'gura.iconset'
		!path.exists(dirName) && fs.mkdir(dirName)
		entries = @(Entry) {
			[16,	'icon_16x16.png'		]
			[32,	'icon_16x16@2x.png'		]
			[32,	'icon_32x32.png'		]
			[64,	'icon_32x32@2x.png'		]
			[128,	'icon_128x128.png'		]
			[256,	'icon_128x128@2x.png'	]
			[256,	'icon_256x256.png'		]
			[512,	'icon_256x256@2x.png'	]
			[512,	'icon_512x512.png'		]
			[1024,	'icon_512x512@2x.png'	]
		}
		CreateImage(entries:*size, entries:*size):& \
						write(path.join(dirName, entries:*fileName)):void
		os.exec('iconutil', '-c', 'icns', '-o', 'gura.icns', 'gura.iconset')
		println('gura.icns was created')
	} else {
		sys.stderr.println('usage: make-gura-icon.gura --image=SIZE|--icon|--macicon')
		sys.exit(1)
	}
}

CreateImage(width:number, height:number):map = {
	colorBack = color(`white)
	img = image(`rgba, width, height, colorBack)
	img.setalpha(0)
	cr = img.cairo()
	cr.scale(width / 64, height / 64)
	cr.set_antialias(cairo.ANTIALIAS_SUBPIXEL)
	scope { // body
		cr.move_to(32 - 26, 64)
		cr.arc(32, 32, 24, math.pi, math.pi * 2)
		cr.line_to(32 + 20, 64)
		cairo.pattern.create_linear(4, 0, 60, 0) {|pat|
			pat.add_color_stop_rgb(0, 1, .6, .6)
			pat.add_color_stop_rgb(1, .7, .3, .3)
			cr.set_source(pat)
		}
		cr.fill_preserve()
		cr.set_line_width(3)
		cr.set_source_rgb(.7, .3, .3)
		cr.stroke()
	}
	scope { // helmet
		cr.move_to(3, 16)
		cr.line_to(60, 34)
		cr.arc_negative(32, 32 - 4, 26, math.pi * 2, math.pi + .5)
		cairo.pattern.create_linear(10, 0, 50, 20) {|pat|
			pat.add_color_stop_rgb(0, .8, .8, .8)
			pat.add_color_stop_rgb(1, .5, .5, 1)
			cr.set_source(pat)
		}
		cr.fill_preserve()
		cr.set_source_rgb(.5, .5, 1)
		cr.set_line_width(3)
		cr.arc(32, 32 - 4, 26, math.pi + .5, math.pi + .5)
		cr.line_to(3, 16)
		cr.stroke()
		cr.set_line_width(6)
		cr.set_source_rgb(0, .6, 0)
		cr.move_to(24, 6).rel_line_to(-3, 15)
		cr.stroke()
		cr.move_to(15, 12).rel_line_to(16, 3)
		cr.stroke()
	}
	scope { // nose
		cr.set_line_width(3)
		cr.arc(15, 44, 8, math.pi / 8, math.pi)
		cr.set_source_rgb(.7, .3, .3)
		cr.stroke()
		cr.set_source_rgb(1, .3, .3)
		cr.arc(10, 43, 5)
		cr.fill_preserve()
		cr.set_line_width(2)
		cr.set_source_rgb(1, 0, 0)
		cr.stroke()
	}
	scope { // eyes
		draw(x, y) = {
			cr.set_source_color(`white)
			cr.arc(x, y, 7)
			cr.fill()
			cr.set_source_rgb(0, 0, 0)
			cr.arc(x + 2, y, 4)
			cr.fill()
		}
		draw(14, 32)
		draw(30, 34)
	}
	img
}

main()

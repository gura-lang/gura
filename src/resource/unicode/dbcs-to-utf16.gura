#!/usr/bin/env gura
import(re)

if (sys.argv.len() < 2) {
	sys.stderr.println('usage: dbcs-to-utf16.gura CP932.TXT|CP936.TXT')
	sys.exit(1)
}
fileName = sys.argv[1]
pattern = re.pattern(r'^(0x\w+)\s+(0x\w+)')
tblWhole = dim(256, 0)
for (m in pattern.match(open(fileName).readlines()).skipnil()) {
	codeDBCS = tonumber(m.group(1))
	codeDBCS_H = codeDBCS >> 8
	codeDBCS_L = codeDBCS & 0xff
	codeUTF16 = tonumber(m.group(2))
	if (codeDBCS_H == 0) {
		iCol = codeDBCS_L
	} elsif (codeDBCS_L < 0x40) {
		sys.stderr.printf('%04x is not a valid DBCS code\n', codeDBCS)
		sys.exit(1)
	} else {
		iCol = codeDBCS_L - 0x40
	}
	tblRow = tblWhole[codeDBCS_H]
	nCols = tblRow.len()
	if (nCols <= iCol) {
		repeat(iCol - nCols + 1) { tblRow.add(0x0000) }
	}
	tblRow[iCol] = codeUTF16
}
for (tblRow in tblWhole) {|iRow|
	(tblRow.len() == 0) && continue
	varName = format('_row_%02X', iRow)
	printf('static const unsigned short %s[] = {\n', varName)
	for (tblRowFolded in tblRow.fold(8)) {
		print('\t', format('0x%04x', tblRowFolded).join(', '), ',\n')
	}
	printf('};\n')
}
print('''\
struct CodeRow {
	int nCols;
	const short *row;
};
''')
printf('static const CodeRow _codeRows[] = {\n');
for (tblRow in tblWhole) {|iRow|
	if (iRow % 4 == 0) { print('\t') }
	varName = format('_row_%02X', iRow)
	if (tblRow.len() == 0) {
		printf('{ %3d, %8s }', 0, 'NULL')
	} else {
		printf('{ %3d, %8s }', tblRow.len(), varName)
	}
	if ((iRow + 1) % 4 == 0) {
		print(',\n')
	} else {
		print(', ')
	}
}
printf('};')

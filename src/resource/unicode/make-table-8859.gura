#!/usr/bin/env gura
import(re)

fileNames = (path.glob('8859-*.TXT'):list).sort(function(fileName1, fileName2) {
	tonumber(fileName1.match(r'-(\d+)\.TXT').group(1)) <=> \
	tonumber(fileName2.match(r'-(\d+)\.TXT').group(1))
})
for (fileName in fileNames) {
	tbl = consts(0x0000, 256):list
	pattern = re.pattern(r'^(0x\w+)\s+(0x\w+)')
	for (m in pattern.match(open(fileName).readlines()).skipnil()) {
		codeISO = tonumber(m.group(1))
		codeUTF16 = tonumber(m.group(2))
		tbl[codeISO] = codeUTF16
	}
	index = fileName.match(r'-(\d+)\.TXT').group(1)
	varName = '_codeTbl_ISO8859_' + index
	println()
	R'''
	//-----------------------------------------------------------------------------
	// Codec_ISO8859_${index}
	//-----------------------------------------------------------------------------
	static const unsigned short ${varName}[] = {
	${for (tblFolded in tbl.fold(8))}
		${format('0x%04x', tblFolded).join(', ') + ','}
	${end}
	};
	
	Codec::Map *Codec_ISO8859_${index}::Encoder::_pMapShared = NULL;

	Codec_ISO8859_${index}::Decoder::Decoder(bool delcrFlag) :
		Codec_SBCS::Decoder(delcrFlag, _codeTbl_ISO8859_${index}) {}

	Codec_ISO8859_${index}::Encoder::Encoder(bool addcrFlag) :
		Codec_SBCS::Encoder(addcrFlag, _codeTbl_ISO8859_${index}, _pMapShared) {}
	'''.template().render(sys.stdout)
}
for (fileName in fileNames) {
	index = fileName.match(r'-(\d+)\.TXT').group(1)
	println()
	R'''
	//-----------------------------------------------------------------------------
	// Codec_ISO8859_${index}
	//-----------------------------------------------------------------------------
	class Codec_ISO8859_${index} : public Codec_SBCS {
	public:
		class Decoder : public Codec_SBCS::Decoder {
		public:
			Decoder(bool delcrFlag);
		};
		class Encoder : public Codec_SBCS::Encoder {
		private:
			static Map *_pMapShared;
		public:
			Encoder(bool addcrFlag);
		};
	};
	'''.template().render(sys.stdout)
}

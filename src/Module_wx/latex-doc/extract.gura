#!/usr/bin/env gura
import(tokenizer) {Tokenizer}

functionsExclude = [
	'AcceleratorTable_1'
	'ActiveXContainer'
	'AuiDockArtEmpty'
	'AuiTabArtEmpty'
	'Bitmap_1'
	'Bitmap_2'
	'BitmapComboBox'
	'CheckListBox'
	'Choice'
	'ClassInfo'
	'CmdLineParserEmpty'
	'CmdLineParser'
	'CmdLineParser_1'
	'CmdLineParser_2'
	'CmdLineParser_3'
	'CmdLineParser_4'
	'CmdLineParser_5'
	'ComboBox'
	'ComboPopupEmpty'
	'Command'
	'ConfigBase'
	'Connection'
	'ContextHelpButtonEmpty'
	'Cursor'
	'DataFormat_1'
	'DatagramSocket'
	'DataInputStream_1'
	'DataObjectEmpty'
	'DataOutputStream_1'
	'DataViewListModelNotifierEmpty'
	'DataViewModelEmpty'
	'DataViewRenderer'
	'DateTimeEmpty'
	'DateTime'
	'DateTime_1'
	'DateTime_2'
	'DateTime_3'
	'DateTime_4'
	'DbEmpty'
	'Db'
	'DDEConnection'
	'DebugReportPreviewEmpty'
	'DocMDIChildFrame'
	'DragImage_5'
	'DropFilesEvent'
	'DropSource'
	'DropSource_1'
	'DropTarget'
	'DynamicLibraryEmpty'
	'DynamicLibrary'
	'Event'
	'FFileEmpty'
	'FFile'
	'FFile_1'
	'FFileInputStream'
	'FFileInputStream_1'
	'FFileInputStream_2'
	'FFileOutputStream_2'
	'FileEmpty'
	'File'
	'File_1'
	'FileDropTargetEmpty'
	'FileNameEmpty'
	'FileName'
	'FileName_1'
	'FileName_2'
	'FileName_3'
	'FileName_4'
	'FileSystemHandlerEmpty'
	'FileTypeEmpty'
	'FilterInputStream'
	'FilterInputStream_1'
	'FSFile'
	'GenericValidator_1'
	'GenericValidator_2'
	'GenericValidator_3'
	'GenericValidator_4'
	'GridCellEditorEmpty'
	'GridEditorCreatedEventEmpty'
	'GridEditorCreatedEvent'
	'GridTableBaseEmpty'
	'HashTable'
	'HtmlCellEvent'
	'HtmlContainerCell'
	'HtmlFilterEmpty'
	'HtmlHelpDialog'
	'HtmlHelpDialog_1'
	'HtmlListBox'
	'HtmlListBoxEmpty'
	'HtmlParserEmpty'
	'HtmlTag'
	'HtmlTagHandlerEmpty'
	'HtmlWindowEmpty'
	'HtmlWindow'
	'HtmlWinParser'
	'Icon_1'
	'Icon_2'
	'Icon_3'
	'Image_1'
	'Image_3'
	'ImageHandlerEmpty'
	'InputStreamEmpty'
	'ListBox'
	'LocaleEmpty'
	'Locale'
	'Locale_1'
	'LogTextCtrl'
	'LogWindow'
	'LongLongEmpty'
	'LongLong'
	'LongLong_1'
	'MBConvEmpty'
	'MemoryInputStream'
	'MemoryOutputStream'
	'MenuBar_1'
	'ModuleEmpty'
	'MultiChoiceDialog'
	'OutputStreamEmpty'
	'OwnerDrawnComboBox'
	'Palette_1'
	'Printout'
	'RadioBox'
	'RecursionGuard'
	'Region_4'
	'RichTextFileHandler'
	'RichTextStyleDefinition'
	'SingleChoiceDialog'
	'SingleChoiceDialog_1'
	'SizerEmpty'
	'SockAddressEmpty'
	'SocketBaseEmpty'
	'StackWalkerEmpty'
	'StaticBoxSizer_1'
	'StreamBaseEmpty'
	'StreamBufferEmpty'
	'StringEmpty'
	'String'
	'String_1'
	'String_2'
	'String_3'
	'String_4'
	'String_5'
	'StringOutputStream'
	'TCPConnection'
	'TextDropTargetEmpty'
	'TextInputStream'
	'TextOutputStream'
	'TextValidator_1'
	'Thread'
	'ThreadHelperEmpty'
	'TimeSpanEmpty'
	'TimeSpan'
	'TipProvider'
	'TipWindow'
	'Variant_13'
	'Variant_14'
	'Variant_15'
	'VariantDataEmpty'
	'ViewEmpty'
	'VListBox'
	'VListBoxEmpty'
	'VScrolledWindow'
	'VScrolledWindowEmpty'
	'WizardPage'
	'XmlDocument'
	'XmlDocument_1'
	'XmlNode'
	'XmlResourceHandlerEmpty'
]

methodsExclude = [
	'wxApp.CreateLogTarget'
	'wxApp.CreateTraits'
	'wxApp.OnActivate'
	'wxApp.OnCharHook'
	'wxApp.OnAssertFailure'
	'wxApp.ProcessMessage'
	'wxApp.HandleEvent'
	'wxAppTraits.CreateMessageOutput'
	'wxAppTraits.GetStandardPaths'
	'wxAppTraits.GetToolkitVersion'
	'wxAppTraits.ShowAssertDialog'
	'wxArchiveClassFactory.GetConv'
	'wxArchiveClassFactory.GetProtocols'
	'wxArtProvider.CreateBitmap'
	'wxArtProvider.GetBitmap'
	'wxArtProvider.GetIcon'
	'wxAuiManager.GetAllPanes'
	'wxAuiManager.GetDockSizeConstraint'
	'wxAuiManager.ProcessDockResult'
	'wxAuiTabArt.DrawButton'
	'wxAuiTabArt.DrawTab'
	'wxAuiTabArt.GetBestTabCtrlSize'
	'wxAuiTabArt.GetTabSize'
	'wxAuiTabArt.ShowWindowList'
	'wxAutomationObject.CallMethod'
	'wxAutomationObject.CallMethod_1'
	'wxAutomationObject.CreateInstance'
	'wxAutomationObject.GetDispatchPtr'
	'wxAutomationObject.GetInstance'
	'wxAutomationObject.GetObject'
	'wxAutomationObject.GetProperty'
	'wxAutomationObject.GetProperty_1'
	'wxAutomationObject.Invoke'
	'wxAutomationObject.PutProperty'
	'wxAutomationObject.PutProperty_1'
	'wxAutomationObject.SetDispatchPtr'
	'wxBitmap.Create_1'
	'wxBitmap.SetOk'
	'wxBitmapComboBox.Create'
	'wxBitmapComboBox.Append_1'
	'wxBitmapComboBox.Insert_1'
	'wxBitmapHandler.Create'
	'wxBitmapHandler.LoadFile'
	'wxCalendarCtrl.HitTest'
	'wxCaret.GetPosition'
	'wxCaret.GetSize'
	'wxChoice.Create'
	'wxClassInfo.GetBaseClassName1'
	'wxClassInfo.GetBaseClassName2'
	'wxClassInfo.GetClassName'
	'wxClassInfo.InitializeClasses'
	'wxClientDataContainer.SetClientData'
	'wxCloseEvent.SetForce'
	'wxCmdLineParser.ConvertStringToArgs'
	'wxCmdLineParser.SetCmdLine'
	'wxCmdLineParser.SetCmdLine_1'
	'wxCmdLineParser.SetCmdLine_2'
	'wxCmdLineParser.SetSwitchChars'
	'wxCmdLineParser.EnableLongOptions'
	'wxCmdLineParser.DisableLongOptions'
	'wxCmdLineParser.AreLongOptionsEnabled'
	'wxCmdLineParser.SetLogo'
	'wxCmdLineParser.SetDesc'
	'wxCmdLineParser.AddSwitch'
	'wxCmdLineParser.AddOption'
	'wxCmdLineParser.AddParam'
	'wxCmdLineParser.Parse'
	'wxCmdLineParser.Usage'
	'wxCmdLineParser.Found_1'
	'wxCmdLineParser.Found_2'
	'wxComboBox.Create'
	'wxComboBox.GetLastPosition'
	'wxComboBox.GetSelection'
	'wxComboCtrl.AnimateShow'
	'wxComboCtrl.DoSetPopupControl'
	'wxComboCtrl.DoShowPopup'
	'wxCommandEvent.Checked'
	'wxCommandEvent.SetClientData'
	'wxConfigBase.Read_1'
	'wxConfigBase.Read_4'
	'wxConfigBase.Read_7'
	'wxConfigBase.Read_9'
	'wxConnection.Advise'
	'wxConnection.Execute'
	'wxConnection.OnAdvise'
	'wxConnection.OnExecute'
	'wxConnection.OnPoke'
	'wxConnection.OnRequest'
	'wxConnection.Poke'
	'wxConnection.Request'
	'wxControlWithItems.Append_1'
	'wxControlWithItems.Insert_1'
	'wxControlWithItems.Number'
	'wxControlWithItems.SetClientData'
	'wxCSConv.MB2WC'
	'wxCSConv.WC2MB'
	'wxCustomDataObject.SetData'
	'wxCustomDataObject.TakeData'
	'wxDataFormat.SetId'
	'wxDatagramSocket.ReceiveFrom'
	'wxDatagramSocket.SendTo'
	'wxDataInputStream.Read8_1'
	'wxDataInputStream.Read16_1'
	'wxDataInputStream.Read32_1'
	'wxDataInputStream.Read64'
	'wxDataInputStream.Read64_1'
	'wxDataInputStream.ReadDouble_1'
	'wxDataObject.GetAllFormats'
	'wxDataObject.GetDataHere'
	'wxDataObject.SetData'
	'wxDataObjectComposite.Add'
	'wxDataObjectSimple.GetDataHere'
	'wxDataObjectSimple.SetData'
	'wxDataOutputStream.Write8'
	'wxDataOutputStream.Write8_1'
	'wxDataOutputStream.Write16'
	'wxDataOutputStream.Write16_1'
	'wxDataOutputStream.Write32'
	'wxDataOutputStream.Write32_1'
	'wxDataOutputStream.Write64'
	'wxDataOutputStream.Write64_1'
	'wxDataOutputStream.WriteDouble'
	'wxDataOutputStream.WriteDouble_1'
	'wxDataOutputStream.WriteString'
	'wxDataViewListModelNotifier.RowsReordered'
	'wxDataViewModel.wxDataViewListModel'
	'wxDataViewModel.AddNotifier'
	'wxDataViewModel.AddViewingColumn'
	'wxDataViewModel.GetColType'
	'wxDataViewModel.GetNumberOfCols'
	'wxDataViewModel.GetNumberOfRows'
	'wxDataViewModel.GetValue'
	'wxDataViewModel.RemoveNotifier'
	'wxDataViewModel.RemoveViewingColumn'
	'wxDataViewModel.RowAppended'
	'wxDataViewModel.RowChanged'
	'wxDataViewModel.RowDeleted'
	'wxDataViewModel.RowInserted'
	'wxDataViewModel.RowPrepended'
	'wxDataViewModel.RowsReordered'
	'wxDataViewModel.SetValue'
	'wxDataViewModel.ValueChanged'
	'wxDataViewModel.wxDataViewSortedListModel'
	'wxDataViewModel.GetAscending'
	'wxDataViewModel.Resort'
	'wxDataViewModel.SetAscending'
	'wxDataViewRenderer.GetMode'
	'wxDataViewRenderer.GetOwner'
	'wxDataViewRenderer.GetValue'
	'wxDataViewRenderer.GetVariantType'
	'wxDataViewRenderer.SetOwner'
	'wxDataViewRenderer.SetValue'
	'wxDataViewRenderer.Validate'
	'wxDataViewRenderer.wxDataViewTextRenderer'
	'wxDataViewRenderer.wxDataViewProgressRenderer'
	'wxDataViewRenderer.wxDataViewToggleRenderer'
	'wxDataViewRenderer.wxDataViewBitmapRenderer'
	'wxDataViewRenderer.wxDataViewDateRenderer'
	'wxDataViewRenderer.wxDataViewCustomRenderer'
	'wxDataViewRenderer.Activate'
	'wxDataViewRenderer.GetDC'
	'wxDataViewRenderer.GetSize'
	'wxDataViewRenderer.LeftClick'
	'wxDataViewRenderer.Render'
	'wxDataViewRenderer.RightClick'
	'wxDataViewRenderer.StartDrag'
	'wxDatePickerCtrl.GetRange'
	'wxDatePickerCtrl.SetFormat'
	'wxDateTime.ConvertYearToBC'
	'wxDateTime.GetAmPmStrings'
	'wxDateTime.GetBeginDST'
	'wxDateTime.GetCountry'
	'wxDateTime.GetCurrentYear'
	'wxDateTime.GetCurrentMonth'
	'wxDateTime.GetCentury'
	'wxDateTime.GetEndDST'
	'wxDateTime.GetMonthName'
	'wxDateTime.GetNumberOfDays'
	'wxDateTime.GetNumberOfDays_1'
	'wxDateTime.GetTimeNow'
	'wxDateTime.GetTmNow'
	'wxDateTime.GetTmNow_1'
	'wxDateTime.GetWeekDayName'
	'wxDateTime.IsLeapYear'
	'wxDateTime.IsWestEuropeanCountry'
	'wxDateTime.IsDSTApplicable'
	'wxDateTime.Now'
	'wxDateTime.SetCountry'
	'wxDateTime.Today'
	'wxDateTime.UNow'
	'wxDateTime.SetToCurrent'
	'wxDateTime.Set'
	'wxDateTime.Set_1'
	'wxDateTime.Set_2'
	'wxDateTime.Set_3'
	'wxDateTime.Set_4'
	'wxDateTime.ResetTime'
	'wxDateTime.SetYear'
	'wxDateTime.SetMonth'
	'wxDateTime.SetDay'
	'wxDateTime.SetHour'
	'wxDateTime.SetMinute'
	'wxDateTime.SetSecond'
	'wxDateTime.SetMillisecond'
	'wxDateTime.IsValid'
	'wxDateTime.GetDateOnly'
	'wxDateTime.GetTm'
	'wxDateTime.GetTicks'
	'wxDateTime.GetCentury_1'
	'wxDateTime.GetYear'
	'wxDateTime.GetMonth'
	'wxDateTime.GetDay'
	'wxDateTime.GetWeekDay'
	'wxDateTime.GetHour'
	'wxDateTime.GetMinute'
	'wxDateTime.GetSecond'
	'wxDateTime.GetMillisecond'
	'wxDateTime.GetDayOfYear'
	'wxDateTime.GetWeekOfYear'
	'wxDateTime.GetWeekOfMonth'
	'wxDateTime.IsWorkDay'
	'wxDateTime.IsGregorianDate'
	'wxDateTime.Set_5'
	'wxDateTime.GetAsDOS'
	'wxDateTime.IsEqualTo'
	'wxDateTime.IsEarlierThan'
	'wxDateTime.IsLaterThan'
	'wxDateTime.IsStrictlyBetween'
	'wxDateTime.IsBetween'
	'wxDateTime.IsSameDate'
	'wxDateTime.IsSameTime'
	'wxDateTime.IsEqualUpTo'
	'wxDateTime.Add'
	'wxDateTime.Add_1'
	'wxDateTime.Add_2'
	'wxDateTime.Add_3'
	'wxDateTime.Subtract'
	'wxDateTime.Subtract_1'
	'wxDateTime.Subtract_2'
	'wxDateTime.Subtract_3'
	'wxDateTime.Subtract_4'
	'wxDateTime.ParseRfc822Date'
	'wxDateTime.ParseFormat'
	'wxDateTime.ParseDateTime'
	'wxDateTime.ParseDate'
	'wxDateTime.ParseTime'
	'wxDateTime.Format'
	'wxDateTime.FormatDate'
	'wxDateTime.FormatTime'
	'wxDateTime.FormatISODate'
	'wxDateTime.FormatISOTime'
	'wxDateTime.SetToWeekDayInSameWeek'
	'wxDateTime.GetWeekDayInSameWeek'
	'wxDateTime.SetToNextWeekDay'
	'wxDateTime.GetNextWeekDay'
	'wxDateTime.SetToPrevWeekDay'
	'wxDateTime.GetPrevWeekDay'
	'wxDateTime.SetToWeekDay'
	'wxDateTime.GetWeekDay_1'
	'wxDateTime.SetToLastWeekDay'
	'wxDateTime.GetLastWeekDay'
	'wxDateTime.SetToWeekOfYear'
	'wxDateTime.SetToLastMonthDay'
	'wxDateTime.GetLastMonthDay'
	'wxDateTime.SetToYearDay'
	'wxDateTime.GetYearDay'
	'wxDateTime.GetJulianDayNumber'
	'wxDateTime.GetJDN'
	'wxDateTime.GetModifiedJulianDayNumber'
	'wxDateTime.GetMJD'
	'wxDateTime.GetRataDie'
	'wxDateTime.FromTimezone'
	'wxDateTime.ToTimezone'
	'wxDateTime.MakeTimezone'
	'wxDateTime.MakeFromTimezone'
	'wxDateTime.ToUTC'
	'wxDateTime.MakeUTC'
	'wxDateTime.IsDST'
	'wxDC.CacheEnabled'
	'wxDC.DrawLines'
	'wxDC.DrawPolygon'
	'wxDC.DrawPolyPolygon'
	'wxDC.DrawSpline'
	'wxDC.EnableCache'
	'wxDC.GetBackground'
	'wxDC.GetBrush'
	'wxDC.GetClippingBox'
	'wxDC.GetFont'
	'wxDC.GetMultiLineTextExtent'
	'wxDC.GetPen'
	'wxDC.GetSize'
	'wxDC.GetSizeMM'
	'wxDC.GetTextExtent'
	'wxDC.GetTextForeground'
	'wxDC.GetUserScale'
	'wxDC.SetMapMode'
	'wxDC.StartPage'
	'wxDDEConnection.Advise'
	'wxDDEConnection.Execute'
	'wxDDEConnection.OnAdvise'
	'wxDDEConnection.OnExecute'
	'wxDDEConnection.OnPoke'
	'wxDDEConnection.OnRequest'
	'wxDDEConnection.Poke'
	'wxDDEConnection.Request'
	'wxDebugReport.AddContext'
	'wxDebugReport.AddDump'
	'wxDebugReport.DoAddCustomContext'
	'wxDebugReport.DoAddExceptionInfo'
	'wxDebugReport.DoAddLoadedModules'
	'wxDebugReport.DoAddSystemInfo'
	'wxDebugReport.GetFile'
	'wxDebugReportUpload.OnServerReply'
	'wxDelegateRendererNative.DrawXXX'
	'wxDialog.DoOK'
	'wxDialog.GetToolBar'
	'wxDialog.OnSysColourChanged'
	'wxDir.GetAllFiles'
	'wxDir.GetFirst'
	'wxDir.GetNext'
	'wxDir.GetTotalSize'
	'wxDisplay.ChangeMode'
	'wxDisplay.GetClientArea'
	'wxDisplay.GetCount'
	'wxDisplay.GetCurrentMode'
	'wxDisplay.GetDepth'
	'wxDisplay.GetFromPoint'
	'wxDisplay.GetFromWindow'
	'wxDisplay.GetGeometry'
	'wxDisplay.GetModes'
	'wxDisplay.GetName'
	'wxDisplay.IsPrimary'
	'wxDocManager.SelectDocumentPath'
	'wxDocManager.SelectDocumentType'
	'wxDocManager.SelectViewType'
	'wxDocument.LoadObject_1'
	'wxDocument.SaveObject'
	'wxDocument.SaveObject_1'
	'wxDragImage.DoDrawImage'
	'wxDragImage.GetImageRect'
	'wxDragImage.UpdateBackingFromWindow'
	'wxDropFilesEvent.GetFiles'
	'wxDropSource.SetData'
	'wxDropSource.DoDragDrop'
	'wxDropSource.GetDataObject'
	'wxDropSource.GiveFeedback'
	'wxDropSource.SetCursor'
	'wxDropTarget.GetData'
	'wxDropTarget.OnData'
	'wxDropTarget.OnDrop'
	'wxDropTarget.OnEnter'
	'wxDropTarget.OnDragOver'
	'wxDropTarget.OnLeave'
	'wxDropTarget.SetDataObject'
	'wxDynamicLibrary.CanonicalizeName'
	'wxDynamicLibrary.CanonicalizePluginName'
	'wxDynamicLibrary.Detach'
	'wxDynamicLibrary.GetProgramHandle'
	'wxDynamicLibrary.ListLoaded'
	'wxDynamicLibrary.Load'
	'wxDynamicLibrary.Unload'
	'wxDynamicLibrary.Unload_1'
	'wxDynamicLibraryDetails.GetAddress'
	'wxEncodingConverter.Convert'
	'wxEncodingConverter.Convert_1'
	'wxEncodingConverter.Convert_2'
	'wxEncodingConverter.Convert_3'
	'wxEncodingConverter.Convert_5'
	'wxEncodingConverter.GetPlatformEquivalents'
	'wxEncodingConverter.GetAllEquivalents'
	'wxEvtHandler.Connect'
	'wxEvtHandler.Connect_1'
	'wxEvtHandler.Connect_2'
	'wxEvtHandler.Disconnect'
	'wxEvtHandler.Disconnect_1'
	'wxEvtHandler.Disconnect_2'
	'wxEvtHandler.SearchEventTable'
	'wxEvtHandler.SetClientData'
	'wxFFile.Attach'
	'wxFFile.Close'
	'wxFFile.Detach'
	'wxFFile.Flush'
	'wxFFile.GetKind'
	'wxFFile.Open'
	'wxFFile.Read'
	'wxFFile.ReadAll'
	'wxFFile.Seek'
	'wxFFile.SeekEnd'
	'wxFFile.Write'
	'wxFFile.Write_1'
	'wxFile.Access'
	'wxFile.Attach'
	'wxFile.Close'
	'wxFile.Create'
	'wxFile.Detach'
	'wxFile.Exists'
	'wxFile.Flush'
	'wxFile.GetKind'
	'wxFile.Open'
	'wxFile.Read'
	'wxFile.Seek'
	'wxFile.SeekEnd'
	'wxFile.Write'
	'wxFile.Write_1'
	'wxFileDropTarget.OnDrop'
	'wxFileHistory.GetMenus'
	'wxFileName.AppendDir'
	'wxFileName.Assign'
	'wxFileName.Assign_1'
	'wxFileName.Assign_2'
	'wxFileName.Assign_3'
	'wxFileName.Assign_4'
	'wxFileName.Assign_5'
	'wxFileName.AssignCwd'
	'wxFileName.AssignDir'
	'wxFileName.AssignHomeDir'
	'wxFileName.AssignTempFileName'
	'wxFileName.Clear'
	'wxFileName.SetClearExt'
	'wxFileName.CreateTempFileName'
	'wxFileName.DirExists'
	'wxFileName.DirName'
	'wxFileName.FileExists'
	'wxFileName.FileName'
	'wxFileName.GetCwd'
	'wxFileName.GetForbiddenChars'
	'wxFileName.GetFormat'
	'wxFileName.GetHomeDir'
	'wxFileName.GetPathSeparator'
	'wxFileName.GetPathSeparators'
	'wxFileName.GetPathTerminators'
	'wxFileName.GetSize'
	'wxFileName.GetSize_1'
	'wxFileName.GetHumanReadableSize'
	'wxFileName.GetHumanReadableSize_1'
	'wxFileName.GetTempDir'
	'wxFileName.GetVolumeSeparator'
	'wxFileName.InsertDir'
	'wxFileName.IsAbsolute'
	'wxFileName.IsCaseSensitive'
	'wxFileName.IsDirReadable'
	'wxFileName.IsDirWritable'
	'wxFileName.IsFileExecutable'
	'wxFileName.IsFileReadable'
	'wxFileName.IsFileWritable'
	'wxFileName.IsPathSeparator'
	'wxFileName.IsRelative'
	'wxFileName.MacFindDefaultTypeAndCreator'
	'wxFileName.MacRegisterDefaultTypeAndCreator'
	'wxFileName.MacSetDefaultTypeAndCreator'
	'wxFileName.MakeAbsolute'
	'wxFileName.MakeRelativeTo'
	'wxFileName.Mkdir'
	'wxFileName.Mkdir_1'
	'wxFileName.Normalize'
	'wxFileName.PrependDir'
	'wxFileName.RemoveDir'
	'wxFileName.RemoveLastDir'
	'wxFileName.Rmdir'
	'wxFileName.Rmdir_1'
	'wxFileName.SetCwd'
	'wxFileName.SetCwd_1'
	'wxFileName.SetExt'
	'wxFileName.SetEmptyExt'
	'wxFileName.SetFullName'
	'wxFileName.SetName'
	'wxFileName.SetTimes'
	'wxFileName.SetVolume'
	'wxFileName.SplitPath'
	'wxFileName.SplitPath_1'
	'wxFileName.SplitPath_2'
	'wxFileName.SplitVolume'
	'wxFileName.Touch'
	'wxFileSystem.AddHandler'
	'wxFileSystem.FindFileInPath'
	'wxFileSystemHandler.GetAnchor'
	'wxFileSystemHandler.GetLeftLocation'
	'wxFileSystemHandler.GetMimeTypeFromExt'
	'wxFileSystemHandler.GetProtocol'
	'wxFileSystemHandler.GetRightLocation'
	'wxFileType.GetMimeType'
	'wxFileType.GetMimeType_1'
	'wxFileType.GetDescription'
	'wxFileType.GetOpenCommand'
	'wxFileType.GetPrintCommand'
	'wxFileType.ExpandCommand'
	'wxFilterClassFactory.GetProtocols'
	'wxFont.GetFamily'
	'wxFont.GetWeight'
	'wxFontMapper.GetAllEncodingNames'
	'wxFontMapper.GetAltForEncoding_1'
	'wxFontMapper.SetConfig'
	'wxFontPickerCtrl.GetMaxPointSize'
	'wxFontPickerCtrl.GetMaxPointSize_1'
	'wxFrame.SetStatusWidths'
	'wxFTP.SetTransferMode'
	'wxGenericDirCtrl.GetFilterListCtrl'
	'wxGrid.CanHaveAttributes'
	'wxGrid.CreateGrid'
	'wxGrid.GetCellAlignment'
	'wxGrid.GetColLeft'
	'wxGrid.GetColLabelAlignment'
	'wxGrid.GetColMinimalWidth'
	'wxGrid.GetColRight'
	'wxGrid.GetDefaultCellAlignment'
	'wxGrid.GetRowMinimalHeight'
	'wxGrid.GetRowLabelAlignment'
	'wxGrid.GetSelectedCells'
	'wxGrid.GetSelectionBlockTopLeft'
	'wxGrid.GetSelectionBlockBottomRight'
	'wxGrid.InitColWidths'
	'wxGrid.InitRowHeights'
	'wxGrid.SelectionToDeviceRect'
	'wxGrid.SetOrCalcColumnSizes'
	'wxGrid.SetOrCalcRowSizes'
	'wxGrid.SetSelectionMode'
	'wxGrid.SetTable'
	'wxGridCellAttr.GetAlignment'
	'wxGridCellBoolEditor.wxGridCellChoiceEditor'
	'wxGridCellBoolEditor.wxGridCellChoiceEditor_1'
	'wxGridCellBoolRenderer.wxGridCellFloatRenderer'
	'wxGridCellBoolRenderer.GetPrecision'
	'wxGridCellBoolRenderer.GetWidth'
	'wxGridCellBoolRenderer.SetPrecision'
	'wxGridCellBoolRenderer.SetWidth'
	'wxGridCellBoolRenderer.wxGridCellNumberRenderer'
	'wxGridCellBoolRenderer.wxGridCellStringRenderer'
	'wxGridCellEditor.wxGridCellFloatEditor'
	'wxGridCellEditor.wxGridCellNumberEditor'
	'wxGridCellEditor.GetString'
	'wxGridCellEditor.HasRange'
	'wxGridCellEditor.wxGridCellTextEditor'
	'wxGridEditorCreatedEvent.GetCol'
	'wxGridEditorCreatedEvent.GetControl'
	'wxGridEditorCreatedEvent.GetRow'
	'wxGridEditorCreatedEvent.SetCol'
	'wxGridEditorCreatedEvent.SetControl'
	'wxGridEditorCreatedEvent.SetRow'
	'wxGridEditorCreatedEvent.wxGridEvent'
	'wxGridEditorCreatedEvent.wxGridEvent_1'
	'wxGridEditorCreatedEvent.AltDown'
	'wxGridEditorCreatedEvent.ControlDown'
	'wxGridEditorCreatedEvent.GetCol_1'
	'wxGridEditorCreatedEvent.GetPosition'
	'wxGridEditorCreatedEvent.GetRow_1'
	'wxGridEditorCreatedEvent.MetaDown'
	'wxGridEditorCreatedEvent.Selecting'
	'wxGridEditorCreatedEvent.ShiftDown'
	'wxGridRangeSelectEvent.wxGridSizeEvent'
	'wxGridRangeSelectEvent.wxGridSizeEvent_1'
	'wxGridRangeSelectEvent.GetPosition'
	'wxGridRangeSelectEvent.GetRowOrCol'
	'wxGridTableBase.SetValueAsCustom'
	'wxGridTableBase.SetRowLabelValue'
	'wxGridTableBase.SetColLabelValue'
	'wxGridTableBase.UpdateAttrRows'
	'wxGridTableBase.UpdateAttrCols'
	'wxGridTableBase.GetAttr'
	'wxHelpController.GetFrameParameters'
	'wxHelpEvent.SetOrigin'
	'wxHelpProvider.ShowHelpAtPoint'
	'wxHtmlCell.AdjustPagebreak'
	'wxHtmlCell.Draw'
	'wxHtmlCell.DrawInvisible'
	'wxHtmlCell.Find'
	'wxHtmlCell.SetNext'
	'wxHtmlCell.SetParent'
	'wxHtmlCellEvent.SetLinkClicked'
	'wxHtmlContainerCell.InsertCell'
	'wxHtmlDCRenderer.SetFonts'
	'wxHtmlDCRenderer.Render'
	'wxHtmlEasyPrinting.SetFonts'
	'wxHtmlHelpController.CreateHelpDialog'
	'wxHtmlHelpController.CreateHelpFrame'
	'wxHtmlHelpData.GetBookRecArray'
	'wxHtmlHelpData.GetContentsArray'
	'wxHtmlHelpData.GetIndexArray'
	'wxHtmlHelpDialog.AddToolbarButtons'
	'wxHtmlHelpDialog.Create'
	'wxHtmlHelpDialog.ReadCustomization'
	'wxHtmlHelpDialog.SetController'
	'wxHtmlHelpDialog.SetTitleFormat'
	'wxHtmlHelpDialog.WriteCustomization'
	'wxHtmlHelpDialog.wxHtmlHelpFrame'
	'wxHtmlHelpDialog.wxHtmlHelpFrame_1'
	'wxHtmlHelpDialog.AddToolbarButtons_1'
	'wxHtmlHelpDialog.Create_1'
	'wxHtmlHelpDialog.ReadCustomization_1'
	'wxHtmlHelpDialog.SetController_1'
	'wxHtmlHelpDialog.SetTitleFormat_1'
	'wxHtmlHelpDialog.WriteCustomization_1'
	'wxHtmlHelpDialog.wxHtmlHelpWindow'
	'wxHtmlHelpDialog.wxHtmlHelpWindow_1'
	'wxHtmlHelpDialog.Create_2'
	'wxHtmlHelpDialog.CreateContents'
	'wxHtmlHelpDialog.CreateIndex'
	'wxHtmlHelpDialog.CreateSearch'
	'wxHtmlHelpDialog.Display'
	'wxHtmlHelpDialog.Display_1'
	'wxHtmlHelpDialog.DisplayContents'
	'wxHtmlHelpDialog.DisplayIndex'
	'wxHtmlHelpDialog.GetData'
	'wxHtmlHelpDialog.KeywordSearch'
	'wxHtmlHelpDialog.ReadCustomization_2'
	'wxHtmlHelpDialog.RefreshLists'
	'wxHtmlHelpDialog.SetTitleFormat_2'
	'wxHtmlHelpDialog.UseConfig'
	'wxHtmlHelpDialog.WriteCustomization_2'
	'wxHtmlHelpDialog.AddToolbarButtons_2'
	'wxHtmlHelpDialog.wxHtmlModalHelp'
	'wxHtmlLinkEvent.wxHyperlinkEvent'
	'wxHtmlListBox.GetFileSystem'
	'wxHtmlListBox.GetFileSystem_1'
	'wxHtmlListBox.GetSelectedTextBgColour'
	'wxHtmlListBox.GetSelectedTextColour'
	'wxHtmlListBox.OnGetItem'
	'wxHtmlListBox.OnGetItemMarkup'
	'wxHtmlListBox.OnLinkClicked'
	'wxHtmlParser.AddTag'
	'wxHtmlParser.AddTagHandler'
	'wxHtmlParser.AddWord'
	'wxHtmlParser.GetSource'
	'wxHtmlParser.SetFS'
	'wxHtmlPrintout.SetFonts'
	'wxHtmlTag.GetParamAsInt'
	'wxHtmlTag.ScanParam'
	'wxHtmlTagHandler.ParseInner'
	'wxHtmlTagHandler.SetParser'
	'wxHtmlTagsModule.FillHandlersTable'
	'wxHtmlWindow.AddFilter'
	'wxHtmlWindow.AppendToPage'
	'wxHtmlWindow.GetOpenedAnchor'
	'wxHtmlWindow.GetOpenedPage'
	'wxHtmlWindow.GetOpenedPageTitle'
	'wxHtmlWindow.HistoryBack'
	'wxHtmlWindow.HistoryCanBack'
	'wxHtmlWindow.HistoryCanForward'
	'wxHtmlWindow.HistoryClear'
	'wxHtmlWindow.HistoryForward'
	'wxHtmlWindow.LoadFile'
	'wxHtmlWindow.LoadPage'
	'wxHtmlWindow.OnCellClicked'
	'wxHtmlWindow.OnCellMouseHover'
	'wxHtmlWindow.OnLinkClicked'
	'wxHtmlWindow.OnOpeningURL'
	'wxHtmlWindow.OnSetTitle'
	'wxHtmlWindow.ReadCustomization'
	'wxHtmlWindow.SelectAll'
	'wxHtmlWindow.SelectionToText'
	'wxHtmlWindow.SelectLine'
	'wxHtmlWindow.SelectWord'
	'wxHtmlWindow.SetBorders'
	'wxHtmlWindow.SetFonts'
	'wxHtmlWindow.SetPage'
	'wxHtmlWindow.SetRelatedFrame'
	'wxHtmlWindow.SetRelatedStatusBar'
	'wxHtmlWindow.ToText'
	'wxHtmlWindow.WriteCustomization'
	'wxHtmlWinParser.AddModule'
	'wxHtmlWinParser.SetDC'
	'wxHtmlWinParser.SetFonts'
	'wxHyperlinkCtrl.wxHyperLink'
	'wxIcon.SaveFile'
	'wxImage.ComputeHistogram'
	'wxImage.ConvertToBitmap'
	'wxImage.FindFirstUnusedColour'
	'wxImage.GetAlpha_1'
	'wxImage.GetData'
	'wxImage.GetOrFindMaskColour'
	'wxImage.GetPalette'
	'wxImage.HSVValue'
	'wxImage.RGBValue'
	'wxImage.SetAlpha'
	'wxImage.SetData'
	'wxInputStream.GetC'
	'wxInputStream.Peek'
	'wxInputStream.Read'
	'wxInputStream.Read_1'
	'wxInputStream.SeekI'
	'wxInputStream.Ungetch'
	'wxInputStream.Ungetch_1'
	'wxKeyEvent.GetPosition_1'
	'wxKeyEvent.GetUnicodeKey'
	'wxListBox.Create'
	'wxListBox.InsertItems'
	'wxListBox.Set'
	'wxListBox.Set_1'
	'wxListCtrl.HitTest'
	'wxListCtrl.OnGetItemAttr'
	'wxListCtrl.OnGetItemImage'
	'wxListCtrl.OnGetItemColumnImage'
	'wxListCtrl.OnGetItemText'
	'wxListCtrl.SetItemPtrData'
	'wxListCtrl.SortItems'
	'wxLocale.AddCatalog'
	'wxLocale.AddCatalog_1'
	'wxLocale.AddCatalogLookupPathPrefix'
	'wxLocale.AddLanguage'
	'wxLocale.FindLanguageInfo'
	'wxLocale.GetCanonicalName'
	'wxLocale.GetLanguage'
	'wxLocale.GetLanguageInfo'
	'wxLocale.GetLanguageName'
	'wxLocale.GetLocale'
	'wxLocale.GetName'
	'wxLocale.GetString'
	'wxLocale.GetString_1'
	'wxLocale.GetHeaderValue'
	'wxLocale.GetSysName'
	'wxLocale.GetSystemEncoding'
	'wxLocale.GetSystemEncodingName'
	'wxLocale.GetSystemLanguage'
	'wxLocale.Init'
	'wxLocale.Init_1'
	'wxLocale.IsAvailable'
	'wxLocale.IsLoaded'
	'wxLocale.IsOk'
	'wxLog.OnLog'
	'wxLog.DoLog'
	'wxLog.DoLogString'
	'wxLog.SetTimestamp'
	'wxLog.GetTimestamp'
	'wxLog.SetTraceMask'
	'wxLogChain.wxLogGui'
	'wxLogChain.wxLogNull'
	'wxLogChain.wxLogStderr'
	'wxLogWindow.Show'
	'wxLogWindow.OnFrameCreate'
	'wxLogWindow.OnFrameClose'
	'wxLogWindow.OnFrameDelete'
	'wxLongLong.Abs'
	'wxLongLong.Assign'
	'wxLongLong.GetValue'
	'wxMBConvUTF16.MB2WC'
	'wxMBConvUTF16.WC2MB'
	'wxMBConvUTF32.MB2WC'
	'wxMBConvUTF32.WC2MB'
	'wxMBConvUTF7.MB2WC'
	'wxMBConvUTF7.WC2MB'
	'wxMBConvUTF8.MB2WC'
	'wxMBConvUTF8.WC2MB'
	'wxMDIChildFrame.Create'
	'wxMDIParentFrame.GetClientSize'
	'wxMDIParentFrame.SetToolBar'
	'wxMediaCtrl.GetPlaybackrate'
	'wxMediaCtrl.GetState'
	'wxMediaCtrl.LoadURI'
	'wxMediaCtrl.LoadURIWithProxy'
	'wxMemoryBuffer.AppendData'
	'wxMemoryFSHandler.AddFileWithMimeType_1'
	'wxMemoryOutputStream.CopyTo'
	'wxMenu.FindItem_1'
	'wxMenu.GetMenuItems'
	'wxMenuBar.FindItem'
	'wxMenuItem.GetName'
	'wxModule.AddDependency'
	'wxMouseEvent.GetPosition_1'
	'wxMouseEvent.GetPosition_2'
	'wxNode.SetData'
	'wxNode.IndexOf'
	'wxNotebook.HitTest'
	'wxObject.Dump'
	'wxOutputStream.Close'
	'wxOutputStream.PutC'
	'wxOutputStream.SeekO'
	'wxOutputStream.Write'
	'wxOutputStream.Write_1'
	'wxOwnerDrawnComboBox.Create'
	'wxOwnerDrawnComboBox.OnDrawBackground'
	'wxOwnerDrawnComboBox.OnDrawItem'
	'wxOwnerDrawnComboBox.OnMeasureItem'
	'wxOwnerDrawnComboBox.OnMeasureItemWidth'
	'wxPageSetupDialog.IsOk'
	'wxPalette.Create'
	'wxPalette.GetRGB'
	'wxPen.GetDashes'
	'wxPen.SetDashes'
	'wxPen.SetStipple'
	'wxPrintDialogData.SetSetupDialog'
	'wxPrintout.GetPageInfo'
	'wxPrintout.GetPageSizeMM'
	'wxPrintout.GetPageSizePixels'
	'wxPrintout.GetPPIPrinter'
	'wxPrintout.GetPPIScreen'
	'wxProgressDialog.Update'
	'wxProgressDialog.Pulse'
	'wxPropertySheetDialog.SetInnerSizer'
	'wxQuantize.Quantize'
	'wxQuantize.Quantize_1'
	'wxQuantize.DoQuantize'
	'wxRadioBox.Create'
	'wxRegEx.GetMatch'
	'wxRegEx.Replace'
	'wxRegEx.ReplaceAll'
	'wxRegEx.ReplaceFirst'
	'wxRegion.Contains'
	'wxRegion.Contains_1'
	'wxRegion.Contains_2'
	'wxRegion.Contains_3'
	'wxRegKey.Exists'
	'wxRegKey.Exists_1'
	'wxRegKey.HasSubKeys'
	'wxRegKey.Open'
	'wxRegKey.QueryValue_1'
	'wxRendererNative.DrawCheckBox'
	'wxRendererNative.DrawComboBoxDropButton'
	'wxRendererNative.DrawDropArrow'
	'wxRendererNative.DrawHeaderButton'
	'wxRendererNative.DrawItemSelectionRect'
	'wxRendererNative.DrawPushButton'
	'wxRendererNative.DrawSplitterBorder'
	'wxRendererNative.DrawSplitterSash'
	'wxRendererNative.DrawTreeItemButton'
	'wxRendererNative.Get'
	'wxRendererNative.GetDefault'
	'wxRendererNative.GetGeneric'
	'wxRendererNative.GetHeaderButtonHeight'
	'wxRendererNative.GetSplitterParams'
	'wxRendererNative.Load'
	'wxRendererNative.Set'
	'wxRichTextBuffer.GetBatchedCommand'
	'wxRichTextBuffer.GetExtWildcard'
	'wxRichTextBuffer.Number'
	'wxRichTextCtrl.DeleteSelectedContent'
	'wxRichTextCtrl.DoGetBestSize'
	'wxRichTextCtrl.GetLastPosition'
	'wxRichTextCtrl.GetSelection'
	'wxRichTextCtrl.GetVisibleLineForCaretPosition'
	'wxRichTextCtrl.HitTest'
	'wxRichTextCtrl.HitTest_1'
	'wxRichTextCtrl.InitCommandEvent'
	'wxRichTextCtrl.Number'
	'wxRichTextCtrl.PositionToXY'
	'wxRichTextFileHandler.DoLoadFile'
	'wxRichTextFileHandler.DoSaveFile'
	'wxRichTextHTMLHandler.DoSaveFile'
	'wxRichTextListStyleDefinition.GetCombinedStyleLevel'
	'wxRichTextListStyleDefinition.SetLevelAttributes_1'
	'wxRichTextPrintout.GetPageInfo'
	'wxRichTextStyleListBox.OnGetItem'
	'wxRichTextStyleListBox.OnSelect'
	'wxRichTextStyleListBox.SetStyleType'
	'wxRichTextStyleListCtrl.SetStyleType'
	'wxRichTextXMLHandler.DoLoadFile'
	'wxRichTextXMLHandler.DoSaveFile'
	'wxSashEvent.GetDragStatus'
	'wxScrollBar.SetObjectLength'
	'wxScrollBar.SetViewLength'
	'wxScrolledWindow.CalcScrolledPosition'
	'wxScrolledWindow.CalcUnscrolledPosition'
	'wxScrolledWindow.GetScrollPixelsPerUnit'
	'wxScrolledWindow.GetViewStart'
	'wxScrolledWindow.GetVirtualSize'
	'wxSimpleHtmlListBox.wxHtmlListBox'
	'wxSimpleHtmlListBox.wxHtmlListBox_1'
	'wxSimpleHtmlListBox.Create'
	'wxSingleChoiceDialog.GetSelectionClientData'
	'wxSizer.GetChildren'
	'wxSizer.Remove_3'
	'wxSocketBase.Close'
	'wxSocketBase.Destroy'
	'wxSocketBase.Discard'
	'wxSocketBase.InterruptWait'
	'wxSocketBase.LastError'
	'wxSocketBase.Notify'
	'wxSocketBase.RestoreState'
	'wxSocketBase.SaveState'
	'wxSocketBase.SetClientData'
	'wxSocketBase.SetEventHandler'
	'wxSocketBase.SetFlags'
	'wxSocketBase.SetLocal'
	'wxSocketBase.SetNotify'
	'wxSocketBase.SetTimeout'
	'wxSocketBase.Peek'
	'wxSocketBase.Read'
	'wxSocketBase.ReadMsg'
	'wxSocketBase.Unread'
	'wxSocketBase.Wait'
	'wxSocketBase.Wait_1'
	'wxSocketBase.WaitForRead'
	'wxSocketBase.WaitForWrite'
	'wxSocketBase.Write'
	'wxSocketBase.WriteMsg'
	'wxSocketEvent.GetSocketEvent'
	'wxSound.IsPlaying'
	'wxSplashScreen.GetSplashWindow'
	'wxStackFrame.GetParam'
	'wxStackWalker.OnStackFrame'
	'wxStandardPaths.Get'
	'wxStandardPaths.GetInstallPrefix'
	'wxStandardPaths.GetLocalizedResourcesDir'
	'wxStandardPaths.SetInstallPrefix'
	'wxStatusBar.SetFieldsCount'
	'wxStatusBar.SetStatusWidths'
	'wxStatusBar.SetStatusStyles'
	'wxStreamBase.GetLastError'
	'wxStreamBase.OnSysRead'
	'wxStreamBase.OnSysSeek'
	'wxStreamBase.OnSysTell'
	'wxStreamBase.OnSysWrite'
	'wxStreamBuffer.Read'
	'wxStreamBuffer.Write'
	'wxStreamBuffer.SetBufferIO'
	'wxString.Alloc'
	'wxString.Append'
	'wxString.Append_1'
	'wxString.AfterFirst'
	'wxString.AfterLast'
	'wxString.BeforeFirst'
	'wxString.BeforeLast'
	'wxString.c_str'
	'wxString.char_str'
	'wxString.Clear'
	'wxString.Cmp'
	'wxString.Cmp_1'
	'wxString.CmpNoCase'
	'wxString.CmpNoCase_1'
	'wxString.CompareTo'
	'wxString.Contains'
	'wxString.Empty'
	'wxString.Find'
	'wxString.Find_1'
	'wxString.First'
	'wxString.First_1'
	'wxString.First_2'
	'wxString.fn_str'
	'wxString.fn_str_1'
	'wxString.fn_str_2'
	'wxString.Format'
	'wxString.FormatV'
	'wxString.Freq'
	'wxString.From8BitData'
	'wxString.From8BitData_1'
	'wxString.FromAscii'
	'wxString.FromAscii_1'
	'wxString.FromUTF8'
	'wxString.FromUTF8_1'
	'wxString.GetChar'
	'wxString.GetData'
	'wxString.GetWritableChar'
	'wxString.GetWriteBuf'
	'wxString.Index'
	'wxString.Index_1'
	'wxString.IsAscii'
	'wxString.IsEmpty'
	'wxString.IsNull'
	'wxString.IsNumber'
	'wxString.IsSameAs'
	'wxString.IsSameAs_1'
	'wxString.IsWord'
	'wxString.Last'
	'wxString.Last_1'
	'wxString.Left'
	'wxString.Len'
	'wxString.Length'
	'wxString.Lower'
	'wxString.LowerCase'
	'wxString.MakeLower'
	'wxString.MakeUpper'
	'wxString.Matches'
	'wxString.mb_str'
	'wxString.mb_str_1'
	'wxString.Mid'
	'wxString.Pad'
	'wxString.Prepend'
	'wxString.Printf'
	'wxString.PrintfV'
	'wxString.Remove'
	'wxString.Remove_1'
	'wxString.RemoveLast'
	'wxString.Replace'
	'wxString.Right'
	'wxString.SetChar'
	'wxString.Shrink'
	'wxString.StartsWith'
	'wxString.EndsWith'
	'wxString.Strip'
	'wxString.SubString'
	'wxString.To8BitData'
	'wxString.To8BitData_1'
	'wxString.ToAscii'
	'wxString.ToAscii_1'
	'wxString.ToDouble'
	'wxString.ToLong'
	'wxString.ToLongLong'
	'wxString.ToULong'
	'wxString.ToULongLong'
	'wxString.ToUF8'
	'wxString.Trim'
	'wxString.Truncate'
	'wxString.UngetWriteBuf'
	'wxString.UngetWriteBuf_1'
	'wxString.Upper'
	'wxString.UpperCase'
	'wxString.utf8_str'
	'wxString.wc_str'
	'wxString.wc_str_1'
	'wxString.wchar_str'
	'wxStringBuffer.wxStringBufferLength'
	'wxStringBuffer.SetLength'
	'wxTarEntry.GetInternalName'
	'wxTarEntry.GetInternalName_1'
	'wxTarEntry.SetLinkName'
	'wxTaskBarIcon.CreatePopupMenu'
	'wxTCPConnection.Advise'
	'wxTCPConnection.Execute'
	'wxTCPConnection.OnAdvise'
	'wxTCPConnection.OnExecute'
	'wxTCPConnection.OnPoke'
	'wxTCPConnection.OnRequest'
	'wxTCPConnection.Poke'
	'wxTCPConnection.Request'
	'wxTempFile.Write'
	'wxTextCtrl.GetLastPosition'
	'wxTextCtrl.GetSelection'
	'wxTextCtrl.HitTest'
	'wxTextCtrl.PositionToXY'
	'wxTextDropTarget.OnDrop'
	'wxTextFile.AddLine'
	'wxTextFile.Close'
	'wxTextFile.Create'
	'wxTextFile.Create_1'
	'wxTextFile.Exists'
	'wxTextFile.IsOpened'
	'wxTextFile.GetLineCount'
	'wxTextFile.GetLine'
	'wxTextFile.GetCurrentLine'
	'wxTextFile.GoToLine'
	'wxTextFile.Eof'
	'wxTextFile.GetEOL'
	'wxTextFile.GetFirstLine'
	'wxTextFile.GetNextLine'
	'wxTextFile.GetPrevLine'
	'wxTextFile.GetLastLine'
	'wxTextFile.GetLineType'
	'wxTextFile.GuessType'
	'wxTextFile.GetName'
	'wxTextFile.InsertLine'
	'wxTextFile.Open'
	'wxTextFile.Open_1'
	'wxTextFile.RemoveLine'
	'wxTextFile.Clear'
	'wxTextFile.Write'
	'wxTextOutputStream.GetMode'
	'wxTextOutputStream.PutChar'
	'wxTextOutputStream.Write8'
	'wxTextOutputStream.Write16'
	'wxTextOutputStream.Write32'
	'wxTextOutputStream.WriteDouble'
	'wxTextOutputStream.WriteString'
	'wxThread.Entry'
	'wxThread.Exit'
	'wxTimeSpan.Add'
	'wxTimeSpan.Days'
	'wxTimeSpan.Day'
	'wxTimeSpan.Format'
	'wxTimeSpan.Hours'
	'wxTimeSpan.Hour'
	'wxTimeSpan.Minutes'
	'wxTimeSpan.Minute'
	'wxTimeSpan.Multiply'
	'wxTimeSpan.Neg'
	'wxTimeSpan.Milliseconds'
	'wxTimeSpan.Millisecond'
	'wxTimeSpan.Seconds'
	'wxTimeSpan.Second'
	'wxTimeSpan.Subtract'
	'wxTimeSpan.Weeks'
	'wxTimeSpan.Week'
	'wxTipProvider.PreProcessTip'
	'wxTipWindow.SetTipWindowPtr'
	'wxToolBar.AddTool_1'
	'wxToolBar.AddCheckTool'
	'wxToolBar.AddRadioTool'
	'wxToolBar.InsertTool'
	'wxToolBar.SetBitmapResource'
	'wxTopLevelWindow.IsUsingNativeDecorations'
	'wxTopLevelWindow.SetDefaultItem'
	'wxTopLevelWindow.SetLeftMenu'
	'wxTopLevelWindow.SetRightMenu'
	'wxTopLevelWindow.UseNativeDecorations'
	'wxTopLevelWindow.UseNativeDecorationsByDefault'
	'wxTreeCtrl.AssignButtonsImageList'
	'wxTreeCtrl.EndEditLabel'
	'wxTreeCtrl.GetButtonsImageList'
	'wxTreeCtrl.GetFirstChild'
	'wxTreeCtrl.GetNextChild'
	'wxTreeCtrl.GetItemSelectedImage'
	'wxTreeCtrl.GetSelections'
	'wxTreeCtrl.SetButtonsImageList'
	'wxTreeCtrl.SetItemSelectedImage'
	'wxURI.Create'
	'wxURI.HasUser'
	'wxURL.GetProtocol'
	'wxVariant.Convert'
	'wxVariant.Convert_1'
	'wxVariant.Convert_2'
	'wxVariant.Convert_3'
	'wxVariant.Convert_4'
	'wxVariant.IsValueKindOf'
	'wxVariantData.Read'
	'wxVariantData.Write'
	'wxView.OnClosingDoocument'
	'wxVListBox.OnDrawBackground'
	'wxVListBox.OnDrawItem'
	'wxVListBox.OnDrawSeparator'
	'wxVListBox.OnMeasureItem'
	'wxVScrolledWindow.EstimateTotalHeight'
	'wxVScrolledWindow.OnGetLineHeight'
	'wxVScrolledWindow.OnGetLinesHint'
	'wxWindow.CenterOnScreen'
	'wxWindow.CentreOnScreen'
	'wxWindow.ClientToScreen'
	'wxWindow.DoGetBestSize'
	'wxWindow.GetAccessible'
	'wxWindow.GetAdjustedBestSize'
	'wxWindow.GetChildren'
	'wxWindow.GetChildren_1'
	'wxWindow.GetClassDefaultAttributes'
	'wxWindow.GetClientSize'
	'wxWindow.GetCursor'
	'wxWindow.GetDefaultAttributes'
	'wxWindow.GetHelpTextAtPoint'
	'wxWindow.GetPosition'
	'wxWindow.GetScreenPosition'
	'wxWindow.GetSize'
	'wxWindow.GetTextExtent'
	'wxWindow.GetVirtualSize'
	'wxWindow.IsExposed_1'
	'wxWindow.IsExposed_3'
	'wxWindow.OnActivate'
	'wxWindow.OnChar'
	'wxWindow.OnCharHook'
	'wxWindow.OnCommand'
	'wxWindow.OnClose'
	'wxWindow.OnKeyDown'
	'wxWindow.OnKeyUp'
	'wxWindow.OnInitDialog'
	'wxWindow.OnMenuHighlight'
	'wxWindow.OnMouseEvent'
	'wxWindow.OnMove'
	'wxWindow.OnPaint'
	'wxWindow.OnScroll'
	'wxWindow.OnSetFocus'
	'wxWindow.OnSize'
	'wxWindow.OnSysColourChanged'
	'wxWindow.OnInternalIdle'
	'wxWindow.ScreenToClient'
	'wxWindow.SetAccessible'
	'wxWindow.SetInitialBestSize'
	'wxWindow.SetPalette'
	'wxWindow.SetScrollPage'
	'wxWindow.SetScrollRange'
	'wxXmlResource.GetDomain'
	'wxXmlResource.SetDomain'
	'wxXmlResourceHandler.AddStyle'
	'wxXmlResourceHandler.AddWindowStyles'
	'wxXmlResourceHandler.CanHandle'
	'wxXmlResourceHandler.CreateChildren'
	'wxXmlResourceHandler.CreateChildrenPrivately'
	'wxXmlResourceHandler.CreateResFromNode'
	'wxXmlResourceHandler.CreateResource'
	'wxXmlResourceHandler.DoCreateResource'
	'wxXmlResourceHandler.GetBitmap'
	'wxXmlResourceHandler.GetBool'
	'wxXmlResourceHandler.GetColour'
	'wxXmlResourceHandler.GetCurFileSystem'
	'wxXmlResourceHandler.GetDimension'
	'wxXmlResourceHandler.GetFont'
	'wxXmlResourceHandler.GetID'
	'wxXmlResourceHandler.GetIcon'
	'wxXmlResourceHandler.GetLong'
	'wxXmlResourceHandler.GetName'
	'wxXmlResourceHandler.GetNodeContent'
	'wxXmlResourceHandler.GetParamNode'
	'wxXmlResourceHandler.GetParamValue'
	'wxXmlResourceHandler.GetPosition'
	'wxXmlResourceHandler.GetSize'
	'wxXmlResourceHandler.GetStyle'
	'wxXmlResourceHandler.GetText'
	'wxXmlResourceHandler.HasParam'
	'wxXmlResourceHandler.IsOfClass'
	'wxXmlResourceHandler.SetParentResource'
	'wxXmlResourceHandler.SetupWindow'
	'wxZipEntry.GetExtra'
	'wxZipEntry.SetExtra'
	'wxZipEntry.GetInternalName'
	'wxZipEntry.GetInternalName_1'
	'wxZipEntry.GetLocalExtra'
	'wxZipEntry.SetLocalExtra'
]

classNamesTopLevelWindow = [
	'wxDialog'
	'wxColourDialog'
	'wxDirDialog'
	'wxFileDialog'
	'wxFindReplaceDialog'
	'wxFontDialog'
	'wxMessageDialog'
	'wxMultiChoiceDialog'
	'wxProgressDialog'
	'wxPropertySheetDialog'
	'wxRichTextFormattingDialog'
	'wxRichTextStyleOrganiserDialog'
	'wxSingleChoiceDialog'
	'wxSymbolPickerDialog'
	'wxTextEntryDialog'
	'wxPasswordEntryDialog'
	'wxWizard'
	'wxFrame'
	'wxDocChildFrame'
	'wxDocParentFrame'
	'wxMDIChildFrame'
	'wxDocMDIChildFrame'
	'wxMDIParentFrame'
	'wxDocMDIParentFrame'
	'wxMiniFrame'
	'wxPreviewFrame'
	'wxSplashScreen'
]

classNameDict = %{
	'wxGridellStringRenderer'	=> 'wxGridCellStringRenderer'
}

classNameSuperDict = %{
	'wxGridEditorCreatedEvent'	=> 'wxEvent'
	'wxBitmapComboBox'			=> 'wxOwnerDrawnComboBox'
	'wxRadioBox'				=> 'wxControl'
	'wxSearchCtrl'				=> 'wxWindow'
	'wxActiveXContainer'		=> 'wxWindow'
	'wxPageSetupDialog'			=> 'wxObject'
	'wxPrintDialog'				=> 'wxObject'
	'wxHtmlHelpDialog'			=> 'wxWindow'
	'wxCursor'					=> 'wxGDIObject'
	'wxIcon'					=> 'wxGDIObject'
	'wxPlatformInfo'			=> ''
	'wxSystemSettings'			=> ''
}

classNamesExclude = [
	'wxArchiveIterator'
	'wxArray'
	'wxArrayString'
	'wxPathList'
	'wxBrushList'
	'wxFontList'
	'wxDebugContext'
	'wxDebugStreamBuf'
	'wxDllLoader'
	'wxHashMap'
	'wxHashSet'
	'wxLogStream'
	'wxMBConvFile'
	'wxAccessible'
	'wxPostScriptDC'
	'wxGLCanvas'
	'wxGLContext'
	'wxGraphicsObject'
	'wxGraphicsRenderer'
	'wxNotebookSizer'
	'wxScopedArray'
	'wxScopedPtr'
	'wxScopedTiedPtr'
	'wxStreamToTextRedirector'
	'wxLogNull'
	'wxRecursionGuardFlag'
	'wxDb',
	'wxDbColDataPtr',
	'wxDbColDef',
	'wxDbColFor',
	'wxDbColInf',
	'wxDbConnectInf',
	'wxDbGridColInfo',
	'wxDbGridTableBase',
	'wxDbIdxDef',
	'wxDbInf',
	'wxDbTable',
	'wxDbTableInf',
]

classNamesAutomaticGen = [
	'wxNativeEncodingInfo'
	'wxFileTypeInfo'
	'wxArchiveNotifier'
	'wxArtClient'
	'wxAppConsole'
//	'wxCalendarDateAttr'
//	'wxDataViewListModel'
	'wxGridCellCoords'
//	'wxIconBundle'
	'wxGridCellAttrProvider'
	'wxPageSetupData'
	'wxToolBarToolBase'
	'wxHtmlWindowInterface'
	'wxHtmlTagsCache'
	'wxHtmlEntitiesParser'
	'wxRichTextObject'
	'wxRichTextImageBlock'
	'wxRichTextRenderer'
	'wxRichTextAction'
]

main() = {
	fileNamesHeader = []
	fileNameTex = 'classes.tex'
	fileNamesTex = ExtractIndex(fileNameTex)
	fileNamesTex = fileNamesTex.head(20)
	//fileNamesTex = ['gridevt.tex']
	classLinks = []
	classNames = []
	for (fileNameTex in fileNamesTex) {|i|
		classInfos = ExtractClassInfo(fileNameTex, fileNamesHeader)
		for (classInfo in classInfos) {
			classInfo.GenerateHeaderFile()
			classInfo.GenerateProgramFile()
			classLinks.add(ClassLink(classInfo.className, classInfo.classNameSuper))
			classNames.add(classInfo.className)
			sys.stderr.printf('%3d/%3d %-24s %-24s %s\n', i + 1, fileNamesTex.len(),
				fileNameTex, classInfo.className, classInfo.classNameSuper)
		}
	}
	scope {
		classInfos = ClassInfo(classNamesAutomaticGen.filter(
						!(classNamesAutomaticGen in classNames)), '', '', [])
		for (classInfo in classInfos) {
			classInfo.GenerateHeaderFile()
			classInfo.GenerateProgramFile()
			classLinks.add(ClassLink(classInfo.className, classInfo.classNameSuper))
			sys.stderr.printf('Automatic generation: %-24s %s\n',
							classInfo.className, classInfo.classNameSuper)
		}
	}
	classLinksTop = []
	for (classLink in classLinks) {
		if (classLink.classNameSuper.isempty()) {
			classLinksTop.add(classLink)
		} elsif (idx = classLinks:*className.find(classLink.classNameSuper)) {
			classLinks[idx].classLinksSub.add(classLink)
		} elsif (idx = classLinksTop:*className.find(classLink.classNameSuper)) {
			classLinksTop[idx].classLinksSub.add(classLink)
		} else {
			classLinkSuper = ClassLink(classLink.classNameSuper, '', true, [classLink])
			classLinksTop.add(classLinkSuper)
			classInfo = ClassInfo(classLink.classNameSuper, '', '', [])
			classInfo.GenerateHeaderFile()
			classInfo.GenerateProgramFile()
			sys.stderr.printf('Automatic generation of missing super class: %s\n',
												classLink.classNameSuper)
		}
	}
	open('_classlinks.txt', 'w') {|f|
		classLinksTop::Print(f)
	}
	classLinksFlat = []
	classLinksTop::Flatten(classLinksFlat)
	open('_stdafx.h', 'w') {|f|
		f.println('#ifndef __STDAFX_H__')
		f.println('#define __STDAFX_H__')
		f.println('#include <gura.h>')
		f.println('#include <wx/wx.h>')
		f.println('#include <wx/aui/aui.h>') // avoid error when including wx/aui/dockart.h
		f.printf('#include <%s>\n', fileNamesHeader)
		f.println()
		f.printf('#include "Module_wx.h"\n')
		includeDirectives = format('#include "%s"',
						ClassNameToHeaderFileName(classLinksFlat:*className))
		nPaddings = int((includeDirectives:*len().max() + 4) / 4) * 4
		for (includeDirective in includeDirectives, classLink in classLinksFlat) {
			if (classLink.classNameSuper == '') {
				f.printf('%s\n', includeDirective)
			} else {
				f.printf('%s%s// derived from %s\n', includeDirective,
					'\t' * ((nPaddings - includeDirective.len() + 3) / 4),
					classLink.classNameSuper)
			}
		}
		f.println()
		f.println('#endif')
	}
	open('_build.gura', 'w') {|f|
		f.printf("\t'%s'\n", ClassNameToSourceFileName(classLinksFlat:*className))
	}
	open('_Module_wx.cpp', 'w') {|f|
		f.println('\t// Realize classes');
		funcCalls = format('RealizeDervClass(%s,'
						ClassNameToDispClassName(classLinksFlat:*className))
		nPaddings = int((funcCalls:*len().max() + 4) / 4) * 4
		for (funcCall in funcCalls, classLink in classLinksFlat) {
			if (classLink.classNameSuper == '') {
				f.printf('\tRealizeBaseClass(%s);\n',
						ClassNameToDispClassName(classLink.className))
			} else {
				padding = '\t' * ((nPaddings - funcCall.len() + 3) / 4)
				f.printf('\t%s%s%s);\n', funcCall, padding,
						ClassNameToDispClassName(classLink.classNameSuper))
			}
		}
		f.println('\t// Prepare classes');
		f.printf('\tPrepareClass(%s);\n',
					ClassNameToGuraClassName(classLinksFlat:*className))
		f.println('\t// Initialize classes');
		f.printf('\tInitializeClass(%s);\n',
					ClassNameToGuraClassName(classLinksFlat:*className))
	}
}

main2() = {
	fileNameTex = 'function.tex'
	classInfo = ExtractFunction(fileNameTex)
	classInfo.GenerateProgramFile()
}

textSeparator = '//' + '-' * 76

//-----------------------------------------------------------------------------
templateHeaderTop = '''\
${textSeparator}
// ${className}
// ${cond(fileNameTex.isempty(), \
	'(automatically generated)', 'extracted from ' + fileNameTex)}
${textSeparator}
#ifndef ${macroIncludeOnce}
#define ${macroIncludeOnce}

Gura_BeginModule(wx)
'''

//-----------------------------------------------------------------------------
templateHeaderBtm = '''\
}}

#endif
'''

//-----------------------------------------------------------------------------
templateProgramTop = '''\
${textSeparator}
// ${className}
// ${cond(fileNameTex.isempty(), '(automatically generated)', 'extracted from ' + fileNameTex)}
${textSeparator}
#include "stdafx.h"

Gura_BeginModule(wx)

${('Gura_DeclarePrivUserSymbol(' + symbolsToRealize + ');\\n').join()}\
${cond(symbolsToRealize.isempty(), '', '\\n')}\
${textSeparator}
// Class derivation
${textSeparator}
class ${guraClassName}: public ${className}, public GuraObjectObserver {
private:
	Gura::Signal _sig;
	Object_${guraClassName} *_pObj;
public:
${('\\t' + methodOverrideDecls + '\\n').join()}\
	~${guraClassName}();
	inline void AssocWithGura(Gura::Signal &sig, Object_${guraClassName} *pObj) {
		_sig = sig, _pObj = pObj;
	}
	// virtual function of GuraObjectObserver
	virtual void GuraObjectDeleted();
};

${guraClassName}::~${guraClassName}()
{
	if (_pObj != NULL) _pObj->InvalidateEntity();
}

void ${guraClassName}::GuraObjectDeleted()
{
	_pObj = NULL;
}
'''

//-----------------------------------------------------------------------------
templateProgramBtm = '''\
}}
'''

//-----------------------------------------------------------------------------
templateClassDeclaration = '''\
${textSeparator}
// Class declaration for ${className}
${textSeparator}
Gura_DeclarePrivUserClass(${guraClassName});
'''

//-----------------------------------------------------------------------------
templateObjectDeclarationBase = '''\
${textSeparator}
// Object declaration for ${className}
${textSeparator}
class Object_${guraClassName} : public Object {
protected:
	${className} *_pEntity;
	GuraObjectObserver *_pObserver;
	bool _ownerFlag;
public:
	Gura_DeclareObjectAccessor(${guraClassName})
public:
	inline Object_${guraClassName}(${className} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object(Gura_UserClass(${guraClassName})),
				_pEntity(pEntity), _pObserver(pObserver), _ownerFlag(ownerFlag) {}
	inline Object_${guraClassName}(Class *pClass, ${className} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object(pClass), _pEntity(pEntity), _pObserver(pObserver), _ownerFlag(ownerFlag) {}
	virtual ~Object_${guraClassName}();
	virtual Object *Clone() const;
	virtual String ToString(Signal sig, bool exprFlag);
	inline void SetEntity(${className} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) {
		if (_ownerFlag) delete _pEntity;
		_pEntity = pEntity;
		_pObserver = pObserver;
		_ownerFlag = ownerFlag;
	}
	inline void InvalidateEntity() { _pEntity = NULL, _pObserver = NULL, _ownerFlag = false; }
	inline ${className} *GetEntity() { return _pEntity; }
	inline ${className} *ReleaseEntity() {
		${className} *pEntity = GetEntity();
		InvalidateEntity();
		return pEntity;
	}
	inline void NotifyGuraObjectDeleted() {
		if (_pObserver != NULL) _pObserver->GuraObjectDeleted();
	}
	inline bool IsInvalid(Signal sig) const {
		if (_pEntity != NULL) return false;
		SetError_InvalidWxObject(sig, "${className}");
		return true;
	}
public:
	static void OnModuleEntry(Environment &env, Signal sig);
};
'''

//-----------------------------------------------------------------------------
templateObjectDeclarationDerived = '''\
${textSeparator}
// Object declaration for ${className}
${textSeparator}
class Object_${guraClassName} : public Object_${guraClassNameSuper} {
public:
	Gura_DeclareObjectAccessor(${guraClassName})
public:
	inline Object_${guraClassName}(${className} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object_${guraClassNameSuper}(Gura_UserClass(${guraClassName}), pEntity, pObserver, ownerFlag) {}
	inline Object_${guraClassName}(Class *pClass, ${className} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object_${guraClassNameSuper}(pClass, pEntity, pObserver, ownerFlag) {}
	virtual ~Object_${guraClassName}();
	virtual Object *Clone() const;
	virtual String ToString(Signal sig, bool exprFlag);
	inline ${className} *GetEntity() {
		return ${castForEntity}<${className} *>(_pEntity);
	}
	inline ${className} *ReleaseEntity() {
		${className} *pEntity = GetEntity();
		InvalidateEntity();
		return pEntity;
	}
	inline bool IsInvalid(Signal sig) const {
		if (_pEntity != NULL) return false;
		SetError_InvalidWxObject(sig, "${className}");
		return true;
	}
public:
	static void OnModuleEntry(Environment &env, Signal sig);
};
'''

//-----------------------------------------------------------------------------
templateInterfacesTop = '''\
${textSeparator}
// Gura interfaces for ${className}
${textSeparator}
'''

ImplementMethodAssignment(guraClassName:string, guraMethodName:string):map = {
	if (guraMethodName.endswith('_')) {
		format('Gura_AssignMethodEx(%s, %s, "%s");',
						guraClassName, guraMethodName, guraMethodName.chop())
	} else {
		format('Gura_AssignMethod(%s, %s);', guraClassName, guraMethodName)
	}
}

//-----------------------------------------------------------------------------
templateClassImplementation = '''\
${textSeparator}
// Class implementation for ${className}
${textSeparator}
Gura_ImplementUserInheritableClass(${guraClassName})
{
${('\\t' + ImplementMethodAssignment(guraClassName, guraMethodNames) + '\\n').join()}\
}

Gura_ImplementDescendantCreator(${guraClassName})
{
	return new Object_${guraClassName}((pClass == NULL)? this : pClass, NULL, NULL, OwnerFalse);
}
'''

//-----------------------------------------------------------------------------
templateObjectImplementation = '''\
${textSeparator}
// Object implementation for ${className}
${textSeparator}
Object_${guraClassName}::~Object_${guraClassName}()
{
${if (baseClassFlag) {R"""
	if (_pEntity != NULL) NotifyGuraObjectDeleted();
	if (_ownerFlag) delete _pEntity;
	_pEntity = NULL;
"""} else {''}}\
}

Object *Object_${guraClassName}::Clone() const
{
	return NULL;
}

String Object_${guraClassName}::ToString(Signal sig, bool exprFlag)
{
	String rtn("<wx.${className.sub('^wx', '')}:");
	if (GetEntity() == NULL) {
		rtn += "invalid>";
	} else {
		char buff[64];
		::sprintf(buff, "%p>", GetEntity());
		rtn += buff;
	}
	return rtn;
}

void Object_${guraClassName}::OnModuleEntry(Environment &env, Signal sig)
{
${format('\\tGura_RealizeUserSymbol(%s);\\n', symbolsToRealize).join()}\
${format('\\tGura_AssignFunction(%s);\\n', guraFuncNames).join()}\
}
'''

//-----------------------------------------------------------------------------
templateExcludedFuncPost = '''\
#endif
	SetError_NotImplemented(sig);
	return Value::Null;
'''

//-----------------------------------------------------------------------------
templateConstructor = '''\
Gura_DeclareFunction(${guraFuncName})
{
	SetMode(RSLTMODE_Normal, FLAG_${cond(params.isempty(), 'None', 'Map')});
${cond(excludeFlag, '#if 0\\n', '')}\
	SetClassToConstruct(Gura_UserClass(${guraClassName}));
${params:*declArg.join()}\
	DeclareBlock(OCCUR_ZeroOrOnce);
${cond(excludeFlag, '#endif\\n', '')}\
}

Gura_ImplementFunction(${guraFuncName})
{
${cond(excludeFlag, '#if 0\\n', '')}\
${params:*varDecl.join()}\
	${guraClassName} *pEntity = new ${guraClassName}(${params:*varInCall.join(', ')});
	Object_${guraClassName} *pObj = Object_${guraClassName}::GetSelfObj(args);
	if (pObj == NULL) {
		pObj = new Object_${guraClassName}(pEntity, pEntity, OwnerFalse);
		pEntity->AssocWithGura(sig, pObj);
		return ReturnValue(env, sig, args, Value(pObj));
	}
	pObj->SetEntity(pEntity, pEntity, OwnerFalse);
	pEntity->AssocWithGura(sig, pObj);
	return ReturnValue(env, sig, args, args.GetSelf());
${cond(excludeFlag, templateExcludedFuncPost, '')}\
}
'''

Grouping = struct(elementOwner:list, groupings => nil) {
	IsControlWord(word:string) = false
	IsText() = false
	ToTex() = '{' + this.elementOwner:*ToTex().join() + '}'
	ToString() = this.elementOwner:*ToString().join()
}

ControlWord = struct(word:string, groupings => []) {
	IsControlWord(word:string) = (word == this.word)
	IsText() = false
	ToTex() = '\\' + this.word + this.groupings:*ToTex().join()
	ToString() = this.groupings:*ToString().join()
}

ControlSymbol = struct(symbol:string, groupings => []) {
	IsControlWord(word:string) = false
	IsText() = false
	ToTex() = '\\' + this.symbol + this.groupings:*ToTex().join()
	ToString() = this.groupings:*ToString().join()
}

Text = struct(text:string, groupings => nil) {
	IsControlWord(word:string) = false
	IsText() = true
	ToTex() = this.text
	ToString() = this.text
}

tokenizer = Tokenizer()
tokenizer.SetRule {
	r'\\(_|&)' => {|context|
		context.textBuff += context.match[1]
	}
	r'\\pipe' => {|context|
		context.textBuff += '|'
	}
	r'\\(\w+)' => {|context|
		if (!context.textBuff.isempty()) {
			elementOwnerLast = context.elementOwners.last()
			elementOwnerLast.add(Text(context.textBuff))
			context.textBuff = ''
		}
		elementOwnerLast = context.elementOwners.last()
		elementOwnerLast.add(ControlWord(context.match[1]))
	}
	r'\\(.)' => {|context|
		elementOwnerLast = context.elementOwners.last()
		elementOwnerLast.add(ControlSymbol(context.match[1]))
	}
	r'\\' => {|context|
	}
	r'[^\\{}]+' => {|context|
		context.textBuff += context.match[0]
	}
	r'{' => {|context|
		elementOwnerLast = context.elementOwners.last()
		elementOwnerNew = []
		if (!elementOwnerLast.isempty() && !isnil(elementOwnerLast.last().groupings)) {
			elementOwnerLast.last().groupings.add(Grouping(elementOwnerNew))
		} else {
			elementOwnerLast.add(Grouping(elementOwnerNew))
		}
		context.elementOwners.add(elementOwnerNew)
	}
	r'}' => {|context|
		if (!context.textBuff.isempty()) {
			elementOwnerLast = context.elementOwners.last()
			elementOwnerLast.add(Text(context.textBuff))
			context.textBuff = ''
		}
		context.elementOwners.erase(-1)
	}
}
tokenizer.Initialize() = {
	this.elementOwners = [[]]
	this.textBuff = ''
}

ReturnType = class {
	__init__(grouping:Grouping) = {
		decl = grouping.ToString().strip()
		this.declRaw = decl
		if (m = decl.match(r'virtual\s+static\s+(\w.*)')) {
			// This expression is actually illegal.
			this.funcType = `virtual
			decl = m[1]
		} elsif (m = decl.match(r'virtual\s+(\w.*)')) {
			this.funcType = `virtual
			decl = m[1]
		} elsif (m = decl.match(r'static\s+(\w.*)')) {
			this.funcType = `static
			decl = m[1]
		} else {
			this.funcType = nil
		}
		if (m = decl.match(r'const\s+(\w.*)')) {
			this.varAccess = `const
			decl = m[1]
		} else {
			this.varAccess = nil
		}
		if (m = decl.match(r'([\s\w]+)([^\w]+)')) {
			this.typeName = m[1].strip()
			this.typeRef = m[2]
		} else {
			this.typeName = decl
			this.typeRef = nil
		}
	}
	GenerateCode(f:stream, funcName:string, funcCall:string) = {
		varAccessStr = cond(this.varAccess == `const, 'const ', '')
		if (this.typeName in ['void', '']) {
			f.printf('\t%s;\n', funcCall)
			f.printf('\treturn Value::Null;\n')
		} elsif (m = this.typeName == 'wxString') {
			f.printf('\t%s rtn = %s;\n', this.typeName, funcCall)
			f.printf('\treturn ReturnValue(env, sig, args, Value(env, static_cast<const char *>(rtn.ToUTF8())));\n')
		} elsif (m = this.typeName == 'wxArrayString') {
			f.printf('\t%s rtn = %s;\n', this.typeName, funcCall)
			f.printf('\treturn ReturnValue(env, sig, args, ArrayStringToValue(env, rtn));\n')
		} elsif (m = this.typeName == 'wxArrayInt') {
			f.printf('\t%s rtn = %s;\n', this.typeName, funcCall)
			f.printf('\treturn ReturnValue(env, sig, args, ArrayIntToValue(env, rtn));\n')
		} elsif (accessor = accessorMap.get(this.typeName)) {
			f.printf('\t%s rtn = %s;\n', accessor.typeNameActual, funcCall)
			f.printf('\treturn ReturnValue(env, sig, args, Value(rtn));\n')
		} elsif (m = this.typeName.match(r'wx(\w+)')) {
			guraClassName = ClassNameToGuraClassName(this.typeName)
			if (!this.typeRef) {
				f.printf('\t%s rtn = %s;\n', this.typeName, funcCall)
				f.printf('\treturn ReturnValue(env, sig, args, Value(new Object_%s(new %s(rtn), NULL, OwnerTrue)));\n',
										guraClassName, this.typeName)
			} elsif (this.typeRef == '&') {
				f.printf('\t%s%s &rtn = %s;\n', varAccessStr, this.typeName, funcCall)
				f.printf('\treturn ReturnValue(env, sig, args, Value(new Object_%s(new %s(rtn), NULL, OwnerTrue)));\n',
										guraClassName, this.typeName)
			} elsif (this.typeRef == '*') {
				f.printf('\t%s *rtn = (%s *)%s;\n',
											this.typeName, this.typeName, funcCall)
				f.printf('\treturn ReturnValue(env, sig, args, Value(new Object_%s(rtn, NULL, OwnerFalse)));\n',
										guraClassName)
			} else {
				sys.stderr.printf('can\'t handle "%s" in %s\n', this.typeName, funcName)
			}
		} else {
			sys.stderr.printf('can\'t handle "%s" in %s\n', this.typeName, funcName)
		}
	}
	ToString() = this.funcType + ' : ' + this.varAccess + ' : ' + \
									this.typeName + ' : ' + this.typeRef
}

Accessor = struct(template, typeNameActual, typeGura, vtype)
accessorMap = %{
	'bool' => Accessor(
		'args.GetBoolean(${idx})', 'bool', 'boolean', 'VTYPE_boolean')
	'char' => Accessor(
		'args.GetChar(${idx})', 'char', 'number', 'VTYPE_number')
	'short' => Accessor(
		'args.GetShort(${idx})', 'short', 'number', 'VTYPE_number')
	'int' => Accessor(
		'args.GetInt(${idx})', 'int', 'number', 'VTYPE_number')
	'unsigned' => Accessor(
		'args.GetInt(${idx})', 'unsigned', 'number', 'VTYPE_number')
	'float' => Accessor(
		'args.GetFloat(${idx})', 'float', 'number', 'VTYPE_number')
	'double' => Accessor(
		'args.GetDouble(${idx})', 'double', 'number', 'VTYPE_number')
	'size_t' => Accessor(
		'args.GetSizeT(${idx})', 'size_t', 'number', 'VTYPE_number')
	'long' => Accessor(
		'args.GetLong(${idx})', 'long', 'number', 'VTYPE_number')
	'unsigned char' => Accessor(
		'args.GetUChar(${idx})', 'unsigned char', 'number', 'VTYPE_number')
	'unsigned short' => Accessor(
		'args.GetUShort(${idx})', 'unsigned short', 'number', 'VTYPE_number')
	'unsigned int' => Accessor(
		'args.GetUInt(${idx})', 'unsigned int', 'number', 'VTYPE_number')
	'unsigned long' => Accessor(
		'args.GetULong(${idx})', 'unsigned long', 'number', 'VTYPE_number')
	'wxString' => Accessor(
		'wxString::FromUTF8(args.GetString(${idx}))', 'wxString', 'string', 'VTYPE_string')
	'wxCondError' => Accessor(
		'static_cast<wxCondError>(args.GetInt(${idx}))', 'wxCondError', 'number', 'VTYPE_number')
	'wxChar' => Accessor(
		'static_cast<wxChar>(args.GetInt(${idx}))', 'wxChar', 'number', 'VTYPE_number')
	'wxDash' => Accessor(
		'static_cast<wxDash>(args.GetChar(${idx}))', 'wxDash', 'number', 'VTYPE_number')
	'wxInt8' => Accessor(
		'static_cast<wxInt8>(args.GetUChar(${idx}))', 'wxInt8', 'number', 'VTYPE_number')
	'wxInt16' => Accessor(
		'static_cast<wxInt16>(args.GetUShort(${idx}))', 'wxInt16', 'number', 'VTYPE_number')
	'wxInt32' => Accessor(
		'static_cast<wxInt32>(args.GetULong(${idx}))', 'wxInt32', 'number', 'VTYPE_number')
	'wxUint8' => Accessor(
		'static_cast<wxUint8>(args.GetUChar(${idx}))', 'wxUint8', 'number', 'VTYPE_number')
	'wxUint16' => Accessor(
		'static_cast<wxUint16>(args.GetUShort(${idx}))', 'wxUint16', 'number', 'VTYPE_number')
	'wxUint32' => Accessor(
		'static_cast<wxUint32>(args.GetULong(${idx}))', 'wxUint32', 'number', 'VTYPE_number')
	'wxCoord' => Accessor(
		'static_cast<wxCoord>(args.GetInt(${idx}))', 'wxCoord', 'number', 'VTYPE_number')
	'wxTextCoord' => Accessor(
		'static_cast<wxTextCoord>(args.GetInt(${idx}))', 'wxTextCoord', 'number', 'VTYPE_number')
	'wxWindowID' => Accessor(
		'static_cast<wxWindowID>(args.GetInt(${idx}))', 'wxWindowID', 'number', 'VTYPE_number')
	'wxPortId' => Accessor(
		'static_cast<wxPortId>(args.GetInt(${idx}))', 'wxPortId', 'number', 'VTYPE_number')
	'wxArtID' => Accessor(
		'static_cast<wxArtID>(args.GetInt(${idx}))', 'wxArtID', 'number', 'VTYPE_number')
	'wxCmdLineEntryType' => Accessor(
		'static_cast<wxCmdLineEntryType>(args.GetInt(${idx}))', 'wxCmdLineEntryType', 'number', 'VTYPE_number')
	'wxCmdLineParamType' => Accessor(
		'static_cast<wxCmdLineParamType>(args.GetInt(${idx}))', 'wxCmdLineParamType', 'number', 'VTYPE_number')
	'wxIPCFormat' => Accessor(
		'static_cast<wxIPCFormat>(args.GetInt(${idx}))', 'wxIPCFormat', 'number', 'VTYPE_number')
	'wxDirTraverseResult' => Accessor(
		'static_cast<wxDirTraverseResult>(args.GetInt(${idx}))', 'wxDirTraverseResult', 'number', 'VTYPE_number')
	'wxOrientation' => Accessor(
		'static_cast<wxOrientation>(args.GetInt(${idx}))', 'wxOrientation', 'number', 'VTYPE_number')
	'wxDirection' => Accessor(
		'static_cast<wxDirection>(args.GetInt(${idx}))', 'wxDirection', 'number', 'VTYPE_number')
	'wxLayoutDirection' => Accessor(
		'static_cast<wxLayoutDirection>(args.GetInt(${idx}))', 'wxLayoutDirection', 'number', 'VTYPE_number')
	'wxFontFamily' => Accessor(
		'static_cast<wxFontFamily>(args.GetInt(${idx}))', 'wxFontFamily', 'number', 'VTYPE_number')
	'wxFontWeight' => Accessor(
		'static_cast<wxFontWeight>(args.GetInt(${idx}))', 'wxFontWeight', 'number', 'VTYPE_number')
	'wxFontEncoding' => Accessor(
		'static_cast<wxFontEncoding>(args.GetInt(${idx}))', 'wxFontEncoding', 'number', 'VTYPE_number')
	'wxThreadKind' => Accessor(
		'static_cast<wxThreadKind>(args.GetInt(${idx}))', 'wxThreadKind', 'number', 'VTYPE_number')
	'wxThreadError' => Accessor(
		'static_cast<wxThreadError>(args.GetInt(${idx}))', 'wxThreadError', 'number', 'VTYPE_number')
	'wxStreamProtocolType' => Accessor(
		'static_cast<wxStreamProtocolType>(args.GetInt(${idx}))', 'wxStreamProtocolType', 'number', 'VTYPE_number')
	'wxPathFormat' => Accessor(
		'static_cast<wxPathFormat>(args.GetInt(${idx}))', 'wxPathFormat', 'number', 'VTYPE_number')
	'wxFileOffset' => Accessor(
		'static_cast<wxFileOffset>(args.GetInt64(${idx}))', 'wxFileOffset', 'number', 'VTYPE_number')
	'wxHelpSearchMode' => Accessor(
		'static_cast<wxHelpSearchMode>(args.GetInt(${idx}))', 'wxHelpSearchMode', 'number', 'VTYPE_number')
	'wxEventType' => Accessor(
		'static_cast<wxEventType>(args.GetInt(${idx}))', 'wxEventType', 'number', 'VTYPE_number')
	'wxMutexType' => Accessor(
		'static_cast<wxMutexType>(args.GetInt(${idx}))', 'wxMutexType', 'number', 'VTYPE_number')
	'wxMutexError' => Accessor(
		'static_cast<wxMutexError>(args.GetInt(${idx}))', 'wxMutexError', 'number', 'VTYPE_number')
	'wxSashEdgePosition' => Accessor(
		'static_cast<wxSashEdgePosition>(args.GetInt(${idx}))', 'wxSashEdgePosition', 'number', 'VTYPE_number')
	'wxUpdateUIMode' => Accessor(
		'static_cast<wxUpdateUIMode>(args.GetInt(${idx}))', 'wxUpdateUIMode', 'number', 'VTYPE_number')
	'wxIdleMode' => Accessor(
		'static_cast<wxIdleMode>(args.GetInt(${idx}))', 'wxIdleMode', 'number', 'VTYPE_number')
	'wxDataViewCellMode' => Accessor(
		'static_cast<wxDataViewCellMode>(args.GetInt(${idx}))', 'wxDataViewCellMode', 'number', 'VTYPE_number')
	'wxDataViewColumnFlags' => Accessor(
		'static_cast<wxDataViewColumnFlags>(args.GetInt(${idx}))', 'wxDataViewColumnFlags', 'number', 'VTYPE_number')
	'wxAlignment' => Accessor(
		'static_cast<wxAlignment>(args.GetInt(${idx}))', 'wxAlignment', 'number', 'VTYPE_number')
	'wxLayoutAlignment' => Accessor(
		'static_cast<wxLayoutAlignment>(args.GetInt(${idx}))', 'wxLayoutAlignment', 'number', 'VTYPE_number')
	'wxLayoutOrientation' => Accessor(
		'static_cast<wxLayoutOrientation>(args.GetInt(${idx}))', 'wxLayoutOrientation', 'number', 'VTYPE_number')
	'wxLogLevel' => Accessor(
		'static_cast<wxLogLevel>(args.GetInt(${idx}))', 'wxLogLevel', 'number', 'VTYPE_number')
	'wxItemKind' => Accessor(
		'static_cast<wxItemKind>(args.GetInt(${idx}))', 'wxItemKind', 'number', 'VTYPE_number')
	'wxSignal' => Accessor(
		'static_cast<wxSignal>(args.GetInt(${idx}))', 'wxSignal', 'number', 'VTYPE_number')
	'wxKillError' => Accessor(
		'static_cast<wxKillError>(args.GetInt(${idx}))', 'wxKillError', 'number', 'VTYPE_number')
	'wxAnimationType' => Accessor(
		'static_cast<wxAnimationType>(args.GetInt(${idx}))', 'wxAnimationType', 'number', 'VTYPE_number')
	'wxBitmapType' => Accessor(
		'static_cast<wxBitmapType>(args.GetInt(${idx}))', 'wxBitmapType', 'number', 'VTYPE_number')
	'wxCheckBoxState' => Accessor(
		'static_cast<wxCheckBoxState>(args.GetInt(${idx}))', 'wxCheckBoxState', 'number', 'VTYPE_number')
	'wxSeekMode' => Accessor(
		'static_cast<wxSeekMode>(args.GetInt(${idx}))', 'wxSeekMode', 'number', 'VTYPE_number')
	'wxTreeItemIcon' => Accessor(
		'static_cast<wxTreeItemIcon>(args.GetInt(${idx}))', 'wxTreeItemIcon', 'number', 'VTYPE_number')
	'wxTextAttrAlignment' => Accessor(
		'static_cast<wxTextAttrAlignment>(args.GetInt(${idx}))', 'wxTextAttrAlignment', 'number', 'VTYPE_number')
	'wxWindowVariant' => Accessor(
		'static_cast<wxWindowVariant>(args.GetInt(${idx}))', 'wxWindowVariant', 'number', 'VTYPE_number')
	'wxBackgroundStyle' => Accessor(
		'static_cast<wxBackgroundStyle>(args.GetInt(${idx}))', 'wxBackgroundStyle', 'number', 'VTYPE_number')
	'wxMediaCtrlPlayerControls' => Accessor(
		'static_cast<wxMediaCtrlPlayerControls>(args.GetInt(${idx}))', 'wxMediaCtrlPlayerControls', 'number', 'VTYPE_number')
	'wxMediaCtrlState' => Accessor(
		'static_cast<wxMediaCtrlState>(args.GetInt(${idx}))', 'wxMediaCtrlState', 'number', 'VTYPE_number')
	'wxHtmlURLType' => Accessor(
		'static_cast<wxHtmlURLType>(args.GetInt(${idx}))', 'wxHtmlURLType', 'number', 'VTYPE_number')
	'wxEdge' => Accessor(
		'static_cast<wxEdge>(args.GetInt(${idx}))', 'wxEdge', 'number', 'VTYPE_number')
	'wxRelationship' => Accessor(
		'static_cast<wxRelationship>(args.GetInt(${idx}))', 'wxRelationship', 'number', 'VTYPE_number')
	'wxListColumnFormat' => Accessor(
		'static_cast<wxListColumnFormat>(args.GetInt(${idx}))', 'wxListColumnFormat', 'number', 'VTYPE_number')
	'wxPaperSize' => Accessor(
		'static_cast<wxPaperSize>(args.GetInt(${idx}))', 'wxPaperSize', 'number', 'VTYPE_number')
	'wxPrintBin' => Accessor(
		'static_cast<wxPrintBin>(args.GetInt(${idx}))', 'wxPrintBin', 'number', 'VTYPE_number')
	'wxPrintQuality' => Accessor(
		'static_cast<wxPrintQuality>(args.GetInt(${idx}))', 'wxPrintQuality', 'number', 'VTYPE_number')
	'wxPrinterError' => Accessor(
		'static_cast<wxPrinterError>(args.GetInt(${idx}))', 'wxPrinterError', 'number', 'VTYPE_number')
	'wxDuplexMode' => Accessor(
		'static_cast<wxDuplexMode>(args.GetInt(${idx}))', 'wxDuplexMode', 'number', 'VTYPE_number')
	'wxRichTextOddEvenPage' => Accessor(
		'static_cast<wxRichTextOddEvenPage>(args.GetInt(${idx}))', 'wxRichTextOddEvenPage', 'number', 'VTYPE_number')
	'wxRichTextPageLocation' => Accessor(
		'static_cast<wxRichTextPageLocation>(args.GetInt(${idx}))', 'wxRichTextPageLocation', 'number', 'VTYPE_number')
	'wxFlexSizerGrowMode' => Accessor(
		'static_cast<wxFlexSizerGrowMode>(args.GetInt(${idx}))', 'wxFlexSizerGrowMode', 'number', 'VTYPE_number')
	'wxSocketFlags' => Accessor(
		'static_cast<wxSocketFlags>(args.GetInt(${idx}))', 'wxSocketFlags', 'number', 'VTYPE_number')
	'wxSocketEventFlags' => Accessor(
		'static_cast<wxSocketEventFlags>(args.GetInt(${idx}))', 'wxSocketEventFlags', 'number', 'VTYPE_number')
	'wxProtocolError' => Accessor(
		'static_cast<wxProtocolError>(args.GetInt(${idx}))', 'wxProtocolError', 'number', 'VTYPE_number')
	'wxStringTokenizerMode' => Accessor(
		'static_cast<wxStringTokenizerMode>(args.GetInt(${idx}))', 'wxStringTokenizerMode', 'number', 'VTYPE_number')
	'wxURLError' => Accessor(
		'static_cast<wxURLError>(args.GetInt(${idx}))', 'wxURLError', 'number', 'VTYPE_number')
	'wxOperatingSystemId' => Accessor(
		'static_cast<wxOperatingSystemId>(args.GetInt(${idx}))', 'wxOperatingSystemId', 'number', 'VTYPE_number')
	'wxArchitecture' => Accessor(
		'static_cast<wxArchitecture>(args.GetInt(${idx}))', 'wxArchitecture', 'number', 'VTYPE_number')
	'wxEndianness' => Accessor(
		'static_cast<wxEndianness>(args.GetInt(${idx}))', 'wxEndianness', 'number', 'VTYPE_number')
	'wxSemaError' => Accessor(
		'static_cast<wxSemaError>(args.GetInt(${idx}))', 'wxSemaError', 'number', 'VTYPE_number')
	'wxSystemColour' => Accessor(
		'static_cast<wxSystemColour>(args.GetInt(${idx}))', 'wxSystemColour', 'number', 'VTYPE_number')
	'wxSystemFont' => Accessor(
		'static_cast<wxSystemFont>(args.GetInt(${idx}))', 'wxSystemFont', 'number', 'VTYPE_number')
	'wxSystemMetric' => Accessor(
		'static_cast<wxSystemMetric>(args.GetInt(${idx}))', 'wxSystemMetric', 'number', 'VTYPE_number')
	'wxSystemScreenType' => Accessor(
		'static_cast<wxSystemScreenType>(args.GetInt(${idx}))', 'wxSystemScreenType', 'number', 'VTYPE_number')
	'wxTarFormat' => Accessor(
		'static_cast<wxTarFormat>(args.GetInt(${idx}))', 'wxTarFormat', 'number', 'VTYPE_number')
	'wxEOL' => Accessor(
		'static_cast<wxEOL>(args.GetInt(${idx}))', 'wxEOL', 'number', 'VTYPE_number')
	'wxXmlNodeType' => Accessor(
		'static_cast<wxXmlNodeType>(args.GetInt(${idx}))', 'wxXmlNodeType', 'number', 'VTYPE_number')
	'wxSashDragStatus' => Accessor(
		'static_cast<wxSashDragStatus>(args.GetInt(${idx}))', 'wxSashDragStatus', 'number', 'VTYPE_number')
	'NativeFormat' => Accessor(
		'static_cast<wxDataFormat::NativeFormat>(args.GetInt(${idx}))', 'wxDataFormat::NativeFormat', 'number', 'VTYPE_number')
	'ExitCode' => Accessor(
		'static_cast<wxThread::ExitCode>(args.GetInt(${idx}))', 'wxThread::ExitCode', 'number', 'VTYPE_number')
	'BufMode' => Accessor(
		'static_cast<wxStreamBuffer::BufMode>(args.GetInt(${idx}))', 'wxStreamBuffer::BufMode', 'number', 'VTYPE_number')
	'AccessMode' => Accessor(
		'static_cast<wxRegKey::AccessMode>(args.GetInt(${idx}))', 'wxRegKey::AccessMode', 'number', 'VTYPE_number')
	'wxCalendarDateBorder' => Accessor(
		'static_cast<wxCalendarDateBorder>(args.GetInt(${idx}))', 'wxCalendarDateBorder', 'number', 'VTYPE_number')
	'WXTYPE' => Accessor(
		'static_cast<WXTYPE>(args.GetInt(${idx}))', 'WXTYPE', 'number', 'VTYPE_number')
	'WXWPARAM' => Accessor(
		'static_cast<WXWPARAM>(args.GetULong(${idx}))', 'WXWPARAM', 'number', 'VTYPE_number')
	'WXLPARAM' => Accessor(
		'static_cast<WXLPARAM>(args.GetULong(${idx}))', 'WXLPARAM', 'number', 'VTYPE_number')
	'off_t' => Accessor(
		'static_cast<off_t>(args.GetLong(${idx}))', 'off_t', 'number', 'VTYPE_number')
	'wchar_t' => Accessor(
		'static_cast<wchar_t>(args.GetUShort(${idx}))', 'wchar_t', 'number', 'VTYPE_number')

	'void' => Accessor(
		'args.GetInt(${idx})', 'int', 'number', 'VTYPE_number')
	'ostream' => Accessor(
		'args.GetStream(${idx})', 'Stream &', 'stream', 'VTYPE_stream')
}

Param = class {
	__init__(topLevelConstructorFlag:boolean,
					funcName:string, groupings[]:Grouping, idx:number):map = {
		decl = groupings[0].ToString().strip().replace('$', '')
		varNameRaw = groupings[1].ToString().replace('$', '')
		if (m = decl.match(r'const\s+(\w.*)')) {
			this.varAccess = `const
			decl = m[1]
		} elsif (decl == 'const') {
			this.varAccess = `const
			if (m = varNameRaw.match(r'(.+)\s+(\w+)$')) {
				decl = m[1]
				varNameRaw = m[2]
			}
		} else {
			this.varAccess = nil
		}
		if (m = decl.match(r'([\s\w]+)([^\w]+)')) {
			this.typeName = m[1].strip()
			this.typeRef = m[2]
		} else {
			this.typeName = decl
			this.typeRef = nil
		}
		fields = varNameRaw.split('=')::strip()
		if (fields.len() == 1) {
			[this.varName, this.varInit] = [fields[0], nil]
		} elsif (fields.len() == 2) {
			[this.varName, this.varInit] = fields
			if (m = this.varInit.match(r'^(``|")([^"]*)"$')) {
				this.varInit = 'wxT("' + m[2] + '")'
			}
		}
		this.declArg = ''
		this.varDecl = ''
		this.varInCall = ''
		this.varDeclC = cond(this.varAccess == `const, 'const ', '') + \
										decl + ' ' + this.varName
		this.varInCallC = this.varName
		if (this.typeName == 'wxChar' && this.typeRef == '*') {
			varNameEx = '_' + this.varName;
			if (this.varInit) {
				this.declArg = \
					'\tDeclareArg(env, "%s", VTYPE_string, OCCUR_ZeroOrOnce);\n' % \
							[this.varName]
				this.varDecl += '\twxString %s;\n' % [varNameEx]
				if (this.varInit.startswith('"')) {
					this.varDecl += '\tconst wxChar *%s = wxT(%s);\n' % \
							[this.varName, this.varInit]
				} else {
					this.varDecl += '\tconst wxChar *%s = %s;\n' % \
							[this.varName, this.varInit]
				}
				this.varDecl += '\tif (args.IsValid(%d)) {\n' % [idx]
				this.varDecl += '\t\t%s = wxString::FromUTF8(args.GetString(%d));\n' % \
							[varNameEx, idx]
				this.varDecl += '\t\t%s = %s;\n' % \
							[this.varName, varNameEx]
				this.varDecl += '\t}\n'
				this.varInCall = this.varName
			} else {
				this.declArg = \
					'\tDeclareArg(env, "%s", VTYPE_string, OCCUR_Once);\n' % \
							[this.varName]
				this.varDecl += '\twxString %s = wxString::FromUTF8(args.GetString(%d));\n' % \
							[this.varName, idx]
				this.varInCall = this.varName
			}
		} elsif (accessor = accessorMap.get(this.typeName)) {
			if (this.varInit) {
				this.declArg = \
					'\tDeclareArg(env, "%s", %s, OCCUR_ZeroOrOnce);\n' % \
							[this.varName, accessor.vtype]
				this.varDecl += '\t%s %s = %s;\n' % \
					[accessor.typeNameActual, this.varName, this.varInit]
				this.varDecl += '\tif (args.IsValid(%d)) %s = %s;\n' % \
					[idx, this.varName, accessor.template.embed()]
			} else {
				this.declArg = \
					'\tDeclareArg(env, "%s", %s, OCCUR_Once);\n' % \
							[this.varName, accessor.vtype]
				this.varDecl += '\t%s %s = %s;\n' % \
					[accessor.typeNameActual, this.varName, accessor.template.embed()]
			}
			this.varInCall = this.varName
		} elsif (this.typeName == 'wxArrayString') {
			if (this.varInit) {
				sys.stderr.println('wxArrayString is not expected to have initial value')
			} else {
				this.declArg = \
					'\tDeclareArg(env, "%s", VTYPE_string, OCCUR_Once, FLAG_List);\n' % \
							[this.varName]
				this.varDecl += '\tstd::auto_ptr<wxArrayString> %s(CreateArrayString(args.GetList(%d)));\n' % \
							[this.varName, idx]
			}
			this.varInCall = '*' + this.varName
		} elsif (this.typeName == 'wxArrayInt') {
			if (this.varInit) {
				sys.stderr.println('wxArrayInt is not expected to have initial value')
			} else {
				this.declArg = \
					'\tDeclareArg(env, "%s", VTYPE_number, OCCUR_Once, FLAG_List);\n' % \
							[this.varName]
				this.varDecl += '\tstd::auto_ptr<wxArrayInt> %s(CreateArrayInt(args.GetList(%d)));\n' % \
							[this.varName, idx]
			}
			this.varInCall = '*' + this.varName
		} elsif (m = this.typeName.match(r'wx(\w+)')) {
			guraClassName = ClassNameToGuraClassName(this.typeName)
			if (this.varInit) {
				this.declArg = \
					'\tDeclareArg(env, "%s", VTYPE_%s, OCCUR_ZeroOrOnce);\n' % \
							[this.varName, guraClassName]
				if (this.typeRef == '*') {
					this.varDecl += '\t%s *%s = (%s *)(%s);\n' % \
							[this.typeName, this.varName, this.typeName, this.varInit]
				} else {
					this.varDecl += '\t%s *%s = (%s *)(&%s);\n' % \
							[this.typeName, this.varName, this.typeName, this.varInit]
				}
				this.varDecl += \
					'\tif (args.IsValid(%s)) %s = Object_%s::GetObject(args, %d)->GetEntity();\n' % \
							[idx, this.varName, guraClassName, idx]
			} elsif (topLevelConstructorFlag && this.typeName == 'wxWindow' && idx == 0) {
				this.declArg = \
					'\tDeclareArg(env, "%s", VTYPE_%s, OCCUR_Once, FLAG_Nil);\n' % \
							[this.varName, guraClassName]
				this.varDecl += '\t%s *%s = args.IsValid(%d)?\n' % \
							[this.typeName, this.varName, idx]
				this.varDecl += '\t\t\tObject_%s::GetObject(args, %d)->GetEntity() : NULL;\n' % \
							[guraClassName, idx]
			} else {
				this.declArg = \
					'\tDeclareArg(env, "%s", VTYPE_%s, OCCUR_Once);\n' % \
							[this.varName, guraClassName]
				this.varDecl += \
					'\t%s *%s = Object_%s::GetObject(args, %d)->GetEntity();\n' % \
							[this.typeName, this.varName, guraClassName, idx]
			}
			if (this.typeRef == '*') {
				this.varInCall = this.varName
			} else {
				this.varInCall = '*' + this.varName
			}
		} else {
			sys.stderr.printf('can\'t handle "%s" in %s\n', this.typeName, funcName)
			//sys.exit(1)
		}
	}
	ToString() = this.varAccess + ' : ' + this.typeName + ' : ' + \
			this.typeRef + ' : ' + this.varName + ' : ' + this.varInit
}

ExtractIndex(fileNameTex:string) = {
	tokenizer.Initialize()
	tokenizer.Tokenize(fileNameTex)
	elementOwner = tokenizer.elementOwners.first()
	stat = `start
	fileNamesTex = []
	elementOwner.each() {|element|
		if (stat == `start) {
			if (element.IsControlWord('input')) {
				stat = `input
			}
		} elsif (stat == `input) {
			fileNamesTex.add(element.ToString().strip())
			stat = `start
		}
	}
	fileNamesTex
}

ExtractFunction(fileNameTex:string) = {
	tokenizer.Initialize()
	tokenizer.Tokenize(fileNameTex)
	ClassInfo('', '', fileNameTex, tokenizer.elementOwners.first())
}

ExtractClassInfo(fileNameTex:string, fileNamesHeader:list) = {
	tokenizer.Initialize()
	tokenizer.Tokenize(fileNameTex)
	classInfos = []
	classInfo = nil
	stat = `start
	tokenizer.elementOwners.first().each() {|element|
		classInfo && classInfo.elementOwner.add(element)
		continueFlag = true
		while (continueFlag) {
			continueFlag = false
			if (stat == `start) {
				if (element.IsControlWord('section')) {
					if (idx = element.groupings[0].elementOwner.\
										find(&{$element.IsControlWord('class')})) {
						element = element.groupings[0].elementOwner[idx]
						className = element.groupings[0].ToString()
						className = classNameDict.get(className, className)
						classNameSuper = classNameSuperDict.get(className, '*')
						classInfo = ClassInfo(className,
											classNameSuper, fileNameTex, [])
						className.match(r'^\w+$') && classInfos.add(classInfo)
					}
				} elsif (element.IsControlWord('wxheading')) {
					text = element.groupings[0].ToString()
					if (text.startswith('Derived')) {
						if (classInfo.classNameSuper == '*') {
							stat = `derived
						}
					} elsif (text.startswith('Derives')) {
						if (classInfo.classNameSuper == '*') {
							stat = `derived
						}
					} elsif (text.startswith('Include')) {
						stat = `includeFiles
					}
				}
			} elsif (stat == `derived) {
				if (element.IsControlWord('wxheading')) {
					continueFlag = true
					stat = `start
				} elsif (element.IsControlWord('helpref')) {
					classInfo.classNameSuper = element.groupings[0].ToString()
					stat = `start
				} elsif (element.IsControlWord('section')) {
					continueFlag = true
					stat = `start
				} elsif (element.IsText()) {
					// Workaround for the case that class name is not surrounted
					// in helpref control. This happens in ddeservr.tex etc.
					text = element.ToString().strip()
					if (m = text.match(r'^(wx\w+)$')) {
						classInfo.classNameSuper = m[1]
						stat = `start
					}
				}
			} elsif (stat == `includeFiles) {
				if (element.IsControlWord('wxheading')) {
					continueFlag = true
					stat = `start
				} elsif (element.IsControlWord('section')) {
					continueFlag = true
					stat = `start
				} else {
					text = element.ToString().strip()
					if (m = text.match(r'^<([^>]+)>')) {
						fileNameHeader = m[1]
						if (!fileNameHeader.startswith('wx/')) {
							fileNameHeader = 'wx/' + fileNameHeader
						}
						if (fileNameHeader == 'wx/richtex/richtextprint.h') {
							fileNameHeader = 'wx/richtext/richtextprint.h'
						}
						!fileNamesHeader.find(fileNameHeader) && \
										fileNamesHeader.add(fileNameHeader)
					}
				}
			} else {
				// nothing to do
			}
		}
	}
	classInfos.filter(classInfos:*classNameSuper == '*')::classNameSuper = ''
	classInfos
}

ClassNameToGuraClassName(className:string):map = {
	if (className == 'wxColor') {
		'wx_Colour'
	} elsif (className == 'wxWindowBase') {
		'wx_Window'
	} else {
		className.sub(r'^wx', 'wx_')
	}
}

ClassNameToDispClassName(className:string):map = {
	if (className == 'wxColor') {
		'Colour'
	} elsif (className == 'wxWindowBase') {
		'Window'
	} else {
		className.sub(r'^wx', '')
	}
}

ClassNameToHeaderFileName(className:string):map = {
	format('Object_%s.h', ClassNameToGuraClassName(className))
}

ClassNameToSourceFileName(className:string):map = {
	format('Object_%s.cpp', ClassNameToGuraClassName(className))
}

ClassInfo = struct(className:string, classNameSuper:string,
							fileNameTex:string, elementOwner:list:nomap):map {
	GenerateHeaderFile() = {
		[className, classNameSuper, fileNameTex] = \
			[this.className, this.classNameSuper, this.fileNameTex]
		guraClassName = ClassNameToGuraClassName(className)
		guraClassNameSuper = ClassNameToGuraClassName(classNameSuper)
		fileName = ClassNameToHeaderFileName(className)
		macroIncludeOnce = '__' + fileName.upper().replace('.', '_') + '__'
		f = open(fileName, 'w')
		f.print(templateHeaderTop.embed())
		f.println()
		f.print(templateClassDeclaration.embed())
		f.println()
		if (this.classNameSuper.isempty()) {
			f.print(templateObjectDeclarationBase.embed())
		} else {
			castForEntity = 'dynamic_cast'
			if (className == 'wxTextAttrEx') {
				castForEntity = 'static_cast'
			}
			f.print(templateObjectDeclarationDerived.embed())
		}
		f.println()
		f.print(templateHeaderBtm.embed())
		f.close()
	}
	GenerateProgramFile() = {
		[className, classNameSuper, elementOwner, fileNameTex] = \
			[this.className, this.classNameSuper, this.elementOwner, this.fileNameTex]
		guraClassName = ClassNameToGuraClassName(className)
		guraClassNameSuper = ClassNameToGuraClassName(classNameSuper)
		fileName = ClassNameToSourceFileName(className)
		buff = binary()
		f = buff.stream()
		f.print(templateInterfacesTop.embed())
		guraFuncNames = []
		guraMethodNames = []
		symbolsToRealize = []
		methodOverrideDecls = []
		funcNamesToExclude = ['new', 'delete', 'operator']
		elementsFunc = elementOwner.filter(elementOwner:*IsControlWord('func') | \
									elementOwner:*IsControlWord('constfunc')):list
		//elementsFunc = elementOwner.filter(elementOwner:*IsControlWord('func')):list
		elementsFunc.each() {|elementFunc, idx|
			returnType = ReturnType(elementFunc.groupings[0])
			elementFunc.groupings[1].elementOwner.\
							find(&{$element.IsControlWord('destruct')}) && continue
			funcName = elementFunc.groupings[1].ToString().strip()
			(funcName in funcNamesToExclude) && continue
			funcName.match(r'^operator[^\w]') && continue
			paramWrappers = elementFunc.groupings[2].elementOwner
			paramWrappers = paramWrappers.filter(paramWrappers:*IsControlWord('param'))
			topLevelConstructorFlag = (className in classNamesTopLevelWindow) && \
								(funcName in [className, 'Create'])
			params = Param(topLevelConstructorFlag,
								funcName, paramWrappers:*groupings, 0..):list
			(idx > 0) && f.println()
			if (funcName == className) {
				guraFuncName = funcName.sub(r'^wx', '')
				if (params.isempty()) {
					guraFuncName += 'Empty'
				}
				if (guraFuncName == 'SetMode') { guraFuncName = 'SetMode_' }
				if (guraFuncName == 'GetUserName') { guraFuncName = 'GetUserName_' }
				guraFuncNameBase = guraFuncName
				while (guraFuncNames.find(guraFuncName)) {|i|
					guraFuncName = guraFuncNameBase + format('_%d', i + 1)
				}
				guraFuncNames.add(guraFuncName)
				excludeFlag = functionsExclude.find(guraFuncName)
				f.print(templateConstructor.embed())
				methodOverrideDecls.append(cond(excludeFlag, '//', '') + \
					'inline ' + guraClassName + '(' + params:*varDeclC.join(', ') + ') : ' + \
					className + '(' + params:*varInCallC.join(', ') + '), _sig(NULL), _pObj(NULL) {}')
			} elsif (className.isempty()) {
				guraFuncName = funcName.sub(r'^wx', '')
				if (guraFuncName == 'SetMode') { guraFuncName = 'SetMode_' }
				if (guraFuncName == 'GetUserName') { guraFuncName = 'GetUserName_' }
				guraFuncNameBase = guraFuncName
				while (guraFuncNames.find(guraFuncName)) {|i|
					guraFuncName = guraFuncNameBase + format('_%d', i + 1)
				}
				guraFuncNames.add(guraFuncName)
				excludeFlag = functionsExclude.find(guraFuncName)
				
				f.printf('Gura_DeclareFunction(%s)\n', guraFuncName)
				f.printf('{\n')
				voidFlag = returnType.typeName in ['void', '']
				f.printf('\tSetMode(RSLTMODE_%s, FLAG_%s);\n',
							cond(voidFlag, 'Void', 'Normal'),
							cond(params.isempty(), 'None', 'Map'))
				excludeFlag && !params.isempty() && f.println('#if 0')
				f.print(params:*declArg)
				excludeFlag && !params.isempty() && f.println('#endif')
				!voidFlag && f.println('\tDeclareBlock(OCCUR_ZeroOrOnce);')
				f.printf('}\n')
				f.println()
				f.printf('Gura_ImplementFunction(%s)\n', guraFuncName)
				f.printf('{\n')
				excludeFlag && f.println('#if 0')
				f.print(params:*varDecl)
				funcCall = format('%s(%s)', funcName, params:*varInCall.join(', '))
				returnType.GenerateCode(f, funcName, funcCall)
				if (excludeFlag && !params.isempty()) {
					f.print(templateExcludedFuncPost)
				}
				f.print('}\n')
				
			} elsif (returnType.funcType == `static) {
				guraMethodName = funcName
				while (guraMethodNames.find(guraMethodName)) {|i|
					guraMethodName = funcName + format('_%d', i + 1)
				}
				if (guraMethodName == 'SetMode') { guraMethodName = 'SetMode_' }
				if (guraMethodName == 'GetUserName') { guraMethodName = 'GetUserName_' }
				guraMethodNames.add(guraMethodName)
				excludeFlag = methodsExclude.find(className + '.' + guraMethodName)
				f.printf('Gura_DeclareClassMethod(%s, %s)\n', guraClassName, guraMethodName)
				f.printf('{\n')
				voidFlag = returnType.typeName in ['void', '']
				f.printf('\tSetMode(RSLTMODE_%s, FLAG_%s);\n',
							cond(voidFlag, 'Void', 'Normal'),
							cond(params.isempty(), 'None', 'Map'))
				excludeFlag && !params.isempty() && f.println('#if 0')
				f.print(params:*declArg)
				excludeFlag && !params.isempty() && f.println('#endif')
				!voidFlag && f.println('\tDeclareBlock(OCCUR_ZeroOrOnce);')
				f.printf('}\n')
				f.println()
				f.printf('Gura_ImplementClassMethod(%s, %s)\n', guraClassName, guraMethodName)
				f.printf('{\n')
				excludeFlag && f.println('#if 0')
				f.print(params:*varDecl)
				funcCall = format('%s::%s(%s)',
							className, funcName, params:*varInCall.join(', '))
				returnType.GenerateCode(f, funcName, funcCall)
				if (excludeFlag) {
					f.print(templateExcludedFuncPost)
				}
				f.print('}\n')
			} else {
				guraMethodName = funcName
				while (guraMethodNames.find(guraMethodName)) {|i|
					guraMethodName = funcName + format('_%d', i + 1)
				}
				if (guraMethodName == 'SetMode') { guraMethodName = 'SetMode_' }
				if (guraMethodName == 'GetUserName') { guraMethodName = 'GetUserName_' }
				guraMethodNames.add(guraMethodName)
				excludeFlag = methodsExclude.find(className + '.' + guraMethodName)
				f.printf('Gura_DeclareMethod(%s, %s)\n', guraClassName, guraMethodName)
				f.printf('{\n')
				voidFlag = returnType.typeName in ['void', '']
				f.printf('\tSetMode(RSLTMODE_%s, FLAG_%s);\n',
							cond(voidFlag, 'Void', 'Normal'),
							cond(params.isempty(), 'None', 'Map'))
				excludeFlag && !params.isempty() && f.println('#if 0')
				f.print(params:*declArg)
				excludeFlag && !params.isempty() && f.println('#endif')
				!voidFlag && f.println('\tDeclareBlock(OCCUR_ZeroOrOnce);')
				f.printf('}\n')
				f.println()
				f.printf('Gura_ImplementMethod(%s, %s)\n', guraClassName, guraMethodName)
				f.printf('{\n')
				excludeFlag && f.println('#if 0')
				f.printf('\tObject_%s *pSelf = Object_%s::GetSelfObj(args);\n',
														guraClassName, guraClassName)
				f.printf('\tif (pSelf->IsInvalid(sig)) return Value::Null;\n')
				f.print(params:*varDecl)
				funcCall = format('pSelf->GetEntity()->%s(%s)',
											funcName, params:*varInCall.join(', '))
				returnType.GenerateCode(f, funcName, funcCall)
				if (excludeFlag) {
					f.print(templateExcludedFuncPost)
				}
				f.print('}\n')
				if (returnType.funcType == `virtual) {
					symbolsToRealize.append(guraMethodName)
					methodOverrideDecls.append('//' + returnType.declRaw + ' ' + \
							funcName + '(' + params:*varDeclC.join(', ') + ');')
				}
			}
		}
		f.println()
		baseClassFlag = this.classNameSuper.isempty()
		f.print(templateObjectImplementation.embed())
		f.println()
		f.print(templateClassImplementation.embed())
		open(fileName, 'w') {|f|
			f.print(templateProgramTop.embed())
			f.println()
			f.write(buff)
			f.println()
			f.print(templateProgramBtm.embed())
			f.close()
		}
	}
}

ClassLink = struct(className:string, classNameSuper:string,
			tentativeFlag:boolean => false, classLinksSub:list => []) {
	Print(f:stream, indent:number => 0) = {
		f.println('  ' * indent, this.className, cond(this.tentativeFlag, '*', ''))
		this.classLinksSub::Print(f, indent + 1)
	}
	Flatten(classLinks:list) = {
		if (!classNamesExclude.find(this.className)) {
			classLinks.add(this)
			this.classLinksSub::Flatten(classLinks)
		}
	}
}

main()

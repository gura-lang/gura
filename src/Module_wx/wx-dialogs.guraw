#!/usr/bin/env gura
// This Gura script has been ported from the original above by Yutaka SAITO.
import(wx)
import(resource)
import(colrdlgg)
import(dirdlgg)
import(filedlgg)
import(fontdlgg)

// Menu IDs
[
	DIALOGS_CHOOSE_COLOUR,
	DIALOGS_CHOOSE_COLOUR_GENERIC,
	DIALOGS_CHOOSE_FONT,
	DIALOGS_CHOOSE_FONT_GENERIC,
	DIALOGS_MESSAGE_BOX,
	DIALOGS_SINGLE_CHOICE,
	DIALOGS_MULTI_CHOICE,
	DIALOGS_TEXT_ENTRY,
	DIALOGS_PASSWORD_ENTRY,
	DIALOGS_FILE_OPEN,
	DIALOGS_FILE_OPEN2,
	DIALOGS_FILES_OPEN,
	DIALOGS_FILE_SAVE,
	DIALOGS_FILE_OPEN_GENERIC,
	DIALOGS_FILES_OPEN_GENERIC,
	DIALOGS_FILE_SAVE_GENERIC,
	DIALOGS_DIR_CHOOSE,
	DIALOGS_DIRNEW_CHOOSE,
	DIALOGS_GENERIC_DIR_CHOOSE,
	DIALOGS_TIP,
	DIALOGS_NUM_ENTRY,
	DIALOGS_LOG_DIALOG,
	DIALOGS_MODAL,
	DIALOGS_MODELESS,
	DIALOGS_CENTRE_SCREEN,
	DIALOGS_CENTRE_PARENT,
	DIALOGS_MODELESS_BTN,
	DIALOGS_PROGRESS,
	DIALOGS_ABOUTDLG_SIMPLE,
	DIALOGS_ABOUTDLG_FANCY,
	DIALOGS_ABOUTDLG_FULL,
	DIALOGS_ABOUTDLG_CUSTOM,
	DIALOGS_BUSYINFO,
	DIALOGS_FIND,
	DIALOGS_REPLACE,
	DIALOGS_REQUEST,
	DIALOGS_PROPERTY_SHEET,
	DIALOGS_PROPERTY_SHEET_TOOLBOOK,
	DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK
] = wx.ID_HIGHEST..

myCanvas = nil

MyApp = class(wx.App) {
	OnInit() = {
		wx.InitAllImageHandlers();
		self.m_canvasTextColour = wx.BLACK;
		self.m_canvasFont = wx.NORMAL_FONT;
		// Create the main frame window
		frame = MyFrame(nil, 'wxWidgets dialogs example');
		// Make a menubar
		menuDlg = wx.Menu()
		menuDlg.Append(DIALOGS_MESSAGE_BOX, '&Message box\tCtrl-M');
		choices_menu = wx.Menu()
		choices_menu.Append(DIALOGS_CHOOSE_COLOUR, '&Choose colour');
		choices_menu.Append(DIALOGS_CHOOSE_FONT, 'Choose &font');
		choices_menu.Append(DIALOGS_SINGLE_CHOICE, '&Single choice\tCtrl-C');
		choices_menu.Append(DIALOGS_MULTI_CHOICE, 'M&ultiple choice\tCtrl-U');
		choices_menu.AppendSeparator();
		choices_menu.Append(DIALOGS_CHOOSE_COLOUR_GENERIC, '&Choose colour (generic)');
		choices_menu.Append(DIALOGS_CHOOSE_FONT_GENERIC, 'Choose &font (generic)');
		menuDlg.AppendMenu(wx.ID_ANY, '&Choices and selectors', choices_menu);
		entry_menu = wx.Menu()
		entry_menu.Append(DIALOGS_TEXT_ENTRY, 'Text &entry\tCtrl-E');
		entry_menu.Append(DIALOGS_PASSWORD_ENTRY, '&Password entry\tCtrl-P');
		entry_menu.Append(DIALOGS_NUM_ENTRY, '&Numeric entry\tCtrl-N');
		menuDlg.AppendMenu(wx.ID_ANY, '&Entry dialogs', entry_menu);
		filedlg_menu = wx.Menu()
		filedlg_menu.Append(DIALOGS_FILE_OPEN, '&Open file\tCtrl-O');
		filedlg_menu.Append(DIALOGS_FILE_OPEN2, '&Second open file\tCtrl-2');
		filedlg_menu.Append(DIALOGS_FILES_OPEN, 'Open &files\tCtrl-Q');
		filedlg_menu.Append(DIALOGS_FILE_SAVE, 'Sa&ve file\tCtrl-S');
		filedlg_menu.AppendSeparator();
		filedlg_menu.Append(DIALOGS_FILE_OPEN_GENERIC, '&Open file (generic)');
		filedlg_menu.Append(DIALOGS_FILES_OPEN_GENERIC, 'Open &files (generic)');
		filedlg_menu.Append(DIALOGS_FILE_SAVE_GENERIC, 'Sa&ve file (generic)');
		menuDlg.AppendMenu(wx.ID_ANY, '&File operations', filedlg_menu);
		dir_menu = wx.Menu()
		dir_menu.Append(DIALOGS_DIR_CHOOSE, '&Choose a directory\tCtrl-D');
		dir_menu.Append(DIALOGS_DIRNEW_CHOOSE, 'Choose a directory (with \"Ne&w\" button)\tShift-Ctrl-D');
		menuDlg.AppendMenu(wx.ID_ANY, '&Directory operations', dir_menu);
		dir_menu.AppendSeparator();
		dir_menu.Append(DIALOGS_GENERIC_DIR_CHOOSE, '&Choose a directory (generic)');
		info_menu = wx.Menu()
		info_menu.Append(DIALOGS_TIP, '&Tip of the day\tCtrl-T');
		info_menu.Append(DIALOGS_PROGRESS, 'Pro&gress dialog\tCtrl-G');
		info_menu.Append(DIALOGS_BUSYINFO, '&Busy info dialog\tCtrl-B');
		info_menu.Append(DIALOGS_LOG_DIALOG, '&Log dialog\tCtrl-L');
		menuDlg.AppendMenu(wx.ID_ANY, '&Informative dialogs', info_menu);
		find_menu = wx.Menu()
		find_menu.AppendCheckItem(DIALOGS_FIND, '&Find dialog\tCtrl-F');
		find_menu.AppendCheckItem(DIALOGS_REPLACE, 'Find and &replace dialog\tShift-Ctrl-F');
		menuDlg.AppendMenu(wx.ID_ANY, '&Searching', find_menu);
		dialogs_menu = wx.Menu()
		dialogs_menu.Append(DIALOGS_MODAL, '&Modal dialog\tCtrl-W');
		dialogs_menu.AppendCheckItem(DIALOGS_MODELESS, 'Mode&less dialog\tCtrl-Z');
		dialogs_menu.Append(DIALOGS_CENTRE_SCREEN, 'Centered on &screen\tShift-Ctrl-1');
		dialogs_menu.Append(DIALOGS_CENTRE_PARENT, 'Centered on &parent\tShift-Ctrl-2');
		menuDlg.AppendMenu(wx.ID_ANY, '&Generic dialogs', dialogs_menu);
		sheet_menu = wx.Menu()
		sheet_menu.Append(DIALOGS_PROPERTY_SHEET, '&Standard property sheet\tShift-Ctrl-P');
		sheet_menu.Append(DIALOGS_PROPERTY_SHEET_TOOLBOOK, '&Toolbook sheet\tShift-Ctrl-T');
		menuDlg.AppendMenu(wx.ID_ANY, '&Property sheets', sheet_menu);
		menuDlg.Append(DIALOGS_REQUEST, '&Request user attention\tCtrl-R');
		menuDlg.AppendSeparator();
		menuDlg.Append(wx.ID_EXIT, 'E&xit\tAlt-X');
		menuHelp = wx.Menu()
		menuHelp.Append(DIALOGS_ABOUTDLG_SIMPLE, '&About (simple)...\tF1');
		menuHelp.Append(DIALOGS_ABOUTDLG_FANCY, 'About (&fancy)...\tShift-F1');
		menuHelp.Append(DIALOGS_ABOUTDLG_FULL, 'About (f&ull)...\tCtrl-F1');
		menuHelp.Append(DIALOGS_ABOUTDLG_CUSTOM, 'About (&custom)...\tCtrl-Shift-F1');
		menubar = wx.MenuBar()
		menubar.Append(menuDlg, '&Dialogs');
		menubar.Append(menuHelp, '&Help');
		frame.SetMenuBar(menubar);
		myCanvas:extern = MyCanvas(frame);
		myCanvas.SetBackgroundColour(wx.WHITE);
		frame.Centre(wx.BOTH);
		// Show the frame
		frame.Show(true);
		self.SetTopWindow(frame);
		true;
	}
}

/*
// a trivial example of a custom dialog class
MyAboutDialog = class(wx.GenericAboutDialog) {
	__init__(info:wx.AboutDialogInfo) = {
		self.Create(info);
	}
	// add some custom controls
	DoAddCustomControls() = {
		self.AddControl(wx.StaticLine(self), wx.SizerFlags().Expand())
		self.AddText('Some custom text')
		self.AddControl(wx.StaticLine(self), wx.SizerFlags().Expand());
	}
};
*/

MyFrame = class(wx.Frame) {
	__init__(parent:wx.Window:nil, title:string) = {|parent, wx.ID_ANY, title|
		self.EventTable()
		self.m_findData = wx.FindReplaceData()
		self.m_clrData = wx.ColourData()
		self.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		self.m_dialog = nil
		self.m_dlgFind = self.m_dlgReplace = nil
		self.m_clrData.SetChooseFull(true)
		repeat(16) {|i|
			self.m_clrData.SetCustomColour(
				i,
				wx.Colour(
					i * 16,
					i * 16,
					i * 16
				)
			);
		}
		self.CreateStatusBar();
	}
	EventTable() = {
		self.Bind(wx.EVT_MENU, DIALOGS_MESSAGE_BOX) {|event| self.MessageBox(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_COLOUR) {|event| self.ChooseColour(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_FONT) {|event| self.ChooseFont(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_LOG_DIALOG) {|event| self.LogDialog(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_TEXT_ENTRY) {|event| self.TextEntry(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_PASSWORD_ENTRY) {|event| self.PasswordEntry(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_NUM_ENTRY) {|event| self.NumericEntry(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_SINGLE_CHOICE) {|event| self.SingleChoice(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_MULTI_CHOICE) {|event| self.MultiChoice(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FILE_OPEN) {|event| self.FileOpen(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FILE_OPEN2) {|event| self.FileOpen2(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FILES_OPEN) {|event| self.FilesOpen(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FILE_SAVE) {|event| self.FileSave(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FILE_OPEN_GENERIC) {|event| self.FileOpenGeneric(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FILES_OPEN_GENERIC) {|event| self.FilesOpenGeneric(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FILE_SAVE_GENERIC) {|event| self.FileSaveGeneric(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_DIR_CHOOSE) {|event| self.DirChoose(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_DIRNEW_CHOOSE) {|event| self.DirChooseNew(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_MODAL) {|event| self.ModalDlg(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_MODELESS) {|event| self.ModelessDlg(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_CENTRE_SCREEN) {|event| self.DlgCenteredScreen(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_CENTRE_PARENT) {|event| self.DlgCenteredParent(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_TIP) {|event| self.ShowTip(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_FONT_GENERIC) {|event| self.ChooseFontGeneric(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_GENERIC_DIR_CHOOSE) {|event| self.GenericDirChoose(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_CHOOSE_COLOUR_GENERIC) {|event| self.ChooseColourGeneric(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_PROGRESS) {|event| self.ShowProgress(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_SIMPLE) {|event| self.ShowSimpleAboutDialog(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_FANCY) {|event| self.ShowFancyAboutDialog(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_FULL) {|event| self.ShowFullAboutDialog(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_ABOUTDLG_CUSTOM) {|event| self.ShowCustomAboutDialog(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_BUSYINFO) {|event| self.ShowBusyInfo(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_FIND) {|event| self.ShowFindDialog(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_REPLACE) {|event| self.ShowReplaceDialog(event) }
		self.Bind(wx.EVT_FIND) {|event| self.OnFindDialog(event) }
		self.Bind(wx.EVT_FIND_NEXT) {|event| self.OnFindDialog(event) }
		self.Bind(wx.EVT_FIND_REPLACE) {|event| self.OnFindDialog(event) }
		self.Bind(wx.EVT_FIND_REPLACE_ALL) {|event| self.OnFindDialog(event) }
		self.Bind(wx.EVT_FIND_CLOSE) {|event| self.OnFindDialog(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_PROPERTY_SHEET) {|event| self.OnPropertySheet(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_PROPERTY_SHEET_TOOLBOOK) {|event| self.OnPropertySheet(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK) {|event| self.OnPropertySheet(event) }
		self.Bind(wx.EVT_MENU, DIALOGS_REQUEST) {|event| self.OnRequestUserAttention(event) }
		self.Bind(wx.EVT_MENU, wx.ID_EXIT) {|event| self.OnExit(event) }
	}
	ChooseColour(event:wx.CommandEvent) = {
		self.m_clrData.SetColour(myCanvas.GetBackgroundColour());
		dialog = wx.ColourDialog(self, self.m_clrData);
		dialog.SetTitle('Choose the background colour');
		if (dialog.ShowModal() == wx.ID_OK) {
			self.m_clrData = dialog.GetColourData();
			myCanvas.SetBackgroundColour(self.m_clrData.GetColour());
			myCanvas.ClearBackground();
			myCanvas.Refresh();
		}
	}
	ChooseColourGeneric(event:wx.CommandEvent) = {
		self.m_clrData.SetColour(myCanvas.GetBackgroundColour());
		//FIXME:TODO:This has no effect...
		self.m_clrData.SetChooseFull(true);
		repeat(16) {|i|
			colour = wx.Colour(
				i * 16,
				i * 16,
				i * 16
			)
			self.m_clrData.SetCustomColour(i, colour);
		}
		dialog = wx.GenericColourDialog(self, self.m_clrData);
		if (dialog.ShowModal() == wx.ID_OK) {
			self.m_clrData = dialog.GetColourData();
			myCanvas.SetBackgroundColour(self.m_clrData.GetColour());
			myCanvas.ClearBackground();
			myCanvas.Refresh();
		}
		dialog.Destroy();
	}
	ChooseFont(event:wx.CommandEvent) = {
		data = wx.FontData()
		data.SetInitialFont(wx.GetApp().m_canvasFont);
		data.SetColour(wx.GetApp().m_canvasTextColour);
		// you might also do this:
		//
		//  wxFontDialog dialog;
		//  if ( !dialog.Create(this, data) { ... error ... }
		//
		dialog = wx.FontDialog(self, data);
		if (dialog.ShowModal() == wx.ID_OK) {
			retData = dialog.GetFontData();
			wx.GetApp().m_canvasFont = retData.GetChosenFont();
			wx.GetApp().m_canvasTextColour = retData.GetColour();
			myCanvas.Refresh();
		}
		//else: cancelled by the user, don't change the font
	}
	ChooseFontGeneric(event:wx.CommandEvent) = {
		data = wx.FontData()
		data.SetInitialFont(wx.GetApp().m_canvasFont);
		data.SetColour(wx.GetApp().m_canvasTextColour);
		dialog = wx.GenericFontDialog(self, data);
		if (dialog.ShowModal() == wx.ID_OK) {
			retData = dialog.GetFontData();
			wx.GetApp().m_canvasFont = retData.GetChosenFont();
			wx.GetApp().m_canvasTextColour = retData.GetColour();
			myCanvas.Refresh();
		}
		dialog.Destroy();
	}
	LogDialog(event:wx.CommandEvent) = {
		// calling wxYield() (as ~wxBusyCursor does) shouldn't result in messages
		// being flushed -- test it
		wx.BusyCursor {
			wx.LogMessage('This is some message - everything is ok so far.');
			wx.LogMessage('Another message...\n... this one is on multiple lines');
			wx.LogWarning('And then something went wrong!');
			// and if ~wxBusyCursor doesn't do it, then call it manually
			wx.Yield();
		}
		wx.LogError('Intermediary error handler decided to abort.');
		wx.LogError('The top level caller detected an unrecoverable error.');
		wx.Log.FlushActive();
		wx.LogMessage('And this is the same dialog but with only one message.');
	}
	MessageBox(event:wx.CommandEvent) = {
		dialog = wx.MessageDialog(nil, 'This is a message box\nA long, long string to test out the message box properly',
			'Message box text', wx.NO_DEFAULT | wx.YES_NO | wx.CANCEL | wx.ICON_INFORMATION);
		ret = dialog.ShowModa()
		if (ret == wx.ID_YES) {
			wxLogStatus('You pressed "Yes"');
		} elsif(ret == wx.ID_NO) {
			wxLogStatus('You pressed "No"');
		} elsif(ret == wx.ID_CANCEL) {
			wxLogStatus('You pressed "Cancel"');
		} else {
			wxLogError('Unexpected wxMessageDialog return code!');
		}
	}
	NumericEntry(event:wx.CommandEvent) = {
		res = wx.GetNumberFromUser('This is some text, actually a lot of text.\n' \
									'Even two rows of text.',
									'Enter a number:', 'Numeric input test',
									50, 0, 100, self);
		if (res == -1) {
			msg = 'Invalid number entered or dialog cancelled.';
			icon = wx.ICON_HAND;
		} else {
			msg = format("You've entered %lu", res);
			icon = wx.ICON_INFORMATION;
		}
		wx.MessageBox(msg, 'Numeric test result', wx.OK | icon, self);
	}
	PasswordEntry(event:wx.CommandEvent) = {
		pwd = wx.GetPasswordFromUser('Enter password:',
									'Password entry dialog',
									wx.EmptyString,
									self);
		if (!pwd.isempty()) {
			wx.MessageBox(format("Your password is '%s'", pwd),
						'Got password', wx.OK | wx.ICON_INFORMATION, self);
		}
	}
	TextEntry(event:wx.CommandEvent) = {
		dialog = wx.TextEntryDialog(self,
								'This is a small sample\n' \
								'A long, long string to test out the text entrybox',
								'Please enter a string',
								'Default value',
								wx.OK | wx.CANCEL);
		if (dialog.ShowModal() == wx.ID_OK) {
			wx.MessageBox(dialog.GetValue(), 'Got string', wx.OK | wx.ICON_INFORMATION, self);
		}
	}
	SingleChoice(event:wx.CommandEvent) = {
		choices = ['One', 'Two', 'Three', 'Four', 'Five']
		dialog = wx.SingleChoiceDialog(self,
									'This is a small sample\n' \
									'A single-choice convenience dialog',
									'Please select a value',
									choices);
		dialog.SetSelection(2);
		if (dialog.ShowModal() == wx.ID_OK) {
			dialog2 = wx.MessageDialog(self, dialog.GetStringSelection(), 'Got string');
			dialog2.ShowModal();
		}
	}
	MultiChoice(event:wx.CommandEvent) = {
		choices = [
			_T("One"), _T("Two"), _T("Three"), _T("Four"), _T("Five"),
			_T("Six"), _T("Seven"), _T("Eight"), _T("Nine"), _T("Ten"),
			_T("Eleven"), _T("Twelve"), _T("Seventeen"),
		]
		selections = wxGetMultipleChoices(_T("This is a small sample\n")
										_T("A multi-choice convenience dialog"),
										_T("Please select a value"),
										choices,
										this);
		if (!selections.isempty()) {
			msg = format('You selected %u items:\n', selections.len());
			msg += format('\t%u: %u (%s)\n',
							0.., selections,
							choices[selections]).join()
			wx.LogMessage(msg);
		}
		//else: cancelled or nothing selected
	}
	FileOpen(event:wx.CommandEvent) = {
	}
	FileOpen2(event:wx.CommandEvent) = {
	}
	FilesOpen(event:wx.CommandEvent) = {
	}
	FileSave(event:wx.CommandEvent) = {
	}
	FileOpenGeneric(event:wx.CommandEvent) = {
	}
	FilesOpenGeneric(event:wx.CommandEvent) = {
	}
	FileSaveGeneric(event:wx.CommandEvent) = {
	}
	DirChoose(event:wx.CommandEvent) = {
	}
	DirChooseNew(event:wx.CommandEvent) = {
	}
	GenericDirChoose(event:wx.CommandEvent) = {
	}
	ShowTip(event:wx.CommandEvent) = {
	}
	ModalDlg(event:wx.CommandEvent) = {
	}
	ModelessDlg(event:wx.CommandEvent) = {
	}
	DlgCenteredScreen(event:wx.CommandEvent) = {
	}
	DlgCenteredParent(event:wx.CommandEvent) = {
	}
	ShowProgress(event:wx.CommandEvent) = {
	}
	ShowSimpleAboutDialog(event:wx.CommandEvent) = {
	}
	ShowFancyAboutDialog(event:wx.CommandEvent) = {
	}
	ShowFullAboutDialog(event:wx.CommandEvent) = {
	}
	ShowCustomAboutDialog(event:wx.CommandEvent) = {
	}
	ShowBusyInfo(event:wx.CommandEvent) = {
	}
	ShowFindDialog(event:wx.CommandEvent) = {
	}
	ShowReplaceDialog(event:wx.CommandEvent) = {
	}
	OnFindDialog(event:wx.FindDialogEvent) = {
	}
	OnPropertySheet(event:wx.CommandEvent) = {
	}
	OnRequestUserAttention(event:wx.CommandEvent) = {
	}
	OnExit(event:wx.CommandEvent) = {
	}
	DoDirChoose(style:number) = {
	}
}

// ----------------------------------------------------------------------------
// MyCanvas
// ----------------------------------------------------------------------------

MyCanvas = class(wx.ScrolledWindow) {
	__init__(parent:wx.Window) = {|parent, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.NO_FULL_REPAINT_ON_RESIZE|
		self.EventTable()
	}
	EventTable() = {
		//self.Bind(wx.EVT_PAINT) {|event| self.OnPaint(event) }
	}
	OnPaint(event:wx.PaintEvent) = {
	}
};

// ----------------------------------------------------------------------------
// MyModelessDialog
// ----------------------------------------------------------------------------

MyModelessDialog = class(wx.Dialog) {
	__init__(parent:wx.Window) = {
	}
	OnButton(event:wx.CommandEvent) = {
	}
	OnClose(event:wx.CloseEvent) = {
	}
}

// ----------------------------------------------------------------------------
// MyModalDialog
// ----------------------------------------------------------------------------

MyModalDialog = class(wx.Dialog) {
	__init__(parent:wx.Window) = {
		self.m_btnModal = nil
		self.m_btnModeless = nil
		self.m_btnDelete = nil
	}
	OnButton(event:wx.CommandEvent) = {
	}
}

// ----------------------------------------------------------------------------
// SettingsDialog
// ----------------------------------------------------------------------------

SettingsDialog = class(wx.PropertySheetDialog) {
	[
		ID_SHOW_TOOLTIPS,
		ID_AUTO_SAVE,
		ID_AUTO_SAVE_MINS,
		ID_LOAD_LAST_PROJECT,
		ID_APPLY_SETTINGS_TO,
		ID_BACKGROUND_STYLE,
		ID_FONT_SIZE
	] = 100..
	__init__(parent:wx.Window, dialogType:number) = {
		self.m_imageList = nil
	}
	CreateGeneralSettingsPage(parent:wx.Window) = {
	}
	CreateAestheticSettingsPage(parent:wx.Window) = {
	}
};

wx.IMPLEMENT_APP(MyApp)

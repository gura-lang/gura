#!/usr/bin/env gura
import(markdown)
import(xml)

text@en = R'''
# xml Module

## Overview

The `xml` module provides measures to parse or compose XML documents.

There are two ways to parse an XML document as follows.

One is to create an `xml.document` instance from a stream that contains all the XML elements
with a tree structure. This is an easy way to parse an XML document but consumes much memory.
Below is an example to read an XML file `test.xml`:

    doc = xml.document('test.xml')
    // doc contains all the information of XML document

Another one is to create a class inherited `xml.parser` and implements event handlers
that respond to tags, comments and texts, and then executes `xml.parser#parse()` method with it.
Below is an example to create a class that implements a handler for StartElement event:

    Parser = class(xml.parser) {
        StartElement(elem) = {
            printf('<%s>\n', elem.tagname)
        }
    }
    Parser().parse('test.xml')


## xml.attribute Class

The `xml.attribute` instance represents a name-value pair of XML's attribute
that can be retrieved from `attrs` property in the `xml.element` instance.


### Property

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>name</code></td><td><code>string</code></td><td>R</td>
<td> </td></tr>

<tr><td><code>value</code></td><td><code>string</code></td><td>R</td>
<td> </td></tr>

</table>


## xml.document Class

### Constructor

${markdown.makedoc@function(`en
xml.document
)}

### Property

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>version</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>encoding</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>root</code></td><td><code>xml.element</code></td><td>R</td>
<td></td></tr>

</table>


### Method

${markdown.makedoc@function(`en
xml.document.parse
xml.document.read
xml.document.textize
xml.document.write
)}

## xml.element Class

### Constructor

${markdown.makedoc@function(`en
xml.element
xml.comment
)}

### Property

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>tagname</code></td><td><code>string</code></td><td>R</td>
<td>A tag name of this element.</td></tr>

<tr><td><code>text</code></td><td><code>string</code></td><td>R</td>
<td>The text string if the element is TEXT.
Otherwise, this value would be <code>nil</code>.</td></tr>

<tr><td><code>comment</code></td><td><code>string</code></td><td>R</td>
<td>The comment string if the element is COMMENT.
Otherwise, this value would be <code>nil</code>.</td></tr>

<tr><td><code>children</code></td><td><code>iterator</code></td><td>R</td>
<td>An iterator to return <code>xml.element</code> instances that represent children
contained in this element. This value would be <code>nil</code> if the element has no children.</td></tr>

<tr><td><code>attrs</code></td><td><code>iterator</code></td><td>R</td>
<td>An iterator to return <code>xml.attribute</code> instances that represent attributes
contained in this element. This value would be <code>nil</code> if the element has no attributes.</td></tr>

</table>


### Method

${markdown.makedoc@function(`en
xml.element.addchild
xml.element.gettext
xml.element.textize
xml.element.write
)}


## xml.parser Class

The `xml.parser` class is a base class from which you can implement a inheritance class
that has methods corresponding to events associated with XML elements.
Below are methods that you can implement in the class for event handling:

- `StartElement(elem:xml.element)`
- `EndElement(name:string)`
- `CharacterData(text:string)`
- `ProcessingInstruction(target:string, data:string)`
- `Comment(data:string)`
- `StartCdataSection()`
- `EndCdataSection()`
- `Default(text:string)`
- `DefaultExpand(text:string)`
- `ExternalEntityRef()`
- `SkippedEntity(entityName:string, isParameterEntity:boolean)`
- `StartNamespaceDecl(prefix:string, uri:string)`
- `EndNamespaceDecl(prefix:string)`
- `XmlDecl(version:string, encoding:string, standalone:boolean)`
- `StartDoctypeDecl(doctypeName:strng, systemId:string, publicId:string, hasInternalSubset:boolean)`
- `EndDoctypeDecl()`
- `ElementDecl()`
- `AttlistDecl(elemName:string, attName:string, attType:string, defaultValue:string, isRequired:boolean)`
- `EntityDecl(entityName:string, isParameterEntity:boolean, value:string, base:string, systemId:string, publicId:string, notationName:string)`
- `NotationDecl(notationName:string, base:string, systemId:string, publicId:string)`
- `NotStandalone()`


### Constructor

${markdown.makedoc@function(`en
xml.parser
)}

### Method

${markdown.makedoc@function(`en
xml.parser.parse
)}


## Thanks

This module uses expat library which is distributed in the following site:

[http://expat.sourceforge.net/](http://expat.sourceforge.net/)
'''.embed()

markdown.moduledoc(locals(), %{`en => text@en})

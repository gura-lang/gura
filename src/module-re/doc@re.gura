#!/usr/bin/env gura
import(moddoc)
import(re)

text@en = R'''
# re Module

The `re` module provides measures to operate strings with a regular expression.
To utilize it, import the `re` module using `import` function.

This module provides three different forms of function that has the same feature as below:

- Module function
- Method of `re.pattern` class
- Method of `string` class

For example, a feature to match a string with a regular expression can be described as below:

Using a module function:

    m = re.match('gur[ai]', str)

Using a method of `re.pattern` class:

    m = re.pattern('gur[ai]').match(str)

Using a method of `string` class:

    m = str.match('gur[ai]')

The table below shows the features related to regular-expression and functions that provides them.

<table>
<tr><th>Feature</th><th>Module Function</th><th>Method of re.pattern</th><th>Method of string</th></tr>
<tr><td>Match</td>
<td><code>re.match()</code></td>
<td><code>re.pattern#match()</code></td>
<td><code>string#match()</code></td>
</tr>
<tr><td>Subtraction</td>
<td><code>re.sub()</code></td>
<td><code>re.pattern#sub()</code></td>
<td><code>string#sub()</code></td>
</tr>
<tr><td>Split</td>
<td><code>re.split()</code></td>
<td><code>re.pattern#split()</code></td>
<td><code>string#splitsub()</code></td>
</tr>
<tr><td>Scan</td>
<td><code>re.scan()</code></td>
<td><code>re.pattern#scan()</code></td>
<td><code>string#scan()</code></td>
</tr>
</table>


## Regular Expression

You can describe a matching pattern using a syntax based on POSIX Extended Regular Expression.

The syntax uses a back slash character to avoid some characters such as "`(`" and "`)`"
from being recognized as a meta character.
Since a back slash is used as an escaping character in Gura string as well,
you have to write two back slashes to represent a single back slash in a regular expression.
For example, an expression "`sin\(x\)`" that matches a string "`sin(x)`" is described as below:

    m = str.match('sin\\(x\\)')

Using a raw string appended with a prefix "`r`", in which a back slash is parsed
as a regular character, could avoid such complications.

    m = str.match(r'sin\(x\)')


## re.match Class

An instance of `re.match` class is used as a result value of
`re.match()`, `re.pattern#match()` and `string#match()` to provide matching information.


### Property

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>re.match#source</code></td><td><code>string</code></td><td>R</td>
<td>String that has been matched.</td></tr>

<tr><td><code>re.match#string</code></td><td><code>string</code></td><td>R</td>
<td>String of the matched part.</td></tr>

<tr><td><code>re.match#begin</code></td><td><code>number</code></td><td>R</td>
<td>Beginning position of the matched part.</td></tr>

<tr><td><code>re.match#end</code></td><td><code>number</code></td><td>R</td>
<td>Ending position of the matched part.</td></tr>

</table>


### Index Access

A `re.match` instance can be indexed with a `number` or `string` value.

The value of `number` indicates the group index number that starts from zero.
The group indexed by zero is special and represents the whole region of the match.
The groups indexed by numbers greater than zero correspond to matching patterns of grouping.

Below is an example:

    str = '12:34:56'\n"
    m = str.match(r'(\d\d):(\d\d):(\d\d)')\n"
    m[0]  // returns the whole region of matching: 12:34:56\n"
    m[1]  // returns the 1st group: 12\n"
    m[2]  // returns the 2nd group: 34\n"
    m[3]  // returns the 3rd group: 56\n"

The value of `string` is used to point out a named capturing group
that is described as "`(?<name>group)`" in a regular expression.

Below is an example:

    str = '12:34:56'\n"
    m = str.match(r'(?<hour>\d\d):(?<min>\d\d):(?<sec>\d\d)')\n"
    m['hour']  // returns the group named 'hour': 12\n"
    m['min']   // returns the group named 'min': 34\n"
    m['sec']   // returns the group named 'sec': 56\n");


### Method

${moddoc.reference(`en
re.match.group
re.match.groups
)}


## re.group Class

The `re.group` instance provides information of capturing groups
that are stored in `re.match` instance.


### Property

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>re.group#string</code></td><td><code>string</code></td><td>R</td>
<td>String of the group.</td></tr>

<tr><td><code>re.group#begin</code></td><td><code>number</code></td><td>R</td>
<td>Beginning position of the group.</td></tr>

<tr><td><code>re.group#end</code></td><td><code>number</code></td><td>R</td>
<td>Ending position of the group.</td></tr>

</table>


## re.pattern Class

The `re.pattern` class is used to describe a pattern of regular expression.


### Cast Operation

A function that expects a `re.pattern` instance in its argument can also take a value of
`string` below:

- `string` .. Recognized as a regular expression from which `re.pattern` instance is created.

Using the above casting feature, you can call a function `f(pattern:re.pattern)`
that expects a `re.pattern` instance in its argument as below:

- `f(re.pattern('gur[ai]'))` .. The most explicit way.
- `f('gur[ai]')` .. Implicit casting: from `string` to `re.pattern`.


### Function to Create Instance

${moddoc.reference(`en
re.pattern
)}


### Method

${moddoc.reference(`en
re.pattern.match
re.pattern.sub
re.pattern.split
re.pattern.scan
)}


## Extension to string Class

This module extends the `string` class with methods described here.

${moddoc.reference(`en
string.match
string.sub
string.splitreg
string.scan
)}


## Extension to iterable Classes

This module extends the iterable classes, `list` and `iterator`, with methods described here.

${moddoc.reference@iterable(`en
iterator.grep
)}


## Module Function

${moddoc.reference(`en
re.match
re.sub
re.split
re.scan
)}


## Thanks

This module uses Oniguruma library which is distributed in the following site:

[http://www.geocities.jp/kosako3/oniguruma/index.html](http://www.geocities.jp/kosako3/oniguruma/index.html)
'''.embed()

moddoc.register(locals(), %{`en => text@en})

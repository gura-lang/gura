#!/usr/bin/env gura
import(helper.test) {*}
import(ml.mnist)
import(arrayt)

db = ml.mnist.database('../../sample/resource/mnist')

testcase('properties in ImageSet and LabelSet') {
	printf('Test .. nimages:%d, nrows:%d, ncols:%d, nlabels:%d\n',
		   db.test.imageset.nimages, db.test.imageset.nrows, db.test.imageset.ncols,
		   db.test.labelset.nlabels)
	printf('Train .. nimages:%d, nrows:%d, ncols:%d, nlabels:%d\n',
		   db.train.imageset.nimages, db.train.imageset.nrows, db.train.imageset.ncols,
		   db.train.labelset.nlabels)
}
testcase('ml.mnist.imageset#toarray()') {
	tester(`db.test.imageset.toarray(`flat, `complex))
	cross (shape in [`flat, `matrix], elemtype in [`uint8, `half, `float, `double]) {
		db.test.imageset.toarray(shape, elemtype) {|arrImage|
			printf('%s %s\n', arrImage.elemtype, arrImage.shape.nomap())
		}
	}
}
testcase('ml.mnist.labelset#toarray()') {
	tester(`db.test.labelset.toarray(true, `complex))
	cross (onehot in [false, true], elemtype in [`uint8, `half, `float, `double]) {
		db.test.labelset.toarray(onehot, elemtype) {|arrLabel|
			printf('%s %s %s\n', arrLabel.elemtype, arrLabel.shape.nomap(), arrLabel[0])
		}
	}
}
testcase('toarray()') {
	arrImage = db.test.imageset.toarray(`flat, `float)
	arrLabel = db.test.labelset.toarray()
	println(arrImage.shape):nomap
	repeat (5) {|i|
		println(ml.mnist.toascii(arrImage[i]))
		println(arrLabel[i])
	}
}

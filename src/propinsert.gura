#!/usr/bin/env gura
import(re)

tmpl_ImplementStart = R'''
//-----------------------------------------------------------------------------
// Implementation of properties
//-----------------------------------------------------------------------------
'''.template()

tmpl_ImplementProperty_R = R'''
// ${moduleName}.${item.className}#${item.propName}
Gura_DeclareProperty_R(${item.className}, ${item.propName})
{
	SetPropAttr(VTYPE_any);
	AddHelp(
		Gura_Symbol(en),
		""
		);
}

Gura_ImplementPropertyGetter(${item.className}, ${item.propName})
{
	return Value::Nil;
}
'''.template()

tmpl_ImplementProperty_RW = R'''
// ${moduleName}.${item.className}#${item.propName}
Gura_DeclareProperty_RW(${item.className}, ${item.propName})
{
	SetPropAttr(VTYPE_any);
	AddHelp(
		Gura_Symbol(en),
		""
		);
}

Gura_ImplementPropertyGetter(${item.className}, ${item.propName})
{
	return Value::Nil;
}

Gura_ImplementPropertySetter(${item.className}, ${item.propName})
{
	return Value::Nil;
}
'''.template()

tmpl_AssignProperty = R'''
Gura_AssignProperty(${item.className}, ${item.propName});
'''.template()

Item = struct(className:string, propName, readFlag:boolean, writeFlag:boolean)

DoExtract(fileName:string):map = {
	itemDict = %{}
	moduleName = ''
	stat = `start
	lines = readlines(fileName):list
	lines.each {|line|
		if (stat == `start) {
			if (m = line.match(r'Gura_BeginModule\w+\((\w+)\)')) {
				moduleName = m[1]
			} elsif (m = line.match(r'Object_(\w+)::DoGetProp')) {
				className = m[1]
				setFlag = false
				stat = `lbrace
			} elsif (m = line.match(r'Object_(\w+)::DoSetProp')) {
				className = m[1]
				setFlag = true
				stat = `lbrace
			}
		} elsif (stat == `lbrace) {
			if (line.match(r'^{')) {
				stat = `funcbody
			}
		} elsif (stat == `funcbody) {
		if (line.match(r'^}')) {
			stat = `start
			} elsif (m = line.match(r'pSymbol.+Symbol\((\w+)\)')) {
				propName = m[1]
				keyName = className + '.' + propName
				if (!(item = itemDict.get(keyName))) {
					item = itemDict[keyName] = Item(className, propName, false, false)
				}
				if (setFlag) {
					item.writeFlag = true
				} else {
					item.readFlag = true
				}
			}
		}
	}
	itemDict.isempty() && return
	fout = stream(fileName, 'w')
	stat = `start
	lines.each {|line|
		if (stat == `start) {
			fout.print(line)
			if (m = line.match(r'Object_(\w+)::')) {
				className = m[1]
				stat = `objfound
			}
		} elsif (stat == `objfound) {
			if (line.match(r'^//-----')) {
				firstFlag = true
				itemDict.values {|item|
					(item.className != className) && continue
					if (firstFlag) {
						tmpl_ImplementStart.render(fout)
						firstFlag = false
					}
					cond(item.writeFlag, tmpl_ImplementProperty_RW,
						 tmpl_ImplementProperty_R).render(fout)
					fout.println()
				}
				stat = `seek_ImplementUserClass
			}
			fout.print(line)
		} elsif (stat == `seek_ImplementUserClass) {
			if (m = line.match(r'^Gura_ImplementUserClass\((\w+)\)')) {
				className = m[1]
				stat = `lbrace
			}
			fout.print(line)
		} elsif (stat == `lbrace) {
			fout.print(line)
			if (line.match(r'^{')) {
				firstFlag = true
				itemDict.values {|item|
					(item.className != className) && continue
					if (firstFlag) {
						fout.println('\t// Assignment of properties')
						firstFlag = false
					}
					fout.print('\t', tmpl_AssignProperty.render())
				}
				stat = `start
			}
		}
		
	}
	sys.stderr.println('modified: ', fileName)
}
if (sys.argv.len() < 2) {
	sys.stderr.println('usage: propinsert file')
	sys.exit(1)
}
DoExtract(sys.argv[1..])

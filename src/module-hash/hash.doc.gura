#!/usr/bin/env gura
import(markdown)
import(hash)

text@en = R'''
# hash Module

## Overview

The `hash` module provides measures to calculate hash values of a data sequence in a stream.
To utilize it, import the `hash` module using `import` function.

Below is an example to calculate MD5, SHA-1 and CRC32 hash values of a file named `foo.txt`.

    import(hash)

    fileName = 'foo.txt'
    println('MD5: ', hash.md5(fileName).hexdigest)
    println('SHA-1: ', hash.sha1(fileName).hexdigest)
    println('CRC32: ', hash.crc32(fileName).hexdigest)


## hash.accumulator Class

The `hash.accumulator` class provides measures to calculate hashed numbers
including MD5, SHA-1 and CRC32.

As the class inhefits from `stream`, you can call methods of `stream` class
with `hash.accumulator` instances.

### Property

${markdown.makedoc@property(`en, hash.accumulator)}


### Constructor

${markdown.makedoc@function(`en
hash.md5
hash.sha1
hash.crc32
)}

### Method

${markdown.makedoc@function(`en
hash.accumulator.init
hash.accumulator.update
)}
'''.embed()

markdown.document_server(locals(), %{`en => text@en})

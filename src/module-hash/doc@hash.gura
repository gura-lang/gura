#!/usr/bin/env gura
import(moddoc)
import(hash)

text@en = R'''
# hash Module

The `hash` module provides measures to calculate hash values of a data sequence in a stream.
To utilize it, import the `hash` module using `import` function.

## hash.accumulator Class

The `hash.accumulator` class provides measures to calculate hashed numbers
including MD5, SHA-1 and CRC32.

As the class inhefits from `stream`, you can call methods of `stream` class
with `hash.accumulator` instances.

### Property

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>hash.accumulator#digest</code></td><td><code>binary</code></td><td>R</td>
<td>Returns the hashed result as <code>binary</code>.</td></tr>

<tr><td><code>hash.accumulator#hexdigest</code></td><td><code>string</code></td><td>R</td>
<td>Returns the hashed result as <code>string</code> in hexadecimal format.</td></tr>

<tr><td><code>hash.accumulator#number</code></td><td><code>number</code></td><td>R</td>
<td>Returns the hashed result as <code>number</code>.
This field is valid only for CRC32 and returns `nil` for other hashes.</td></tr>

</table>


### Function to Create Instance

${moddoc.funcdoc(`en
hash.md5
hash.sha1
hash.crc32
)}

### Method

${moddoc.funcdoc(`en
hash.accumulator.init
hash.accumulator.update
)}
'''.template().render()

moddoc.register(locals(), %{`en => text@en})

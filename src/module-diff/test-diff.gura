#!/usr/bin/env gura
import(helper.test) {*}
import(diff)

testcase {
	textOrg = R'''
	This part of the
	document has stayed the
	same from version to
	version.  It shouldn't
	be shown if it doesn't
	change.  Otherwise, that
	would not be helping to
	compress the size of the
	changes.
	
	This paragraph contains
	text that is outdated.
	It will be deleted in the
	near future.
	
	It is important to spell
	check this dokument. On
	the other hand, a
	misspelled word isn't
	the end of the world.
	Nothing in the rest of
	this paragraph needs to
	be changed. Things can
	be added after it.
	'''
	textNew = R'''
	This is an important
	notice! It should
	therefore be located at
	the beginning of this
	document!
	
	This part of the
	document has stayed the
	same from version to
	version.  It shouldn't
	be shown if it doesn't
	change.  Otherwise, that
	would not be helping to
	compress anything.
	
	It is important to spell
	check this document. On
	the other hand, a
	misspelled word isn't
	the end of the world.
	Nothing in the rest of
	this paragraph needs to
	be changed. Things can
	be added after it.
	
	This paragraph contains
	important new additions
	to this document.
	'''
	diff.compose(textOrg, textNew).render(sys.stdout)
}

testcase {
	textOrg = R'''
	I need to buy apples.
	I need to run the laundry.
	I need to wash the dog.
	I need to get the car detailed.
	'''
	textNew = R'''
	I need to buy apples.
	I need to run the laundry.
	I need to wash the dogg.
	I need to get the car detailed.
	'''
	diff.compose(textOrg, textNew) {|rtn|
		//printf('%d %d\n', rtn.nlines@org, rtn.nlines@new)
		println(rtn.eachedit():*unified)
		//d.eachhunk()::print()
	}
}

testcase {
	textOrg = R'''
	I need to buy apples.
	I need to run the laundry.
	I need to wash the dog.
	I need to get the car detailed.
	'''
	textNew = R'''
	I need to buy apples.
	I need to do the laundry.
	I need to wash the car.
	I need to get the dog detailed.
	'''
	diff.compose(textOrg, textNew).render(sys.stdout)
}

testcase {
	textOrg = R'''
	I need to go to the store.
	I need to buy some apples.
	When I get home, I'll wash the dog.
	'''
	textNew = R'''
	I need to go to the store.
	I need to buy some apples.
	Oh yeah, I also need to buy grated cheese.
	When I get home, I'll wash the dog.
	'''
	diff.compose(textOrg, textNew).render(sys.stdout)
}

testcase {
	textOrg = R'''
	I need to go to the store.
	I need to buy some apples.
	When I get home, I'll wash the dog.
	I promise.
	'''
	textNew = R'''
	I need to go to the store.
	I need to buy some apples.
	When I get home, I'll wash the dog.
	'''
	diff.compose(textOrg, textNew).render(sys.stdout)
}

testcase {
	textOrg = R'''
	'''
	textNew = R'''
	'''
	diff.compose(textOrg, textNew).render(sys.stdout)
}

testcase {
	textOrg = R'''
	The Way that can be told of is not the eternal Way;
	The name that can be named is not the eternal name.
	The Nameless is the origin of Heaven and Earth;
	The Named is the mother of all things.
	Therefore let there always be non-being,
	so we may see their subtlety,
	And let there always be being,
	so we may see their outcome.
	The two are the same,
	But after they are produced,
	they have different names.
	'''
	textNew = R'''
	The Nameless is the origin of Heaven and Earth;
	The named is the mother of all things.

	Therefore let there always be non-being,
	  so we may see their subtlety,
	And let there always be being,
	  so we may see their outcome.
	The two are the same,
	But after they are produced,
	  they have different names.
	They both may be called deep and profound.
	Deeper and more profound,
	The door of all subtleties!
	'''
	diff.compose(textOrg, textNew).render(sys.stdout)
}

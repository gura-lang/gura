#!/usr/bin/env gura
import(helper.test) {*}
import(doxygen)

testCases = [
R'''
/*!
  \bar
  \foo{arg1,arg2,arg3}
  \param a an integer argument.
  \param s a constant character pointer.
  \return The test results
  \sa QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()
 */	
'''
/*
//-----------------------------------------------------------------------------
R'''
/** See \l{SomeClass,Some Text} for more information. */
'''
//-----------------------------------------------------------------------------
*/
//-----------------------------------------------------------------------------
R'''
/*! \class Test class.h "inc/class.h"
 *  \brief This is a test class.
 *
 * Some details about the Test class.
 */
'''
//-----------------------------------------------------------------------------
R'''
/*! \file define.h
    \brief testing defines
    
    This is to test the documentation of defines.
*/

/*!
  \def MAX(x,y)
  Computes the maximum of \a x and \a y.
*/

/*! 
   Computes the absolute value of its argument \a x.
*/
'''
//-----------------------------------------------------------------------------
R'''	
/**
multi-line

line.1
line.2
line.3
*/
'''
//-----------------------------------------------------------------------------
R'''
'''
//-----------------------------------------------------------------------------
R'''
/*! \page example
 *  \dontinclude include_test.cpp
 *  Our main function starts like this:
 *  \skip main
 *  \until {
 *  First we create an object \c t of the Include_Test class.
 *  \skipline Include_Test
 *  Then we call the example member function 
 *  \line example
 *  After that our little test routine ends.
 *  \line }
 */
'''
//-----------------------------------------------------------------------------
R'''
/*!
  \param a an integer argument.
  \param s a constant character pointer.
  \return The test results
  \sa QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()
 */	
'''
//-----------------------------------------------------------------------------
R'''
/*!
 * \param a an integer argument.
 * \param s a constant character pointer.
 * \return The test results
 * \sa QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()
 */	
'''
]
testCases1 = [
R'''
/**/
'''
R'''
/**
*/
'''
R'''
/*!
*/
'''
]

Parser = class(doxygen.parser) {
	@addtogroup(name:string, title:string) = 'addtogroup' + name + ' ' + title
	@callgraph() = ''
	@hidecallgrph() = ''
	@callergraph() = ''
	@hidecallergraph() = ''
	@category(name:string, header_file:string, header_name:string) = ''
	@class(name:string, header_file:string, header_name:string) = ''
	@def(name:string) = ''
	@defgroup(name:string, group_title:string) = ''
	@dir(path_fragment:string) = ''
	@enum(name:string) = ''
	@example(file_name:string) = ''
	@endinternal() = ''
	@extends(name:string) = ''
	@file(name:string) = ''
	@fn(declaration:string) = ''
	@headerfile(header_file:string, header_name:string) = ''
	@hideinitializer() = ''
	@idlexcept(name:string) = ''
	@implements(name:string) = ''
	@ingroup(groupname:string) = ''
	@interface(name:string, header_file:string, header_name:string) = ''
	@internal() = ''
	@mainpage(title:string) = ''
	@memberof(name:string) = ''
	@name(header:string) = ''
	@namespace(name:string) = ''
	@nosubgrouping() = ''
	@overload(declaration:string) = ''
	@package(name:string) = ''
	@page(name:string, title:string) = ''
	@private() = ''
	@privatesection() = ''
	@property(name:string) = ''
	@protected() = ''
	@protectedsection() = ''
	@protocol(name:string, header_file:string, header_name:string) = ''
	@public() = ''
	@publicsection() = ''
	@pure() = ''
	@relates(name:string) = ''
	@related(name:string) = ''
	@relatesalso(name:string) = ''
	@relatedalso(name:string) = ''
	@showinitializer() = ''
	@static() = ''
	@struct(name:string, header_file:string, header_name:string) = ''
	@typedef(declaration:string) = ''
	@union(name:string, header_file:string, header_name:string) = ''
	@var(declaration:string) = ''
	@vhdlflow(title_for_the_flow_chart:string) = ''
	@weakgroup(name:string, title:string) = ''
	@attention(text:string) = ''
	@author(list_of_authors:string) = ''
	@authors(list_of_authors:string) = ''
	@brief(description:string) = ''
	@bug(description:string) = ''
	@cond(section_label:string) = ''
	@copyright(description:string) = ''
	@date(description:string) = ''
	@deprecated(description:string) = ''
	@details(description:string) = ''
	@else() = ''
	@elseif(section_label:string) = ''
	@endcond() = ''
	@endif() = ''
	@exception(exception_object:string, description:string) = ''
	@if(section_label:string) = ''
	@ifnot(section_label:string) = ''
	@invariant(description:string) = ''
	@note(text:string) = ''
	@par(paragraph_title:string, paragraph:string) = ''
	@param(dir:string, name:string, description:string) = format('%s %s %s', name, dir, description)
	@parblock() = ''
	@endparblock() = ''
	@tparam(name:string, description:string) = ''
	@post(description:string) = ''
	@pre(description:string) = ''
	@remark(text:string) = ''
	@remarks(text:string) = ''
	@result(description:string) = ''
	@return(description:string) = ''
	@returns(description:string) = ''
	@retval(return_value:string, description:string) = ''
	@sa(references:string) = ''
	@see(references:string) = ''
	@short(description:string) = ''
	@since(text:string) = ''
	@test(paragraph:string) = ''
	@throw(exception_object:string, description:string) = ''
	@throws(exception_object:string, description:string) = ''
	@todo(paragraph:string) = ''
	@version(version_number:string) = ''
	@warning(message:string) = ''
	@xrefitem(key:string, heading:string, list_title:string, text:string) = ''
	@addindex(text:string) = ''
	@anchor(word:string) = ''
	@cite(label:string) = ''
	@endlink() = ''
	@link(line_object:string) = ''
	@ref(name:string, text:string) = ''
	@refitem(name:string) = ''
	@secreflist() = ''
	@endsecreflist() = ''
	@subpage(name:string, text:string) = ''
	@tableofcontents() = ''
	@section(name:string, title:string) = ''
	@subsection(name:string, title:string) = ''
	@subsubsection(name:string, title:string) = ''
	@paragrph(name:string, title:string) = ''
	@dontinclude(file_name:string) = ''
	@include(file_name:string) = ''
	@includelineno(file_name:string) = ''
	@line(pattern:string) = ''
	@skip(pattern:string) = ''
	@skipline(pattern:string) = ''
	@snippet(file_name:string, block_id:string) = ''
	@until(pattern:string) = ''
	@verbinclude(file_name:string) = ''
	@htmlinclude(file_name:string) = ''
	@latexinclude(file_name:string) = ''
	@a(word:string) = ''
	@arg(description:string) = ''
	@b(word:string) = ''
	@c(word:string) = ''
	@code(word:string) = ''
	@copydoc(link_object:string) = ''
	@copybrief(link_object:string) = ''
	@copydetails(link_object:string) = ''
	@docbookonly() = ''
	@dot(caption:string, size:string) = ''
	@msc(caption:string, size:string) = ''
	@startuml(file:string, caption:string, size:string) = ''
	@dotfile(file:string, caption:string, size:string) = ''
	@mscfile(file:string, caption:string, size:string) = ''
	@diafile(file:string, caption:string, size:string) = ''
	@e(word:string) = ''
	@em(word:string) = ''
	@endcode() = ''
	@endcodebookonly() = ''
	@enddot() = ''
	@enduml() = ''
	@endhtmlonly() = ''
	@endlatexonly() = ''
	@endmanonly() = ''
	@endrtfonly() = ''
	@endverbatim() = ''
	@endxmlonly() = ''
	// @f$() = ''
	// @f[() = ''
	// @f]() = ''
	// @f}() = ''
	@htmlonly(block:string) = ''
	@image(format:string, file:string, caption:string, size:string) = ''
	@latexonly() = ''
	@manonly() = ''
	@li(description:string) = ''
	@n() = ''
	@p(word:string) = ''
	@rtfonly() = ''
	@verbatim() = ''
	@xmlonly() = ''
	// @\() = ''
	// @@() = ''
	// @~(language_id:string) = ''
	// @&() = ''
	// @$() = ''
	// @#() = ''
	// @<() = ''
	// @>() = ''
	// @%() = ''
	// @"() = ''
	// @.() = ''
	// @::() = ''
	// @|() = ''
	// @--() = ''
	// @---() = ''
	// @{() = ''
	// @}() = ''
	@bar() = 'bar'
	@foo_3(a, b, c) = 'foo' + a + b + c
	OnCommand(cmdName:string, args[]:string) = ''
}
//parser = Parser()

testCases.head(1).each {|testCase, idx|
	printf('case #%d\n', idx + 1)
	Parser().parse(testCase.reader())
	println()
}

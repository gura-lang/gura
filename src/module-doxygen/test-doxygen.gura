#!/usr/bin/env gura
import(helper.test) {*}
import(doxygen)

TestCaseInfo = struct(title:string, doc:string)

testCaseInfos = []

testcase(title:string, doc:string):void = {
	testCaseInfos.add(TestCaseInfo(title, doc))
}

testcase('blank block comment', R'''
/**/
''')

testcase('blank line comment', R'''
//
''')

testcase('simple doxygen block', R'''
/**
*/

/*!
*/

/** test1
*/

/*! test1
*/

/**
 test2
*/

/*!
 test2
*/

/**
test3 */

/*!
test3 */
''')

testcase('simple doxygen line', R'''
//!

///

//! test1

/// test1
''')

testcase('multiline', R'''	
/**
line.1
line.2
line.3
*/
''')

testcase('blank line test', R'''
/*!
 * abcdefg
 * hijklmn
 *
 * opqrstu
 */
''')

testcase('split comments', R'''
/*!
 abcdef
 */
/*!
 ghijkl
 */
/*!
 mnopqr
 */
/*!
 stuvwxyz
 */
''')

testcase('punctuation', R'''
/*!
\a 1st.2nd \a 1st. 2nd
\a 1st,2nd \a 1st, 2nd
\a 1st;2nd \a 1st; 2nd
\a 1st?2nd \a 1st? 2nd
\a 1st!2nd \a 1st! 2nd
*/
''')

testcase('quotation', R'''
/*!
\a word
\a "word"
\a "multi words"
*/
''')
/*

testcase('extracted', R'''
\page page1 A documentation page
\tableofcontents
Leading text.
\section sec An example section
This page contains the subsections \ref subsection1 and \ref subsection2.
For more info see page \ref page2.
\subsection subsection1 The first subsection
Text.
\subsection subsection2 The second subsection
More text.
''')

testcase('', R'''
/*! \page page1 A documentation page
  \tableofcontents
  Leading text.
  \section sec An example section
  This page contains the subsections \ref subsection1 and \ref subsection2.
  For more info see page \ref page2.
  \subsection subsection1 The first subsection
  Text.
  \subsection subsection2 The second subsection
  More text.
*/
/*! \page page2 Another page
  Even more info.
*/
''')

testcase('', R'''
/*! \page page1 A documentation page
  \tableofcontents
  Leading text.
  \section sec An example section
  This page contains the subsections \ref subsection1 and \ref subsection2.
  For more info see page \ref page2.
  \subsection subsection1 The first subsection
  Text.
  \subsection subsection2 The second subsection
  More text.
*/
/*! \page page2 Another page
  Even more info.
*/
''')

testcase('', R'''
/*!
  \ref section1 should be referenced.
  \ref section1 "title" should be referenced.
 */
''')


testcase('', R'''
/*! \class Overload_Test
 *  \brief A short description.
 *   
 *  More text.
 */
/*! \fn void Overload_Test::drawRect(int x,int y,int w,int h)
 * This command draws a rectangle with a left upper corner at ( \a x , \a y ),
 * width \a w and height \a h. 
 */
/*!
 * \overload void Overload_Test::drawRect(const Rect &r)
 */
''')

testcase('', R'''
/*! \class Fn_Test
 * \brief Fn_Test class.
 *
 * Details about Fn_Test.
 */
/*! \fn const char *Fn_Test::member(char c,int n) 
 *  \brief A member function.
 *  \param c a character.
 *  \param n an integer.
 *  \exception std::out_of_range parameter is out of range.
 *  \return a character pointer.
 */
''')

testcase('', R'''
/** \file file.h
 * A brief file description.
 * A more elaborated file description.
 */
/**
 * A global integer value.
 * More details about this value.
 */
extern int globalValue;
''')

testcase('', R'''
/** A Example_Test class.
 *  More details about this class.
 */
class Example_Test
{
  public:
    /** An example member function.
     *  More details about this function.
     */
    void example();
};
void Example_Test::example() {}
/** \example example_test.cpp
 * This is an example of how to use the Example_Test class.
 * More details about this example.
 */
''')

testcase('', R'''
/*! \mainpage My Personal Index Page
 *
 * \section intro_sec Introduction
 *
 * This is the introduction.
 *
 * \section install_sec Installation
 *
 * \subsection step1 Step 1: Opening the box
 *
 * etc...
 */
''')


testcase('', R'''
/*! \fn const char *Fn_Test::member(char c,int n) 
 *  \brief A member function.
 *  \param c a character.
 *  \param n an integer.
 *  \exception std::out_of_range parameter is out of range.
 *  \return a character pointer.
 */
''')

testcase('', R'''
/** \example example_test.cpp
 * This is an example of how to use the Example_Test class.
 * More details about this example.
 */
''')

testcase('', R'''
/*! \class Enum_Test
 * The class description.
 */
''')

testcase('', R'''
/*! \class Enum_Test
 * The class description.
 */
/*! \enum Enum_Test::TEnum
 * A description of the enum type.
 */
/*! \var Enum_Test::TEnum Enum_Test::Val1
 * The description of the first enum value.
 */
''')

testcase('', R'''
/*! \file define.h
    \brief testing defines
    
    This is to test the documentation of defines.
*/

/*!
  \def MAX(x,y)
  Computes the maximum of \a x and \a y.
*/
''')

testcase('', R'''
/*! \class Test class.h "inc/class.h"
 *  \brief This is a test class.
 *
 * Some details about the Test class.
 */
''')

testcase('', R'''
/**
 See \l{SomeClass,Some Text} for more information.
 */

/**
 This is a \Bold{bold \Emph{and} Emphasized} text fragment.
 */
''')

testcase('', R'''
/*!
  \strong{hoge}
  \bar
  \foo{arg1,arg2,arg3}
  \param a an integer argument \b bold \b bold2.
  \param s a constant character pointer.
  \return The test results
  \sa QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()
 */	
''')

testcase('', R'''
/*! \class Test class.h "inc/class.h"
 *  \brief This is a test class.
 *
 * Some details about the Test class.
 */
''')

testcase('', R'''
/*! \file define.h
    \brief testing defines
    
    This is to test the documentation of defines.
*/

/*!
  \def MAX(x,y)
  Computes the maximum of \a x and \a y.
*/

/*! 
   Computes the absolute value of its argument \a x.
*/
''')

testcase('', R'''
/*! \page example
 *  \dontinclude include_test.cpp
 *  Our main function starts like this:
 *  \skip main
 *  \until {
 *  First we create an object \c t of the Include_Test class.
 *  \skipline Include_Test
 *  Then we call the example member function 
 *  \line example
 *  After that our little test routine ends.
 *  \line }
 */
''')

testcase('', R'''
/*!
  \param a an integer argument.
  \param s a constant character pointer.
  \return The test results
  \sa QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()
 */	
''')

testcase('', R'''
/*!
 * \param a an integer argument.
 * \param s a constant character pointer.
 * \return The test results
 * \sa QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()
 */	
''')

*/

Parser = class(doxygen.parser) {
	__init__(extractedFlag:boolean => false) = {|extractedFlag|}
	@addtogroup(name:string, title:string) = '@addtogroup{' + 'name:' + name.escape():surround + ',title:' + title.escape():surround + '}\n'
	@callgraph() = '@callgraph{' + '}'
	@hidecallgrph() = '@hidecallgrph{' + '}'
	@callergraph() = '@callergraph{' + '}'
	@hidecallergraph() = '@hidecallergraph{' + '}'
	@category(name:string, header_file:string, header_name:string) = '@category{' + 'name:' + name.escape():surround + ',header_file:' + header_file.escape():surround + ',header_name:' + header_name.escape():surround + '}'
	@class(name:string, header_file:string, header_name:string) = '@class{' + 'name:' + name.escape():surround + ',header_file:' + header_file.escape():surround + ',header_name:' + header_name.escape():surround + '}'
	@def(name:string) = '@def{' + 'name:' + name.escape():surround + '}'
	@defgroup(name:string, group_title:string) = '@defgroup{' + 'name:' + name.escape():surround + ',group_title:' + group_title.escape():surround + '}\n'
	@dir(path_fragment:string) = '@dir{' + 'path_fragment:' + path_fragment.escape():surround + '}'
	@enum(name:string) = '@enum{' + 'name:' + name.escape():surround + '}'
	@example(file_name:string) = '@example{' + 'file_name:' + file_name.escape():surround + '}'
	@endinternal() = '@endinternal{' + '}'
	@extends(name:string) = '@extends{' + 'name:' + name.escape():surround + '}'
	@file(name:string) = '@file{' + 'name:' + name.escape():surround + '}'
	@fn(declaration:string) = '@fn{' + 'declaration:' + declaration.escape():surround + '}\n'
	@headerfile(header_file:string, header_name:string) = '@headerfile{' + 'header_file:' + header_file.escape():surround + ',header_name:' + header_name.escape():surround + '}'
	@hideinitializer() = '@hideinitializer{' + '}'
	@idlexcept(name:string) = '@idlexcept{' + 'name:' + name.escape():surround + '}'
	@implements(name:string) = '@implements{' + 'name:' + name.escape():surround + '}'
	@ingroup(groupname:string) = '@ingroup{' + 'groupname:' + groupname.escape():surround + '}'
	@interface(name:string, header_file:string, header_name:string) = '@interface{' + 'name:' + name.escape():surround + ',header_file:' + header_file.escape():surround + ',header_name:' + header_name.escape():surround + '}'
	@internal() = '@internal{' + '}'
	@mainpage(title:string) = '@mainpage{' + 'title:' + title.escape():surround + '}\n'
	@memberof(name:string) = '@memberof{' + 'name:' + name.escape():surround + '}'
	@name(header:string) = '@name{' + 'header:' + header.escape():surround + '}\n'
	@namespace(name:string) = '@namespace{' + 'name:' + name.escape():surround + '}'
	@nosubgrouping() = '@nosubgrouping{' + '}'
	@overload(declaration:string) = '@overload{' + 'declaration:' + declaration.escape():surround + '}\n'
	@package(name:string) = '@package{' + 'name:' + name.escape():surround + '}'
	@page(name:string, title:string) = '@page{' + 'name:' + name.escape():surround + ',title:' + title.escape():surround + '}\n'
	@private() = '@private{' + '}'
	@privatesection() = '@privatesection{' + '}'
	@property(name:string) = '@property{' + 'name:' + name.escape():surround + '}\n'
	@protected() = '@protected{' + '}'
	@protectedsection() = '@protectedsection{' + '}'
	@protocol(name:string, header_file:string, header_name:string) = '@protocol{' + 'name:' + name.escape():surround + ',header_file:' + header_file.escape():surround + ',header_name:' + header_name.escape():surround + '}'
	@public() = '@public{' + '}'
	@publicsection() = '@publicsection{' + '}'
	@pure() = '@pure{' + '}'
	@relates(name:string) = '@relates{' + 'name:' + name.escape():surround + '}'
	@related(name:string) = '@related{' + 'name:' + name.escape():surround + '}'
	@relatesalso(name:string) = '@relatesalso{' + 'name:' + name.escape():surround + '}'
	@relatedalso(name:string) = '@relatedalso{' + 'name:' + name.escape():surround + '}'
	@showinitializer() = '@showinitializer{' + '}'
	@static() = '@static{' + '}'
	@struct(name:string, header_file:string, header_name:string) = '@struct{' + 'name:' + name.escape():surround + ',header_file:' + header_file.escape():surround + ',header_name:' + header_name.escape():surround + '}'
	@typedef(declaration:string) = '@typedef{' + 'declaration:' + declaration.escape():surround + '}\n'
	@union(name:string, header_file:string, header_name:string) = '@union{' + 'name:' + name.escape():surround + ',header_file:' + header_file.escape():surround + ',header_name:' + header_name.escape():surround + '}'
	@var(declaration:string) = '@var{' + 'declaration:' + declaration.escape():surround + '}\n'
	@vhdlflow(title_for_the_flow_chart:string) = '@vhdlflow{' + 'title_for_the_flow_chart:' + title_for_the_flow_chart.escape():surround + '}\n'
	@weakgroup(name:string, title:string) = '@weakgroup{' + 'name:' + name.escape():surround + ',title:' + title.escape():surround + '}\n'
	@attention(text:string) = '@attention{' + 'text:' + text.escape():surround + '}\n'
	@author(list_of_authors:string) = '@author{' + 'list_of_authors:' + list_of_authors.escape():surround + '}\n'
	@authors(list_of_authors:string) = '@authors{' + 'list_of_authors:' + list_of_authors.escape():surround + '}\n'
	@brief(description:string) = '@brief{' + 'description:' + description.escape():surround + '}\n'
	@bug(description:string) = '@bug{' + 'description:' + description.escape():surround + '}\n'
	@cond(section_label:string) = '@cond{' + 'section_label:' + section_label.escape():surround + '}\n'
	@copyright(description:string) = '@copyright{' + 'description:' + description.escape():surround + '}\n'
	@date(description:string) = '@date{' + 'description:' + description.escape():surround + '}\n'
	@deprecated(description:string) = '@deprecated{' + 'description:' + description.escape():surround + '}\n'
	@details(description:string) = '@details{' + 'description:' + description.escape():surround + '}\n'
	@else() = '@else{' + '}\n'
	@elseif(section_label:string) = '@elseif{' + 'section_label:' + section_label.escape():surround + '}\n'
	@endcond() = '@endcond{' + '}\n'
	@endif() = '@endif{' + '}\n'
	@exception(exception_object:string, description:string) = '@exception{' + 'exception_object:' + exception_object.escape():surround + ',description:' + description.escape():surround + '}\n'
	@if(section_label:string) = '@if{' + 'section_label:' + section_label.escape():surround + '}\n'
	@ifnot(section_label:string) = '@ifnot{' + 'section_label:' + section_label.escape():surround + '}\n'
	@invariant(description:string) = '@invariant{' + 'description:' + description.escape():surround + '}\n'
	@note(text:string) = '@note{' + 'text:' + text.escape():surround + '}\n'
	@par(paragraph_title:string, paragraph:string) = '@par{' + 'paragraph_title:' + paragraph_title.escape():surround + ',paragraph:' + paragraph.escape():surround + '}\n'
	@param(dir:string, name:string, description:string) = '@param{' + 'dir:' + dir.escape():surround + ',name:' + name.escape():surround + ',description:' + description.escape():surround + '}\n'
	@parblock() = '@parblock{' + '}\n'
	@endparblock() = '@endparblock{' + '}\n'
	@tparam(name:string, description:string) = '@tparam{' + 'name:' + name.escape():surround + ',description:' + description.escape():surround + '}\n'
	@post(description:string) = '@post{' + 'description:' + description.escape():surround + '}\n'
	@pre(description:string) = '@pre{' + 'description:' + description.escape():surround + '}\n'
	@remark(text:string) = '@remark{' + 'text:' + text.escape():surround + '}\n'
	@remarks(text:string) = '@remarks{' + 'text:' + text.escape():surround + '}\n'
	@result(description:string) = '@result{' + 'description:' + description.escape():surround + '}\n'
	@return(description:string) = '@return{' + 'description:' + description.escape():surround + '}\n'
	@returns(description:string) = '@returns{' + 'description:' + description.escape():surround + '}\n'
	@retval(return_value:string, description:string) = '@retval{' + 'return_value:' + return_value.escape():surround + ',description:' + description.escape():surround + '}\n'
	@sa(references:string) = '@sa{' + 'references:' + references.escape():surround + '}\n'
	@see(references:string) = '@see{' + 'references:' + references.escape():surround + '}\n'
	@short(description:string) = '@short{' + 'description:' + description.escape():surround + '}\n'
	@since(text:string) = '@since{' + 'text:' + text.escape():surround + '}\n'
	@test(paragraph:string) = '@test{' + 'paragraph:' + paragraph.escape():surround + '}\n'
	@throw(exception_object:string, description:string) = '@throw{' + 'exception_object:' + exception_object.escape():surround + ',description:' + description.escape():surround + '}\n'
	@throws(exception_object:string, description:string) = '@throws{' + 'exception_object:' + exception_object.escape():surround + ',description:' + description.escape():surround + '}\n'
	@todo(paragraph:string) = '@todo{' + 'paragraph:' + paragraph.escape():surround + '}\n'
	@version(version_number:string) = '@version{' + 'version_number:' + version_number.escape():surround + '}\n'
	@warning(message:string) = '@warning{' + 'message:' + message.escape():surround + '}\n'
	@xrefitem(key:string, heading:string, list_title:string, text:string) = '@xrefitem{' + 'key:' + key.escape():surround + ',heading:' + heading.escape():surround + ',list_title:' + list_title.escape():surround + ',text:' + text.escape():surround + '}\n'
	@addindex(text:string) = '@addindex{' + 'text:' + text.escape():surround + '}\n'
	@anchor(word:string) = '@anchor{' + 'word:' + word.escape():surround + '}'
	@cite(label:string) = '@cite{' + 'label:' + label.escape():surround + '}'
	@endlink() = '@endlink{' + '}'
	@link(line_object:string) = '@link{' + 'line_object:' + line_object.escape():surround + '}'
	@ref(name:string, text:string) = '@ref{' + 'name:' + name.escape():surround + ',text:' + text.escape():surround + '}'
	@refitem(name:string) = '@refitem{' + 'name:' + name.escape():surround + '}'
	@secreflist() = '@secreflist{' + '}'
	@endsecreflist() = '@endsecreflist{' + '}'
	@subpage(name:string, text:string) = '@subpage{' + 'name:' + name.escape():surround + ',text:' + text.escape():surround + '}'
	@tableofcontents() = '@tableofcontents{' + '}'
	@section(name:string, title:string) = '@section{' + 'name:' + name.escape():surround + ',title:' + title.escape():surround + '}\n'
	@subsection(name:string, title:string) = '@subsection{' + 'name:' + name.escape():surround + ',title:' + title.escape():surround + '}\n'
	@subsubsection(name:string, title:string) = '@subsubsection{' + 'name:' + name.escape():surround + ',title:' + title.escape():surround + '}\n'
	@paragrph(name:string, title:string) = '@paragrph{' + 'name:' + name.escape():surround + ',title:' + title.escape():surround + '}\n'
	@dontinclude(file_name:string) = '@dontinclude{' + 'file_name:' + file_name.escape():surround + '}'
	@include(file_name:string) = '@include{' + 'file_name:' + file_name.escape():surround + '}'
	@includelineno(file_name:string) = '@includelineno{' + 'file_name:' + file_name.escape():surround + '}'
	@line(pattern:string) = '@line{' + 'pattern:' + pattern.escape():surround + '}\n'
	@skip(pattern:string) = '@skip{' + 'pattern:' + pattern.escape():surround + '}\n'
	@skipline(pattern:string) = '@skipline{' + 'pattern:' + pattern.escape():surround + '}\n'
	@snippet(file_name:string, block_id:string) = '@snippet{' + 'file_name:' + file_name.escape():surround + ',block_id:' + block_id.escape():surround + '}\n'
	@until(pattern:string) = '@until{' + 'pattern:' + pattern.escape():surround + '}\n'
	@verbinclude(file_name:string) = '@verbinclude{' + 'file_name:' + file_name.escape():surround + '}'
	@htmlinclude(file_name:string) = '@htmlinclude{' + 'file_name:' + file_name.escape():surround + '}'
	@latexinclude(file_name:string) = '@latexinclude{' + 'file_name:' + file_name.escape():surround + '}'
	@a(word:string) = '@a{' + 'word:' + word.escape():surround + '}'
	@arg(description:string) = '@arg{' + 'description:' + description.escape():surround + '}\n'
	@b(word:string) = '@b{' + 'word:' + word.escape():surround + '}'
	@c(word:string) = '@c{' + 'word:' + word.escape():surround + '}'
	@code(word:string) = '@code{' + 'word:' + word.escape():surround + '}'
	@copydoc(link_object:string) = '@copydoc{' + 'link_object:' + link_object.escape():surround + '}'
	@copybrief(link_object:string) = '@copybrief{' + 'link_object:' + link_object.escape():surround + '}'
	@copydetails(link_object:string) = '@copydetails{' + 'link_object:' + link_object.escape():surround + '}'
	@docbookonly() = '@docbookonly{' + '}'
	@dot(caption:string, size:string) = '@dot{' + 'caption:' + caption.escape():surround + ',size:' + size.escape():surround + '}\n'
	@msc(caption:string, size:string) = '@msc{' + 'caption:' + caption.escape():surround + ',size:' + size.escape():surround + '}\n'
	@startuml(file:string, caption:string, size:string) = '@startuml{' + 'file:' + file.escape():surround + ',caption:' + caption.escape():surround + ',size:' + size.escape():surround + '}\n'
	@dotfile(file:string, caption:string, size:string) = '@dotfile{' + 'file:' + file.escape():surround + ',caption:' + caption.escape():surround + ',size:' + size.escape():surround + '}\n'
	@mscfile(file:string, caption:string, size:string) = '@mscfile{' + 'file:' + file.escape():surround + ',caption:' + caption.escape():surround + ',size:' + size.escape():surround + '}\n'
	@diafile(file:string, caption:string, size:string) = '@diafile{' + 'file:' + file.escape():surround + ',caption:' + caption.escape():surround + ',size:' + size.escape():surround + '}\n'
	@e(word:string) = '@e{' + 'word:' + word.escape():surround + '}'
	@em(word:string) = '@em{' + 'word:' + word.escape():surround + '}'
	@endcode() = '@endcode{' + '}'
	@endcodebookonly() = '@endcodebookonly{' + '}'
	@enddot() = '@enddot{' + '}'
	@enduml() = '@enduml{' + '}'
	@endhtmlonly() = '@endhtmlonly{' + '}'
	@endlatexonly() = '@endlatexonly{' + '}'
	@endmanonly() = '@endmanonly{' + '}'
	@endrtfonly() = '@endrtfonly{' + '}'
	@endverbatim() = '@endverbatim{' + '}'
	@endxmlonly() = '@endxmlonly{' + '}'
	// @f$() = ''
	// @f[() = ''
	// @f]() = ''
	// @f}() = ''
	@htmlonly(block:string) = '@htmlonly{' + 'block:' + block.escape():surround + '}'
	@image(format:string, file:string, caption:string, size:string) = '@image{' + 'format:' + format.escape():surround + ',file:' + file.escape():surround + ',caption:' + caption.escape():surround + ',size:' + size.escape():surround + '}\n'
	@latexonly() = '@latexonly{' + '}'
	@manonly() = '@manonly{' + '}'
	@li(description:string) = '@li{' + 'description:' + description.escape():surround + '}\n'
	@n() = '@n{' + '}'
	@p(word:string) = '@p{' + 'word:' + word.escape():surround + '}'
	@rtfonly() = '@rtfonly{' + '}'
	@verbatim() = '@verbatim{' + '}'
	@xmlonly() = '@xmlonly{' + '}'
	// @\() = ''
	// @@() = ''
	// @~(language_id:string) = ''
	// @&() = ''
	// @$() = ''
	// @#() = ''
	// @<() = ''
	// @>() = ''
	// @%() = ''
	// @"() = ''
	// @.() = ''
	// @::() = ''
	// @|() = ''
	// @--() = ''
	// @---() = ''
	// @{() = ''
	// @}() = ''
	//--------------------------------------------------------------------------
	@l_1(name) = '@ref ${name}'.embed()
	@l_2(name, text) = '@ref ${name} "${text}"'.embed()
	@Bold_1(str) = '<b>${str}</b>'.embed()
	@Emph_1(str) = '<em>${str}</em>'.embed()
	@bar() = 'bar'
	@strong_1(a) = '@b ' + a
	@foo_3(a, b, c) = 'foo: %s,%s,%s' % [a, b, c]
	@customA_1(a) = 'customA ' + a
	@customB_1(a) = 'customB ' + a
	OnCommand(cmdName:string, args[]:string) = '(unknown %s %s)' % [cmdName, args.join(',')]
}

testCaseInfos.each {|testCaseInfo, idx|
	(idx > 0) && println()
	printf('======== #%d', idx + 1)
	!testCaseInfo.title.isempty() && printf(' %s', testCaseInfo.title)
	println(' ========')
	extractedFlag = testCaseInfo.doc.isempty() || testCaseInfo.doc[0] != '/'
	str = Parser(extractedFlag).parse(testCaseInfo.doc.reader())
	print(str)
	!str.endswith('\n') && println()
	println('--end--')
}

#!/usr/bin/env gura
import(helper.test)
import(re)
import(doxygen)

testcase = helper.test.testcase

TestdocInfo = struct(title:string, doc:string)

testdocInfos = []

parsedoc(doc:string, aliases:doxygen.aliases:nil, extractedFlag:boolean => false) =
{
	doxygen.document(doc.reader(), aliases, extractedFlag) {|doc|
		doc.structures {|structure|
			println(cond(structure.aftermember, '----[after member]', '----'))
			structure.elems()::print(1)
		}
	}
}

testdoc(title:string, doc:string):void =
{
	testdocInfos.add(TestdocInfo(title, doc))
}

testcase('configuration test - 1')
{
	cfg:doxygen.configuration = bR'''
	ALIASES  = "english=\if english" \
           "endenglish=\endif" \
           "dutch=\if dutch" \
           "enddutch=\endif"
	'''
 	cfg.print()
	cfg.aliases.print()
}

testcase('configuration test - 2')
{
	cfg:doxygen.configuration = bR'''
	ALIASES  = english="\if english" \
           endenglish="\endif" \
           dutch="\if dutch" \
           enddutch="\endif"
	'''
 	cfg.print()
	cfg.aliases.print()
	doc = R'''
	/*! \english
	*  This is English.
	*  \endenglish
	*  \dutch
	*  Dit is Nederlands.
	*  \enddutch
	*/
	'''
	parsedoc(doc, cfg)
}

testdoc('blank block comment', R'''
/**/
''')

testdoc('blank line comment', R'''
//
''')

testdoc('simple doxygen block', R'''
/**
*/

/*!
*/

/** test1
*/

/*! test1
*/

/**
 test2
*/

/*!
 test2
*/

/**
test3 */

/*!
test3 */
''')

testdoc('simple doxygen line', R'''
//!


///


//! test1


/// test2
''')

testdoc('multiline', R'''
/**
line.1
line.2
line.3
*/
''')

testdoc('blank line test', R'''
/*!
 * abcdefg
 * hijklmn
 *
 * opqrstu
 */
''')

testdoc('split comments', R'''
/*!
 abcdef
 */
/*!
 ghijkl
 */
/*!
 mnopqr
 */
/*!
 stuvwxyz
 */
''')

testdoc('punctuation', R'''
/*!
\a 1st.2nd \a 1st. 2nd
\a 1st,2nd \a 1st, 2nd
\a 1st;2nd \a 1st; 2nd
\a 1st?2nd \a 1st? 2nd
\a 1st!2nd \a 1st! 2nd
*/
''')

testdoc('quotation', R'''
/*!
\a word
\a "word"
\a "multi words"
*/
''')

testdoc('various styles of comment block', R'''
/**
 * ... /** style, asterisk at each line ...
 * line1
 * line2
 *   line3
 * line4
 */

/*!
 * ... /*! style, asterisk at each line  ...
 * line1
 * line2
 *   line3
 * line4
 */

/**
 ... /** style, no asterisk at each line ...
 line1
 line2
   line3
 line4
*/

/*!
 ... /*! style, no asterisk at each line ...
 line1
 line2
   line3
 line4
*/

///
/// ... /// style ...
/// line1
/// line2
///   line3
/// line4
///

//!
//! ... //! style ...
//! line1
//! line2
//!   line3
//! line4
//!

/********************************************//**
 * ... /** style, surrounded by a series of asterisks ...
 * line1
 * line2
 *   line3
 * line4
 ***********************************************/

/////////////////////////////////////////////////
/// ... /// style, surrounded by a series of slashes ...
/// line1
/// line2
///   line3
/// line4
/////////////////////////////////////////////////
''')

testdoc('test of @addtogroup', R'''
/*! \addtogroup mygrp
 *  Additional documentation for group 'mygrp'
 */

/*!
 *  A function
 */
void func1()
{
}

/*! Another function */
void func2()
{
}
''')

testdoc('test of @class', R'''
/* A dummy class */
class Test
{
};
/*! \class Test class.h "inc/class.h"
 *  \brief This is a test class.
 *
 * Some details about the Test class.
 */
''')

testdoc('test of @def', R'''
/*! \file define.h
    \brief testing defines
    
    This is to test the documentation of defines.
*/
/*!
  \def MAX(x,y)
  Computes the maximum of \a x and \a y.
*/
/*! 
   Computes the absolute value of its argument \a x.
*/
#define ABS(x) (((x)>0)?(x):-(x))
#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)>(y)?(y):(x)) 
        /*!< Computes the minimum of \a x and \a y. */
''')

testdoc('test of @enum', R'''
/*! \class Enum_Test
 * The class description.
 */
/*! \enum Enum_Test::TEnum
 * A description of the enum type.
 */
/*! \var Enum_Test::TEnum Enum_Test::Val1
 * The description of the first enum value.
 */
 ''')

testdoc('test of @example', R'''
/** A Example_Test class.
 *  More details about this class.
 */
class Example_Test
{
  public:
    /** An example member function.
     *  More details about this function.
     */
    void example();
};
void Example_Test::example() {}
/** \example example_test.cpp
 * This is an example of how to use the Example_Test class.
 * More details about this example.
 */
''')

testdoc('test of @file', R'''
/** \file file.h
 * A brief file description.
 * A more elaborated file description.
 */
/**
 * A global integer value.
 * More details about this value.
 */
extern int globalValue;
''')

testdoc('test of @fn', R'''
/*! \class Fn_Test
 * \brief Fn_Test class.
 *
 * Details about Fn_Test.
 */
/*! \fn const char *Fn_Test::member(char c,int n) 
 *  \brief A member function.
 *  \param c a character.
 *  \param n an integer.
 *  \exception std::out_of_range parameter is out of range.
 *  \return a character pointer.
 */
''')

testdoc('test of @headerfile', R'''
/*!
  \headerfile test.h "test.h"
  \headerfile test.h ""
  \headerfile ""
*/
''')

testdoc('test of @mainpage', R'''
/*! \mainpage My Personal Index Page
 *
 * \section intro_sec Introduction
 *
 * This is the introduction.
 *
 * \section install_sec Installation
 *
 * \subsection step1 Step 1: Opening the box
 *
 * etc...
 */
''')

testdoc('', R'''
E.g. if you have two event handlers @c A and @c B and a wxWindow instance
@c W and you call:
@code
    W->PushEventHandler(A);
    W->PushEventHandler(B);
@endcode
you will end up with the following situation:
    @image html overview_events_winstack.png
''')

testdoc('multi structures', R'''
/*! \file structcmd.h
    \brief A Documented file.
    
    Details.
*/
/*! \def MAX(a,b)
    \brief A macro that returns the maximum of \a a and \a b.
   
    Details.
*/
/*! \var typedef unsigned int UINT32
    \brief A type definition for a .
    
    Details.
*/
/*! \var int errno
    \brief Contains the last error code.
    \warning Not thread safe!
*/
/*! \fn int open(const char *pathname,int flags)
    \brief Opens a file descriptor.
    \param pathname The name of the descriptor.
    \param flags Opening flags.
*/
/*! \fn int close(int fd)
    \brief Closes the file descriptor \a fd.
    \param fd The descriptor to close.
*/
/*! \fn size_t write(int fd,const char *buf, size_t count)
    \brief Writes \a count bytes from \a buf to the filedescriptor \a fd.
    \param fd The descriptor to write to.
    \param buf The data buffer to write.
    \param count The number of bytes to write.
*/
/*! \fn int read(int fd,char *buf,size_t count)
    \brief Read bytes from a file descriptor.
    \param fd The descriptor to read from.
    \param buf The buffer to read into.
    \param count The number of bytes to read.
*/
''')

testdoc('various ways to describe brief', R'''
/*! \brief Brief description.
 *         Brief description continued.
 *
 *  Detailed description starts here.
 */

/// Brief description.
/** Detailed description. */

/// Brief description.
/** Detailed description. */

//! Brief description.

//! Detailed description 
//! starts here.

//! Brief description, which is
//! really a detailed description since it spans multiple lines.
/*! Another detailed description!
 */
''')

/*
testdoc('', R'''
''')
*/

println()
testdocInfos.each {|testdocInfo, idx|
	helper.test.printtitle(idx, testdocInfo.title)
	extractedFlag = testdocInfo.doc.isempty() || !testdocInfo.doc.match(r'\s*/')
	parsedoc(testdocInfo.doc, nil, extractedFlag)
	println('--end--')
}

// Don't edit this file. This has been generated by Functions.cpp.gura.
#include "stdafx.h"

Gura_BeginModuleScope(glut)

class FunctionPack {
private:
	AutoPtr<Environment> _pEnv;
	Signal _sig;
	AutoPtr<Function> _pFunc;
public:
	inline FunctionPack() {}
	inline void SetFunc(Environment &env, Signal sig, Function *pFunc) {
		_pEnv.reset(new Environment(env));
		_sig = sig;
		_pFunc.reset(pFunc);
	}
	inline Value Eval(Args &args) {
		if (_pFunc.IsNull()) return Value::Null;
		Value result = _pFunc->Eval(*_pEnv, _sig, args);
		if (_sig.IsSignalled()) {
			_sig.PrintSignal(*_pEnv->GetConsoleErr());
			exit(1);
		}
		return result;
	}
};

struct Context {
	FunctionPack funcPackOnWMClose;
	FunctionPack funcPackOnMenu;
	FunctionPack funcPackOnDisplay;
	FunctionPack funcPackOnReshape;
	FunctionPack funcPackOnKeyboard;
	FunctionPack funcPackOnMouse;
	FunctionPack funcPackOnMotion;
	FunctionPack funcPackOnPassiveMotion;
	FunctionPack funcPackOnEntry;
	FunctionPack funcPackOnVisibility;
	FunctionPack funcPackOnIdle;
	FunctionPack funcPackOnTimer;
	FunctionPack funcPackOnMenuState;
	FunctionPack funcPackOnSpecial;
	FunctionPack funcPackOnSpaceballMotion;
	FunctionPack funcPackOnSpaceballRotate;
	FunctionPack funcPackOnSpaceballButton;
	FunctionPack funcPackOnButtonBox;
	FunctionPack funcPackOnDials;
	FunctionPack funcPackOnTabletMotion;
	FunctionPack funcPackOnTabletButton;
	FunctionPack funcPackOnMenuStatus;
	FunctionPack funcPackOnOverlayDisplay;
	FunctionPack funcPackOnWindowStatus;
	FunctionPack funcPackOnKeyboardUp;
	FunctionPack funcPackOnSpecialUp;
	FunctionPack funcPackOnJoystick;
};

Context *g_pContext = NULL;

void OnWMClose()
{
	AutoPtr<Args> pArgs(new Args());
	g_pContext->funcPackOnWMClose.Eval(*pArgs);
}

void OnMenu(int value)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValue(Value(value));
	g_pContext->funcPackOnMenu.Eval(*pArgs);
}

void OnDisplay(void)
{
	AutoPtr<Args> pArgs(new Args());
	g_pContext->funcPackOnDisplay.Eval(*pArgs);
}

void OnReshape(int width, int height)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(width), Value(height));
	g_pContext->funcPackOnReshape.Eval(*pArgs);
}

void OnKeyboard(unsigned char key, int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(key), Value(x), Value(y));
	g_pContext->funcPackOnKeyboard.Eval(*pArgs);
}

void OnMouse(int button, int state, int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(button), Value(state), Value(x), Value(y));
	g_pContext->funcPackOnMouse.Eval(*pArgs);
}

void OnMotion(int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(x), Value(y));
	g_pContext->funcPackOnMotion.Eval(*pArgs);
}

void OnPassiveMotion(int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(x), Value(y));
	g_pContext->funcPackOnPassiveMotion.Eval(*pArgs);
}

void OnEntry(int state)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValue(Value(state));
	g_pContext->funcPackOnEntry.Eval(*pArgs);
}

void OnVisibility(int state)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValue(Value(state));
	g_pContext->funcPackOnVisibility.Eval(*pArgs);
}

void OnIdle(void)
{
	AutoPtr<Args> pArgs(new Args());
	g_pContext->funcPackOnIdle.Eval(*pArgs);
}

void OnTimer(int value)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValue(Value(value));
	g_pContext->funcPackOnTimer.Eval(*pArgs);
}

void OnMenuState(int state)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValue(Value(state));
	g_pContext->funcPackOnMenuState.Eval(*pArgs);
}

void OnSpecial(int key, int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(key), Value(x), Value(y));
	g_pContext->funcPackOnSpecial.Eval(*pArgs);
}

void OnSpaceballMotion(int x, int y, int z)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(x), Value(y), Value(z));
	g_pContext->funcPackOnSpaceballMotion.Eval(*pArgs);
}

void OnSpaceballRotate(int x, int y, int z)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(x), Value(y), Value(z));
	g_pContext->funcPackOnSpaceballRotate.Eval(*pArgs);
}

void OnSpaceballButton(int button, int state)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(button), Value(state));
	g_pContext->funcPackOnSpaceballButton.Eval(*pArgs);
}

void OnButtonBox(int button, int state)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(button), Value(state));
	g_pContext->funcPackOnButtonBox.Eval(*pArgs);
}

void OnDials(int dial, int value)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(dial), Value(value));
	g_pContext->funcPackOnDials.Eval(*pArgs);
}

void OnTabletMotion(int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(x), Value(y));
	g_pContext->funcPackOnTabletMotion.Eval(*pArgs);
}

void OnTabletButton(int button, int state, int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(button), Value(state), Value(x), Value(y));
	g_pContext->funcPackOnTabletButton.Eval(*pArgs);
}

void OnMenuStatus(int status, int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(status), Value(x), Value(y));
	g_pContext->funcPackOnMenuStatus.Eval(*pArgs);
}

void OnOverlayDisplay(void)
{
	AutoPtr<Args> pArgs(new Args());
	g_pContext->funcPackOnOverlayDisplay.Eval(*pArgs);
}

void OnWindowStatus(int state)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValue(Value(state));
	g_pContext->funcPackOnWindowStatus.Eval(*pArgs);
}

void OnKeyboardUp(unsigned char key, int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(key), Value(x), Value(y));
	g_pContext->funcPackOnKeyboardUp.Eval(*pArgs);
}

void OnSpecialUp(int key, int x, int y)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(key), Value(x), Value(y));
	g_pContext->funcPackOnSpecialUp.Eval(*pArgs);
}

void OnJoystick(unsigned int buttonMask, int x, int y, int z)
{
	AutoPtr<Args> pArgs(new Args());
	pArgs->SetValues(Value(buttonMask), Value(x), Value(y), Value(z));
	g_pContext->funcPackOnJoystick.Eval(*pArgs);
}

// glut.glutInit
Gura_DeclareFunctionAlias(__glutInit, "glutInit")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "argv", VTYPE_string, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutInit` is used to initialize the GLUT library.\n");
}

Gura_ImplementFunction(__glutInit)
{
	const ValueList &argv = args.GetList(0);
	int argc = static_cast<int>(argv.size());
	char **_argv = NULL;
	if (argc > 0) {
		_argv = new char *[argc];
		int i = 0;
		foreach_const (ValueList, pValue, argv) {
			_argv[i++] = strdup(pValue->GetString());
		}
	}
	glutInit(&argc, _argv);
	Value _rtnVal;
	ValueList &valList = _rtnVal.InitAsList(env);
	if (argc > 0) {
		valList.reserve(argc);
		for (int i = 0; i < argc; i++) {
			valList.push_back(Value(_argv[i]));
			::free(_argv[i]);
		}
		delete[] _argv;
	}
	return ReturnValue(env, sig, args, _rtnVal);
}

// glut.glutInitDisplayMode
Gura_DeclareFunctionAlias(__glutInitDisplayMode, "glutInitDisplayMode")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutInitDisplayMode` sets the *initial display mode*.\n");
}

Gura_ImplementFunction(__glutInitDisplayMode)
{
	unsigned int mode = args.GetUInt(0);
	glutInitDisplayMode(mode);
	return Value::Null;
}

// glut.glutInitDisplayString
Gura_DeclareFunctionAlias(__glutInitDisplayString, "glutInitDisplayString")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "string", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutInitDisplayString)
{
	const char *string = args.GetString(0);
	glutInitDisplayString(string);
	return Value::Null;
}

// glut.glutInitWindowPosition
Gura_DeclareFunctionAlias(__glutInitWindowPosition, "glutInitWindowPosition")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutInitWindowPosition` sets the initial window position.	\n");
}

Gura_ImplementFunction(__glutInitWindowPosition)
{
	int x = args.GetInt(0);
	int y = args.GetInt(1);
	glutInitWindowPosition(x, y);
	return Value::Null;
}

// glut.glutInitWindowSize
Gura_DeclareFunctionAlias(__glutInitWindowSize, "glutInitWindowSize")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutInitWindowSize` sets the initial window size.	\n");
}

Gura_ImplementFunction(__glutInitWindowSize)
{
	int width = args.GetInt(0);
	int height = args.GetInt(1);
	glutInitWindowSize(width, height);
	return Value::Null;
}

// glut.glutMainLoop
Gura_DeclareFunctionAlias(__glutMainLoop, "glutMainLoop")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutMainLoop` enters the GLUT event processing loop.\n");
}

Gura_ImplementFunction(__glutMainLoop)
{
	glutMainLoop();
	return Value::Null;
}

// glut.glutCreateWindow
Gura_DeclareFunctionAlias(__glutCreateWindow, "glutCreateWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "title", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutCreateWindow` creates a top-level window.\n");
}

Gura_ImplementFunction(__glutCreateWindow)
{
	const char *title = args.GetString(0);
	int _rtn = glutCreateWindow(title);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutCreateSubWindow
Gura_DeclareFunctionAlias(__glutCreateSubWindow, "glutCreateSubWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "win", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutCreateSubWindow` creates a subwindow.\n");
}

Gura_ImplementFunction(__glutCreateSubWindow)
{
	int win = args.GetInt(0);
	int x = args.GetInt(1);
	int y = args.GetInt(2);
	int width = args.GetInt(3);
	int height = args.GetInt(4);
	int _rtn = glutCreateSubWindow(win, x, y, width, height);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutDestroyWindow
Gura_DeclareFunctionAlias(__glutDestroyWindow, "glutDestroyWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "win", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutDestroyWindow` destroys the specified window.\n");
}

Gura_ImplementFunction(__glutDestroyWindow)
{
	int win = args.GetInt(0);
	glutDestroyWindow(win);
	return Value::Null;
}

// glut.glutPostRedisplay
Gura_DeclareFunctionAlias(__glutPostRedisplay, "glutPostRedisplay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutPostRedisplay marks the *current window* as needing to be redisplayed.\n");
}

Gura_ImplementFunction(__glutPostRedisplay)
{
	glutPostRedisplay();
	return Value::Null;
}

// glut.glutPostWindowRedisplay
Gura_DeclareFunctionAlias(__glutPostWindowRedisplay, "glutPostWindowRedisplay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "win", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutPostWindowRedisplay)
{
	int win = args.GetInt(0);
	glutPostWindowRedisplay(win);
	return Value::Null;
}

// glut.glutSwapBuffers
Gura_DeclareFunctionAlias(__glutSwapBuffers, "glutSwapBuffers")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutSwapBuffers` swaps the buffers of the *current window* if double buffered.\n");
}

Gura_ImplementFunction(__glutSwapBuffers)
{
	glutSwapBuffers();
	return Value::Null;
}

// glut.glutGetWindow
Gura_DeclareFunctionAlias(__glutGetWindow, "glutGetWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutGetWindow` returns the identifier of the *current window*.\n");
}

Gura_ImplementFunction(__glutGetWindow)
{
	int _rtn = glutGetWindow();
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutSetWindow
Gura_DeclareFunctionAlias(__glutSetWindow, "glutSetWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "win", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutSetWindow` sets the *current window*.\n");
}

Gura_ImplementFunction(__glutSetWindow)
{
	int win = args.GetInt(0);
	glutSetWindow(win);
	return Value::Null;
}

// glut.glutSetWindowTitle
Gura_DeclareFunctionAlias(__glutSetWindowTitle, "glutSetWindowTitle")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "title", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutSetWindowTitle` changes the window title of the current top-level window.\n");
}

Gura_ImplementFunction(__glutSetWindowTitle)
{
	const char *title = args.GetString(0);
	glutSetWindowTitle(title);
	return Value::Null;
}

// glut.glutSetIconTitle
Gura_DeclareFunctionAlias(__glutSetIconTitle, "glutSetIconTitle")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "title", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutSetIconTitle` changes the icon title of the current top-level window.\n");
}

Gura_ImplementFunction(__glutSetIconTitle)
{
	const char *title = args.GetString(0);
	glutSetIconTitle(title);
	return Value::Null;
}

// glut.glutPositionWindow
Gura_DeclareFunctionAlias(__glutPositionWindow, "glutPositionWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutPositionWindow` requests a change to the position of the *current window*.\n");
}

Gura_ImplementFunction(__glutPositionWindow)
{
	int x = args.GetInt(0);
	int y = args.GetInt(1);
	glutPositionWindow(x, y);
	return Value::Null;
}

// glut.glutReshapeWindow
Gura_DeclareFunctionAlias(__glutReshapeWindow, "glutReshapeWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"`glutReshapeWindow` requests a change to the size of the *current window*.\n");
}

Gura_ImplementFunction(__glutReshapeWindow)
{
	int width = args.GetInt(0);
	int height = args.GetInt(1);
	glutReshapeWindow(width, height);
	return Value::Null;
}

// glut.glutPopWindow
Gura_DeclareFunctionAlias(__glutPopWindow, "glutPopWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutPopWindow)
{
	glutPopWindow();
	return Value::Null;
}

// glut.glutPushWindow
Gura_DeclareFunctionAlias(__glutPushWindow, "glutPushWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutPushWindow)
{
	glutPushWindow();
	return Value::Null;
}

// glut.glutIconifyWindow
Gura_DeclareFunctionAlias(__glutIconifyWindow, "glutIconifyWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutIconifyWindow)
{
	glutIconifyWindow();
	return Value::Null;
}

// glut.glutShowWindow
Gura_DeclareFunctionAlias(__glutShowWindow, "glutShowWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutShowWindow)
{
	glutShowWindow();
	return Value::Null;
}

// glut.glutHideWindow
Gura_DeclareFunctionAlias(__glutHideWindow, "glutHideWindow")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutHideWindow)
{
	glutHideWindow();
	return Value::Null;
}

// glut.glutFullScreen
Gura_DeclareFunctionAlias(__glutFullScreen, "glutFullScreen")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutFullScreen)
{
	glutFullScreen();
	return Value::Null;
}

// glut.glutSetCursor
Gura_DeclareFunctionAlias(__glutSetCursor, "glutSetCursor")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "cursor", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSetCursor)
{
	int cursor = args.GetInt(0);
	glutSetCursor(cursor);
	return Value::Null;
}

// glut.glutWarpPointer
Gura_DeclareFunctionAlias(__glutWarpPointer, "glutWarpPointer")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWarpPointer)
{
	int x = args.GetInt(0);
	int y = args.GetInt(1);
	glutWarpPointer(x, y);
	return Value::Null;
}

// glut.glutEstablishOverlay
Gura_DeclareFunctionAlias(__glutEstablishOverlay, "glutEstablishOverlay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutEstablishOverlay)
{
	glutEstablishOverlay();
	return Value::Null;
}

// glut.glutRemoveOverlay
Gura_DeclareFunctionAlias(__glutRemoveOverlay, "glutRemoveOverlay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutRemoveOverlay)
{
	glutRemoveOverlay();
	return Value::Null;
}

// glut.glutUseLayer
Gura_DeclareFunctionAlias(__glutUseLayer, "glutUseLayer")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "layer", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutUseLayer)
{
	GLenum layer = static_cast<GLenum>(args.GetInt(0));
	glutUseLayer(layer);
	return Value::Null;
}

// glut.glutPostOverlayRedisplay
Gura_DeclareFunctionAlias(__glutPostOverlayRedisplay, "glutPostOverlayRedisplay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutPostOverlayRedisplay)
{
	glutPostOverlayRedisplay();
	return Value::Null;
}

// glut.glutPostWindowOverlayRedisplay
Gura_DeclareFunctionAlias(__glutPostWindowOverlayRedisplay, "glutPostWindowOverlayRedisplay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "win", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutPostWindowOverlayRedisplay)
{
	int win = args.GetInt(0);
	glutPostWindowOverlayRedisplay(win);
	return Value::Null;
}

// glut.glutShowOverlay
Gura_DeclareFunctionAlias(__glutShowOverlay, "glutShowOverlay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutShowOverlay)
{
	glutShowOverlay();
	return Value::Null;
}

// glut.glutHideOverlay
Gura_DeclareFunctionAlias(__glutHideOverlay, "glutHideOverlay")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutHideOverlay)
{
	glutHideOverlay();
	return Value::Null;
}

// glut.glutCreateMenu
Gura_DeclareFunctionAlias(__glutCreateMenu, "glutCreateMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutCreateMenu)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnMenu.SetFunc(env, sig, func->Reference());
	int _rtn = glutCreateMenu(OnMenu);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutDestroyMenu
Gura_DeclareFunctionAlias(__glutDestroyMenu, "glutDestroyMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "menu", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutDestroyMenu)
{
	int menu = args.GetInt(0);
	glutDestroyMenu(menu);
	return Value::Null;
}

// glut.glutGetMenu
Gura_DeclareFunctionAlias(__glutGetMenu, "glutGetMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutGetMenu)
{
	int _rtn = glutGetMenu();
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutSetMenu
Gura_DeclareFunctionAlias(__glutSetMenu, "glutSetMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "menu", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSetMenu)
{
	int menu = args.GetInt(0);
	glutSetMenu(menu);
	return Value::Null;
}

// glut.glutAddMenuEntry
Gura_DeclareFunctionAlias(__glutAddMenuEntry, "glutAddMenuEntry")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "label", VTYPE_string, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutAddMenuEntry)
{
	const char *label = args.GetString(0);
	int value = args.GetInt(1);
	glutAddMenuEntry(label, value);
	return Value::Null;
}

// glut.glutAddSubMenu
Gura_DeclareFunctionAlias(__glutAddSubMenu, "glutAddSubMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "label", VTYPE_string, OCCUR_Once, FLAG_None);
	DeclareArg(env, "submenu", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutAddSubMenu)
{
	const char *label = args.GetString(0);
	int submenu = args.GetInt(1);
	glutAddSubMenu(label, submenu);
	return Value::Null;
}

// glut.glutChangeToMenuEntry
Gura_DeclareFunctionAlias(__glutChangeToMenuEntry, "glutChangeToMenuEntry")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "item", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "label", VTYPE_string, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutChangeToMenuEntry)
{
	int item = args.GetInt(0);
	const char *label = args.GetString(1);
	int value = args.GetInt(2);
	glutChangeToMenuEntry(item, label, value);
	return Value::Null;
}

// glut.glutChangeToSubMenu
Gura_DeclareFunctionAlias(__glutChangeToSubMenu, "glutChangeToSubMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "item", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "label", VTYPE_string, OCCUR_Once, FLAG_None);
	DeclareArg(env, "submenu", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutChangeToSubMenu)
{
	int item = args.GetInt(0);
	const char *label = args.GetString(1);
	int submenu = args.GetInt(2);
	glutChangeToSubMenu(item, label, submenu);
	return Value::Null;
}

// glut.glutRemoveMenuItem
Gura_DeclareFunctionAlias(__glutRemoveMenuItem, "glutRemoveMenuItem")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "item", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutRemoveMenuItem)
{
	int item = args.GetInt(0);
	glutRemoveMenuItem(item);
	return Value::Null;
}

// glut.glutAttachMenu
Gura_DeclareFunctionAlias(__glutAttachMenu, "glutAttachMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "button", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutAttachMenu)
{
	int button = args.GetInt(0);
	glutAttachMenu(button);
	return Value::Null;
}

// glut.glutDetachMenu
Gura_DeclareFunctionAlias(__glutDetachMenu, "glutDetachMenu")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "button", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutDetachMenu)
{
	int button = args.GetInt(0);
	glutDetachMenu(button);
	return Value::Null;
}

// glut.glutDisplayFunc
Gura_DeclareFunctionAlias(__glutDisplayFunc, "glutDisplayFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutDisplayFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnDisplay.SetFunc(env, sig, func->Reference());
	glutDisplayFunc(OnDisplay);
	return Value::Null;
}

// glut.glutReshapeFunc
Gura_DeclareFunctionAlias(__glutReshapeFunc, "glutReshapeFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutReshapeFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnReshape.SetFunc(env, sig, func->Reference());
	glutReshapeFunc(OnReshape);
	return Value::Null;
}

// glut.glutKeyboardFunc
Gura_DeclareFunctionAlias(__glutKeyboardFunc, "glutKeyboardFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutKeyboardFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnKeyboard.SetFunc(env, sig, func->Reference());
	glutKeyboardFunc(OnKeyboard);
	return Value::Null;
}

// glut.glutMouseFunc
Gura_DeclareFunctionAlias(__glutMouseFunc, "glutMouseFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutMouseFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnMouse.SetFunc(env, sig, func->Reference());
	glutMouseFunc(OnMouse);
	return Value::Null;
}

// glut.glutMotionFunc
Gura_DeclareFunctionAlias(__glutMotionFunc, "glutMotionFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutMotionFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnMotion.SetFunc(env, sig, func->Reference());
	glutMotionFunc(OnMotion);
	return Value::Null;
}

// glut.glutPassiveMotionFunc
Gura_DeclareFunctionAlias(__glutPassiveMotionFunc, "glutPassiveMotionFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutPassiveMotionFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnPassiveMotion.SetFunc(env, sig, func->Reference());
	glutPassiveMotionFunc(OnPassiveMotion);
	return Value::Null;
}

// glut.glutEntryFunc
Gura_DeclareFunctionAlias(__glutEntryFunc, "glutEntryFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutEntryFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnEntry.SetFunc(env, sig, func->Reference());
	glutEntryFunc(OnEntry);
	return Value::Null;
}

// glut.glutVisibilityFunc
Gura_DeclareFunctionAlias(__glutVisibilityFunc, "glutVisibilityFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutVisibilityFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnVisibility.SetFunc(env, sig, func->Reference());
	glutVisibilityFunc(OnVisibility);
	return Value::Null;
}

// glut.glutIdleFunc
Gura_DeclareFunctionAlias(__glutIdleFunc, "glutIdleFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutIdleFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnIdle.SetFunc(env, sig, func->Reference());
	glutIdleFunc(OnIdle);
	return Value::Null;
}

// glut.glutTimerFunc
Gura_DeclareFunctionAlias(__glutTimerFunc, "glutTimerFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "millis", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutTimerFunc)
{
	unsigned int millis = args.GetUInt(0);
	const Function *func = Object_function::GetObject(args, 1)->GetFunction();
	int value = args.GetInt(2);
	g_pContext->funcPackOnTimer.SetFunc(env, sig, func->Reference());
	glutTimerFunc(millis, OnTimer, value);
	return Value::Null;
}

// glut.glutMenuStateFunc
Gura_DeclareFunctionAlias(__glutMenuStateFunc, "glutMenuStateFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutMenuStateFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnMenuState.SetFunc(env, sig, func->Reference());
	glutMenuStateFunc(OnMenuState);
	return Value::Null;
}

// glut.glutSpecialFunc
Gura_DeclareFunctionAlias(__glutSpecialFunc, "glutSpecialFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSpecialFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnSpecial.SetFunc(env, sig, func->Reference());
	glutSpecialFunc(OnSpecial);
	return Value::Null;
}

// glut.glutSpaceballMotionFunc
Gura_DeclareFunctionAlias(__glutSpaceballMotionFunc, "glutSpaceballMotionFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSpaceballMotionFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnSpaceballMotion.SetFunc(env, sig, func->Reference());
	glutSpaceballMotionFunc(OnSpaceballMotion);
	return Value::Null;
}

// glut.glutSpaceballRotateFunc
Gura_DeclareFunctionAlias(__glutSpaceballRotateFunc, "glutSpaceballRotateFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSpaceballRotateFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnSpaceballRotate.SetFunc(env, sig, func->Reference());
	glutSpaceballRotateFunc(OnSpaceballRotate);
	return Value::Null;
}

// glut.glutSpaceballButtonFunc
Gura_DeclareFunctionAlias(__glutSpaceballButtonFunc, "glutSpaceballButtonFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSpaceballButtonFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnSpaceballButton.SetFunc(env, sig, func->Reference());
	glutSpaceballButtonFunc(OnSpaceballButton);
	return Value::Null;
}

// glut.glutButtonBoxFunc
Gura_DeclareFunctionAlias(__glutButtonBoxFunc, "glutButtonBoxFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutButtonBoxFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnButtonBox.SetFunc(env, sig, func->Reference());
	glutButtonBoxFunc(OnButtonBox);
	return Value::Null;
}

// glut.glutDialsFunc
Gura_DeclareFunctionAlias(__glutDialsFunc, "glutDialsFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutDialsFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnDials.SetFunc(env, sig, func->Reference());
	glutDialsFunc(OnDials);
	return Value::Null;
}

// glut.glutTabletMotionFunc
Gura_DeclareFunctionAlias(__glutTabletMotionFunc, "glutTabletMotionFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutTabletMotionFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnTabletMotion.SetFunc(env, sig, func->Reference());
	glutTabletMotionFunc(OnTabletMotion);
	return Value::Null;
}

// glut.glutTabletButtonFunc
Gura_DeclareFunctionAlias(__glutTabletButtonFunc, "glutTabletButtonFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutTabletButtonFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnTabletButton.SetFunc(env, sig, func->Reference());
	glutTabletButtonFunc(OnTabletButton);
	return Value::Null;
}

// glut.glutMenuStatusFunc
Gura_DeclareFunctionAlias(__glutMenuStatusFunc, "glutMenuStatusFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutMenuStatusFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnMenuStatus.SetFunc(env, sig, func->Reference());
	glutMenuStatusFunc(OnMenuStatus);
	return Value::Null;
}

// glut.glutOverlayDisplayFunc
Gura_DeclareFunctionAlias(__glutOverlayDisplayFunc, "glutOverlayDisplayFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutOverlayDisplayFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnOverlayDisplay.SetFunc(env, sig, func->Reference());
	glutOverlayDisplayFunc(OnOverlayDisplay);
	return Value::Null;
}

// glut.glutWindowStatusFunc
Gura_DeclareFunctionAlias(__glutWindowStatusFunc, "glutWindowStatusFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWindowStatusFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnWindowStatus.SetFunc(env, sig, func->Reference());
	glutWindowStatusFunc(OnWindowStatus);
	return Value::Null;
}

// glut.glutKeyboardUpFunc
Gura_DeclareFunctionAlias(__glutKeyboardUpFunc, "glutKeyboardUpFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutKeyboardUpFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnKeyboardUp.SetFunc(env, sig, func->Reference());
	glutKeyboardUpFunc(OnKeyboardUp);
	return Value::Null;
}

// glut.glutSpecialUpFunc
Gura_DeclareFunctionAlias(__glutSpecialUpFunc, "glutSpecialUpFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSpecialUpFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	g_pContext->funcPackOnSpecialUp.SetFunc(env, sig, func->Reference());
	glutSpecialUpFunc(OnSpecialUp);
	return Value::Null;
}

// glut.glutJoystickFunc
Gura_DeclareFunctionAlias(__glutJoystickFunc, "glutJoystickFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pollInterval", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutJoystickFunc)
{
	const Function *func = Object_function::GetObject(args, 0)->GetFunction();
	int pollInterval = args.GetInt(1);
	g_pContext->funcPackOnJoystick.SetFunc(env, sig, func->Reference());
	glutJoystickFunc(OnJoystick, pollInterval);
	return Value::Null;
}

// glut.glutSetColor
Gura_DeclareFunctionAlias(__glutSetColor, "glutSetColor")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "ndx", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSetColor)
{
	int ndx = args.GetInt(0);
	GLfloat red = args.GetFloat(1);
	GLfloat green = args.GetFloat(2);
	GLfloat blue = args.GetFloat(3);
	glutSetColor(ndx, red, green, blue);
	return Value::Null;
}

// glut.glutGetColor
Gura_DeclareFunctionAlias(__glutGetColor, "glutGetColor")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "ndx", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "component", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutGetColor)
{
	int ndx = args.GetInt(0);
	int component = args.GetInt(1);
	GLfloat _rtn = glutGetColor(ndx, component);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutCopyColormap
Gura_DeclareFunctionAlias(__glutCopyColormap, "glutCopyColormap")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "win", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutCopyColormap)
{
	int win = args.GetInt(0);
	glutCopyColormap(win);
	return Value::Null;
}

// glut.glutGet
Gura_DeclareFunctionAlias(__glutGet, "glutGet")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutGet)
{
	GLenum type = static_cast<GLenum>(args.GetInt(0));
	int _rtn = glutGet(type);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutDeviceGet
Gura_DeclareFunctionAlias(__glutDeviceGet, "glutDeviceGet")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutDeviceGet)
{
	GLenum type = static_cast<GLenum>(args.GetInt(0));
	int _rtn = glutDeviceGet(type);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutExtensionSupported
Gura_DeclareFunctionAlias(__glutExtensionSupported, "glutExtensionSupported")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "name", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutExtensionSupported)
{
	const char *name = args.GetString(0);
	int _rtn = glutExtensionSupported(name);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutGetModifiers
Gura_DeclareFunctionAlias(__glutGetModifiers, "glutGetModifiers")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutGetModifiers)
{
	int _rtn = glutGetModifiers();
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutLayerGet
Gura_DeclareFunctionAlias(__glutLayerGet, "glutLayerGet")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutLayerGet)
{
	GLenum type = static_cast<GLenum>(args.GetInt(0));
	int _rtn = glutLayerGet(type);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutGetProcAddress
Gura_DeclareFunctionAlias(__glutGetProcAddress, "glutGetProcAddress")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "procName", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutGetProcAddress)
{
#if 0
	const char *procName = args.GetString(0);
	glutGetProcAddress(procName);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glutGetProcAddress");
	return Value::Null;
}

// glut.glutBitmapCharacter
Gura_DeclareFunctionAlias(__glutBitmapCharacter, "glutBitmapCharacter")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "font", VTYPE_Font, OCCUR_Once, FLAG_None);
	DeclareArg(env, "character", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutBitmapCharacter)
{
	void *font = Object_Font::GetObject(args, 0)->GetEntity();
	int character = args.GetInt(1);
	glutBitmapCharacter(font, character);
	return Value::Null;
}

// glut.glutBitmapWidth
Gura_DeclareFunctionAlias(__glutBitmapWidth, "glutBitmapWidth")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "font", VTYPE_Font, OCCUR_Once, FLAG_None);
	DeclareArg(env, "character", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutBitmapWidth)
{
	void *font = Object_Font::GetObject(args, 0)->GetEntity();
	int character = args.GetInt(1);
	int _rtn = glutBitmapWidth(font, character);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutStrokeCharacter
Gura_DeclareFunctionAlias(__glutStrokeCharacter, "glutStrokeCharacter")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "font", VTYPE_Font, OCCUR_Once, FLAG_None);
	DeclareArg(env, "character", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutStrokeCharacter)
{
	void *font = Object_Font::GetObject(args, 0)->GetEntity();
	int character = args.GetInt(1);
	glutStrokeCharacter(font, character);
	return Value::Null;
}

// glut.glutStrokeWidth
Gura_DeclareFunctionAlias(__glutStrokeWidth, "glutStrokeWidth")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "font", VTYPE_Font, OCCUR_Once, FLAG_None);
	DeclareArg(env, "character", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutStrokeWidth)
{
	void *font = Object_Font::GetObject(args, 0)->GetEntity();
	int character = args.GetInt(1);
	int _rtn = glutStrokeWidth(font, character);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutBitmapLength
Gura_DeclareFunctionAlias(__glutBitmapLength, "glutBitmapLength")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "font", VTYPE_Font, OCCUR_Once, FLAG_None);
	DeclareArg(env, "string", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutBitmapLength)
{
	void *font = Object_Font::GetObject(args, 0)->GetEntity();
	const unsigned char *string = reinterpret_cast<const unsigned char *>(args.GetString(1));
	int _rtn = glutBitmapLength(font, string);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutStrokeLength
Gura_DeclareFunctionAlias(__glutStrokeLength, "glutStrokeLength")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "font", VTYPE_Font, OCCUR_Once, FLAG_None);
	DeclareArg(env, "string", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutStrokeLength)
{
	void *font = Object_Font::GetObject(args, 0)->GetEntity();
	const unsigned char *string = reinterpret_cast<const unsigned char *>(args.GetString(1));
	int _rtn = glutStrokeLength(font, string);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutWireSphere
Gura_DeclareFunctionAlias(__glutWireSphere, "glutWireSphere")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "radius", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stacks", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireSphere)
{
	GLdouble radius = args.GetDouble(0);
	GLint slices = args.GetInt(1);
	GLint stacks = args.GetInt(2);
	glutWireSphere(radius, slices, stacks);
	return Value::Null;
}

// glut.glutSolidSphere
Gura_DeclareFunctionAlias(__glutSolidSphere, "glutSolidSphere")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "radius", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stacks", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidSphere)
{
	GLdouble radius = args.GetDouble(0);
	GLint slices = args.GetInt(1);
	GLint stacks = args.GetInt(2);
	glutSolidSphere(radius, slices, stacks);
	return Value::Null;
}

// glut.glutWireCone
Gura_DeclareFunctionAlias(__glutWireCone, "glutWireCone")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "base", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stacks", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireCone)
{
	GLdouble base = args.GetDouble(0);
	GLdouble height = args.GetDouble(1);
	GLint slices = args.GetInt(2);
	GLint stacks = args.GetInt(3);
	glutWireCone(base, height, slices, stacks);
	return Value::Null;
}

// glut.glutSolidCone
Gura_DeclareFunctionAlias(__glutSolidCone, "glutSolidCone")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "base", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stacks", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidCone)
{
	GLdouble base = args.GetDouble(0);
	GLdouble height = args.GetDouble(1);
	GLint slices = args.GetInt(2);
	GLint stacks = args.GetInt(3);
	glutSolidCone(base, height, slices, stacks);
	return Value::Null;
}

// glut.glutWireCube
Gura_DeclareFunctionAlias(__glutWireCube, "glutWireCube")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireCube)
{
	GLdouble size = args.GetDouble(0);
	glutWireCube(size);
	return Value::Null;
}

// glut.glutSolidCube
Gura_DeclareFunctionAlias(__glutSolidCube, "glutSolidCube")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidCube)
{
	GLdouble size = args.GetDouble(0);
	glutSolidCube(size);
	return Value::Null;
}

// glut.glutWireTorus
Gura_DeclareFunctionAlias(__glutWireTorus, "glutWireTorus")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "innerRadius", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "outerRadius", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "sides", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "rings", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireTorus)
{
	GLdouble innerRadius = args.GetDouble(0);
	GLdouble outerRadius = args.GetDouble(1);
	GLint sides = args.GetInt(2);
	GLint rings = args.GetInt(3);
	glutWireTorus(innerRadius, outerRadius, sides, rings);
	return Value::Null;
}

// glut.glutSolidTorus
Gura_DeclareFunctionAlias(__glutSolidTorus, "glutSolidTorus")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "innerRadius", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "outerRadius", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "sides", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "rings", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidTorus)
{
	GLdouble innerRadius = args.GetDouble(0);
	GLdouble outerRadius = args.GetDouble(1);
	GLint sides = args.GetInt(2);
	GLint rings = args.GetInt(3);
	glutSolidTorus(innerRadius, outerRadius, sides, rings);
	return Value::Null;
}

// glut.glutWireDodecahedron
Gura_DeclareFunctionAlias(__glutWireDodecahedron, "glutWireDodecahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireDodecahedron)
{
	glutWireDodecahedron();
	return Value::Null;
}

// glut.glutSolidDodecahedron
Gura_DeclareFunctionAlias(__glutSolidDodecahedron, "glutSolidDodecahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidDodecahedron)
{
	glutSolidDodecahedron();
	return Value::Null;
}

// glut.glutWireTeapot
Gura_DeclareFunctionAlias(__glutWireTeapot, "glutWireTeapot")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireTeapot)
{
	GLdouble size = args.GetDouble(0);
	glutWireTeapot(size);
	return Value::Null;
}

// glut.glutSolidTeapot
Gura_DeclareFunctionAlias(__glutSolidTeapot, "glutSolidTeapot")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidTeapot)
{
	GLdouble size = args.GetDouble(0);
	glutSolidTeapot(size);
	return Value::Null;
}

// glut.glutWireOctahedron
Gura_DeclareFunctionAlias(__glutWireOctahedron, "glutWireOctahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireOctahedron)
{
	glutWireOctahedron();
	return Value::Null;
}

// glut.glutSolidOctahedron
Gura_DeclareFunctionAlias(__glutSolidOctahedron, "glutSolidOctahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidOctahedron)
{
	glutSolidOctahedron();
	return Value::Null;
}

// glut.glutWireTetrahedron
Gura_DeclareFunctionAlias(__glutWireTetrahedron, "glutWireTetrahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireTetrahedron)
{
	glutWireTetrahedron();
	return Value::Null;
}

// glut.glutSolidTetrahedron
Gura_DeclareFunctionAlias(__glutSolidTetrahedron, "glutSolidTetrahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidTetrahedron)
{
	glutSolidTetrahedron();
	return Value::Null;
}

// glut.glutWireIcosahedron
Gura_DeclareFunctionAlias(__glutWireIcosahedron, "glutWireIcosahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutWireIcosahedron)
{
	glutWireIcosahedron();
	return Value::Null;
}

// glut.glutSolidIcosahedron
Gura_DeclareFunctionAlias(__glutSolidIcosahedron, "glutSolidIcosahedron")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSolidIcosahedron)
{
	glutSolidIcosahedron();
	return Value::Null;
}

// glut.glutVideoResizeGet
Gura_DeclareFunctionAlias(__glutVideoResizeGet, "glutVideoResizeGet")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutVideoResizeGet)
{
	GLenum param = static_cast<GLenum>(args.GetInt(0));
	int _rtn = glutVideoResizeGet(param);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutSetupVideoResizing
Gura_DeclareFunctionAlias(__glutSetupVideoResizing, "glutSetupVideoResizing")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSetupVideoResizing)
{
	glutSetupVideoResizing();
	return Value::Null;
}

// glut.glutStopVideoResizing
Gura_DeclareFunctionAlias(__glutStopVideoResizing, "glutStopVideoResizing")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutStopVideoResizing)
{
	glutStopVideoResizing();
	return Value::Null;
}

// glut.glutVideoResize
Gura_DeclareFunctionAlias(__glutVideoResize, "glutVideoResize")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutVideoResize)
{
	int x = args.GetInt(0);
	int y = args.GetInt(1);
	int width = args.GetInt(2);
	int height = args.GetInt(3);
	glutVideoResize(x, y, width, height);
	return Value::Null;
}

// glut.glutVideoPan
Gura_DeclareFunctionAlias(__glutVideoPan, "glutVideoPan")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutVideoPan)
{
	int x = args.GetInt(0);
	int y = args.GetInt(1);
	int width = args.GetInt(2);
	int height = args.GetInt(3);
	glutVideoPan(x, y, width, height);
	return Value::Null;
}

// glut.glutReportErrors
Gura_DeclareFunctionAlias(__glutReportErrors, "glutReportErrors")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutReportErrors)
{
	glutReportErrors();
	return Value::Null;
}

// glut.glutIgnoreKeyRepeat
Gura_DeclareFunctionAlias(__glutIgnoreKeyRepeat, "glutIgnoreKeyRepeat")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "ignore", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutIgnoreKeyRepeat)
{
	int ignore = args.GetInt(0);
	glutIgnoreKeyRepeat(ignore);
	return Value::Null;
}

// glut.glutSetKeyRepeat
Gura_DeclareFunctionAlias(__glutSetKeyRepeat, "glutSetKeyRepeat")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "repeatMode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutSetKeyRepeat)
{
	int repeatMode = args.GetInt(0);
	glutSetKeyRepeat(repeatMode);
	return Value::Null;
}

// glut.glutForceJoystickFunc
Gura_DeclareFunctionAlias(__glutForceJoystickFunc, "glutForceJoystickFunc")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutForceJoystickFunc)
{
	glutForceJoystickFunc();
	return Value::Null;
}

// glut.glutGameModeString
Gura_DeclareFunctionAlias(__glutGameModeString, "glutGameModeString")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "string", VTYPE_string, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutGameModeString)
{
	const char *string = args.GetString(0);
	glutGameModeString(string);
	return Value::Null;
}

// glut.glutEnterGameMode
Gura_DeclareFunctionAlias(__glutEnterGameMode, "glutEnterGameMode")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutEnterGameMode)
{
	int _rtn = glutEnterGameMode();
	return ReturnValue(env, sig, args, Value(_rtn));
}

// glut.glutLeaveGameMode
Gura_DeclareFunctionAlias(__glutLeaveGameMode, "glutLeaveGameMode")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutLeaveGameMode)
{
	glutLeaveGameMode();
	return Value::Null;
}

// glut.glutGameModeGet
Gura_DeclareFunctionAlias(__glutGameModeGet, "glutGameModeGet")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(__glutGameModeGet)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	int _rtn = glutGameModeGet(mode);
	return ReturnValue(env, sig, args, Value(_rtn));
}


void AssignFunctions(Environment &env)
{
	g_pContext = new Context();
	Gura_AssignFunction(__glutInit);
	Gura_AssignFunction(__glutInitDisplayMode);
	Gura_AssignFunction(__glutInitDisplayString);
	Gura_AssignFunction(__glutInitWindowPosition);
	Gura_AssignFunction(__glutInitWindowSize);
	Gura_AssignFunction(__glutMainLoop);
	Gura_AssignFunction(__glutCreateWindow);
	Gura_AssignFunction(__glutCreateSubWindow);
	Gura_AssignFunction(__glutDestroyWindow);
	Gura_AssignFunction(__glutPostRedisplay);
	Gura_AssignFunction(__glutPostWindowRedisplay);
	Gura_AssignFunction(__glutSwapBuffers);
	Gura_AssignFunction(__glutGetWindow);
	Gura_AssignFunction(__glutSetWindow);
	Gura_AssignFunction(__glutSetWindowTitle);
	Gura_AssignFunction(__glutSetIconTitle);
	Gura_AssignFunction(__glutPositionWindow);
	Gura_AssignFunction(__glutReshapeWindow);
	Gura_AssignFunction(__glutPopWindow);
	Gura_AssignFunction(__glutPushWindow);
	Gura_AssignFunction(__glutIconifyWindow);
	Gura_AssignFunction(__glutShowWindow);
	Gura_AssignFunction(__glutHideWindow);
	Gura_AssignFunction(__glutFullScreen);
	Gura_AssignFunction(__glutSetCursor);
	Gura_AssignFunction(__glutWarpPointer);
	Gura_AssignFunction(__glutEstablishOverlay);
	Gura_AssignFunction(__glutRemoveOverlay);
	Gura_AssignFunction(__glutUseLayer);
	Gura_AssignFunction(__glutPostOverlayRedisplay);
	Gura_AssignFunction(__glutPostWindowOverlayRedisplay);
	Gura_AssignFunction(__glutShowOverlay);
	Gura_AssignFunction(__glutHideOverlay);
	Gura_AssignFunction(__glutCreateMenu);
	Gura_AssignFunction(__glutDestroyMenu);
	Gura_AssignFunction(__glutGetMenu);
	Gura_AssignFunction(__glutSetMenu);
	Gura_AssignFunction(__glutAddMenuEntry);
	Gura_AssignFunction(__glutAddSubMenu);
	Gura_AssignFunction(__glutChangeToMenuEntry);
	Gura_AssignFunction(__glutChangeToSubMenu);
	Gura_AssignFunction(__glutRemoveMenuItem);
	Gura_AssignFunction(__glutAttachMenu);
	Gura_AssignFunction(__glutDetachMenu);
	Gura_AssignFunction(__glutDisplayFunc);
	Gura_AssignFunction(__glutReshapeFunc);
	Gura_AssignFunction(__glutKeyboardFunc);
	Gura_AssignFunction(__glutMouseFunc);
	Gura_AssignFunction(__glutMotionFunc);
	Gura_AssignFunction(__glutPassiveMotionFunc);
	Gura_AssignFunction(__glutEntryFunc);
	Gura_AssignFunction(__glutVisibilityFunc);
	Gura_AssignFunction(__glutIdleFunc);
	Gura_AssignFunction(__glutTimerFunc);
	Gura_AssignFunction(__glutMenuStateFunc);
	Gura_AssignFunction(__glutSpecialFunc);
	Gura_AssignFunction(__glutSpaceballMotionFunc);
	Gura_AssignFunction(__glutSpaceballRotateFunc);
	Gura_AssignFunction(__glutSpaceballButtonFunc);
	Gura_AssignFunction(__glutButtonBoxFunc);
	Gura_AssignFunction(__glutDialsFunc);
	Gura_AssignFunction(__glutTabletMotionFunc);
	Gura_AssignFunction(__glutTabletButtonFunc);
	Gura_AssignFunction(__glutMenuStatusFunc);
	Gura_AssignFunction(__glutOverlayDisplayFunc);
	Gura_AssignFunction(__glutWindowStatusFunc);
	Gura_AssignFunction(__glutKeyboardUpFunc);
	Gura_AssignFunction(__glutSpecialUpFunc);
	Gura_AssignFunction(__glutJoystickFunc);
	Gura_AssignFunction(__glutSetColor);
	Gura_AssignFunction(__glutGetColor);
	Gura_AssignFunction(__glutCopyColormap);
	Gura_AssignFunction(__glutGet);
	Gura_AssignFunction(__glutDeviceGet);
	Gura_AssignFunction(__glutExtensionSupported);
	Gura_AssignFunction(__glutGetModifiers);
	Gura_AssignFunction(__glutLayerGet);
	Gura_AssignFunction(__glutGetProcAddress);
	Gura_AssignFunction(__glutBitmapCharacter);
	Gura_AssignFunction(__glutBitmapWidth);
	Gura_AssignFunction(__glutStrokeCharacter);
	Gura_AssignFunction(__glutStrokeWidth);
	Gura_AssignFunction(__glutBitmapLength);
	Gura_AssignFunction(__glutStrokeLength);
	Gura_AssignFunction(__glutWireSphere);
	Gura_AssignFunction(__glutSolidSphere);
	Gura_AssignFunction(__glutWireCone);
	Gura_AssignFunction(__glutSolidCone);
	Gura_AssignFunction(__glutWireCube);
	Gura_AssignFunction(__glutSolidCube);
	Gura_AssignFunction(__glutWireTorus);
	Gura_AssignFunction(__glutSolidTorus);
	Gura_AssignFunction(__glutWireDodecahedron);
	Gura_AssignFunction(__glutSolidDodecahedron);
	Gura_AssignFunction(__glutWireTeapot);
	Gura_AssignFunction(__glutSolidTeapot);
	Gura_AssignFunction(__glutWireOctahedron);
	Gura_AssignFunction(__glutSolidOctahedron);
	Gura_AssignFunction(__glutWireTetrahedron);
	Gura_AssignFunction(__glutSolidTetrahedron);
	Gura_AssignFunction(__glutWireIcosahedron);
	Gura_AssignFunction(__glutSolidIcosahedron);
	Gura_AssignFunction(__glutVideoResizeGet);
	Gura_AssignFunction(__glutSetupVideoResizing);
	Gura_AssignFunction(__glutStopVideoResizing);
	Gura_AssignFunction(__glutVideoResize);
	Gura_AssignFunction(__glutVideoPan);
	Gura_AssignFunction(__glutReportErrors);
	Gura_AssignFunction(__glutIgnoreKeyRepeat);
	Gura_AssignFunction(__glutSetKeyRepeat);
	Gura_AssignFunction(__glutForceJoystickFunc);
	Gura_AssignFunction(__glutGameModeString);
	Gura_AssignFunction(__glutEnterGameMode);
	Gura_AssignFunction(__glutLeaveGameMode);
	Gura_AssignFunction(__glutGameModeGet);
}

Gura_EndModuleScope(glut)

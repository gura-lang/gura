#!/usr/bin/env gura
sys.path.add('../module-opengl')
import(cbridge_gl)

tmplCallbackHandler = R'''
	if (func == nullptr) {
		g_pContext->funcPackOn${eventName}.ClearFunc();
		glut${eventName}Func(nullptr);
	} else {
		g_pContext->funcPackOn${eventName}.SetFunc(env, func->Reference());
		glut${eventName}Func(On${eventName});
	}
	return Value::Nil;
'''.template()

RenderCallbackHandler(eventName:string) = {
	tmplCallbackHandler.render()
}

cbridge_gl.Implement {

glutInit(argv[]:string) {block?} = R'''
	int argc = static_cast<int>(argv.size());
	char **_argv = nullptr;
	if (argc > 0) {
		_argv = new char *[argc];
		int i = 0;
		foreach_const (ValueList, pValue, argv) {
			_argv[i++] = strdup(pValue->GetString());
		}
	}
	glutInit(&argc, _argv);
	Value _rtnVal;
	Object_list *pObjList = _rtnVal.InitAsList(env);
	if (argc > 0) {
		pObjList->Reserve(argc);
		for (int i = 0; i < argc; i++) {
			pObjList->Add(Value(_argv[i]));
			::free(_argv[i]);
		}
		delete[] _argv;
	}
	return ReturnValue(env, arg, _rtnVal);
''' %% {`en,
	R'''
	`glutInit` is used to initialize the GLUT library.
	'''
}

glutInitDisplayMode(mode:unsigned_int):void:map = `auto %% {`en,
	R'''
	`glutInitDisplayMode` sets the *initial display mode*.
	'''
}

glutInitDisplayString(string:char@:const):void:map = `auto %% {`en,
	R'''
	'''
}

glutInitWindowPosition(x:int, y:int):void:map = `auto %% {`en,
	R'''
	`glutInitWindowPosition` sets the initial window position.	
	'''
}

glutInitWindowSize(width:int, height:int):void:map = `auto %% {`en,
	R'''
	`glutInitWindowSize` sets the initial window size.	
	'''
}

glutMainLoop():void = `auto %% {`en,
	R'''
	`glutMainLoop` enters the GLUT event processing loop.
	'''
}

glutCreateWindow(title:char@:const):int:map {block?} = `auto %% {`en,
	R'''
	`glutCreateWindow` creates a top-level window.
	'''
}

glutCreateSubWindow(win:int, x:int, y:int, width:int, height:int):int:map {block?} = `auto %% {`en,
	R'''
	`glutCreateSubWindow` creates a subwindow.
	'''
}

glutDestroyWindow(win:int):void:map = `auto %% {`en,
	R'''
	`glutDestroyWindow` destroys the specified window.
	'''
}

glutPostRedisplay():void = `auto %% {`en,
	R'''
	`glutPostRedisplay marks the *current window* as needing to be redisplayed.
	'''
}

glutPostWindowRedisplay(win:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutSwapBuffers():void = `auto %% {`en,
	R'''
	`glutSwapBuffers` swaps the buffers of the *current window* if double buffered.
	'''
}

glutGetWindow():int {block?} = `auto %% {`en,
	R'''
	`glutGetWindow` returns the identifier of the *current window*.
	'''
}

glutSetWindow(win:int):void:map = `auto %% {`en,
	R'''
	`glutSetWindow` sets the *current window*.
	'''
}

glutSetWindowTitle(title:char@:const):void:map = `auto %% {`en,
	R'''
	`glutSetWindowTitle` changes the window title of the current top-level window.
	'''
}

glutSetIconTitle(title:char@:const):void:map = `auto %% {`en,
	R'''
	`glutSetIconTitle` changes the icon title of the current top-level window.
	'''
}

glutPositionWindow(x:int, y:int):void:map = `auto %% {`en,
	R'''
	`glutPositionWindow` requests a change to the position of the *current window*.
	'''
}

glutReshapeWindow(width:int, height:int):void:map = `auto %% {`en,
	R'''
	`glutReshapeWindow` requests a change to the size of the *current window*.
	'''
}

glutPopWindow():void = `auto %% {`en,
	R'''
	'''
}

glutPushWindow():void = `auto %% {`en,
	R'''
	'''
}

glutIconifyWindow():void = `auto %% {`en,
	R'''
	'''
}

glutShowWindow():void = `auto %% {`en,
	R'''
	'''
}

glutHideWindow():void = `auto %% {`en,
	R'''
	'''
}

glutFullScreen():void = `auto %% {`en,
	R'''
	'''
}

glutSetCursor(cursor:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutWarpPointer(x:int, y:int):void:map = `auto %% {`en,
	R'''
	'''
}

//glutSurfaceTexture(target:GLenum, internalformat:GLenum, surfacewin:int):void:map = `auto %% {`en,
//	R'''
//	'''
//}

//glutWMCloseFunc(func:function):void = R'''
//	g_pContext->funcPackOnWMClose.SetFunc(env, func->Reference());
//	glutWMCloseFunc(OnWMClose);
//	return Value::Nil;
//''' %% {`en,
//	R'''
//	'''
//}

//glutCheckLoop():void = `auto %% {`en,
//	R'''
//	'''
//}

glutEstablishOverlay():void = `auto %% {`en,
	R'''
	'''
}

glutRemoveOverlay():void = `auto %% {`en,
	R'''
	'''
}

glutUseLayer(layer:GLenum):void:map = `auto %% {`en,
	R'''
	'''
}

glutPostOverlayRedisplay():void = `auto %% {`en,
	R'''
	'''
}

glutPostWindowOverlayRedisplay(win:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutShowOverlay():void = `auto %% {`en,
	R'''
	'''
}

glutHideOverlay():void = `auto %% {`en,
	R'''
	'''
}

glutCreateMenu(func:function):int {block?} = R'''
	int idxMenu = g_pContext->idxMenu++;
	if (idxMenu >= ArraySizeOf(g_OnMenus)) {
		env.SetError(ERR_OutOfRangeError, "too many menus");
		return Value::Nil;
	}
	g_pContext->funcPackOnMenuTbl[idxMenu].SetFunc(env, func->Reference());
	int _rtn = glutCreateMenu(g_OnMenus[idxMenu]);
	return ReturnValue(env, arg, Value(_rtn));
''' %% {`en,
	R'''
	'''
}

glutDestroyMenu(menu:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutGetMenu():int {block?} = `auto %% {`en,
	R'''
	'''
}

glutSetMenu(menu:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutAddMenuEntry(label:char@:const, value:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutAddSubMenu(label:char@:const, submenu:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutChangeToMenuEntry(item:int, label:char@:const, value:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutChangeToSubMenu(item:int, label:char@:const, submenu:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutRemoveMenuItem(item:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutAttachMenu(button:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutDetachMenu(button:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutDisplayFunc(func:function:nil):void = RenderCallbackHandler('Display') %% {`en,
	R'''
	'''
}

glutReshapeFunc(func:function:nil):void = RenderCallbackHandler('Reshape') %% {`en,
	R'''
	'''
}

glutKeyboardFunc(func:function:nil):void = RenderCallbackHandler('Keyboard') %% {`en,
	R'''
	'''
}

glutMouseFunc(func:function:nil):void = RenderCallbackHandler('Mouse') %% {`en,
	R'''
	'''
}

glutMotionFunc(func:function:nil):void = RenderCallbackHandler('Motion') %% {`en,
	R'''
	'''
}

glutPassiveMotionFunc(func:function:nil):void = RenderCallbackHandler('PassiveMotion') %% {`en,
	R'''
	'''
}

glutEntryFunc(func:function:nil):void = RenderCallbackHandler('Entry') %% {`en,
	R'''
	'''
}

glutVisibilityFunc(func:function:nil):void = RenderCallbackHandler('Visibility') %% {`en,
	R'''
	'''
}

glutIdleFunc(func:function:nil):void = RenderCallbackHandler('Idle') %% {`en,
	R'''
	'''
}

glutTimerFunc(millis:unsigned_int, func:function:nil, value:int):void = R'''
	if (func == nullptr) {
		g_pContext->funcPackOnTimer.ClearFunc();
		glutTimerFunc(millis, nullptr, value);
	} else {
		g_pContext->funcPackOnTimer.SetFunc(env, func->Reference());
		glutTimerFunc(millis, OnTimer, value);
	}
	return Value::Nil;
''' %% {`en,
	R'''
	'''
}

glutMenuStateFunc(func:function:nil):void = RenderCallbackHandler('MenuState') %% {`en,
	R'''
	'''
}

glutSpecialFunc(func:function:nil):void = RenderCallbackHandler('Special') %% {`en,
	R'''
	'''
}

glutSpaceballMotionFunc(func:function:nil):void = RenderCallbackHandler('SpaceballMotion') %% {`en,
	R'''
	'''
}

glutSpaceballRotateFunc(func:function:nil):void = RenderCallbackHandler('SpaceballRotate') %% {`en,
	R'''
	'''
}

glutSpaceballButtonFunc(func:function:nil):void = RenderCallbackHandler('SpaceballButton') %% {`en,
	R'''
	'''
}

glutButtonBoxFunc(func:function:nil):void = RenderCallbackHandler('ButtonBox') %% {`en,
	R'''
	'''
}

glutDialsFunc(func:function:nil):void = RenderCallbackHandler('Dials') %% {`en,
	R'''
	'''
}

glutTabletMotionFunc(func:function:nil):void = RenderCallbackHandler('TabletMotion') %% {`en,
	R'''
	'''
}

glutTabletButtonFunc(func:function:nil):void = RenderCallbackHandler('TabletButton') %% {`en,
	R'''
	'''
}

glutMenuStatusFunc(func:function:nil):void = RenderCallbackHandler('MenuStatus') %% {`en,
	R'''
	'''
}

glutOverlayDisplayFunc(func:function:nil):void = RenderCallbackHandler('OverlayDisplay') %% {`en,
	R'''
	'''
}

glutWindowStatusFunc(func:function:nil):void = RenderCallbackHandler('WindowStatus') %% {`en,
	R'''
	'''
}

glutKeyboardUpFunc(func:function:nil):void = RenderCallbackHandler('KeyboardUp') %% {`en,
	R'''
	'''
}

glutSpecialUpFunc(func:function:nil):void = RenderCallbackHandler('SpecialUp') %% {`en,
	R'''
	'''
}

glutJoystickFunc(func:function:nil, pollInterval:int):void = R'''
	if (func == nullptr) {
		g_pContext->funcPackOnJoystick.ClearFunc();
		glutJoystickFunc(nullptr, pollInterval);
	} else {
		g_pContext->funcPackOnJoystick.SetFunc(env, func->Reference());
		glutJoystickFunc(OnJoystick, pollInterval);
	}
	return Value::Nil;
''' %% {`en,
	R'''
	'''
}
			
glutSetColor(ndx:int, red:GLfloat, green:GLfloat, blue:GLfloat):void = `auto %% {`en,
	R'''
	'''
}

glutGetColor(ndx:int, component:int):GLfloat:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutCopyColormap(win:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutGet(type:GLenum):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutDeviceGet(type:GLenum):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutExtensionSupported(name:char@:const):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutGetModifiers():int {block?} = `auto %% {`en,
	R'''
	'''
}

glutLayerGet(type:GLenum):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutGetProcAddress(procName:char@:const):void:map {block?} = `unsupport %% {`en,
	R'''
	'''
}

glutBitmapCharacter(font:Font, character:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutBitmapWidth(font:Font, character:int):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutStrokeCharacter(font:Font, character:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutStrokeWidth(font:Font, character:int):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutBitmapLength(font:Font, string:unsigned_char@:const):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutStrokeLength(font:Font, string:unsigned_char@:const):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutWireSphere(radius:GLdouble, slices:GLint, stacks:GLint):void:map = `auto %% {`en,
	R'''
	'''
}

glutSolidSphere(radius:GLdouble, slices:GLint, stacks:GLint):void:map = `auto %% {`en,
	R'''
	'''
}

glutWireCone(base:GLdouble, height:GLdouble, slices:GLint, stacks:GLint):void:map = `auto %% {`en,
	R'''
	'''
}

glutSolidCone(base:GLdouble, height:GLdouble, slices:GLint, stacks:GLint):void:map = `auto %% {`en,
	R'''
	'''
}

glutWireCube(size:GLdouble):void:map = `auto %% {`en,
	R'''
	'''
}

glutSolidCube(size:GLdouble):void:map = `auto %% {`en,
	R'''
	'''
}

glutWireTorus(innerRadius:GLdouble, outerRadius:GLdouble, sides:GLint, rings:GLint):void:map = `auto %% {`en,
	R'''
	'''
}

glutSolidTorus(innerRadius:GLdouble, outerRadius:GLdouble, sides:GLint, rings:GLint):void:map = `auto %% {`en,
	R'''
	'''
}

glutWireDodecahedron():void = `auto %% {`en,
	R'''
	'''
}

glutSolidDodecahedron():void = `auto %% {`en,
	R'''
	'''
}

glutWireTeapot(size:GLdouble):void:map = `auto %% {`en,
	R'''
	'''
}

glutSolidTeapot(size:GLdouble):void:map = `auto %% {`en,
	R'''
	'''
}

glutWireOctahedron():void = `auto %% {`en,
	R'''
	'''
}

glutSolidOctahedron():void = `auto %% {`en,
	R'''
	'''
}

glutWireTetrahedron():void = `auto %% {`en,
	R'''
	'''
}

glutSolidTetrahedron():void = `auto %% {`en,
	R'''
	'''
}

glutWireIcosahedron():void = `auto %% {`en,
	R'''
	'''
}

glutSolidIcosahedron():void = `auto %% {`en,
	R'''
	'''
}

glutVideoResizeGet(param:GLenum):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

glutSetupVideoResizing():void = `auto %% {`en,
	R'''
	'''
}

glutStopVideoResizing():void = `auto %% {`en,
	R'''
	'''
}

glutVideoResize(x:int, y:int, width:int, height:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutVideoPan(x:int, y:int, width:int, height:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutReportErrors():void = `auto %% {`en,
	R'''
	'''
}

glutIgnoreKeyRepeat(ignore:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutSetKeyRepeat(repeatMode:int):void:map = `auto %% {`en,
	R'''
	'''
}

glutForceJoystickFunc():void = `auto %% {`en,
	R'''
	'''
}

glutGameModeString(string:char@:const):void:map = `auto %% {`en,
	R'''
	'''
}

glutEnterGameMode():int {block?} = `auto %% {`en,
	R'''
	'''
}

glutLeaveGameMode():void = `auto %% {`en,
	R'''
	'''
}

glutGameModeGet(mode:GLenum):int:map {block?} = `auto %% {`en,
	R'''
	'''
}

}

// GLUT-specific type converter
cbridge_gl.AddTypeConvs {
	'Font' => cbridge.TypeConv(
			'Font', 'Once', [],
			R'''
			void *${arg.name} = Object_Font::GetObject(arg, ${idx})->GetEntity();
			''',
			nil,
			nil)
}

tmplSource = R"""
// Don't edit this file. This has been generated by Functions.cpp.gura.
#include "stdafx.h"

Gura_BeginModuleScope(${renderer.moduleName})

class FunctionPack {
private:
	AutoPtr<Environment> _pEnv;
	AutoPtr<Function> _pFunc;
public:
	inline FunctionPack() {}
	inline void SetFunc(Environment &env, Function *pFunc) {
		_pEnv.reset(env.Clone());
		_pFunc.reset(pFunc);
	}
	inline void ClearFunc() {
		_pEnv.reset(nullptr);
		_pFunc.reset(nullptr);
	}
	inline Value Eval(Argument &arg) {
		if (_pFunc.IsNull()) return Value::Nil;
		Value result = _pFunc->Eval(*_pEnv, arg);
		if (_pEnv->GetSignal().IsSignalled()) {
			_pEnv->GetSignal().PrintSignal(*_pEnv->GetConsoleErr());
			exit(1);
		}
		return result;
	}
	inline Value Eval() {
		AutoPtr<Argument> pArg(new Argument(_pFunc.get()));
		return Eval(*pArg);
	}
	inline Value Eval(const Value &v1) {
		AutoPtr<Argument> pArg(new Argument(_pFunc.get()));
		if (!pArg->StoreValue(*_pEnv, v1)) return Value::Nil;
		return Eval(*pArg);
	}
	inline Value Eval(const Value &v1, const Value &v2) {
		AutoPtr<Argument> pArg(new Argument(_pFunc.get()));
		if (!pArg->StoreValue(*_pEnv, v1, v2)) return Value::Nil;
		return Eval(*pArg);
	}
	inline Value Eval(const Value &v1, const Value &v2, const Value &v3) {
		AutoPtr<Argument> pArg(new Argument(_pFunc.get()));
		if (!pArg->StoreValue(*_pEnv, v1, v2, v3)) return Value::Nil;
		return Eval(*pArg);
	}
	inline Value Eval(const Value &v1, const Value &v2, const Value &v3, const Value &v4) {
		AutoPtr<Argument> pArg(new Argument(_pFunc.get()));
		if (!pArg->StoreValue(*_pEnv, v1, v2, v3, v4)) return Value::Nil;
		return Eval(*pArg);
	}
};

struct Context {
	int idxMenu;
	FunctionPack funcPackOnWMClose;
	//FunctionPack funcPackOnMenu;
	FunctionPack funcPackOnMenuTbl[256];
	FunctionPack funcPackOnDisplay;
	FunctionPack funcPackOnReshape;
	FunctionPack funcPackOnKeyboard;
	FunctionPack funcPackOnMouse;
	FunctionPack funcPackOnMotion;
	FunctionPack funcPackOnPassiveMotion;
	FunctionPack funcPackOnEntry;
	FunctionPack funcPackOnVisibility;
	FunctionPack funcPackOnIdle;
	FunctionPack funcPackOnTimer;
	FunctionPack funcPackOnMenuState;
	FunctionPack funcPackOnSpecial;
	FunctionPack funcPackOnSpaceballMotion;
	FunctionPack funcPackOnSpaceballRotate;
	FunctionPack funcPackOnSpaceballButton;
	FunctionPack funcPackOnButtonBox;
	FunctionPack funcPackOnDials;
	FunctionPack funcPackOnTabletMotion;
	FunctionPack funcPackOnTabletButton;
	FunctionPack funcPackOnMenuStatus;
	FunctionPack funcPackOnOverlayDisplay;
	FunctionPack funcPackOnWindowStatus;
	FunctionPack funcPackOnKeyboardUp;
	FunctionPack funcPackOnSpecialUp;
	FunctionPack funcPackOnJoystick;
	inline Context() : idxMenu(0) {}
};

Context *g_pContext = nullptr;

template<int idx> void OnMenuTmpl(int value)
{
	g_pContext->funcPackOnMenuTbl[idx].Eval(Value(value));
}

typedef void (*OnMenuType)(int value);

OnMenuType g_OnMenus[] = {
	OnMenuTmpl<0>, OnMenuTmpl<1>, OnMenuTmpl<2>, OnMenuTmpl<3>,
	OnMenuTmpl<4>, OnMenuTmpl<5>, OnMenuTmpl<6>, OnMenuTmpl<7>,
	OnMenuTmpl<8>, OnMenuTmpl<9>, OnMenuTmpl<10>, OnMenuTmpl<11>,
	OnMenuTmpl<12>, OnMenuTmpl<13>, OnMenuTmpl<14>, OnMenuTmpl<15>,
	OnMenuTmpl<16>, OnMenuTmpl<17>, OnMenuTmpl<18>, OnMenuTmpl<19>,
	OnMenuTmpl<20>, OnMenuTmpl<21>, OnMenuTmpl<22>, OnMenuTmpl<23>,
	OnMenuTmpl<24>, OnMenuTmpl<25>, OnMenuTmpl<26>, OnMenuTmpl<27>,
	OnMenuTmpl<28>, OnMenuTmpl<29>, OnMenuTmpl<30>, OnMenuTmpl<31>,
	OnMenuTmpl<32>, OnMenuTmpl<33>, OnMenuTmpl<34>, OnMenuTmpl<35>,
	OnMenuTmpl<36>, OnMenuTmpl<37>, OnMenuTmpl<38>, OnMenuTmpl<39>,
	OnMenuTmpl<40>, OnMenuTmpl<41>, OnMenuTmpl<42>, OnMenuTmpl<43>,
	OnMenuTmpl<44>, OnMenuTmpl<45>, OnMenuTmpl<46>, OnMenuTmpl<47>,
	OnMenuTmpl<48>, OnMenuTmpl<49>, OnMenuTmpl<50>, OnMenuTmpl<51>,
	OnMenuTmpl<52>, OnMenuTmpl<53>, OnMenuTmpl<54>, OnMenuTmpl<55>,
	OnMenuTmpl<56>, OnMenuTmpl<57>, OnMenuTmpl<58>, OnMenuTmpl<59>,
	OnMenuTmpl<60>, OnMenuTmpl<61>, OnMenuTmpl<62>, OnMenuTmpl<63>,
	OnMenuTmpl<64>, OnMenuTmpl<65>, OnMenuTmpl<66>, OnMenuTmpl<67>,
	OnMenuTmpl<68>, OnMenuTmpl<69>, OnMenuTmpl<70>, OnMenuTmpl<71>,
	OnMenuTmpl<72>, OnMenuTmpl<73>, OnMenuTmpl<74>, OnMenuTmpl<75>,
	OnMenuTmpl<76>, OnMenuTmpl<77>, OnMenuTmpl<78>, OnMenuTmpl<79>,
	OnMenuTmpl<80>, OnMenuTmpl<81>, OnMenuTmpl<82>, OnMenuTmpl<83>,
	OnMenuTmpl<84>, OnMenuTmpl<85>, OnMenuTmpl<86>, OnMenuTmpl<87>,
	OnMenuTmpl<88>, OnMenuTmpl<89>, OnMenuTmpl<90>, OnMenuTmpl<91>,
	OnMenuTmpl<92>, OnMenuTmpl<93>, OnMenuTmpl<94>, OnMenuTmpl<95>,
	OnMenuTmpl<96>, OnMenuTmpl<97>, OnMenuTmpl<98>, OnMenuTmpl<99>,
	OnMenuTmpl<100>, OnMenuTmpl<101>, OnMenuTmpl<102>, OnMenuTmpl<103>,
	OnMenuTmpl<104>, OnMenuTmpl<105>, OnMenuTmpl<106>, OnMenuTmpl<107>,
	OnMenuTmpl<108>, OnMenuTmpl<109>, OnMenuTmpl<110>, OnMenuTmpl<111>,
	OnMenuTmpl<112>, OnMenuTmpl<113>, OnMenuTmpl<114>, OnMenuTmpl<115>,
	OnMenuTmpl<116>, OnMenuTmpl<117>, OnMenuTmpl<118>, OnMenuTmpl<119>,
	OnMenuTmpl<120>, OnMenuTmpl<121>, OnMenuTmpl<122>, OnMenuTmpl<123>,
	OnMenuTmpl<124>, OnMenuTmpl<125>, OnMenuTmpl<126>, OnMenuTmpl<127>,
};

void OnWMClose()
{
	g_pContext->funcPackOnWMClose.Eval();
}

/*
void OnMenu(int value)
{
	g_pContext->funcPackOnMenu.Eval(Value(value));
}
*/

void OnDisplay(void)
{
	g_pContext->funcPackOnDisplay.Eval();
}

void OnReshape(int width, int height)
{
	g_pContext->funcPackOnReshape.Eval(Value(width), Value(height));
}

void OnKeyboard(unsigned char key, int x, int y)
{
	g_pContext->funcPackOnKeyboard.Eval(Value(key), Value(x), Value(y));
}

void OnMouse(int button, int state, int x, int y)
{
	g_pContext->funcPackOnMouse.Eval(Value(button), Value(state), Value(x), Value(y));
}

void OnMotion(int x, int y)
{
	g_pContext->funcPackOnMotion.Eval(Value(x), Value(y));
}

void OnPassiveMotion(int x, int y)
{
	g_pContext->funcPackOnPassiveMotion.Eval(Value(x), Value(y));
}

void OnEntry(int state)
{
	g_pContext->funcPackOnEntry.Eval(Value(state));
}

void OnVisibility(int state)
{
	g_pContext->funcPackOnVisibility.Eval(Value(state));
}

void OnIdle(void)
{
	g_pContext->funcPackOnIdle.Eval();
}

void OnTimer(int value)
{
	g_pContext->funcPackOnTimer.Eval(Value(value));
}

void OnMenuState(int state)
{
	g_pContext->funcPackOnMenuState.Eval(Value(state));
}

void OnSpecial(int key, int x, int y)
{
	g_pContext->funcPackOnSpecial.Eval(Value(key), Value(x), Value(y));
}

void OnSpaceballMotion(int x, int y, int z)
{
	g_pContext->funcPackOnSpaceballMotion.Eval(Value(x), Value(y), Value(z));
}

void OnSpaceballRotate(int x, int y, int z)
{
	g_pContext->funcPackOnSpaceballRotate.Eval(Value(x), Value(y), Value(z));
}

void OnSpaceballButton(int button, int state)
{
	g_pContext->funcPackOnSpaceballButton.Eval(Value(button), Value(state));
}

void OnButtonBox(int button, int state)
{
	g_pContext->funcPackOnButtonBox.Eval(Value(button), Value(state));
}

void OnDials(int dial, int value)
{
	g_pContext->funcPackOnDials.Eval(Value(dial), Value(value));
}

void OnTabletMotion(int x, int y)
{
	g_pContext->funcPackOnTabletMotion.Eval(Value(x), Value(y));
}

void OnTabletButton(int button, int state, int x, int y)
{
	g_pContext->funcPackOnTabletButton.Eval(Value(button), Value(state), Value(x), Value(y));
}

void OnMenuStatus(int status, int x, int y)
{
	g_pContext->funcPackOnMenuStatus.Eval(Value(status), Value(x), Value(y));
}

void OnOverlayDisplay(void)
{
	g_pContext->funcPackOnOverlayDisplay.Eval();
}

void OnWindowStatus(int state)
{
	g_pContext->funcPackOnWindowStatus.Eval(Value(state));
}

void OnKeyboardUp(unsigned char key, int x, int y)
{
	g_pContext->funcPackOnKeyboardUp.Eval(Value(key), Value(x), Value(y));
}

void OnSpecialUp(int key, int x, int y)
{
	g_pContext->funcPackOnSpecialUp.Eval(Value(key), Value(x), Value(y));
}

void OnJoystick(unsigned int buttonMask, int x, int y, int z)
{
	g_pContext->funcPackOnJoystick.Eval(Value(buttonMask), Value(x), Value(y), Value(z));
}

${renderer.RenderImplementation()}

void AssignFunctions(Environment &env)
{
	g_pContext = new Context();
	${renderer.RenderAssignment()}
}

Gura_EndModuleScope(${renderer.moduleName})
""".template()

tmplMakeDoc = R"""
#!/usr/bin/env gura
import(markdown)
import(glut) {*}

doc = markdown.document()

doc << [
	${renderer.funcInfos:*funcNameGura + '\n'}
]

doc.render@html(sys.stdout)
""".template()

cbridge_gl.Renderer('glut', nil) {|renderer|
	renderer.Render(tmplSource, 'Functions.cpp')
	//renderer.Render(tmplMakeDoc, 'makedoc.gura')
	//fs.chmod('a+x', 'makedoc.gura')
}

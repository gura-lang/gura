#!/usr/bin/env gura
#------------------------------------------------------------------------------
# MS-Excel simple interface
#------------------------------------------------------------------------------
import(mswin)

progid = 'Excel.Application'

read(filename:string, sheetindex => 1) {`block?} = {
	app = mswin.ole(progid)
	wb = app.Workbooks.Open(path.absname(filename))
	ws = wb.WorkSheets(sheetindex)
	lastCell = ws.Range('A1').SpecialCells(app.xlCellTypeLastCell)
	[nCols, nRows] = [lastCell.Column, lastCell.Row]
	try {
		tbl = for (iRow in 1..nRows):list {
			for (iCol in 1..nCols):list {
				ws.Cells(iRow, iCol).Value
			}
		}
	} catch {}
	wb.Close(0)
	app.Quit()
	block && return(tbl.each {|block|})
	tbl.each()
} %% {`en, 'markdown', 'Return an iterator that reads each line of Excel file.'}

writer = class {
	__init__(filename:string, sheetindex => 1, growvertFlag => true) = {
		this.filename = filename
		this.growvertFlag = growvertFlag
		this.app = mswin.ole(progid)
		this.wb = this.app.Workbooks.Add()
		this.ws = this.wb.WorkSheets(sheetindex)
		this.start(1, 1)
	}
	__del__() = {
		this.close()
	}
	start(iRow:number => 1, iCol:number => 1) = {
		[this.iRow, this.iCol] = [iRow, iCol]
		this.nEntries = 0
	} %% {`en, 'markdown', 'Set start point to write values.'}
	write(fields+):map = {
		if (this.growvertFlag) {
			for (field in fields) {|idx|
				this.ws.Cells(this.iRow + this.nEntries, this.iCol + idx).Value = field
			}
		} else {
			for (field in fields) {|idx|
				this.ws.Cells(this.iRow + idx, this.iCol + this.nEntries).Value = field
			}
		}
		this.nEntries += 1
	} %% {`en, 'markdown', 'Append value of fields into Excel sheet.'}
	clear() = {
		lastCell = this.ws.Range('A1').SpecialCells(this.app.xlCellTypeLastCell)
		this.ws.Range(this.ws.Cells(1, 1), lastCell).ClearContents()
		this.nEntries = 0
	} %% {`en, 'markdown', 'Clear contents of Excel sheet.'}
	autofit() = {
		lastCell = ws.Range('A1').SpecialCells(app.xlCellTypeLastCell)
		for (iCol in 1..lastCell.Column) {
			this.ws.Columns(iCol).EntireColumn().AutoFit()
		}
	} %% {`en, 'markdown', 'Fits column width by calculating maximum width of each column.'}
	close() = {
		this.wb.SaveAs(path.absname(this.filename))
		this.wb.Close(0)
		this.app.Quit()
	} %% {`en, 'markdown', 'Save file and exit Excel application.'}
}







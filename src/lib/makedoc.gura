#!/usr/bin/env gura
import(markdown)

//-----------------------------------------------------------------------------
text = R'''
# Built-in Operators

<table>
<tr><th>Operation</th><th>Explanation</th></tr>
<tr><td><code>+number</code></td><td></td></tr>
<tr><td><code>+complex</code></td><td></td></tr>
<tr><td><code>+rational</code></td><td></td></tr>
<tr><td><code>+matrix</code></td><td></td></tr>
<tr><td><code>+timedelta</code></td><td></td></tr>
<tr><td><code>+array@char</code></td><td></td></tr>
<tr><td><code>+array@uchar</code></td><td></td></tr>
<tr><td><code>+array@short</code></td><td></td></tr>
<tr><td><code>+array@ushort</code></td><td></td></tr>
<tr><td><code>+array@long</code></td><td></td></tr>
<tr><td><code>+array@ulong</code></td><td></td></tr>
<tr><td><code>+array@int</code></td><td></td></tr>
<tr><td><code>+array@uint</code></td><td></td></tr>
<tr><td><code>+array@float</code></td><td></td></tr>
<tr><td><code>+array@double</code></td><td></td></tr>
<tr><td><code>-number</code></td><td></td></tr>
<tr><td><code>-complex</code></td><td></td></tr>
<tr><td><code>-rational</code></td><td></td></tr>
<tr><td><code>-matrix</code></td><td></td></tr>
<tr><td><code>-timedelta</code></td><td></td></tr>
<tr><td><code>-array@char</code></td><td></td></tr>
<tr><td><code>-array@uchar</code></td><td></td></tr>
<tr><td><code>-array@short</code></td><td></td></tr>
<tr><td><code>-array@ushort</code></td><td></td></tr>
<tr><td><code>-prray@long</code></td><td></td></tr>
<tr><td><code>-array@ulong</code></td><td></td></tr>
<tr><td><code>-array@int</code></td><td></td></tr>
<tr><td><code>-array@uint</code></td><td></td></tr>
<tr><td><code>-array@float</code></td><td></td></tr>
<tr><td><code>-array@double</code></td><td></td></tr>
<tr><td><code>~number</code></td><td></td></tr>
<tr><td><code>!any</code></td><td></td></tr>
<tr><td><code>number..</code></td><td></td></tr>
<tr><td><code>any?</code></td><td></td></tr>
<tr><td><code>any*</code></td><td></td></tr>
<tr><td><code>number + number</code></td><td></td></tr>
<tr><td><code>number + complex</code></td><td></td></tr>
<tr><td><code>number + rational</code></td><td></td></tr>
<tr><td><code>complex + number</code></td><td></td></tr>
<tr><td><code>complex + complex</code></td><td></td></tr>
<tr><td><code>rational + number</code></td><td></td></tr>
<tr><td><code>rational + rational</code></td><td></td></tr>
<tr><td><code>matrix + matrix</code></td><td></td></tr>
<tr><td><code>datetime + timedelta</code></td><td></td></tr>
<tr><td><code>timedelta + datetime</code></td><td></td></tr>
<tr><td><code>string + string</code></td><td></td></tr>
<tr><td><code>binary + binary</code></td><td></td></tr>
<tr><td><code>binary + string</code></td><td></td></tr>
<tr><td><code>string + binary</code></td><td></td></tr>
<tr><td><code>pointer + number</code></td><td></td></tr>
<tr><td><code>string + any</code></td><td></td></tr>
<tr><td><code>any + string</code></td><td></td></tr>
<tr><td><code>number - number</code></td><td></td></tr>
<tr><td><code>number - complex</code></td><td></td></tr>
<tr><td><code>number - rational</code></td><td></td></tr>
<tr><td><code>complex - number</code></td><td></td></tr>
<tr><td><code>complex - complex</code></td><td></td></tr>
<tr><td><code>rational - number</code></td><td></td></tr>
<tr><td><code>rational - rational</code></td><td></td></tr>
<tr><td><code>matrix - matrix</code></td><td></td></tr>
<tr><td><code>datetime - timedelta</code></td><td></td></tr>
<tr><td><code>datetime - datetime</code></td><td></td></tr>
<tr><td><code>timedelta - timedelta</code></td><td></td></tr>
<tr><td><code>color - color</code></td><td></td></tr>
<tr><td><code>pointer - number</code></td><td></td></tr>
<tr><td><code>pointer - pointer</code></td><td></td></tr>
</table>

# Built-in Classes
'''

//-----------------------------------------------------------------------------
text_args = R'''
## args Class

The `args` class provides measures to access argument information that is passed to a function.
One of its purposes is to check if an attribute is specified in the function call.
It also provides a method to control a leader-trailer sequence,
a mechanism that flow controls such as `if-elsif-else` and `try-catch` utilize.

There's no constructor to realize an instance of `args` class.
Its instance is implicitly created when a function is called,
and you can refer to it by a variable named `__args__`.

Below is an example to use `args` class:

    func(v0, v1, v2):[attr1,attr2] = {
        printf('arg#%d %s\n', 0.., __args__.values)
        printf('attr1:%s attr2:%s\n', __args__.isset(`attr1), __args__.isset(`attr2))
    }

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>args#values</code></td><td><code>list</code></td><td>R</td>
<td>A list of argument values.</td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_array = R'''
## array Class

An instance of the `array` class stores multiple numeric values in a seamless binary sequence,
which can be passed without any conversion to functions in C libraries
that expect arrays of `char`, `short`, `int` and so on.

There are several `array` classes depending on the element type they handle.
They're listed in the the table below:

<table>
<tr><th>Class Name</th><th>Element Type</th></tr>
<tr><td><code>array@char</code></td><td><code>char</code></td></tr>
<tr><td><code>array@uchar</code></td><td><code>unsigned char</code></td></tr>
<tr><td><code>array@short</code></td><td><code>short</code></td></tr>
<tr><td><code>array@ushort</code></td><td><code>unsigned short</code></td></tr>
<tr><td><code>array@long</code></td><td><code>long</code></td></tr>
<tr><td><code>array@ulong</code></td><td><code>unsigned long</code></td></tr>
<tr><td><code>array@int</code></td><td><code>int</code></td></tr>
<tr><td><code>array@uint</code></td><td><code>unsigned int</code></td></tr>
<tr><td><code>array@float</code></td><td><code>float</code></td></tr>
<tr><td><code>array@double</code></td><td><code>double</code></td></tr>
</table>
'''

//-----------------------------------------------------------------------------
text_audio = R'''
## audio Class

The `audio` class provides measures to work on audio data.
'''

//-----------------------------------------------------------------------------
text_binary = R'''
## binary Class

The `binary` class provides measures to work on binary data
that is a byte sequence without any format.

You can create a `binary` instance by calling `binary()` constructor function.

You can also create the instance by specifying `b` prefix before a string literal.
For example, the code below creates a `binary` instance that contains a sequence
`0x41, 0x42, 0xfe, 0x03, 0x43, 0x44`.

    b'AB\xfe\x03CD'

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>binary#writable</code></td><td><code>boolean</code></td><td>R</td>
<td>Indicates if the content of the binary object is writable.</td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_codec = R'''
## codec Class

The `codec` class provides measures to convert character codes.
'''

//-----------------------------------------------------------------------------
text_color = R'''
## color Class

An instance of the `color` class represents a color data that consists of red, green, blue and alpha elements.

You can create a `color` instance by calling `color()` constructor function.

Some instances are predefined as class variables:
`color.black`, `color.maroon`, `color.green`, `color.olive`, `color.navy`, `color.purple`,
`color.teal`, `color.gray`, `color.silverk`, `color.red`, `color.lime`, `color.yellow`,
`color.blue`, `color.aqua`, `color.white`.

### Predefined Variables

<table>
<tr><th>Variable</th><th>Type</th><th>Explanation</th></tr>

<tr><td><code>color.names</code></td><td><code>string[]</code></td>
<td>A list of color names that can be passed to <code>color()</code> function.</td></tr>

</table>

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>color#r</code></td><td><code>number</code></td><td>R/W</td>
<td>Value of the red element.</td></tr>

<tr><td><code>color#g</code></td><td><code>number</code></td><td>R/W</td>
<td>Value of the green element.</td></tr>

<tr><td><code>color#b</code></td><td><code>number</code></td><td>R/W</td>
<td>Value of the blue element.</td></tr>

<tr><td><code>color#a</code></td><td><code>number</code></td><td>R/W</td>
<td>Value of the alpha element.</td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_datetime = R'''
## datetime Class

The `datetime` class provides measures to handle date and time information.

You can create a `datetime` instance by calling following functions:

- `datetime()` constructor function
- `datetime.now()`
- `datetime.today()`

### Predefined Variables

<table>
<tr><th>Variable</th><th>Type</th><th>Explanation</th></tr>

<tr><td><code>datetime.Sunday</code></td><td><code>number</code></td>
<td>Assigned with number 0 that represents Sunday.</td></tr>

<tr><td><code>datetime.Monday</code></td><td><code>number</code></td>
<td>Assigned with number 1 that represents Monday.</td></tr>

<tr><td><code>datetime.Tuesday</code></td><td><code>number</code></td>
<td>Assigned with number 2 that represents Tuesday.</td></tr>

<tr><td><code>datetime.Wednesday</code></td><td><code>number</code></td>
<td>Assigned with number 3 that represents Wednesday.</td></tr>

<tr><td><code>datetime.Thursday</code></td><td><code>number</code></td>
<td>Assigned with number 4 that represents Thursday.</td></tr>

<tr><td><code>datetime.Friday</code></td><td><code>number</code></td>
<td>Assigned with number 5 that represents Friday.</td></tr>

<tr><td><code>datetime.Saturday</code></td><td><code>number</code></td>
<td>Assigned with number 6 that represents Saturday.</td></tr>

</table>

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>datetime#year</code></td><td><code>number</code></td><td>R/W</td>
<td>Chritian year.</td></tr>

<tr><td><code>datetime#month</code></td><td><code>number</code></td><td>R/W</td>
<td>Month starting from 1. Numbers from 1 to 12 correspond to January to December.</td></tr>

<tr><td><code>datetime#day</code></td><td><code>number</code></td><td>R/W</td>
<td>Day in a month starting from 1. </td></tr>

<tr><td><code>datetime#hour</code></td><td><code>number</code></td><td>R/W</td>
<td>Hour in a day between 0 and 23.</td></tr>

<tr><td><code>datetime#min</code></td><td><code>number</code></td><td>R/W</td>
<td>Minute in an hour between 0 and 59.</td></tr>

<tr><td><code>datetime#sec</code></td><td><code>number</code></td><td>R/W</td>
<td>Second in a minute between 0 and 59.</td></tr>

<tr><td><code>datetime#usec</code></td><td><code>number</code></td><td>R/W</td>
<td>Millisecond in a second between 0 and 999.</td></tr>

<tr><td><code>datetime#wday</code></td><td><code>number</code></td><td>R</td>
<td>Week number starting from 0. Number from 0 to 6 corresponds to Sunday to Saturday.</td></tr>

<tr><td><code>datetime#week</code></td><td><code>number</code></td><td>R</td>
<td>
Week symbol that takes one of the followings:
`` `sunday``, `` `monday``, `` `tuesday``, `` `wednesday``,
`` `thursday``, `` `friday``, `` `saturday``
</td></tr>

<tr><td><code>datetime#yday</code></td><td><code>number</code></td><td>R</td>
<td>Day in a year starting from 1.</td></tr>

<tr><td><code>datetime#unixtime</code></td><td><code>number</code></td><td>R</td>
<td>Seconds passed from 00:00:00 on January 1st in 1970 in UTC.</td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_declaration = R'''
## declaration Class

The `declaration` class provides information about argument's declaration defined in a function.
You can get an iterator of `declaration` instances with the following measures
that the `function` class provides:

- `function#decls`
- `function.getdecls()`

Below is an example to print argument names declared in a function.

    f(a, b, c, d) = {}
	println(f.decls:*name)


### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>declaration#symbol</code></td><td><code>symbol</code></td><td>R</td>
<td>The name of the declaration in symbol.</td></tr>

<tr><td><code>declaration#name</code></td><td><code>string</code></td><td>R</td>
<td>The name of the declaration in string.</td></tr>

<tr><td><code>declaration#default</code></td><td><code>expr</code></td><td>R</td>
<td>The expression that provides a default value.</td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_dict = R'''
## dict Class

The `dict` class provides measures to handle dictionary data.

You can create a `dict` instance by calling `dict()` constructor function.

You can also use a function named `%` to create an instance
that is an alias of `dict()` function.
'''

//-----------------------------------------------------------------------------
text_directory = R'''
## directory Class

'''

//-----------------------------------------------------------------------------
text_environment = R'''
## environment Class

'''

//-----------------------------------------------------------------------------
text_error = R'''
## error Class

The `error` class provides measures to access error information.

There is no measures to create an `error` instance.
They're instantiated and passed to a block of `catch()` function
when an error occurs within a `try` block in a `try-catch` sequence.

In the following code, `e` is an instance that contains information
about an error that has occured in the `try` block.

    try {
        // any jobs
    } catch {|e:error|
        // ...
    }

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>error#source</code></td><td><code>string</code></td><td>R</td>
<td>The name of the file that causes this error.</td></tr>

<tr><td><code>error#lineno</code></td><td><code>number</code></td><td>R</td>
<td>The number of line where the expression that causes this error starts.</td></tr>

<tr><td><code>error#linenobtm</code></td><td><code>number</code></td><td>R</td>
<td>The number of line where the expression that causes this error ends.</td></tr>

<tr><td><code>error#postext</code></td><td><code>string</code></td><td>R</td>
<td>A text that consists of a source name and a line number.</td></tr>

<tr><td><code>error#text</code></td><td><code>string</code></td><td>R</td>
<td>An error message.
If an attribute `:lineno` is specified, it would contain a line number.</td></tr>

<tr><td><code>error#trace</code></td><td><code>expr[]</code></td><td>R</td>
<td>Stack trace.</td></tr>

</table>

'''

//-----------------------------------------------------------------------------
text_expr = R'''
## expr Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>expr#attrs</code></td><td><code>symbol[]</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#attrsopt</code></td><td><code>symbol[]</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#block</code></td><td><code>expr</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#blockparam</code></td><td><code>iterator</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#body</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#car</code></td><td><code>expr</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#cdr</code></td><td><code>iterator</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#child</code></td><td><code>expr</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#children</code></td><td><code>iterator</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#left</code></td><td><code>expr</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#lineno</code></td><td><code>number</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#linenobtm</code></td><td><code>number</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#operator</code></td><td><code>operator</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#postext</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#right</code></td><td><code>expr</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#source</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#suffix</code></td><td><code>symbol</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#symbol</code></td><td><code>symbol</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#trailer</code></td><td><code>expr</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#typename</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#typesym</code></td><td><code>symbol</code></td><td>R</td>
<td></td></tr>

<tr><td><code>expr#value</code></td><td><code>any</code></td><td>R</td>
<td></td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_formatter = R'''
## formatter Class

'''

//-----------------------------------------------------------------------------
text_function = R'''
## function Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>function#decls</code></td><td><code>iterator</code></td><td>R</td>
<td>iterator of <code>declaration</code> instances that provide information about argument declaration the function defines.</td></tr>

<tr><td><code>function#expr</code></td><td><code>expr</code></td><td>R/W</td>
<td>an expression of the function.</td></tr>

<tr><td><code>function#format</code></td><td><code>string</code></td><td>R</td>
<td>a string showing a declared format of the function.</td></tr>

<tr><td><code>function#fullname</code></td><td><code>string</code></td><td>R</td>
<td>a full name of the function that is prefixed by a name of the module or the class it belongs to. </td></tr>

<tr><td><code>function#name</code></td><td><code>string</code></td><td>R</td>
<td>a name of the function in <code>string</code>.</td></tr>

<tr><td><code>function#symbol</code></td><td><code>symbol</code></td><td>R/W</td>
<td>a name of the function in <code>symbol</code>. </td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_help = R'''
## help Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>help#format</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>help#lang</code></td><td><code>symbol</code></td><td>R</td>
<td></td></tr>

<tr><td><code>help#text</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_image = R'''
## image Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>image#format</code></td><td><code>symbol</code></td><td>R</td>
<td></td></tr>

<tr><td><code>image#height</code></td><td><code>number</code></td><td>R</td>
<td></td></tr>

<tr><td><code>image#palette</code></td><td><code>palette</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>image#width</code></td><td><code>number</code></td><td>R</td>
<td></td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_iterator = R'''
## iterator Class

'''

//-----------------------------------------------------------------------------
text_list = R'''
## list Class

'''

//-----------------------------------------------------------------------------
text_matrix = R'''
## matrix Class

'''

//-----------------------------------------------------------------------------
text_operator = R'''
## operator Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>operator#symbol</code></td><td><code>symbol</code></td><td>R</td>
<td>Operator symbol.</td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_palette = R'''
## palette Class

'''

//-----------------------------------------------------------------------------
text_pointer = R'''
## pointer Class


'''

//-----------------------------------------------------------------------------
text_semaphore = R'''
## semaphore Class

'''

//-----------------------------------------------------------------------------
text_stream = R'''
## stream Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>stream#stat</code></td><td><code>object</code></td><td>R</td>
<td>Status of the stream.</td></tr>

<tr><td><code>stream#name</code></td><td><code>string</code></td><td>R</td>
<td>Name of the stream.</td></tr>

<tr><td><code>stream#identifier</code></td><td><code>string</code></td><td>R</td>
<td>Identifier of the stream.</td></tr>

<tr><td><code>stream#readable</code></td><td><code>boolean</code></td><td>R</td>
<td>Indicates whether the stream is readable.</td></tr>

<tr><td><code>stream#writable</code></td><td><code>boolean</code></td><td>R</td>
<td>Indicates whether the stream is writable.</td></tr>

<tr><td><code>stream#codec</code></td><td><code>codec</code></td><td>R</td>
<td>`codec` instance associated with the stream.</td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_suffixmgr = R'''
## suffixmgr Class

The `suffixmgr` class provides measures to access suffix managers
that are responsible to handle suffix symbols appended to number or string literals.

Below is an example to register a suffix `X` that converts a string into upper case
after being appended to a string literal:

    suffixmgr(`string).assign(`X) {|body| body.upper()}

You can use that suffix like below:

    'hello world'X
'''

//-----------------------------------------------------------------------------
text_template = R'''
## template Class

'''

//-----------------------------------------------------------------------------
text_timedelta = R'''
## timedelta Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>timedelta#days</code></td><td><code>number</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>timedelta#secs</code></td><td><code>number</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>timedelta#usec</code></td><td><code>number</code></td><td>R/W</td>
<td></td></tr>

</table>
'''

//-----------------------------------------------------------------------------
text_uri = R'''
## uri Class

### Properties

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>uri#scheme</code></td><td><code>string</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>uri#user</code></td><td><code>string</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>uri#password</code></td><td><code>string</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>uri#host</code></td><td><code>string</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>uri#port</code></td><td><code>string</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>uri#urlpath</code></td><td><code>string</code></td><td>R/W</td>
<td></td></tr>

<tr><td><code>uri#misc</code></td><td><code>string</code></td><td>R/W</td>
<td></td></tr>

</table>
'''

write(doc:markdown.document) = {
	doc << text
	//-------------------------------------------------------------------------
	doc << text_args
	doc << '### Methods'
	doc << [
		args.finalize_trailer
		args.isset
		args.quit_trailer
	]
	//-------------------------------------------------------------------------
	doc << text_array
	doc << '### Methods'
	[
		array@char,
		array@char.dump, array@char.each, array@char.fill, array@char.head,
		array@char.offset, array@char.paste, array@char.tail
	].each {|func|
		doc.writefunc(func,
					  function.getfullname(func).replace('@char', '@XXX'),
					  function.getformat(func).replace('@char', '@XXX'))
	}
	//-------------------------------------------------------------------------
	doc << text_audio
	doc << '### Methods'
	doc << [
		audio.each
		audio.get
		audio.put
		audio.sinewave
		audio.store
	]
	//-------------------------------------------------------------------------
	doc << text_binary
	doc << '### Methods'
	doc << [
		binary
		binary.add
		binary.alloc
		binary.decode
		binary.dump
		binary.each
		binary.encodeuri
		binary.hex
		binary.len
		binary.pack
		binary.pointer
		binary.reader
		binary.store
		binary.unpack
		binary.unpacks
		binary.writer
	]
	//-------------------------------------------------------------------------
	doc << text_codec
	doc << '### Methods'
	doc << [
		codec.addcr
		codec.decode
		codec.delcr
		codec.encode
	]
	//-------------------------------------------------------------------------
	doc << text_color
	doc << '### Methods'
	doc << [
		color
		color.getgray
		color.html
		color.tolist
	]
	//-------------------------------------------------------------------------
	doc << text_datetime
	doc << '### Methods'
	doc << [
		datetime,
		datetime.clrtzoff
		datetime.format
		datetime.isleap
		datetime.monthdays
		datetime.now
		datetime.parse
		datetime.settzoff
		datetime.time
		datetime.today
		datetime.utc
		datetime.weekday
	]
	//-------------------------------------------------------------------------
	doc << text_declaration
	doc << '### Methods'
	doc << [
		declaration.istype
	]
	//-------------------------------------------------------------------------
	doc << text_dict
	doc << '### Methods'
	doc << [
		dict,
		dict.append
		dict.clear
		dict.erase
		dict.get
		dict.haskey
		dict.items
		dict.keys
		dict.len
		dict.put
		dict.values
	]
	//-------------------------------------------------------------------------
	doc << text_directory
	doc << '### Methods'
	doc << [
		directory
	]
	//-------------------------------------------------------------------------
	doc << text_environment
	doc << '### Methods'
	doc << [
		environment.getprop!
		environment.lookup
		environment.setprop!
	]
	//-------------------------------------------------------------------------
	doc << text_error
	//-------------------------------------------------------------------------
	doc << text_expr
	doc << '### Methods'
	doc << [
		expr
		expr.eval
		expr.parse
		expr.textize
		expr.tofunction
		expr.unquote
		expr.write
		// type chekers - Unary and descendants
		expr.isunary
		expr.isunaryop
		expr.isquote
		// type chekers - Binary and descendants
		expr.isbinary
		expr.isbinaryop
		expr.isassign
		expr.ismember
		// type chekers - Collector and descendants
		expr.iscollector
		expr.isroot
		expr.isblock
		expr.islister
		expr.isiterer
		// type chekers - Compound and descendants
		expr.iscompound
		expr.isindexer
		expr.iscaller
		// type chekers - others
		expr.isvalue
		expr.isidentifier
		expr.issuffixed
	]
	//-------------------------------------------------------------------------
	doc << text_formatter
	doc << '### Methods'
	doc << [
		formatter.getfieldminwidth
		formatter.getpadding
		formatter.getplusmode
		formatter.getprecision
		formatter.isleftalign
		formatter.issharp
		formatter.isuppercase
	]
	//-------------------------------------------------------------------------
	doc << text_function
	doc << '### Methods'
	doc << [
		function
		function.addhelp
		function.getdecls
		function.getexpr
		function.getformat
		function.getfullname
		function.gethelp
		function.getname
		function.getsymbol
		function.mathdiff
	]
	//-------------------------------------------------------------------------
	doc << text_help
	doc << [
	]
	//-------------------------------------------------------------------------
	doc << text_image
	doc << '### Methods'
	doc << [
		image
		image.allocbuff
		image.blur
		image.clear
		image.crop
		image.delpalette
		image.extract
		image.fill
		image.fillrect
		image.flip
		image.getpixel
		image.grayscale
		image.mapcolorlevel
		image.paste
		image.putpixel
		image.size
		image.store
		image.read
		image.reducecolor
		image.replacecolor
		image.resize
		image.rotate
		image.scan
		image.setalpha
		image.thumbnail
		image.write
	]
	//-------------------------------------------------------------------------
	doc << text_iterator
	doc << '### Methods Specific to Iterator Class'
	doc << [
		iterator
		range
		interval
		consts
		rands
		// assignment of instance methods specific to iterator
		iterator.delay
		iterator.isinfinite
		iterator.next
		iterator.repeater
	]
	doc << '### Methods Common between Iterator and List Class'
	doc << [
		// assignment of instance methods that are common with list
		iterator.after
		iterator.align
		iterator.and
		iterator.average
		iterator.before
		iterator.contains
		iterator.count
		iterator.cycle
		iterator.each
		iterator.filter
		iterator.find
		iterator.flat
		iterator.fold
		iterator.format
		iterator.head
		iterator.join
		iterator.joinb
		iterator.len
		iterator.map
		iterator.max
		iterator.min
		iterator.nilto
		iterator.offset
		iterator.or
		iterator.pack
		iterator.pingpong
		iterator.print
		iterator.printf
		iterator.println
		iterator.rank
		iterator.reduce
		iterator.replace
		iterator.reverse
		iterator.roundoff
		iterator.runlength
		iterator.since
		iterator.skip
		iterator.skipnil
		iterator.sort
		iterator.stddev
		iterator.sum
		iterator.tail
		iterator.until
		iterator.variance
		iterator.walk
		iterator.while
	]
	//-------------------------------------------------------------------------
	doc << text_list
	doc << '### Methods Specific to List Class'
	doc << [
		list
		xlist
		set
		xset
		// assignment of class methods
		list.zip
		// assignment of instance methods specific to list
		list.add
		list.append
		list.clear
		list.combination
		list.erase
		list.first
		list.flat
		list.get
		list.insert
		list.isempty
		list.last
		list.permutation
		list.put
		list.shift
		list.shuffle
	]
	doc << '### Methods Common between Iterator and List Class'
	doc << [
		list.after
		list.align
		list.and
		list.average
		list.before
		list.contains
		list.count
		list.cycle
		list.each
		list.filter
		list.find
		list.fold
		list.format
		list.head
		list.join
		list.joinb
		list.len
		list.map
		list.max
		list.min
		list.nilto
		list.offset
		list.or
		list.pack
		list.pingpong
		list.print
		list.printf
		list.println
		list.rank
		list.reduce
		list.replace
		list.reverse
		list.roundoff
		list.runlength
		list.since
		list.skip
		list.skipnil
		list.sort
		list.stddev
		list.sum
		list.tail
		list.until
		list.variance
		list.walk
		list.while
	]
	//-------------------------------------------------------------------------
	doc << text_matrix
	doc << '### Methods'
	doc << [
		matrix
		matrix.col
		matrix.colsize
		matrix.each
		matrix.eachcol
		matrix.eachrow
		matrix.identity
		matrix.invert
		matrix.issquare
		matrix.rotation
		matrix.rotation_x
		matrix.rotation_y
		matrix.rotation_z
		matrix.roundoff
		matrix.row
		matrix.rowsize
		matrix.set
		matrix.setcol
		matrix.setrow
		matrix.submat
		matrix.tolist
		matrix.transpose
	]
	//-------------------------------------------------------------------------
	doc << text_operator
	doc << '### Methods'
	doc << [
		operator
		operator.assign
		operator.entries
	]
	//-------------------------------------------------------------------------
	doc << text_palette
	doc << '### Methods'
	doc << [
		palette
		palette.each
		palette.nearest
		palette.shrink
		palette.updateby
	]
	//-------------------------------------------------------------------------
	doc << text_pointer
	doc << '### Methods'
	doc << [
		pointer.forward
		pointer.pack
		pointer.reset
		pointer.unpack
		pointer.unpacks
	]
	//-------------------------------------------------------------------------
	doc << text_semaphore
	doc << '### Methods'
	doc << [
		semaphore
		semaphore.release
		semaphore.session
		semaphore.wait
	]
	//-------------------------------------------------------------------------
	doc << text_stream
	doc << '### Methods'
	doc << [
		open
		stream
		readlines
		stream.addcr
		stream.close
		stream.compare
		stream.copy
		stream.copyfrom
		stream.copyto
		stream.delcr
		stream.deserialize
		stream.flush
		stream.peek
		//stream.prefetch
		stream.print
		stream.printf
		stream.println
		stream.read
		stream.readchar
		stream.readline
		stream.readlines
		stream.readtext
		stream.seek
		stream.serialize
		stream.setcodec
		stream.tell
		stream.write
	]
	//-------------------------------------------------------------------------
	doc << text_suffixmgr
	doc << '### Methods'
	doc << [
		suffixmgr
		suffixmgr.assign
	]
	//-------------------------------------------------------------------------
	doc << text_template
	doc << '### Methods'
	doc << [
		template
		template.block
		template.call
		template.def
		template.embed
		template.extends
		template.parse
		template.read
		template.render
		template.super
		//template._R_block
		//template._R_call
		//template._R_def
		//template._R_embed
		//template._R_extends
		//template._R_super
	]
	//-------------------------------------------------------------------------
	doc << text_timedelta
	doc << '### Methods'
	doc << [
		timedelta
	]
	//-------------------------------------------------------------------------
	doc << text_uri
	doc << '### Methods'
	doc << [
		uri
		uri.getfragment
		uri.getpath
		uri.getquery
		uri.parsequery
	]
	doc
}

if (__name__ == '__main__') {
	write(markdown.document()).render@html(sys.stdout)
}

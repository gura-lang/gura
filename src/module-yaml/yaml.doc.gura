#!/usr/bin/env gura
import(markdown)
import(yaml)

text@en = R"""
# yaml Module

## Overview

The `yaml` module provides measures to read/write YAML files.
You can use this module as a measure to serialize and deserialize objects
that consists of `list`, `dict` and `string` instances.

Below is an example to reconstruct values from YAML text:

    txt = '''
    key1:
      - item-A
      - item-B
      - item-C
    key2:
      - item-D
      - item-E
      - item-F
    '''
    x = yaml.parse(txt)
    // x has the following value:
    // %{
    //   'key1' => ['item-A', 'item-B', 'item-C']
    //   'key2' => ['item-D', 'item-E', 'item-F']
    // }


## Correspondance of Data Object

The below table shows how YAML data types correspond to Gura's value types each other:

<table>
<tr><th>YAML Data Type</th><th>Gura's Value Type</th></tr>
<tr><td>sequence</td><td><code>list</code></td></tr>
<tr><td>mapping</td><td><code>dict</code></td></tr>
<tr><td>scalar</td><td><code>string</code></td></tr>
</table>

## Module Function

${markdown.makedoc@function(`en
yaml.compose
yaml.parse
yaml.read
yaml.write
)}

## Thanks

This module uses yaml library which is distributed in the following site:

[http://pyyaml.org/wiki/LibYAML](http://pyyaml.org/wiki/LibYAML)
""".embed()

markdown.makedoc@module(locals(), %{`en => text@en})

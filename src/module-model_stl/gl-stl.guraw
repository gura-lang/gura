#!/usr/bin/env gura

// Orignal source file is written in C and is available from the site below.
// http://www.wakayama-u.ac.jp/~tokoi/opengl/libglut.html

import(glu) {*}
import(opengl) {*}
import(model.stl)

objList = nil

prepare() = {
	objList:extern = glGenLists(1)
	//fileName = 'cube-ascii.stl'
	//fileName = 'cube-binary.stl'
	fileName = 'Voyager_17.stl'
	reader = model.stl.reader(fileName)
	println(reader.solidname || reader.header)
	scale = .05
	glNewList(objList, GL_COMPILE) {
		reader.each {|facet|
			glNormal(facet.normal)
			glVertex(facet.vertex1 * scale)
			glVertex(facet.vertex2 * scale)
			glVertex(facet.vertex3 * scale)
		}
	}	
}

init(w:number, h:number) = {
	glClearColor(1, 1, 1, 1)
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
	glEnable([GL_DEPTH_TEST, GL_CULL_FACE])
	glEnable([GL_LIGHTING, GL_LIGHT0, GL_LIGHT1])
	glCullFace(GL_FRONT)
	glViewport(0, 0, w, h)
	glMatrixMode(GL_PROJECTION)
	glLoadIdentity()
	gluPerspective(30, w / h, 1, 100)

	position = @{0.0, 0.0, 0.0, 0.0}
	glLightfv(GL_LIGHT0, GL_POSITION, position)
}

display(degree:number) = {
	glMatrixMode(GL_MODELVIEW)
	glLoadIdentity()
	gluLookAt(3, 4, 5, 0, 0, 0, 0, 1, 0)
	glRotated(degree, 1, 1, 0)
	glMaterialfv(GL_FRONT_AND_BACK,
				 GL_AMBIENT_AND_DIFFUSE, [.8, .8, .8, 1])
	glBegin(GL_TRIANGLES) {
		glCallList(objList)
	}
	glFlush()
}

scope {
	import(sdl2, sdl)
	import(glapp)
	degree = 0
	[width, height] = [600, 600]
	App = class(glapp.App) {
		OnInit() = {
			prepare()
		}
		OnResize(width:number, height:number) = {
		}
		OnDraw() = {
			init(width, height)
			display(degree)
			this.SwapWindow()
		}
		OnIdle() = {
			updateFlag = false
			if (this.CheckKeyboardState(sdl.SCANCODE_LEFT)) {
				updateFlag = true
				degree += 5
			}
			if (this.CheckKeyboardState(sdl.SCANCODE_RIGHT)) {
				updateFlag = true
				degree -= 5
			}
			init(width, height)
			if (updateFlag) {
				display(degree)
				this.SwapWindow()
			}
		}
	}
	app = App()
	app.MainLoop(nil, width, height, 0)
}

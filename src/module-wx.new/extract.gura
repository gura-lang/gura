#!/usr/bin/env gura
import(re)

dirNameWx = 'interface.wx'
dirNameDst = 'tmp'
//dirNameDst = 'generated'

classNamesToSkip = [
	'wxArchiveIterator'
	'wxDDEServer'
	'wxDebugContext'
	'wxDialUpManager'
	'wxHashMap'
	'wxHashSet'
	'wxAccessible'
	'wxAutomationObject'
	'wxRegConfig'
	'wxDDEConnection'
	'wxBufferedPaintDC'
	'wxDDEClient'
	'wxDataViewChoiceByIndexRenderer'
	'wxActiveXEvent'
	'wxDialUpEvent'
	'wxPowerEvent'
	'wxNumValidator'
	'wxFloatingPointValidator'
	'wxActiveXContainer'
	'wxBitmapComboBox'
	'wxSystemSettings'
	'wxPersistentWindow'
	'wxPixelData'
	'wxRegKey'
	'wxRefCounter'
	'wxScopeGuard'
	'wxScopedArray'
	'wxScopedCharTypeBuffer'
	'wxScopedPtr'
	'wxScopedTiedPtr'
	'wxFFileStream'
	'wxFileStream'
	'wxTaskBarButton'
	'wxTaskBarJumpList'
	'wxTaskBarJumpListItem'
	'wxThumbBarButton'
	'wxTaskBarJumpListCategory'
	'wxResourceTranslationsLoader'
	'wxVarHVScrollHelper'
	'wxTrackable'
]

tmpl@ClassesSource_gura = R'''
#!/usr/bin/env gura

srcs:public = [
	${classInfosAtRoot:*Gen_SourceEntry()}
]
'''.template()

tmpl@Classes_h = R'''
#ifndef __CLASSES_H__
#define __CLASSES_H__

${classInfosAtRoot:*Gen_Include()}

#endif
'''.template()

tmpl@Classes_cpp = R'''
#include "stdafx.h"

Gura_BeginModuleScope(wx)

void AssignConstants(Environment &env)
{
	${enumInfoNoName.Gen_Assignment()}
	${enumInfos:*Gen_Assignment()}
}

void RegisterClasses(Environment &env)
{
	${classInfosAtRoot:*Gen_RealizeClass()}
	${classInfosAtRoot:*Gen_PrepareClass()}
}

Gura_EndModuleScope(wx)
'''.template()

tmpl@HeaderBase = R'''
//----------------------------------------------------------------------------
// wx${classNameShort}
//----------------------------------------------------------------------------
#ifndef __CLASS_WX_${classNameShort.upper()}_H__
#define __CLASS_WX_${classNameShort.upper()}_H__
#include <${pathNameWxHdr}>

Gura_BeginModuleScope(wx)

//----------------------------------------------------------------------------
// Class declaration for wx${classNameShort}
//----------------------------------------------------------------------------
Gura_DeclareUserClass(wx_${classNameShort});

//----------------------------------------------------------------------------
// Object declaration for wx${classNameShort}
//----------------------------------------------------------------------------
class Object_wx_${classNameShort} : public Object {
protected:
	wx${classNameShort} *_pEntity;
	GuraObjectObserver *_pObserver;
	bool _ownerFlag;
public:
	Gura_DeclareObjectAccessor(wx_${classNameShort})
public:
	inline Object_wx_${classNameShort}(wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object(Gura_UserClass(wx_AboutDialogInfo)),
				_pEntity(pEntity), _pObserver(pObserver), _ownerFlag(ownerFlag) {}
	inline Object_wx_${classNameShort}(Class *pClass, wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object(pClass),
				_pEntity(pEntity), _pObserver(pObserver), _ownerFlag(ownerFlag) {}
	virtual ~Object_wx_${classNameShort}();
	virtual Object *Clone() const;
	virtual String ToString(bool exprFlag);
	inline void SetEntity(wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) {
		if (_ownerFlag) delete _pEntity;
		_pEntity = pEntity;
		_pObserver = pObserver;
		_ownerFlag = ownerFlag;
	}
	inline void InvalidateEntity() { _pEntity = nullptr, _pObserver = nullptr, _ownerFlag = false; }
	inline wx${classNameShort} *GetEntity() {
		return static_cast<wx${classNameShort} *>(_pEntity);
	}
	inline wx${classNameShort} *ReleaseEntity() {
		wx${classNameShort} *pEntity = GetEntity();
		InvalidateEntity();
		return pEntity;
	}
	inline void NotifyGuraObjectDeleted() {
		if (_pObserver != nullptr) _pObserver->GuraObjectDeleted();
	}
	inline bool IsInvalid(Signal &sig) const {
		if (_pEntity != nullptr) return false;
		SetError_InvalidWxObject(sig, "wx${classNameShort}");
		return true;
	}
};

Gura_EndModuleScope(wx)

#endif
'''.template()

tmpl@HeaderDerv = R'''
//----------------------------------------------------------------------------
// wx${classNameShort}
//----------------------------------------------------------------------------
#ifndef __CLASS_WX_${classNameShort.upper()}_H__
#define __CLASS_WX_${classNameShort.upper()}_H__
#include <${pathNameWxHdr}>

Gura_BeginModuleScope(wx)

//----------------------------------------------------------------------------
// Class declaration for wx${classNameShort}
//----------------------------------------------------------------------------
Gura_DeclareUserClass(wx_${classNameShort});

//----------------------------------------------------------------------------
// Object declaration for wx${classNameShort}
//----------------------------------------------------------------------------
class Object_wx_${classNameShort} : public Object_wx_${classNameShortOfParent} {
public:
	Gura_DeclareObjectAccessor(wx_${classNameShort})
public:
	inline Object_wx_${classNameShort}(wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object_wx_${classNameShortOfParent}(Gura_UserClass(wx_${classNameShort}), pEntity, pObserver, ownerFlag) {}
	inline Object_wx_${classNameShort}(Class *pClass, wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object_wx_${classNameShortOfParent}(pClass, pEntity, pObserver, ownerFlag) {}
	virtual ~Object_wx_${classNameShort}();
	virtual Object *Clone() const;
	virtual String ToString(bool exprFlag);
	inline wx${classNameShort} *GetEntity() {
		return static_cast<wx${classNameShort} *>(_pEntity);
	}
	inline wx${classNameShort} *ReleaseEntity() {
		wx${classNameShort} *pEntity = GetEntity();
		InvalidateEntity();
		return pEntity;
	}
	inline bool IsInvalid(Signal &sig) const {
		if (_pEntity != nullptr) return false;
		SetError_InvalidWxObject(sig, "wx${classNameShort}");
		return true;
	}
};

Gura_EndModuleScope(wx)

#endif
'''.template()

tmpl@Source = R'''
//----------------------------------------------------------------------------
// wx${classNameShort}
//----------------------------------------------------------------------------
#include "stdafx.h"

Gura_BeginModuleScope(wx)

//----------------------------------------------------------------------------
// Gura interfaces for wx${classNameShort}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Object implementation for wx${classNameShort}
//----------------------------------------------------------------------------
Object_wx_${classNameShort}::~Object_wx_${classNameShort}()
{
}

Object *Object_wx_${classNameShort}::Clone() const
{
	return nullptr;
}

String Object_wx_${classNameShort}::ToString(bool exprFlag)
{
	String rtn("<wx.${classNameShort}:");
	if (GetEntity() == nullptr) {
		rtn += "invalid>";
	} else {
		char buff[64];
		::sprintf(buff, "%p>", GetEntity());
		rtn += buff;
	}
	return rtn;
}

//----------------------------------------------------------------------------
// Class implementation for wx${classNameShort}
//----------------------------------------------------------------------------
Gura_ImplementUserInheritableClass(wx_${classNameShort})
{
}

Gura_ImplementDescendantCreator(wx_${classNameShort})
{
	return new Object_wx_${classNameShort}((pClass == nullptr)? this : pClass, nullptr, nullptr, OwnerFalse);
}

Gura_EndModuleScope(wx)
'''.template()

EnumInfo = struct(pathName:string, lineNo:number, strSrc:string,
				  enumName:string, memberNames[]:string => []) {
	AddMember(memberName:string) = {
		this.memberNames.add(memberName)
	}
	Gen_Assignment() = {
		if (this.enumName.isempty()) {
			str = format('// no-name enum\n')
		} else {
			str = format('// %s\n', this.enumName)
		}
		this.memberNames.each {|memberName|
			if (m = memberName.match(r'^wx(.+)')) {
				str += format('//Gura_AssignWxValue(%s);\n', m[1])
			} else {
				str += format('//Gura_AssignMacroValue(%s);\n', memberName)
			}
		}
		str
	}
	Print():void = {
		println(this.enumName)
		println('  ', this.memberNames)
	}
}

ClassInfo = struct(pathName:string, lineNo:number, strSrc:string,
				   className:string, classNamesParent[]:string,
				   classInfosOfParent[] => [], classInfosOfChild[] => [],
				   validFlag => true) {
	MakeClassNameShort() = this.className.sub('^wx', '')
	IsRootClass() = this.classInfosOfParent.isempty()
	Gen_SourceEntry(indentLevel:number => 0) = {
		str = format("%s%s'Class_wx_%s.cpp'\n", '  ' * indentLevel,
					 cond(this.validFlag, '', '//'), this.MakeClassNameShort())
		str + this.classInfosOfChild:*Gen_SourceEntry(indentLevel + 1).join()
	}
	Gen_Include(indentLevel:number => 0) = {
		str = format('%snclude %s"Class_wx_%s.h"\n',
					 cond(this.validFlag, '#i', '//'), '  ' * indentLevel,
					 this.MakeClassNameShort())
		str + this.classInfosOfChild:*Gen_Include(indentLevel + 1).join()
	}
	Gen_RealizeClass(indentLevel:number => 0) = {
		str = if (this.IsRootClass()) {
			format('%sRealizeBaseClass(%s);\n',
				   cond(this.validFlag, '', '//'), this.MakeClassNameShort())
		} else {
			format('%s%sRealizeDervClass(%s, %s);\n',
				   '  ' * indentLevel, cond(this.validFlag, '', '//'),
				   this.MakeClassNameShort(), this.classInfosOfParent[0].MakeClassNameShort())
		}
		str + this.classInfosOfChild:*Gen_RealizeClass(indentLevel + 1).join()
	}
	Gen_PrepareClass(indentLevel:number => 0) = {
		str = format('%s%sPrepareClass(%s);\n',
					 '  ' * indentLevel, cond(this.validFlag, '', '//'), this.MakeClassNameShort())
		str + this.classInfosOfChild:*Gen_PrepareClass(indentLevel + 1).join()
	}
	RenderHeader(dirName:string):void = {
		classNameShort = this.MakeClassNameShort()
		pathNameWxHdr = path.join('wx', MakePathNameWx(this.pathName))
		pathNameGuraHdr = path.join(dirName, format('Class_wx_%s.h', classNameShort))
		if (this.IsRootClass()) {
			tmpl@HeaderBase.render(pathNameGuraHdr)
		} else {
			classNameShortOfParent = this.classInfosOfParent[0].MakeClassNameShort()
			tmpl@HeaderDerv.render(pathNameGuraHdr)
		}
	}
	RenderSource(dirName:string):void = {
		classNameShort = this.MakeClassNameShort()
		tmpl@Source.render(path.join(dirName, format('Class_wx_%s.cpp', classNameShort)))
	}
	InheritValidation():void = {
		if (this.validFlag) {
			this.classInfosOfChild:*InheritValidation()
		} else {
			this.Invalidate()
		}
	}
	Invalidate():void = {
		this.validFlag = false
		this.classInfosOfChild:*Invalidate()
	}
}

classInfoDict = %{}
classInfosAtRoot = []
enumInfos = []
enumInfoNoName = EnumInfo('', 0, '', '')

MakePathNameWx(pathName:string) = {
	pathName.replace(dirNameWx + path.sep_file, '')
}

WarningMessage(pathName:string, lineNo:number, strSrc:string, strMsg:string) = {
	printf('%s:%d: %s\n', MakePathNameWx(pathName), lineNo, strMsg)
	//printf('    %s\n', strSrc.sub(r'\s+', ' '))
	//println()
}

ErrorMessage(pathName:string, lineNo:number, strSrc:string, strMsg:string) = {
	printf('%s:%d: %s\n', MakePathNameWx(pathName), lineNo, strMsg)
	printf('    %s\n', strSrc.sub(r'\s+', ' '))
	println()
	sys.exit(1)
}

CreateEnumInfo(pathName:string, lineNo:string, strSrc:string) = {
	if (m = strSrc.match(r'^enum\s+(\w+)')) {
		enumInfo = EnumInfo(pathName, lineNo, strSrc, m[1])
		enumInfos.add(enumInfo)
		enumInfo
	} else {
		enumInfo = enumInfoNoName
	}
}

CreateClassInfo(pathName:string, lineNo:string, strSrc:string):void = {
	fields = [strSrc.split(':'):*strip()]
	if (m = fields[0].match(r'^class\s+(\w+\s+)?(wx\w+\s*<\s*\w+\s*>)$')) {
		// nothing to do
	} elsif (m = fields[0].match(r'^class\s+(\w+\s+)?(wx\w+)$')) {
		// nothing to do
	} else {
		ErrorMessage(pathName, lineNo, strSrc, 'unacceptable class syntax')
	}
	className = m[2]
	if (fields.len() == 2) {
		classNamesParent = fields[1].split(','):*strip().each():xlist {|field|
			if (m = field.match(r'^public\s+(\w+)')) {
				m[1]
			} else {
				WarningMessage(pathName, lineNo, strSrc, 'uses private inheritance')
				nil
			}
		}
	} else {
		classNamesParent = []
	}
	classInfoDict[className] = ClassInfo(pathName, lineNo, strSrc, className, classNamesParent)
}

Parse(pathName:string):map:void = {
	stat = `initial
	lineNo = 0
	commentFlag = false
	readlines(pathName).each {|line|
		lineNo += 1
		line = line.chop()
		if (commentFlag) {
			if (line.match(r'\*/$')) {
				commentFlag = false
			}
			continue
		}
		if (line.match(r'^\s*/\*')) {
			if (!line.match(r'\*/$')) {
				commentFlag = true
			}
			continue
		}
		if (stat == `initial) {
			if (m = line.match(r'^class')) {
				str = line
				if (m = str.match('(.*);$')) {
					// just ignore prototype declaration
				} elsif (m = str.match('(.*){$')) {
					CreateClassInfo(pathName, lineNo, m[1])
				} else {
					stat = `classDecl
				}
			} elsif (m = line.match(r'^enum')) {
				str = line
				if (m = str.match('(.*);$')) {
					ErrorMessage(pathName, lineNo, str, 'no memebers in enum')
				} elsif (m = str.match('(.*){$')) {
					enumInfo = CreateEnumInfo(pathName, lineNo, m[1])
					stat = `enumList
				} else {
					stat = `enumDecl
				}
			}
		} elsif (stat == `classDecl) {
			if (m = line.match(r'^(.*){')) {
				str += m[1]
				CreateClassInfo(pathName, lineNo, str)
				stat = `initial
			} else {
				str += line
			}
		} elsif (stat == `enumDecl) {
			if (m = line.match(r'^(.*){')) {
				str += m[1]
				enumInfo = CreateEnumInfo(pathName, lineNo, str)
				stat = `enumList
			} else {
				str += line
			}
		} elsif (stat == `enumList) {
			if (m = line.match(r'^\s*/\*')) {
				// just ignore comment lines
			} elsif (m = line.match(r'^\s*//')) {
				// just ignore comment lines
			} elsif (m = line.match(r'^\s+(\w+)')) {
				memberName = m[1]
				if (!memberName.match(r'^(wx|WX)')) {
					ErrorMessage(pathName, lineNo, line, 'inappropriate name for enum constant')
				}
				enumInfo.AddMember(memberName)
				if (line.match(r'};$')) {
					stat = `initial
				}
			} elsif (m = line.match(r'};$')) {
				stat = `initial
			}
		}
	}
}

println('-- parsing')
Parse(path.walk(dirNameWx))
//Parse(path.walk(dirNameWx).head(10))
println('-- associating class information')
classInfoDict.values {|classInfo|
	if (classInfo.className.find('<') || classNamesToSkip.find(classInfo.className)) {
		//printf('-- skip generating: %s\n', classInfo.className)
		classInfo.validFlag = false
	}
	if (classInfo.classNamesParent.isempty()) {
		classInfosAtRoot.add(classInfo)
	} else {
		classInfo.classNamesParent.each {|className, idx|
			classInfoOfParent = classInfoDict.get(className)
			if (classInfoOfParent) {
				classInfo.classInfosOfParent.add(classInfoOfParent)
				if (idx == 0) {
					classInfoOfParent.classInfosOfChild.add(classInfo)
				}
			} else {
				WarningMessage(classInfo.pathName, classInfo.lineNo, classInfo.strSrc,
							   format('class %s refers to undefined class %s',
									  classInfo.className, className))
				classInfo.validFlag = false
			}
		}
	}
}
enumInfos = enumInfos.sort(`ascend, enumInfos::enumName)
classInfosAtRoot:*InheritValidation()
println('-- generating files')
tmpl@ClassesSource_gura.render(path.join(dirNameDst, 'ClassesSource.gura'))
tmpl@Classes_h.render(path.join(dirNameDst, 'Classes.h'))
tmpl@Classes_cpp.render(path.join(dirNameDst, 'Classes.cpp'))
classInfoDict.values():*RenderHeader(dirNameDst)
classInfoDict.values():*RenderSource(dirNameDst)

#!/usr/bin/env gura
import(re)

dirNameWx = 'interface.wx'
dirNameDst = 'generated'

supportedStatDictOfClassName = %{
	'wxArchiveIterator'					=> `none
	'wxDDEServer'						=> `none
	'wxDebugContext'					=> `none
	'wxDialUpManager'					=> `none
	'wxHashMap'							=> `none
	'wxHashSet'							=> `none
	'wxAccessible'						=> `none
	'wxAutomationObject'				=> `none
	'wxRegConfig'						=> `none
	'wxDDEConnection'					=> `none
	'wxBufferedPaintDC'					=> `none
	'wxDDEClient'						=> `none
	'wxDataViewChoiceByIndexRenderer'	=> `none
	'wxActiveXEvent'					=> `none
	'wxDialUpEvent'						=> `none
	'wxPowerEvent'						=> `none
	'wxNumValidator'					=> `none
	'wxFloatingPointValidator'			=> `none
	'wxActiveXContainer'				=> `none
	'wxBitmapComboBox'					=> `none
	'wxSystemSettings'					=> `none
	'wxPersistentWindow'				=> `none
	'wxPixelData'						=> `none
	'wxRegKey'							=> `none
	'wxRefCounter'						=> `none
	'wxScopeGuard'						=> `none
	'wxScopedArray'						=> `none
	'wxScopedCharTypeBuffer'			=> `none
	'wxScopedPtr'						=> `none
	'wxScopedTiedPtr'					=> `none
	'wxFFileStream'						=> `none
	'wxFileStream'						=> `none
	'wxTaskBarButton'					=> `none
	'wxTaskBarJumpList'					=> `none
	'wxTaskBarJumpListItem'				=> `none
	'wxThumbBarButton'					=> `none
	'wxTaskBarJumpListCategory'			=> `none
	'wxResourceTranslationsLoader'		=> `none
	'wxVarHVScrollHelper'				=> `none
	'wxTrackable'						=> `none
}

supportedStatDictOfPathName = %{}

supportedStatDictOfEnumMemberName = %{
	'wxAutomationInstance_UseExistingOnly'	=> `none
	'wxAutomationInstance_CreateIfNeeded'	=> `none
	'wxAutomationInstance_SilentIfNone'		=> `none
	'wxNUM_VAL_DEFAULT'						=> `none
	'wxNUM_VAL_THOUSANDS_SEPARATOR'			=> `none
	'wxNUM_VAL_ZERO_AS_BLANK'				=> `none
	'wxNUM_VAL_NO_TRAILING_ZEROES'			=> `none
	'wxOleConvertVariant_Default'			=> `none
	'wxOleConvertVariant_ReturnSafeArrays'	=> `none
	'wxCURSOR_CROSS_REVERSE'				=> `none
	'wxCURSOR_DOUBLE_ARROW'					=> `none
	'wxCURSOR_BASED_ARROW_UP'				=> `none
	'wxCURSOR_BASED_ARROW_DOWN'				=> `none
}

tmpl@ClassesSource_gura = R'''
#!/usr/bin/env gura

srcs:public = [
	${classInfosAtRoot:*RenderSourceEntry()}
]
'''.template()

tmpl@Classes_h = R'''
#ifndef __CLASSES_H__
#define __CLASSES_H__

${classInfosAtRoot:*RenderInclude()}

#endif
'''.template()

tmpl@Constants_cpp = R'''
#include "stdafx.h"

Gura_BeginModuleScope(wx)

void AssignConstants(Environment &env)
{
	${enumInfoNoName.RenderAssignment()}
	${enumInfos:*RenderAssignment()}
}

Gura_EndModuleScope(wx)
'''.template()

tmpl@Classes_cpp = R'''
#include "stdafx.h"

Gura_BeginModuleScope(wx)

void RegisterClasses(Environment &env)
{
	${classInfosAtRoot:*RenderRealizeClass()}
	${classInfosAtRoot:*RenderPrepareClass()}
}

Gura_EndModuleScope(wx)
'''.template()

tmpl@Functions_cpp = R'''
#include "stdafx.h"

Gura_BeginModuleScope(wx)

void RegisterFunctions(Environment &env)
{
	${funcInfosGlobal:*RenderAssignment()}
}

Gura_EndModuleScope(wx)
'''.template()

tmpl@HeaderBase = R'''
//----------------------------------------------------------------------------
// wx${classNameShort}
//----------------------------------------------------------------------------
#ifndef __CLASS_WX_${classNameShort.upper()}_H__
#define __CLASS_WX_${classNameShort.upper()}_H__
#include <${pathNameWxHdr}>

Gura_BeginModuleScope(wx)

//----------------------------------------------------------------------------
// Class declaration for wx${classNameShort}
//----------------------------------------------------------------------------
Gura_DeclareUserClass(wx_${classNameShort});

//----------------------------------------------------------------------------
// Object declaration for wx${classNameShort}
//----------------------------------------------------------------------------
class Object_wx_${classNameShort} : public Object {
protected:
	wx${classNameShort} *_pEntity;
	GuraObjectObserver *_pObserver;
	bool _ownerFlag;
public:
	Gura_DeclareObjectAccessor(wx_${classNameShort})
public:
	inline Object_wx_${classNameShort}(wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object(Gura_UserClass(wx_AboutDialogInfo)),
				_pEntity(pEntity), _pObserver(pObserver), _ownerFlag(ownerFlag) {}
	inline Object_wx_${classNameShort}(Class *pClass, wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object(pClass),
				_pEntity(pEntity), _pObserver(pObserver), _ownerFlag(ownerFlag) {}
	virtual ~Object_wx_${classNameShort}();
	virtual Object *Clone() const;
	virtual String ToString(bool exprFlag);
	inline void SetEntity(wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) {
		if (_ownerFlag) delete _pEntity;
		_pEntity = pEntity;
		_pObserver = pObserver;
		_ownerFlag = ownerFlag;
	}
	inline void InvalidateEntity() { _pEntity = nullptr, _pObserver = nullptr, _ownerFlag = false; }
	inline wx${classNameShort} *GetEntity() {
		return static_cast<wx${classNameShort} *>(_pEntity);
	}
	inline wx${classNameShort} *ReleaseEntity() {
		wx${classNameShort} *pEntity = GetEntity();
		InvalidateEntity();
		return pEntity;
	}
	inline void NotifyGuraObjectDeleted() {
		if (_pObserver != nullptr) _pObserver->GuraObjectDeleted();
	}
	inline bool IsInvalid(Environment &env) const {
		if (_pEntity != nullptr) return false;
		SetError_InvalidWxObject(env, "wx${classNameShort}");
		return true;
	}
};

Gura_EndModuleScope(wx)

#endif
'''.template()

tmpl@HeaderDerv = R'''
//----------------------------------------------------------------------------
// wx${classNameShort}
//----------------------------------------------------------------------------
#ifndef __CLASS_WX_${classNameShort.upper()}_H__
#define __CLASS_WX_${classNameShort.upper()}_H__
#include <${pathNameWxHdr}>

Gura_BeginModuleScope(wx)

//----------------------------------------------------------------------------
// Class declaration for wx${classNameShort}
//----------------------------------------------------------------------------
Gura_DeclareUserClass(wx_${classNameShort});

//----------------------------------------------------------------------------
// Object declaration for wx${classNameShort}
//----------------------------------------------------------------------------
class Object_wx_${classNameShort} : public Object_wx_${classNameShortOfParent} {
public:
	Gura_DeclareObjectAccessor(wx_${classNameShort})
public:
	inline Object_wx_${classNameShort}(wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object_wx_${classNameShortOfParent}(Gura_UserClass(wx_${classNameShort}), pEntity, pObserver, ownerFlag) {}
	inline Object_wx_${classNameShort}(Class *pClass, wx${classNameShort} *pEntity, GuraObjectObserver *pObserver, bool ownerFlag) :
				Object_wx_${classNameShortOfParent}(pClass, pEntity, pObserver, ownerFlag) {}
	virtual ~Object_wx_${classNameShort}();
	virtual Object *Clone() const;
	virtual String ToString(bool exprFlag);
	inline wx${classNameShort} *GetEntity() {
		return static_cast<wx${classNameShort} *>(_pEntity);
	}
	inline wx${classNameShort} *ReleaseEntity() {
		wx${classNameShort} *pEntity = GetEntity();
		InvalidateEntity();
		return pEntity;
	}
	inline bool IsInvalid(Environment &env) const {
		if (_pEntity != nullptr) return false;
		SetError_InvalidWxObject(env, "wx${classNameShort}");
		return true;
	}
};

Gura_EndModuleScope(wx)

#endif
'''.template()

tmpl@Source = R'''
//----------------------------------------------------------------------------
// wx${classNameShort}
//----------------------------------------------------------------------------
#include "stdafx.h"

Gura_BeginModuleScope(wx)

//----------------------------------------------------------------------------
// Gura interfaces for wx${classNameShort}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Object implementation for wx${classNameShort}
//----------------------------------------------------------------------------
Object_wx_${classNameShort}::~Object_wx_${classNameShort}()
{
}

Object *Object_wx_${classNameShort}::Clone() const
{
	return nullptr;
}

String Object_wx_${classNameShort}::ToString(bool exprFlag)
{
	String rtn("<wx.${classNameShort}:");
	if (GetEntity() == nullptr) {
		rtn += "invalid>";
	} else {
		char buff[64];
		::sprintf(buff, "%p>", GetEntity());
		rtn += buff;
	}
	return rtn;
}
${if (!funcInfosOfConstructor.isempty())}

//----------------------------------------------------------------------------
// Constructor implementation
//----------------------------------------------------------------------------
${funcInfosOfConstructor:&RenderImplementation(0.. > 0)}
${end}
${if (!funcInfosOfMethod.isempty())}

//----------------------------------------------------------------------------
// Method implementation
//----------------------------------------------------------------------------
${funcInfosOfMethod:&RenderImplementation(0.. > 0)}
${end}

//----------------------------------------------------------------------------
// Class implementation for wx${classNameShort}
//----------------------------------------------------------------------------
Gura_ImplementUserInheritableClass(wx_${classNameShort})
{
	${if (funcInfosOfConstructor.isempty())}
	// Class assignment
	Gura_AssignValueEx("${classNameShort}", Reference());
	${else}
	// Constructor assignment
	${funcInfosOfConstructor:*RenderAssignment()}
	${end}
	${if (!funcInfosOfMethod.isempty())}
	// Method assignment
	${funcInfosOfMethod:*RenderAssignment()}
	${end}
}

Gura_ImplementDescendantCreator(wx_${classNameShort})
{
	return new Object_wx_${classNameShort}((pClass == nullptr)? this : pClass, nullptr, nullptr, OwnerFalse);
}

Gura_EndModuleScope(wx)
'''.template()

tmpl@ImplementFunction = R'''
${if (lineSkipFlag) { '' }}
Gura_DeclareFunctionAlias(${funcNameInternal}, "${funcNameGura}")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	${if (!argInfos.isempty()) { argInfos:*RenderDeclaration() }}
}

Gura_ImplementFunction(${funcNameInternal})
{
	${if (!argInfos.isempty()) { argInfos:*RenderVariable() }}
	//${funcNameCPP}();
	return Value::Nil;
}
'''.template()

tmpl@ImplementConstructor = R'''
${if (lineSkipFlag) { '' }}
Gura_DeclareFunctionAlias(${funcNameInternal}, "${funcNameGura}")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	${if (!argInfos.isempty()) { argInfos:*RenderDeclaration() }}
	SetClassToConstruct(Gura_UserClass(wx_${classNameShort}));
	DeclareBlock(OCCUR_ZeroOrOnce);
}

Gura_ImplementFunction(${funcNameInternal})
{
	${if (!argInfos.isempty()) { argInfos:*RenderVariable() }}
	//${funcNameCPP}();
	return Value::Nil;
}
'''.template()

tmpl@ImplementMethod = R'''
${if (lineSkipFlag) { '' }}
Gura_DeclareMethodAlias(wx_${classNameShort}, ${funcNameInternal}, "${funcNameGura}")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	${if (!argInfos.isempty()) { argInfos:*RenderDeclaration() }}
}

Gura_ImplementMethod(wx_${classNameShort}, ${funcNameInternal})
{
	Object_wx_${classNameShort} *pThis = Object_wx_${classNameShort}::GetObjectThis(arg);
	if (pThis->IsInvalid(env)) return Value::Nil;
	${if (!argInfos.isempty()) { argInfos:*RenderVariable() }}
	//pThis->GetEntity()->${funcNameCPP}();
	return Value::Nil;
}
'''.template()

EnumMemberInfo = struct(memberName:string, supportedStat:symbol => `supported) {
	IsSupported() = {
		this.supportedStat == `supported
	}
}

EnumInfo = struct(pathName:string, lineNo:number, strSrc:string,
				  enumName:string, memberInfos[] => [],
				  supportedStat:symbol => `supported) {
	IsSupported() = {
		this.supportedStat == `supported
	}
	AddMember(memberName:string) = {
		this.memberInfos.add(EnumMemberInfo(memberName))
	}
	RenderAssignment() = {
		if (this.enumName.isempty()) {
			str = format('// no-name enum\n')
		} else {
			str = format('// %s\n', this.enumName)
		}
		if (!this.IsSupported()) {
			str += '#if 0\n'
		}
		this.memberInfos.each {|memberInfo|
			if (m = memberInfo.memberName.match(r'^wx(.+)')) {
				str += format('%sGura_AssignWxValue(%s);\n',
							  cond(memberInfo.IsSupported(), '', '//'), m[1])
			} else {
				str += format('%sGura_AssignMacroValue(%s);\n',
							  cond(memberInfo.IsSupported(), '', '//'), memberInfo.memberName)
			}
		}
		if (!this.IsSupported()) {
			str += '#endif\n'
		}
		str
	}
	Print():void = {
		println(this.enumName)
		println('  ', this.memberInfos:*memberName)
	}
}

ClassInfo = struct(pathName:string, lineNo:number, strSrc:string,
				   className:string, classNamesParent[]:string,
				   classInfosOfParent[] => [], classInfosOfChild[] => [],
				   funcInfosOfConstructor[] => [], funcInfosOfMethod[] => [],
				   supportedStat:symbol => `supported) {
	IsSupported() = {
		this.supportedStat == `supported
	}
	MakeClassNameShort() = this.className.sub('^wx', '')
	IsRootClass() = this.classInfosOfParent.isempty()
	RenderSourceEntry(indentLevel:number => 0) = {
		str = format("%s%s'Class_wx_%s.cpp'\n", '  ' * indentLevel,
					 cond(this.IsSupported(), '', '//'), this.MakeClassNameShort())
		str + this.classInfosOfChild:*RenderSourceEntry(indentLevel + 1).join()
	}
	RenderInclude(indentLevel:number => 0) = {
		str = format('%snclude %s"Class_wx_%s.h"\n',
					 cond(this.IsSupported(), '#i', '//'), '  ' * indentLevel,
					 this.MakeClassNameShort())
		str + this.classInfosOfChild:*RenderInclude(indentLevel + 1).join()
	}
	RenderRealizeClass(indentLevel:number => 0) = {
		str = if (this.IsRootClass()) {
			format('%sRealizeBaseClass(%s);\n',
				   cond(this.IsSupported(), '', '//'), this.MakeClassNameShort())
		} else {
			format('%s%sRealizeDervClass(%s, %s);\n',
				   '  ' * indentLevel, cond(this.IsSupported(), '', '//'),
				   this.MakeClassNameShort(), this.classInfosOfParent[0].MakeClassNameShort())
		}
		str + this.classInfosOfChild:*RenderRealizeClass(indentLevel + 1).join()
	}
	RenderPrepareClass(indentLevel:number => 0) = {
		str = format('%s%sPrepareClass(%s);\n',
					 '  ' * indentLevel, cond(this.IsSupported(), '', '//'),
					 this.MakeClassNameShort())
		str + this.classInfosOfChild:*RenderPrepareClass(indentLevel + 1).join()
	}
	RenderHeader(dirName:string):void = {
		classNameShort = this.MakeClassNameShort()
		pathNameWxHdr = path.join('wx', MakePathNameWx(this.pathName))
		pathNameGuraHdr = path.join(dirName, format('Class_wx_%s.h', classNameShort))
		if (this.IsRootClass()) {
			tmpl@HeaderBase.render(pathNameGuraHdr)
		} else {
			classNameShortOfParent = this.classInfosOfParent[0].MakeClassNameShort()
			tmpl@HeaderDerv.render(pathNameGuraHdr)
		}
	}
	RenderSource(dirName:string):void = {
		classNameShort = this.MakeClassNameShort()
		funcInfosOfConstructor = this.funcInfosOfConstructor
		funcInfosOfMethod = this.funcInfosOfMethod
		tmpl@Source.render(path.join(dirName, format('Class_wx_%s.cpp', classNameShort)))
	}
	InheritValidation():void = {
		if (this.IsSupported()) {
			this.classInfosOfChild:*InheritValidation()
		} else {
			this.UpdateSupportedStat(this.supportedStat)
		}
	}
	UpdateSupportedStat(supportedStat:symbol):void = {
		this.supportedStat = supportedStat
		this.classInfosOfChild:*UpdateSupportedStat(supportedStat)
	}
	AddMethod(pathName:string, lineNo:number, strSrc:string):void = {
		!(funcInfo = CreateFuncInfo(pathName, lineNo, strSrc)) && return
		funcInfo.classInfo = this
		if (funcInfo.funcNameGura == this.className) {
			funcInfo.funcType = `Constructor
			funcInfo.funcNameGura = this.MakeClassNameShort()
			funcInfo.AvertFuncNameConflict(this.funcInfosOfConstructor)
			this.funcInfosOfConstructor.add(funcInfo)
			cntConstructors += 1
		} else {
			funcInfo.funcType = `Method
			funcInfo.AvertFuncNameConflict(this.funcInfosOfMethod)
			this.funcInfosOfMethod.add(funcInfo)
			cntMethods += 1
		}
	}
}

ArgInfo = struct(iArg:number, typesStr:string, refOperator:string,
				 argName:string, bracketFlag:boolean) {
	RenderDeclaration() = {
		format('//DeclareArg(env, "%s", VTYPE_%s, OCCUR_%s);\n',
			   this.argName, 'number', 'Once')
	}
	RenderVariable() = {
		format('//%s%s %s = arg.%s(%s)\n',
			   this.typesStr, this.refOperator, this.argName, 'GetNumber', this.iArg)
	}
}

FuncInfo = struct(funcNameCPP:string, funcNameGura:string,
				  classInfo?:ClassInfo, funcType:symbol => `Function, argInfos[]:ArgInfo => []) {
	MakeFuncNameInternal() = '__' + this.funcNameGura
	RenderImplementation(lineSkipFlag:boolean):map = {
		funcNameCPP = this.funcNameCPP
		funcNameGura = this.funcNameGura
		funcNameInternal = this.MakeFuncNameInternal()
		argInfos = this.argInfos
		if (this.funcType == `Function) {
			tmpl@ImplementFunction.render()
		} else {
			classNameShort = this.classInfo.MakeClassNameShort()
			if (this.funcType == `Constructor) {
				tmpl@ImplementConstructor.render()
			} elsif (this.funcType == `Method) {
				tmpl@ImplementMethod.render()
			}
		}
	}
	RenderAssignment() = {
		classNameShort = this.classInfo.MakeClassNameShort()
		funcNameInternal = this.MakeFuncNameInternal()
		if (this.funcType == `Function) {
			format('Gura_AssignFunction(%s);\n', funcNameInternal)
		} elsif (this.funcType == `Constructor) {
			format('Gura_AssignFunction(%s);\n', funcNameInternal)
		} elsif (this.funcType == `Method) {
			format('Gura_AssignMethod(wx_%s, %s);\n', classNameShort, funcNameInternal)
		}
	}
	AvertFuncNameConflict(funcInfos[]:FuncInfo) = {
		if ((funcInfos:*funcNameGura == this.funcNameGura).or()) {
			repeat {|i|
				funcNameGura = format('%s_%d', this.funcNameGura, i + 1)
				!(funcInfos:*funcNameGura == funcNameGura).or() && break
			}
			this.funcNameGura = funcNameGura
		}
	}
}

MakePathNameWx(pathName:string) = {
	pathName.replace(dirNameWx + path.sep_file, '')
}

WarningMessage(pathName:string, lineNo:number, strSrc:string, strMsg:string) = {
	printf('%s:%d: %s\n', MakePathNameWx(pathName), lineNo, strMsg)
	printf('    %s\n', strSrc.sub(r'\s+', ' '))
	println()
}

ErrorMessage(pathName:string, lineNo:number, strSrc:string, strMsg:string) = {
	printf('%s:%d: %s\n', MakePathNameWx(pathName), lineNo, strMsg)
	printf('    %s\n', strSrc.sub(r'\s+', ' '))
	println()
	sys.exit(1)
}

CreateEnumInfo(pathName:string, lineNo:string, strSrc:string) = {
	if (m = strSrc.match(r'^enum\s+(\w+)')) {
		enumInfo = EnumInfo(pathName, lineNo, strSrc, m[1])
		enumInfos.add(enumInfo)
		enumInfo
	} else {
		enumInfo = enumInfoNoName
	}
}

CreateClassInfo(pathName:string, lineNo:string, strSrc:string) = {
	fields = [strSrc.split(':'):*strip()]
	if (m = fields[0].match(r'^class\s+(\w+\s+)?(wx\w+\s*<\s*\w+\s*>)$')) {
		// nothing to do
	} elsif (m = fields[0].match(r'^class\s+(\w+\s+)?(wx\w+)$')) {
		// nothing to do
	} else {
		ErrorMessage(pathName, lineNo, strSrc, 'unacceptable class syntax')
	}
	className = m[2]
	if (fields.len() == 2) {
		classNamesParent = fields[1].split(','):*strip().each():xlist {|field|
			if (m = field.match(r'^public\s+(\w+)')) {
				m[1]
			} else {
				WarningMessage(pathName, lineNo, strSrc, 'uses private inheritance')
				nil
			}
		}
	} else {
		classNamesParent = []
	}
	classInfo = ClassInfo(pathName, lineNo, strSrc, className, classNamesParent)
	classInfoDict[className] = classInfo
	classInfo
}

CreateFuncInfo(pathName:string, lineNo:string, strSrc:string) = {
	if (m = strSrc.match(r'^(.*?)\((.*)\)\s*(const)?\s*:.+$')) {
		funcHead = m[1].strip()
		argsStr = m[2].strip()
		constFlag = !m[3].isempty()
		pureVirtualFlag = false
	} elsif (m = strSrc.match(r'^(.*?)\((.*)\)\s*(const)?\s*(=\s*0)?\s*;?$')) {
		funcHead = m[1].strip()
		argsStr = m[2].strip()
		constFlag = !m[3].isempty()
		pureVirtualFlag = !m[4].isempty()
	} else {
		ErrorMessage(pathName, lineNo, strSrc, 'unacceptable function syntax')
	}
	if (m = funcHead.match(r'^(~?\w+)$')) {
		typeList = ''
		refOperator = ''
		identifier = m[1]
	} elsif (m = funcHead.match(r'^(.+?)([\s\*&]+)(~?\w+)$')) {
		typeList = m[1]
		refOperator = m[2].strip()
		identifier = m[3]
	} elsif (m = funcHead.match(r'^(.+?)([\s\*&]+)(operator\s*.+)$')) {
		//typeList = m[1]
		//refOperator = m[2].strip()
		//identifier = m[3]
		WarningMessage(pathName, lineNo, strSrc, 'operator method is not acceptable')
		return
	} else {
		ErrorMessage(pathName, lineNo, strSrc, 'unacceptable function declaration')
	}
	identifier.startswith('~') && return	// ignore destructor
	funcNameCPP = identifier
	funcNameGura = identifier
	funcInfo = FuncInfo(funcNameCPP, funcNameGura)
	//printf('%s:%s:%s\n', identifier, typeList, refOperator)
	pos = 0
	iArg = 0
	while (pos < argsStr.len()) {
		if (!(m = argsStr.match(r'^\s*([^,=]+)\s*([,=])?', pos))) {
			ErrorMessage(pathName, lineNo, strSrc, 'unacceptable argument syntax')
		}
		pos = m.group(0).end
		varHead = m[1]
		if (m[2] == '=') {
			if (m = \
				argsStr.match(r'^\s*([-\w:]+\s*\(.*?\)),', pos) || \
				argsStr.match(r'^\s*([-\w:]+\s*\(.*?\))$', pos) || \
				argsStr.match(r'^\s*([^,]+)\s*,', pos) || \
				argsStr.match(r'^\s*(.+)\s*$', pos) || \
				argsStr.match(r'^\s*("[^"]*"),', pos) || \
				argsStr.match(r'^\s*("[^"]*")$', pos)) {
				initValue = m[1]
				pos = m.group(0).end
			} else {
				ErrorMessage(pathName, lineNo, strSrc, 'unacceptable argument syntax')
			}
		}
		if (varHead == '...') {
			WarningMessage(pathName, lineNo, strSrc,
						   'variable length argument is not acceptable')
			return
		} elsif (m = varHead.match(r'^(.+?)([\s\*&]+)(\w+)\s*(\[\s*\])?$')) {
			typesStr = m[1]
			refOperator = m[2].strip()
			argName = m[3]
			bracketFlag = !m[4].isempty()
		} elsif (m = varHead.match(r'^(.+?)([\s\*&]+)$')) {
			typesStr = m[1]
			refOperator = m[2].strip()
			argName = format('_arg%d', iArg)
			bracketFlag = false
		} else {
			WarningMessage(pathName, lineNo, strSrc,
						   'unacceptable argument declaration: ' + varHead)
			return
		}
		funcInfo.argInfos.add(ArgInfo(iArg, typesStr, refOperator, argName, bracketFlag))
		iArg += 1
	}
	funcInfo
}

Parse(pathName:string):map:void = {
	stat = `initial
	lineNo = 0
	commentFlag = false
	readlines(pathName).each {|line|
		lineNo += 1
		line = line.strip():right
		if (commentFlag) {
			if (line.match(r'\*/$')) {
				commentFlag = false
			}
			continue
		}
		if (line.match(r'^\s*/\*')) {
			if (!line.match(r'\*/$')) {
				commentFlag = true
			}
			continue
		}
		line = line.sub(r'/\*.*?\*/', '')	// removed block comments
		line = line.sub(r'//.*$', '')		// removed line comments
		line.match(r'^\s+$') && continue	// skip blank lines
		if (stat == `initial) {
			if (m = line.match(r'^class')) {
				str = line
				if (m = str.match('(.*);$')) {
					// just ignore prototype declaration
				} elsif (m = str.match('(.*){$')) {
					classInfo = CreateClassInfo(pathName, lineNo, m[1])
					stat = `classBody
				} else {
					stat = `classDecl
				}
			} elsif (m = line.match(r'^enum')) {
				str = line
				if (m = str.match('(.*);$')) {
					ErrorMessage(pathName, lineNo, str, 'no memebers in enum')
				} elsif (m = str.match('(.*){$')) {
					enumInfo = CreateEnumInfo(pathName, lineNo, m[1])
					stat = `enumBody
				} else {
					stat = `enumDecl
				}
			}
		} elsif (stat == `classDecl) {
			line = line.strip()
			if (m = line.match(r'^(.*){')) {
				str += ' ' + m[1]
				classInfo = CreateClassInfo(pathName, lineNo, str)
				stat = `classBody
			} else {
				str += ' ' + line
			}
		} elsif (stat == `classBody) {
			line = line.strip()
			if (m = line.match(r'(\w+)\s*\(')) {
				if (m = line.match('(.*){')) {
					classInfo.AddMethod(pathName, lineNo, m[1].strip())
					if (line.match('}')) {
						// nothing to do
					} else {
						stat = `methodBody
					}
				} elsif (line.match(';')) {
					classInfo.AddMethod(pathName, lineNo, line)
				} else {
					lineNoTop = lineNo
					str = line
					stat = `methodDecl
				}
			} elsif (m = line.match(r'};$')) {
				stat = `initial
			}
		} elsif (stat == `methodDecl) {
			line = line.strip()
			if (m = line.match('(.*){')) {
				str += ' ' + m[1].strip()
				classInfo.AddMethod(pathName, lineNoTop, str)
				if (line.match('}')) {
					stat = `classBody
				} else {
					stat = `methodBody
				}
			} elsif (line.match(';')) {
				str += ' ' + line
				classInfo.AddMethod(pathName, lineNoTop, str)
				stat = `classBody
			} else {
				str += ' ' + line
			}
		} elsif (stat == `methodBody) {
			if (line.match('}')) {
				stat = `classBody
			}
		} elsif (stat == `enumDecl) {
			line = line.strip()
			if (m = line.match(r'^(.*){')) {
				str += ' ' + m[1]
				enumInfo = CreateEnumInfo(pathName, lineNo, str)
				stat = `enumBody
			} else {
				str += ' ' + line
			}
		} elsif (stat == `enumBody) {
			if (m = line.match(r'^\s+(\w+)')) {
				memberName = m[1]
				if (!memberName.match(r'^(wx|WX)')) {
					ErrorMessage(pathName, lineNo, line, 'inappropriate name for enum constant')
				}
				enumInfo.AddMember(memberName)
				if (line.match(r'};$')) {
					stat = `initial
				}
			} elsif (m = line.match(r'};$')) {
				stat = `initial
			}
		}
	}
}

main() = {
	println('-- parsing')
	Parse(path.walk(dirNameWx))
	//Parse(path.walk(dirNameWx).head(10))
	println('-- associating class information')
	classInfoDict.values {|classInfo|
		if (classInfo.className.find('<')) {
			classInfo.supportedStat = `none
		} elsif (supportedStat = supportedStatDictOfClassName.get(classInfo.className)) {
			classInfo.supportedStat = supportedStat
		}
		if (classInfo.classNamesParent.isempty()) {
			classInfosAtRoot.add(classInfo)
		} else {
			classInfo.classNamesParent.each {|className, idx|
				classInfoOfParent = classInfoDict.get(className)
				if (classInfoOfParent) {
					classInfo.classInfosOfParent.add(classInfoOfParent)
					if (idx == 0) {
						classInfoOfParent.classInfosOfChild.add(classInfo)
					}
				} else {
					WarningMessage(classInfo.pathName, classInfo.lineNo, classInfo.strSrc,
								   format('class %s refers to undefined class %s',
										  classInfo.className, className))
					classInfo.supportedStat = `none
				}
			}
		}
	}
	classInfosAtRoot:*InheritValidation()
	classInfoDict.values {|classInfo|
		if ((supportedStat = supportedStatDictOfPathName.get(classInfo.pathName)) && \
			supportedStat == `supported) {
			continue
		}
		supportedStatDictOfPathName[classInfo.pathName] = classInfo.supportedStat
	}
	enumInfos = enumInfos.sort(`ascend, enumInfos::enumName):list
	enumInfos.each {|enumInfo|
		if (supportedStat = supportedStatDictOfPathName.get(enumInfo.pathName)) {
			enumInfo.supportedStat = supportedStat
		}
		enumInfo.memberInfos.each {|memberInfo|
			if (supportedStat = supportedStatDictOfEnumMemberName.get(memberInfo.memberName)) {
				memberInfo.supportedStat = supportedStat
			}
		}
	}
	println('-- generating files')
	tmpl@ClassesSource_gura.render(path.join(dirNameDst, 'ClassesSource.gura'))
	tmpl@Classes_h.render(path.join(dirNameDst, 'Classes.h'))
	tmpl@Classes_cpp.render(path.join(dirNameDst, 'Classes.cpp'))
	tmpl@Constants_cpp.render(path.join(dirNameDst, 'Constants.cpp'))
	tmpl@Functions_cpp.render(path.join(dirNameDst, 'Functions.cpp'))
	classInfoDict.values():*RenderHeader(dirNameDst)
	classInfoDict.values():*RenderSource(dirNameDst)

	printf('-- generated %d constructors\n', cntConstructors)
	printf('-- generated %d methods\n', cntMethods)
}

cntConstructors = 0
cntMethods = 0

classInfoDict = %{}
classInfosAtRoot = []
funcInfosGlobal = []
enumInfos = []
enumInfoNoName = EnumInfo('', 0, '', '')

main()

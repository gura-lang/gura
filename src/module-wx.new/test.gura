#!/usr/bin/env gura
import(re)

dirNameBase = '../../guest/wxWidgets-3.1.0/interface/wx'

ErrorDone(pathName:string, lineNo:number, strSrc:string, strMsg:string) = {
	printf('%s:%d: %s\n', pathName, lineNo, strMsg)
	printf('%s\n', strSrc)
	sys.exit(1)
}

CreateClassInfo(pathName:string, lineNo:string, str:string) = {
	fields = [str.split(':'):*strip()]
	if (m = fields[0].match(r'^class\s+(\w+\s+)?(\w+\s*<\s*\w+\s*>)$')) {
		// nothing to do
	} elsif (m = fields[0].match(r'^class\s+(\w+\s+)?(\w+)$')) {
		// nothing to do
	} else {
		ErrorDone(pathName, lineNo, str, 'unacceptable class syntax')
	}
	className = m[2]
	println(className)
	if (fields.len() == 2) {
		fields[1].split(','):*strip().each {|field|
			if (!(m = field.match(r'^public\s+(\w+)'))) {
				println('  #private')
			}
		}
	}
}

Parse(pathName:string):map:void = {
	stat = `initial
	lineNo = 0
	readlines(pathName).each {|line|
		lineNo += 1
		line = line.chop()
		if (stat == `initial) {
			if (m = line.match(r'^class')) {
				str = line
				if (m = str.match('(.*);$')) {
					// just ignore prototype declaration
				} elsif (m = str.match('(.*){$')) {
					CreateClassInfo(pathName, lineNo, m[1])
				} else {
					stat = `classDecl
				}
			}
		} elsif (stat == `classDecl) {
			if (m = line.match(r'{')) {
				CreateClassInfo(pathName, lineNo, str)
				stat = `initial
			} else {
				str += line
			}
		}
	}
}

Parse(path.walk(dirNameBase))
//Parse(path.join(dirNameBase, 'richtext/richtextbuffer.h'))

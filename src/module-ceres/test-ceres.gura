#!/usr/bin/env gura
import(helper.test) {*}
import(ceres)
import(arrayutil)

testcase('ceres.CostFunction') {
	ceres.CostFunction() {|costFunction|
		println(costFunction)
	}
}
testcase('ceres.LossFunction') {
	ceres.LossFunction() {|lossFunction|
		println(lossFunction)
	}
}
testcase('ceres.Problem') {
	println(ceres.Problem.AddResidualBlock)
	ceres.Problem() {|problem|
		println(problem)
	}
}
testcase('ceres.Solver$Options') {
	ceres.Solver$Options() {|options|
		println(options)
	}
}
testcase('ceres.Solver$Summary') {
	ceres.Solver$Summary() {|summary|
		println(summary)
	}
}
testcase() {
	CostFunctionEx = class(ceres.CostFunction) {
		Evaluate(param1:array, param2:array) = {
			//[residuals, jacobians]
		}
	}
	costFunc = CostFunctionEx()
	println(costFunc)
	problem = ceres.Problem()
	param1 = array.zeros([3])
	param2 = array.zeros([3])
	problem.AddResidualBlock(costFunc, nil, param1, param2)
}
testcase {
	ceres.sample@helloworld()
	ceres.sample@helloworld_analytic_diff()
}

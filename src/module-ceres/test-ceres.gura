#!/usr/bin/env gura
import(helper.test) {*}
import(ceres)
import(arrayutil)

testcase('ceres.CostFunction') {
	ceres.CostFunction() {|costFunction|
		println(costFunction)
	}
}
testcase('ceres.LossFunction') {
	tester(`ceres.TrivialLoss())
	tester(`ceres.HuberLoss(0))
	tester(`ceres.SoftLOneLoss(0))
	tester(`ceres.CauchyLoss(0))
	tester(`ceres.ArctanLoss(0))
	tester(`ceres.TolerantLoss(0, 1))
	tester(`ceres.ComposedLoss())
	tester(`ceres.ScaledLoss())
}
testcase('ceres.Problem') {
	println(ceres.Problem.AddResidualBlock)
	ceres.Problem() {|problem|
		println(problem)
	}
}
testcase('ceres.Solver$Options') {
	propNames = [
		`minimizer_progress_to_stdout
		`minimizer_type
		`line_search_direction_type
		`line_search_type
		`nonlinear_conjugate_gradient_type
		`max_lbfgs_rank
		`use_approximate_eigenvalue_bfgs_scaling
		`line_search_interpolation_type
		`min_line_search_step_size
		`line_search_sufficient_function_decrease
		`max_line_search_step_contraction
		`min_line_search_step_contraction
		`max_num_line_search_step_size_iterations
		`max_num_line_search_direction_restarts
		`line_search_sufficient_curvature_decrease
		`max_line_search_step_expansion
		`trust_region_strategy_type
		`dogleg_type
		`use_nonmonotonic_steps
		`max_consecutive_nonmonotonic_steps
		`max_num_iterations
		`max_solver_time_in_seconds
		`num_threads
		`initial_trust_region_radius
		`max_trust_region_radius
		`min_trust_region_radius
		`min_relative_decrease
		`min_lm_diagonal
		`max_lm_diagonal
		`max_num_consecutive_invalid_steps
		`function_tolerance
		`gradient_tolerance
		`parameter_tolerance
		`linear_solver_type
		`preconditioner_type
		`visibility_clustering_type
		`dense_linear_algebra_library_type
		`sparse_linear_algebra_library_type
		`num_linear_solver_threads
		`use_explicit_schur_complement
		`use_postordering
		`dynamic_sparsity
		`min_linear_solver_iterations
		`max_linear_solver_iterations
		`eta
		`jacobi_scaling
		`use_inner_iterations
		`inner_iteration_tolerance
		`logging_type
		`minimizer_progress_to_stdout
		`trust_region_problem_dump_directory
		`trust_region_problem_dump_format_type
		`check_gradients
		`gradient_check_relative_precision
		`gradient_check_numeric_derivative_relative_step_size
		`update_state_every_iteration
	]
	wdMax = propNames:*width().max()
	ceres.Solver$Options() {|options|
		println(options)
		printf('%-*s %s\n', wdMax, propNames, options.getprop!(propNames, attrs => [`name]))
	}
}
testcase('ceres.Solver$Summary') {
	propNames = [
		`termination_type
		`message
		`initial_cost
		`final_cost
		`fixed_cost
		`num_successful_steps
		`num_unsuccessful_steps
		`num_inner_iteration_steps
		`num_line_search_steps
		`preprocessor_time_in_seconds
		`minimizer_time_in_seconds
		`postprocessor_time_in_seconds
		`total_time_in_seconds
		`linear_solver_time_in_seconds
		`residual_evaluation_time_in_seconds
		`jacobian_evaluation_time_in_seconds
		`inner_iteration_time_in_seconds
		`line_search_cost_evaluation_time_in_seconds
		`line_search_gradient_evaluation_time_in_seconds
		`line_search_polynomial_minimization_time_in_seconds
		`line_search_total_time_in_seconds
		`num_parameter_blocks
		`num_parameters
		`num_effective_parameters
		`num_residual_blocks
		`num_residuals
		`num_parameter_blocks_reduced
		`num_parameters_reduced
		`num_effective_parameters_reduced
		`num_residual_blocks_reduced
		`num_residuals_reduced
		`is_constrained
		`num_threads_given
		`num_threads_used
		`num_linear_solver_threads_given
		`num_linear_solver_threads_used
		`linear_solver_type_given
		`linear_solver_type_used
		`inner_iterations_given
		`inner_iterations_used
		`preconditioner_type_given
		`preconditioner_type_used
		`visibility_clustering_type
		`trust_region_strategy_type
		`dogleg_type
		`dense_linear_algebra_library_type
		`sparse_linear_algebra_library_type
		`line_search_direction_type
		`line_search_type
		`line_search_interpolation_type
		`nonlinear_conjugate_gradient_type
		`max_lbfgs_rank
	]
	wdMax = propNames:*width().max()
	ceres.Solver$Summary() {|summary|
		println(summary)
		printf('%-*s %s\n', wdMax, propNames, summary.getprop!(propNames, attrs => [`name]))
	}
}
testcase('helloworld') {
	CostFunctionEx = class(ceres.NumericDiffCostFunction) {
		__init__() = {|1, 1|}
		Evaluate(x:array) = {
			array@double {10 - x[0]}	// residual
		}
	}
	x = array@double {0.5}
	problem = ceres.Problem()
	problem.AddResidualBlock(CostFunctionEx(), nil, x)
	options = ceres.Solver$Options()
	options.minimizer_progress_to_stdout = true
	summary = ceres.Solver$Summary()
	ceres.Solve(options, problem, summary)
	println(summary.BriefReport())
	println('x: ', x[0])
	//ceres.example@helloworld()
}
testcase('helloworld_analytic_diff') {
	CostFunctionEx = class(ceres.CostFunction) {
		__init__() = {|1, 1|}
		Evaluate(x:array) = {
			[
				array@double {10 - x[0]}	// residual
				array@double {-1}			// diff of residual for x
			]
		}
	}
	x = array@double {0.5}
	problem = ceres.Problem()
	problem.AddResidualBlock(CostFunctionEx(), nil, x)
	options = ceres.Solver$Options()
	options.minimizer_progress_to_stdout = true
	summary = ceres.Solver$Summary()
	ceres.Solve(options, problem, summary)
	println(summary.BriefReport())
	println('x: ', x[0])
	//ceres.example@helloworld_analytic_diff()
}
testcase('curve_fitting') {
	data = @{
		0.000000e+00, 1.133898e+00,
		7.500000e-02, 1.334902e+00,
		1.500000e-01, 1.213546e+00,
		2.250000e-01, 1.252016e+00,
		3.000000e-01, 1.392265e+00,
		3.750000e-01, 1.314458e+00,
		4.500000e-01, 1.472541e+00,
		5.250000e-01, 1.536218e+00,
		6.000000e-01, 1.355679e+00,
		6.750000e-01, 1.463566e+00,
		7.500000e-01, 1.490201e+00,
		8.250000e-01, 1.658699e+00,
		9.000000e-01, 1.067574e+00,
		9.750000e-01, 1.464629e+00,
		1.050000e+00, 1.402653e+00,
		1.125000e+00, 1.713141e+00,
		1.200000e+00, 1.527021e+00,
		1.275000e+00, 1.702632e+00,
		1.350000e+00, 1.423899e+00,
		1.425000e+00, 1.543078e+00,
		1.500000e+00, 1.664015e+00,
		1.575000e+00, 1.732484e+00,
		1.650000e+00, 1.543296e+00,
		1.725000e+00, 1.959523e+00,
		1.800000e+00, 1.685132e+00,
		1.875000e+00, 1.951791e+00,
		1.950000e+00, 2.095346e+00,
		2.025000e+00, 2.361460e+00,
		2.100000e+00, 2.169119e+00,
		2.175000e+00, 2.061745e+00,
		2.250000e+00, 2.178641e+00,
		2.325000e+00, 2.104346e+00,
		2.400000e+00, 2.584470e+00,
		2.475000e+00, 1.914158e+00,
		2.550000e+00, 2.368375e+00,
		2.625000e+00, 2.686125e+00,
		2.700000e+00, 2.712395e+00,
		2.775000e+00, 2.499511e+00,
		2.850000e+00, 2.558897e+00,
		2.925000e+00, 2.309154e+00,
		3.000000e+00, 2.869503e+00,
		3.075000e+00, 3.116645e+00,
		3.150000e+00, 3.094907e+00,
		3.225000e+00, 2.471759e+00,
		3.300000e+00, 3.017131e+00,
		3.375000e+00, 3.232381e+00,
		3.450000e+00, 2.944596e+00,
		3.525000e+00, 3.385343e+00,
		3.600000e+00, 3.199826e+00,
		3.675000e+00, 3.423039e+00,
		3.750000e+00, 3.621552e+00,
		3.825000e+00, 3.559255e+00,
		3.900000e+00, 3.530713e+00,
		3.975000e+00, 3.561766e+00,
		4.050000e+00, 3.544574e+00,
		4.125000e+00, 3.867945e+00,
		4.200000e+00, 4.049776e+00,
		4.275000e+00, 3.885601e+00,
		4.350000e+00, 4.110505e+00,
		4.425000e+00, 4.345320e+00,
		4.500000e+00, 4.161241e+00,
		4.575000e+00, 4.363407e+00,
		4.650000e+00, 4.161576e+00,
		4.725000e+00, 4.619728e+00,
		4.800000e+00, 4.737410e+00,
		4.875000e+00, 4.727863e+00,
		4.950000e+00, 4.669206e+00,
	}
	CostFunctionEx = class(ceres.NumericDiffCostFunction) {
		__init__(x:number, y:number) = {|1, 1, 1|
			this.x = x, this.y = y
		}
		Evaluate(m:array, c:array) = {
			array@double {this.y - math.exp(m[0] * this.x + c[0])}	// residual
		}
	}
	m = array@double {0.0}
	c = array@double {0.0}
	problem = ceres.Problem()
	data.fold(2).each {|d|
		problem.AddResidualBlock(CostFunctionEx(d[0], d[1]), nil, m, c)
	}
	options = ceres.Solver$Options()
	options.max_num_iterations = 25
	options.linear_solver_type = ceres.DENSE_QR
	options.minimizer_progress_to_stdout = true
	summary = ceres.Solver$Summary()
	ceres.Solve(options, problem, summary)
	println(summary.BriefReport())
	println('m: ', m[0], ' c: ', c[0])
	//ceres.example@curve_fitting()
}
testcase('robust_curve_fitting') {
	data = @{
		0.000000e+00, 1.133898e+00,
		7.500000e-02, 1.334902e+00,
		1.500000e-01, 1.213546e+00,
		2.250000e-01, 1.252016e+00,
		3.000000e-01, 1.392265e+00,
		3.750000e-01, 1.314458e+00,
		4.500000e-01, 1.472541e+00,
		5.250000e-01, 1.536218e+00,
		6.000000e-01, 1.355679e+00,
		6.750000e-01, 1.463566e+00,
		7.500000e-01, 1.490201e+00,
		8.250000e-01, 1.658699e+00,
		9.000000e-01, 1.067574e+00,
		9.750000e-01, 1.464629e+00,
		1.050000e+00, 1.402653e+00,
		1.125000e+00, 1.713141e+00,
		1.200000e+00, 1.527021e+00,
		1.275000e+00, 1.702632e+00,
		1.350000e+00, 1.423899e+00,
		1.425000e+00, 5.543078e+00, // Outlier point
		1.500000e+00, 5.664015e+00, // Outlier point
		1.575000e+00, 1.732484e+00,
		1.650000e+00, 1.543296e+00,
		1.725000e+00, 1.959523e+00,
		1.800000e+00, 1.685132e+00,
		1.875000e+00, 1.951791e+00,
		1.950000e+00, 2.095346e+00,
		2.025000e+00, 2.361460e+00,
		2.100000e+00, 2.169119e+00,
		2.175000e+00, 2.061745e+00,
		2.250000e+00, 2.178641e+00,
		2.325000e+00, 2.104346e+00,
		2.400000e+00, 2.584470e+00,
		2.475000e+00, 1.914158e+00,
		2.550000e+00, 2.368375e+00,
		2.625000e+00, 2.686125e+00,
		2.700000e+00, 2.712395e+00,
		2.775000e+00, 2.499511e+00,
		2.850000e+00, 2.558897e+00,
		2.925000e+00, 2.309154e+00,
		3.000000e+00, 2.869503e+00,
		3.075000e+00, 3.116645e+00,
		3.150000e+00, 3.094907e+00,
		3.225000e+00, 2.471759e+00,
		3.300000e+00, 3.017131e+00,
		3.375000e+00, 3.232381e+00,
		3.450000e+00, 2.944596e+00,
		3.525000e+00, 3.385343e+00,
		3.600000e+00, 3.199826e+00,
		3.675000e+00, 3.423039e+00,
		3.750000e+00, 3.621552e+00,
		3.825000e+00, 3.559255e+00,
		3.900000e+00, 3.530713e+00,
		3.975000e+00, 3.561766e+00,
		4.050000e+00, 3.544574e+00,
		4.125000e+00, 3.867945e+00,
		4.200000e+00, 4.049776e+00,
		4.275000e+00, 3.885601e+00,
		4.350000e+00, 4.110505e+00,
		4.425000e+00, 4.345320e+00,
		4.500000e+00, 4.161241e+00,
		4.575000e+00, 4.363407e+00,
		4.650000e+00, 4.161576e+00,
		4.725000e+00, 4.619728e+00,
		4.800000e+00, 4.737410e+00,
		4.875000e+00, 4.727863e+00,
		4.950000e+00, 4.669206e+00
	}
	CostFunctionEx = class(ceres.NumericDiffCostFunction) {
		__init__(x:number, y:number) = {|1, 1, 1|
			this.x = x, this.y = y
		}
		Evaluate(m:array, c:array) = {
			array@double {this.y - math.exp(m[0] * this.x + c[0])}	// residual
		}
	}
	m = array@double {0.0}
	c = array@double {0.0}
	problem = ceres.Problem()
	data.fold(2).each {|d|
		//problem.AddResidualBlock(CostFunctionEx(d[0], d[1]), nil, m, c)
		problem.AddResidualBlock(CostFunctionEx(d[0], d[1]), ceres.CauchyLoss(0.5), m, c)
	}
	options = ceres.Solver$Options()
	options.linear_solver_type = ceres.DENSE_QR
	options.minimizer_progress_to_stdout = true
	summary = ceres.Solver$Summary()
	ceres.Solve(options, problem, summary)
	println(summary.BriefReport())
	println('m: ', m[0], ' c: ', c[0])
	//ceres.example@robust_curve_fitting()
}

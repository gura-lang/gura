#!/usr/bin/env gura
import(xml)
import(testutil) {*}

scope {
	MyParser = class(xml.parser) {
		StartElement(elem) = {
			printf('%s\n', elem)
			//printf('%s %s %s\n', elem.name, elem.tostring(), elem.children.tostring())
			//for (att in atts) {
			//	printf(" %s='%s'", att[0], att[1])
			//}
			//println()
		}
		EndElement(name:string) = {
			//println(name)
		}
		CharacterData(text:string) = {
			//print(text)
		}
		ProcessingInstruction(target:string, data:string) = {
		}
		Comment(data:string) = {
		}
		StartCdataSection() = {
		}
		EndCdataSection() = {
		}
		Default(text:string) = {
		}
		DefaultExpand(text:string) = {
		}
		SkippedEntity(entityName:string, isParameterEntity:boolean) = {
		}
		StartNamespaceDecl(prefix:string, uri:string) = {
		}
		EndNamespaceDecl(prefix:string) = {
		}
		XmlDecl(version:string, encoding:string, standalone?:boolean) = {
			printf('%s %s %s\n', version, encoding, standalone)
		}
		StartDoctypeDecl(doctypeName:string, systemId:string,
									publicId:string, hasInternalSubset:boolean) = {
		}
		EndDoctypeDecl() = {
		}
		ElementDecl(name:string, type:symbol) = {
		}
		AttlistDecl(elemName:string, attName:string, attType:string,
									default:string, isRequired:boolean) = {
		}
		EntityDecl(entityName:string, isParameterEntity:boolean, value:string,
				base:string, systemId:string, publicId:string, notationName:string) = {
		}
		NotationDecl(notationName:string, base:string,
									systemId:string, publicId:string) = {
		}
		NotStandalone() = {
		}
	}
	MyParser().parse('test.xml');
}
scope {
	e = xml.element
	c = xml.comment
	doc = xml.document()
	doc.root = e('hoge', attr => 'aaa', attr_2 => 'bbb') {
		e('foo') {
			'text'
			e('bar')
			'fjdkfjdsjfkldsj fjdkjfdsa fjdskfjds fjkfdsjfkds'
			e('bar')
			e('bar')
			e('bar')
			e('bar')
			c('This is a comment text')
			e('bar') {
				e('hoge')
				e('hoge')
				e('hoge')
				e('hoge')
				e('hoge')
			}
			e('bar')
			e('bar' + (1..10))
		}
		e('foo')
	}
	doc.root.addchild(e('foo2'))
	doc.root.addchild([e('foo3'), e('foo4'), e('foo5'), 'text-added'])
	doc.root << e('foo2')
	doc.root << [e('foo3'), e('foo4'), e('foo5'), 'text-added']
	try {
		doc.root.addchild(2)
	} except {|e|
		println('expected error occurs: ', e.text)
	}
	try {
		doc.root << 3
	} except {|e|
		println('expected error occurs: ', e.text)
	}
	println('== result output ==')
	doc.write(sys.stdout, fancy => true)
}

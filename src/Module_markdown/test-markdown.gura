#!/usr/bin/env gura
import(markdown):binary

text = R'''
No Header
===hoge

No Header
---hoge

-3 is less than zero

Header1
=
=

Header2
-
-

--

---

* item1
* item2
*emphasis*


+ item1
+ item2
+100 yen
+ item3
  +100 yen
+ item4

`code`
*emphasis*
**strong**
text
`not terminated code
text
*not terminated emphasis
text
**not terminated strong
text

    #include <stdio.h>
    int main()
    {
        -3;
        =a+2
        return 0;
        ======
        hoge
        for (int i = 0; i < 10; i++) {
            printf("hello\n");
        }
        ------
    }

fsafdsasa

    1 is the first character in code block
    beginning of code block
    hoge hoge

fadsfdsafdsa

        four spaces ahead

paragraph
    // just after paragraph with no space between
    #include <stdio.h>
    int main()
    {
        -3;
        =a+2
        return 0;
        ======
        hoge
        for (int i = 0; i < 10; i++) {
            printf("hello\n");
        }
        ------
    }
  normal text
    void sub1()
    {
    }
  
    void sub2()
    {
    // 3 blank lines below
    
    
    
    // 3 blank lines above
    }
- item 1
- item 2
- item 3
  *strong*
  - item 3-1
    *strong*
  - item 3-2 *strong* `code`
  - item 3-3
    - item 3-3-1
    - item 3-3-2
- item 4
  - item 4-1
  - item 4-2
  - item 4-3

Header1
==

Header1
===

Header1
=======

Header2
--

Header2
---

Header2
-------

Build for Windows
-----
Build for Windows

- hoge


1. first
2. second
33. third
444. fourth
5555. fifth


1. Check if Visual Studio 2010 has been installed. You can use Express version as well.
2. Run a batch file `gura\src\setup-gura-guest.bat`, which downloads necessary packages
   from Git repository (https://github.com/ypsitau/gura-guest.git) and build them.
   The batch file may occur an error that says it cannot find `vcvarsall.bat`.
   In such a case, you have to edit `gura\gura-guest\setup.bat
   and modify `VCVARSALL` variable so that it points to a right directory of Visual Studio.
3. Open `gura\src\gura.sln` with Visual Studio 2010, switch the configuration to Release
   and build it.

# header1
## header2
### header3
#### header4
##### header5
###### header6
####### header6

# header1

#header1
#header1 
#header1  
#header1 #
#header1 ##
#header1  # 

 # not a header

  # not a header

   # not a header

- para1
  hoge
  
  para2
  
  para3
- single para **strong** hoge
- single para again **strong** foo

1. para1
  hoge
  
  para2
  
  para3
2. single para **strong** hoge
3. single para again **strong** foo

- para1
  hoge

        #include <stdio.h>
        main()
        {
        }

  foo
  bar
- para1
  hoge

        #include <stdio.h>
        main()
        {
        }

  foo
  bar

1. para1
  hoge

        #include <stdio.h>
        main()
        {
        }

  foo
  bar
2. para1
  hoge

        #include <stdio.h>
        main()
        {
        }

  foo
  bar

Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell

entity test

    <div class="footer">
        &copy; 2004 Foo Corporation
    </div>

- item-1
-300
+200
+ item-2
- item-3
- item-4


- item-1

- item-2

- item-3

hoge

1. item-1

2. item-2

3. item-3

hoge

- item-1
- item-2
- item-3

*Emphasis*

- item-1
- item-2
- item-3

**Strong**

- item-1
- item-2
- item-3

+Plus at beginning of line

- item-1
- item-2
- item-3

-Hyphen at beginning of line

- item-1
- item-2
- item-3

3.1415 at beginning of line

`<code>` spans are delimited by backticks.

You can include literal backticks like `` `this` ``.

``test` hoge

```this` ``

*strong*
*`strong code`*
*normal and `code` in composition*

** *strong-em* **
***strong-em***
**head*strong-em*tail**

*emphasis in paragraph*

- *emphasis in ul item*
 *emphasis again*
 *emphasis again*

1. *emphasis in ol item*
 *emphasis again*
 *emphasis again*

_emphasis in paragraph_

- _emphasis in ul item_
 _emphasis again_
 _emphasis again_

1. _emphasis in ol item_
 _emphasis again_
 _emphasis again_

**strong in paragraph**

- **strong in ul item**
 **strong again**
 **strong again**

1. **strong in ol item**
 **strong again**
 **strong again**

__strong in paragraph__

- __strong in ul item__
 __strong again__
 __strong again__

1. __strong in ol item__
 __strong again__
 __strong again__

# `code` in header
# *emphasis* in header
# _emphasis_ in header
# **strong** in header
# __strong__ in header
# `code` *emphasis* _emphasis_ **strong** __strong__
`code` *emphasis* _emphasis_ **strong** __strong__
====
`code` *emphasis* _emphasis_ **strong** __strong__
----

*\*star*
**\*star**
*A\*star*
**A\*star**
_\_ubar_
__\_ubar__
_A\_ubar_
__A\_ubar__

<http://www.google.com/>
<https://www.google.com/>
<ftp://www.google.com/>
<abcde@bbb.ccc>
<abcde@bbb>

Link: [example](http://url.com/) .. without title

Link: [example](http://url.com/ "Title 'hoge'") .. with title (double quote)

Link: [example](http://url.com/ 'Title "hoge"') .. with title (single quote)

Link: [example](http://url.com/ "Title \"hoge\"") .. with title (double quote)

Link: [example](http://url.com/ 'Title \'hoge\'') .. with title (single quote)

Image: ![alt text](/path/img.jpg) .. without title

Image: ![alt text](/path/img.jpg "Title 'hoge'") .. with title (double quote)

Image: ![alt text](/path/img.jpg 'Title "hoge"') .. with title (single quote)

[like this]() .. without url nor title

![like this]() .. without url nor title

Link: [this](<http://example.com/>) .. without title

Link: [this](<http://example.com/> "title") .. with title

Image: ![alt text](</path/img.jpg>) .. without title

Image: ![alt text](</path/img.jpg> "Title") .. with title

- list item

        block under list item
        2nd line
        3rd line

- list item

          block under list item (2 spaces ahead)
           2nd line (3 spaces ahead)
            3rd line (4 spaces ahead)


- item
-hyphen
+plus
*emphasis*

- item
  -hyphen
  +plus
  *emphasis*


- item

  -hyphen at beginning

  -hyphen at beginning

  +plus at beginning

  *emphasis* at beginning

- item

        -hyphen at beginning in block
        +plus at beginning in block
        *star at beginning in block

*   Abacus
    * answer
*   Bubbles
    1.  bunk
    2.  bupkis
        * BELITTLER
    3. burper
*   Cunning


*strong* in paragraph

1986\. What a great season.

Link: [example][1] .. reference

Link: [example][2] .. reference

Link: [example][3] .. reference

Link: [example][4] .. reference

Link: [example][  5  ] .. reference

Link: [example][6] .. reference

Link: [example][7] .. reference

Link: [example][8] .. reference

Link: [example][9] .. reference

Link: [example][ABCDEF] .. reference

Link: [example][abcdef] .. reference

Link: [example][   ABCDEF  ] .. reference

[1]: http://example-1.com

[2]: http://example-2.com "title-2"

[3]: http://example-3.com 'title-3'

[4]: http://example-4.com (title-4)

[  5  ]: http://example-5.com "title-5"

[6]: http://example-6.com "title-6 \"quoted\""

[7]: http://example-7.com 'title-7 \'quoted\''

[8]: http://example-8.com (title-8 \(quoted\))

[9]: <http://example-9.com>

[ABCDEF]: <http://example-ABCDEF.com> "title-ABCDEF"

[   ABCDEF  ]: <http://example-sABCDEFs.com> "title-sABCDEFs"

[NG]:http://example-NG.com "title-NG" .. should be normal text

[NG]:http://example-NG.com "title-NG .. should be normal text

[NG]:http://example-NG.com [title-NG .. should be normal text

    [NG]:http://example-NG.com [title-NG] .. should be block

An [example][id1]. Then, anywhere else in the doc, define the link:

  [id1]: http://example.com/  "Title"

Reference-style image:
![alt text][id2]

[id2]: /url/to/img.jpg "Title"

> 1st-1
> 1st-2
> 1st-3
>> 2nd-1
>> 2nd-2
>> 2nd-3
> 1st-4
> 1st-5
>> 2nd-4
>> 2nd-5
>>> 3rd-1
>>> 3rd-2
> 1st-6
>>> 3rd-3
>>> 3rd-4
>>>>>> 6th-1
>>>>>> 6th-2
>>>>>> 6th-3
> 1st-7

normal

> 1st-1

> 1st-2

> 1st-3
continue
continue-2

normal

> 1st-1
>
> 1st-2
>
> 1st-3

normal

> 1st-1

    block after quote
    block after quote

> 1st-1

normal paragraph

> Email-style angle brackets
> are used for blockquotes.

> > And, they can be nested.

> #### Headers in blockquotes
> 
> * You can quote a list.
> * Etc.
>
> paragraph in quote
>
> - list item-1
> - list item-2
>
> 1. list item-1
> 2. list item-2
>
> paragraph in quote

normal paragraph

>     #include <stdio.h>
>     int main() {
>         int i;
>         for (i = 0; i < 10; i++) {
>             printf("hello world\n");
>         }
>     }

paragraph

3 < 4 > 2

out << hogehoge

&copy; &amp; AT&T &gt; &lt;
&copy;&amp;AT&T&gt;&lt;
'''

sys.stdout.addcr(false)
markdown.document {|doc|
	doc << text
	doc.print()
}

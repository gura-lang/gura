#!/usr/bin/env gura
import(moddoc)
import(jpeg)

text@en = R'''
# jpeg Module

The `jpeg` module provides measures to read/write image data in JPEG format.
To utilize it, import the `jpeg` module using `import` function.

Below is an example to read a JPEG file:

    import(jpeg)
    img = image('foo.jpeg')


## Exntension to Function's Capability

This module extends the capability of function `image()` and instance method `image#write()`
so that they can read/write JPEG files.

When function `image()` is provided with a stream that satisfies the following conditions,
it would recognize the stream as a JPEG file.

- The identifier of the stream ends with a suffix "`.jpeg`", "`.jpg`" or "`.jpe`".
- The stream data begins with a byte sequence "`\xff\xd8`"
  that means SOI (start of Image) marker in JPEG specification.

When instance method `image#write()` is provided with a stream that satisfies the following condition,
it would write image data in JPEG format.

- The identifier of the stream ends with a suffix "`.jpeg`", "`.jpg`" or "`.jpe`".


## jpeg.exif Class

The `jpeg.exif` class provides EXIF information in a JPEG stream.

A `jpeg.exif` instance contains `jpeg.ifd` instances as properties
named `jpeg.exif#ifd0` and `jpeg.exif#ifd1`
that include a list of `jpeg.tag` instances.

    +-----------+             +----------+        +----------+
    | jpeg.exif |ifd0, ifd1   | jpeg.ifd |1..     | jpeg.tag |
    |-----------*-------------+----------*--------+----------|
    |           |             |          |        |          |
    +-----------+             +----------+        +----------+


### Property

A `jpeg.exif` instance has the following properties:

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>jpeg.exif#endian</code></td><td><code>symbol</code></td><td>R</td>
<td>The endian type: <code>`big</code> for big-endian and
<code>`little</code> for little-endian.</td></tr>

<tr><td><code>jpeg.exif#ifd0</code></td><td><code>jpeg.ifd</code></td><td>R</td>
<td>IFD0 instance.</td></tr>

<tr><td><code>jpeg.exif#ifd1</code></td><td><code>jpeg.ifd</code></td><td>R</td>
<td>IFD1 instance.</td></tr>

<tr><td><code>jpeg.exif#thumbnail</code></td><td><code>image</code></td><td>R</td>
<td>Thumbnail image as <code>image</code> value.</td></tr>

<tr><td><code>jpeg.exif#thumbnail@jpeg</code></td><td><code>binary</code></td><td>R</td>
<td>Thumbnail image as JPEG binary data.</td></tr>

</table>


### Function to Create Instance

${moddoc.funcdoc(`en
jpeg.exif
)}

### Method

${moddoc.funcdoc(`en
jpeg.exif.each
)}


## jpeg.ifd Class

### Property

A `jpeg.ifd` instance has the following properties:

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>jpeg.ifd#name</code></td><td><code>string</code></td><td>R</td>
<td></td></tr>

<tr><td><code>jpeg.ifd#symbol</code></td><td><code>symbol</code></td><td>R</td>
<td></td></tr>

</table>


### Method

${moddoc.funcdoc(`en
jpeg.ifd.each
)}


## jpeg.tag Class

### Property

A `jpeg.tag` instance has the following properties:

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Explanation</th></tr>

<tr><td><code>jpeg.tag#id</code></td><td><code>number</code></td><td>R</td>
<td>Tag ID.</td></tr>

<tr><td><code>jpeg.tag#name</code></td><td><code>string</code></td><td>R</td>
<td>Tag name.</td></tr>

<tr><td><code>jpeg.tag#symbol</code></td><td><code>symbol</code></td><td>R</td>
<td>Tag name as <code>symbol</code>.</td></tr>

<tr><td><code>jpeg.tag#type</code></td><td><code>number</code></td><td>R</td>
<td>Tag type.</td></tr>

<tr><td><code>jpeg.tag#typename</code></td><td><code>string</code></td><td>R</td>
<td>Tag type name.</td></tr>

<tr><td><code>jpeg.tag#value</code></td><td><code>any</code></td><td>R</td>
<td>Tag value. When the attribute <code>:cooked</code> is specified,
numbers in some tags are translated to human-readable symbols.</td></tr>

<tr><td><code>jpeg.tag#ifd</code></td><td><code>jpeg.ifd</code></td><td>R</td>
<td>IFD instance. Valid only for tags <code>Exif</code>, <code>GPSInfo</code> and
<code>Interoperability</code>.</td></tr>

</table>


## Extension to image Class

This module extends the `image` class with methods described here.

${moddoc.funcdoc(`en
image.read@jpeg
image.write@jpeg
)}


## Thanks

This module uses JPEG library which is distributed in the following site:

[http://www.ijg.org/](http://www.ijg.org/)
'''.template().render()

moddoc.register(locals(), %{`en => text@en})

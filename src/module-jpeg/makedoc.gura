#!/usr/bin/env gura
import(markdown)
import(jpeg)

text = R'''
# jpeg Module

The `jpeg` module provides measures to read/write image data in JPEG format.
To utilize it, import `jpeg` module using `import` function.
	
Below is an example:

    import(jpeg)
    img = image('foo.jpeg')

## Exntension of Function's Capability

This module extends the capability of function `image()` and instance method `image#write()`
so that they can read/write JPEG files.

When function `image()` is provided with a stream that satisfies the following conditions,
it would recognize the stream as a JPEG file.

- The identifier of the stream ends with a suffix `.jpeg`, `.jpg` or `.jpe`.
- The stream data begins with a byte sequence "`\xff\xd8`"
  that means SOI (start of Image) marker in JPEG specification.

When instance method `image#write()` is provided with a stream that satisfies the following condition,
it would write image data in JPEG format.

- The identifier of the stream ends with a suffix `.jpeg`, `.jpg` or `.jpe`.
'''

write(doc:markdown.document) = {
	doc << text
	doc << R'''
	## jpeg.exif Class
	'''
	doc << [
		jpeg.exif
		jpeg.exif.each
	]

	doc << R'''
	## jpeg.ifd Class
	'''
	doc << [
		jpeg.ifd.each
	]

	doc << R'''
	## jpeg.tag Class
	'''

	doc << R'''
	## Methods Added to image Class
	'''
	doc << [
		image.read@jpeg
		image.write@jpeg
	]
	doc
}

if (__name__ == '__main__') {
	write(markdown.document()).render@html(sys.stdout)
}

# CMake Configuration for Gura
# Available operations:
#  - Build library and executables
#    $ make
#  - Install files to the system
#    $ sudo make install
#  - Make packages of Debian and RPM
#    $ make package
# When you want to see the detailed process, run "make VERBOSE=1".

cmake_minimum_required(VERSION 2.6)

project(gura)

# Modify content of include/gura/Version.h as well.

set(GURA_VERSION_MAJOR	0)
set(GURA_VERSION_MINOR	5)
set(GURA_VERSION_PATCH	3)

#if (APPLE)
#set(CMAKE_INSTALL_PREFIX	/Applications/Gura.app/Contents/usr)
#set(GURA_INSTALL_PREFIX	/Applications/Gura.app/Contents/usr)
#else (APPLE)
#set(CMAKE_INSTALL_PREFIX	/usr)
#set(GURA_INSTALL_PREFIX	${CMAKE_INSTALL_PREFIX})
#endif (APPLE)

set(CMAKE_INSTALL_PREFIX	/usr)

set(GURA_VERSION		${GURA_VERSION_MAJOR}.${GURA_VERSION_MINOR}.${GURA_VERSION_PATCH})
set(GURA_VERSION_SO		${GURA_VERSION_MAJOR})

set(GURA_ROOT_SRCDIR	${PROJECT_SOURCE_DIR}/..)
set(GURA_INCLUDE_SRCDIR	${GURA_ROOT_SRCDIR}/include)
set(GURA_SAMPLE_SRCDIR	${GURA_ROOT_SRCDIR}/sample)
set(GURA_EDITOR_SRCDIR	${GURA_ROOT_SRCDIR}/editor)
set(GURA_MODULE_SRCDIR	${GURA_ROOT_SRCDIR}/module)
set(GURA_GUESTS_SRCDIR	${GURA_ROOT_SRCDIR}/guests/dylib)

set(GURA_BIN_RELDIR		bin)
set(GURA_SHARE_RELDIR	share/gura/${GURA_VERSION})
set(GURA_LIB_RELDIR		lib/gura/${GURA_VERSION})
set(GURA_INCLUDE_RELDIR	include/gura/${GURA_VERSION})
set(GURA_GUESTS_RELDIR	lib/gura/guests)

set(GURA_BIN_DSTDIR		${GURA_INSTALL_PREFIX}/${GURA_BIN_RELDIR})
set(GURA_SHARE_DSTDIR	${GURA_INSTALL_PREFIX}/${GURA_SHARE_RELDIR})
set(GURA_LIB_DSTDIR		${GURA_INSTALL_PREFIX}/${GURA_LIB_RELDIR})
set(GURA_INCLUDE_DSTDIR	${GURA_INSTALL_PREFIX}/${GURA_INCLUDE_RELDIR})
set(GURA_GUESTS_DSTDIR  ${GURA_INSTALL_PREFIX}/${GURA_GUESTS_RELDIR})

configure_file(
  ${GURA_ROOT_SRCDIR}/include/gura/config.h.in
  ${GURA_ROOT_SRCDIR}/include/gura/config.h)

configure_file(
  ${PROJECT_SOURCE_DIR}/resource/build/build-modules.in
  ${CMAKE_BINARY_DIR}/tmp/build-modules)

file(COPY ${CMAKE_BINARY_DIR}/tmp/build-modules
  DESTINATION ${CMAKE_BINARY_DIR}
  FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
                   GROUP_READ GROUP_EXECUTE WORLD_READ)

configure_file(
  ${PROJECT_SOURCE_DIR}/resource/build/setup-guest.in
  ${CMAKE_BINARY_DIR}/tmp/setup-guest)

file(COPY ${CMAKE_BINARY_DIR}/tmp/setup-guest
  DESTINATION ${CMAKE_BINARY_DIR}
  FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
                   GROUP_READ GROUP_EXECUTE WORLD_READ)

include_directories(
  ${GURA_ROOT_SRCDIR}/include
  ${PROJECT_SOURCE_DIR}/lib
  ${PROJECT_SOURCE_DIR}/lib/SFMT-src-1.3.3)

add_subdirectory(${PROJECT_SOURCE_DIR}/lib)
add_subdirectory(${PROJECT_SOURCE_DIR}/program-gura)
#add_subdirectory(${PROJECT_SOURCE_DIR}/program-guri)

install(DIRECTORY ${GURA_SAMPLE_SRCDIR}/resource/
  DESTINATION ${GURA_SHARE_RELDIR}/sample/resource
  FILES_MATCHING PATTERN "*")

install(DIRECTORY ${GURA_EDITOR_SRCDIR}/
  DESTINATION ${GURA_SHARE_RELDIR}/editor
  FILES_MATCHING PATTERN "*")

install(DIRECTORY ${GURA_MODULE_SRCDIR}/
  DESTINATION ${GURA_LIB_RELDIR}/module
  USE_SOURCE_PERMISSIONS
  FILES_MATCHING PATTERN "*.gura" PATTERN "*.gurd")

install(DIRECTORY ${GURA_GUESTS_SRCDIR}/
  DESTINATION ${GURA_GUESTS_RELDIR}
  USE_SOURCE_PERMISSIONS
  FILES_MATCHING PATTERN "*")

install(DIRECTORY ${GURA_INCLUDE_SRCDIR}/
  DESTINATION ${GURA_INCLUDE_RELDIR}
  FILES_MATCHING PATTERN "*.h")

find_program(DPKG NAMES dpkg-deb PATHS "/usr/bin")
find_program(RPMBUILD NAMES rpmbuild PATHS "/usr/bin")

set(CPACK_PACKAGE_NAME					"gura")
set(CPACK_PACKAGE_CONTACT				"Yutaka Saito <ypsitau@nifty.com>")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY	"Gura Programming Language")
set(CPACK_PACKAGE_VERSION_MAJOR			${GURA_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR			${GURA_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH			${GURA_VERSION_PATCH})
set(CPACK_PACKAGE_VERSION				"${GURA_VERSION_MAJOR}.${GURA_VERSION_MINOR}.${GURA_VERSION_PATCH}")

if (APPLE)
  message(STATUS "Packaging disk image: OK")
  set(CPACK_GENERATOR "Bundle")   
  set(CPACK_BUNDLE_ICON					"${PROJECT_SOURCE_DIR}/resource/dmg/Gura.icns")
  set(CPACK_BUNDLE_NAME					"Gura")
  set(CPACK_BUNDLE_PLIST				"${PROJECT_SOURCE_DIR}/resource/dmg/Info.plist")
  #set(CPACK_BUNDLE_STARTUP_COMMAND		"")
  set(CPACK_BUNDLE_ICON					"${PROJECT_SOURCE_DIR}/resource/dmg/Gura.icns")
  set(CPACK_PACKAGE_FILE_NAME			"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
  set(CPACK_PACKAGE_ICON				"${PROJECT_SOURCE_DIR}/resource/dmg/Gura.icns")
else (APPLE)
  set(CPACK_SET_DESTDIR					true)
  set(CPACK_PACKAGE_RELOCATABLE			false)
  if (DPKG)
    get_filename_component(DPKG_PATH ${DPKG} ABSOLUTE)
    message(STATUS "Packaging deb using ${DPKG_PATH}: OK")
    set(CPACK_GENERATOR "DEB")
    set(CPACK_PACKAGE_FILE_NAME				"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-Ubuntu")
	set(CPACK_DEBIAN_PACKAGE_NAME			${CPACK_PACKAGE_NAME})
	set(CPACK_DEBIAN_PACKAGE_PRIORITY		"optional")
	set(CPACK_DEBIAN_PACKAGE_SECTION		"interpreters")
	set(CPACK_DEBIAN_PACKAGE_MAINTAINER		${CPACK_PACKAGE_CONTACT})
	set(CPACK_DEBIAN_PACKAGE_DESCRIPTION	${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
	set(CPACK_DEBIAN_PACKAGE_VERSION		${CPACK_PACKAGE_VERSION})
	set(CPACK_DEBIAN_PACKAGE_DEPENDS		"libc6 (>= 2.3),libreadline6 (>= 6.0),libonig2,libyaml-0-2,libwxgtk3.0,tk8.5,libsdl1.2debian")
	if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
	  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")
	elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
	  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE	"i386")
	endif ()
  endif ()
  if (RPMBUILD)
    get_filename_component(RPMBUILD_PATH ${RPMBUILD} ABSOLUTE)
    message(STATUS "Packaging rpm using ${RPMBUILD_PATH}: OK")
    if (DEFINED CPACK_GENERATOR)
      set(CPACK_GENERATOR ${CPACK_GENERATOR} "RPM")
    else ()
      set(CPACK_GENERATOR "RPM")
    endif ()
    set(CPACK_PACKAGE_FILE_NAME				"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-Fedora")
    set(CPACK_RPM_PACKAGE_NAME				${CPACK_PACKAGE_NAME})
    set(CPACK_RPM_PACKAGE_DESCRIPTION		${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
    set(CPACK_RPM_PACKAGE_VERSION			${CPACK_PACKAGE_VERSION})
    set(CPACK_RPM_PACKAGE_VENDOR			${CPACK_PACKAGE_CONTACT})
    set(CPACK_RPM_PACKAGE_REQUIRES			"glibc >= 2.3, readline >= 6.0")
    if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
      set(CPACK_RPM_PACKAGE_ARCHITECTURE "x86_64")
    elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
      set(CPACK_RPM_PACKAGE_ARCHITECTURE	"i386")
    endif ()
  endif ()
endif (APPLE)


include(CPack)

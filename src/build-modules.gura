#!/usr/bin/env gura
import(argopt)

ModuleInfo = struct(moduleName:string, action:symbol, platforms[]:symbol)
moduleInfos = @(ModuleInfo) {
	['base64',			`skip,	[`mswin,	`ubuntu ]]	// integrated
	['bmp',				`build,	[`mswin,	`ubuntu	]]
	['bzip2',			`build,	[`mswin,	`ubuntu	]]
	['cairo',			`build,	[`mswin,	`ubuntu	]]
	['canvas',			`build,	[`mswin,			]]
	['codecs_basic',	`skip,	[`mswin,	`ubuntu	]]	// integrated
	['codecs_iso8859',	`skip,	[`mswin,	`ubuntu	]]	// integrated
	['codecs_japanese',	`skip,	[`mswin,	`ubuntu	]]	// integrated
	['conio',			`build,	[`mswin,	`ubuntu	]]
	['csv',				`build,	[`mswin,	`ubuntu	]]
	['curl',			`build,	[`mswin,	`ubuntu	]]
	['emf',				`skip,	[`mswin,	`ubuntu	]]	// not completed
	['freetype',		`build,	[`mswin,	`ubuntu	]]
	['fs',				`skip,	[`mswin,	`ubuntu	]]	// integrated
	['gif',				`build,	[`mswin,	`ubuntu	]]
	['glu',				`build,	[`mswin,	`ubuntu	]]
	['gmp',				`build,	[`mswin,	`ubuntu	]]
	['guri',			`build,	[`mswin,	`ubuntu	]]
	['gzip',			`build,	[`mswin,	`ubuntu	]]
	['hash',			`build,	[`mswin,	`ubuntu	]]
	['http',			`build,	[`mswin,	`ubuntu	]]
	['jpeg',			`build,	[`mswin,	`ubuntu	]]
	['llvm',			`skip,	[`mswin,	`ubuntu	]]	// not completed
	['markdown',		`build,	[`mswin,	`ubuntu	]]
	['math',			`skip,	[`mswin,	`ubuntu	]]	// integrated
	['midi',			`build,	[`mswin,	`ubuntu	]]
	['msico',			`build,	[`mswin,	`ubuntu	]]
	['mswin',			`build,	[`mswin,			]]
	['mysql',			`skip,	[`mswin,	`ubuntu	]]	// not completed
	['opengl',			`build,	[`mswin,	`ubuntu	]]
	['os',				`skip,	[`mswin,	`ubuntu	]]	// integrated
	['path',			`skip,	[`mswin,	`ubuntu	]]	// integrated
	['png',				`build,	[`mswin,	`ubuntu	]]
	['postgresql',		`skip,	[`mswin,	`ubuntu	]]	// not completed
	['ppm',				`build,	[`mswin,	`ubuntu	]]
	['re',				`build,	[`mswin,	`ubuntu	]]
	['sample',			`build,	[`mswin,	`ubuntu	]]
	['sdl',				`build,	[`mswin,	`ubuntu	]]
	['sqlite3',			`build,	[`mswin,	`ubuntu	]]
	['tar',				`build,	[`mswin,	`ubuntu	]]
	['tcl',				`build,	[`mswin,	`ubuntu	]]
	['tester',			`skip,	[`mswin,	`ubuntu	]]	// just for test
	['tiff',			`build,	[`mswin,	`ubuntu	]]
	['time',			`skip,	[`mswin,	`ubuntu	]]	// integrated
	['uuid',			`build,	[`mswin,			]]
	['wav',				`build,	[`mswin,	`ubuntu	]]
	['wx',				`build,	[`mswin,	`ubuntu	]]
	['xml',				`build,	[`mswin,	`ubuntu	]]
	['xpm',				`build,	[`mswin,	`ubuntu	]]
	['yaml',			`build,	[`mswin,	`ubuntu	]]
	['zip',				`build,	[`mswin,	`ubuntu	]]
}

argopt.Parser {|p|
	p.addFlag('verbose',	'v', 'verbose mode')
	p.addFlag('debug',		'd', 'build module with debug information')
	p.addFlag('rebuild',	'r', 'clean output files before building')
	p.addParam('exclude',	'x', 'specify module to exclude', 'NAME', '')
	p.addParam('incdir',	'I', 'specify include directory', 'DIR')
	try {
		[cfg, argv] = p.parse(sys.argv)
	} catch {|e|
		sys.stderr.println(e.text)
		sys.exit(1)
	}
	command = if (argv.len() == 0) {
		`build
	} elsif (argv[0] == 'help') {
		R'''
		usage: ${path.filename(sys.argv[0])} [options] command
		command:
		 clean          clean output files
		 install        install built files to root directory
		 build-install  build and install files to root directory
		options:
		 ${p.formatHelp() + '\n'}
		'''.template().render(sys.stderr)
		sys.exit(1)
	} elsif (argv[0] == 'clean') {
		`clean
	} elsif (argv[0] == 'install') {
		`install
	} elsif (argv[0] == 'build-install') {
		`build_install
	} else {
		sys.stderr.println('unknown command: ', argv[0])
		sys.exit(1)
	}
}
if (sys.platform == `linux) {
	platform = nil
	!platform && path.exists(fileName = '/etc/lsb-release') && \
										readlines(fileName):chop {|line|
		fields = line.split('='):list
		if (fields.len() == 2 && fields[0].strip() == 'DISTRIB_ID') {
			value = fields[1].strip()
			if (value == 'Ubuntu') {
				platform = `ubuntu
			}
			break
		}
	}
	!platform && path.exists(fileName = '/etc/system-release') && \
										readlines(fileName):chop {|line|
		if (line.startswith('Fedora')) {
			platform = `fedora
			break
		}
	}
	!platform && path.exists(fileName = '/etc/redhat-release') && \
										readlines(fileName):chop {|line|
		if (line.startswith('CentOS')) {
			platform = `redhat
			break
		} elsif (line.startswith('Red Hat')) {
			platform = `redhat
			break
		}
	}
} else {
	platform = sys.platform
}
println(platform)
sys.exit()
moduleNamesExcept = cfg['exclude'].split(',')
moduleNames = moduleInfos.filter(moduleInfos:*action == `build && \
		moduleInfos:*platforms:*contains(platform))::moduleName
dirNamePre = path.dirname(sys.argv[0])
moduleNamesError = []
debFiles = []
rpmFiles = []
for (moduleName in moduleNames) {
	if (moduleName in moduleNamesExcept) {
		printf('[%s]', moduleName)
		printf(' .. skipped\n')
		continue
	}
	printf('[%s]\n', moduleName)
	if (!dirNamePre.isempty()) {
		pathName = path.join(dirNamePre, 'module-' + moduleName)
	}
	argvOrg = sys.argv
	sys.argv = ['build.gura']
	if (command == `build) {
		// nothing to do
	} elsif (command == `clean) {
		sys.argv.append('clean')
	} elsif (command == `install) {
		sys.argv.append('install-root')
	} elsif (command == `build_install) {
		sys.argv.append('build-install-root')
	} else {
		// nothing to do
	}
	cfg['verbose'] && sys.argv.append('--verbose')
	cfg['debug'] && sys.argv.append('--debug')
	cfg['rebuild'] && sys.argv.append('--rebuild')
	cfg['incdir'] && sys.argv.append('--incdir=' + cfg['incdir'])
	sys.argv.append('--basedir=' + path.join(fs.getcwd(), 'module-' + moduleName))
	fs.chdir(pathName) {
		scope {
			builder = expr('build.gura').eval()
			builder.errorFlag && moduleNamesError.append(moduleName)
			builder.debFiles && debFiles.append(builder.debFiles)
			builder.rpmFiles && rpmFiles.append(builder.rpmFiles)
		}
		sys.argv = argvOrg
	}
}
if (!moduleNamesError.isempty()) {
	println()
	println('**** error while building ', moduleNamesError)
	if (!debFiles.isempty()) {
		fileName = 'setup-gura-guest-deb.sh'
		open(fileName, 'w').println('apt-get install -y ', set(debFiles))
		fs.chmod('a+x', fileName)
		println('Execute ', fileName, ' to install necessary guest packages of Debian.')
	}
	if (!rpmFiles.isempty()) {
		fileName = 'setup-gura-guest-rpm.sh'
		open(fileName, 'w').println('yum install -y ', set(rpmFiles))
		fs.chmod('a+x', fileName)
			println('Execute ', fileName, ' to install necessary guest packages of RPM.')
	}
	sys.exit(1)
}

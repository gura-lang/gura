#!/usr/bin/env gura
import(argopt)

ModuleInfo = struct(moduleName:string, action:symbol, platforms[]:symbol)
moduleInfos = @(ModuleInfo) {
	['base64',			`skip,	[`mswin,	`linux	]]	// integrated
	['bmp',				`build,	[`mswin,	`linux	]]
	['bzip2',			`build,	[`mswin,	`linux	]]
	['cairo',			`build,	[`mswin,	`linux	]]
	['canvas',			`build,	[`mswin,			]]
	['codecs_basic',	`skip,	[`mswin,	`linux	]]	// integrated
	['codecs_iso8859',	`skip,	[`mswin,	`linux	]]	// integrated
	['codecs_japanese',	`skip,	[`mswin,	`linux	]]	// integrated
	['conio',			`skip,	[`mswin,	`linux	]]	// integrated
	['csv',				`build,	[`mswin,	`linux	]]
	['curl',			`build,	[`mswin,	`linux	]]
	['emf',				`skip,	[`mswin,	`linux	]]	// not completed
	['freetype',		`build,	[`mswin,	`linux	]]
	['fs',				`skip,	[`mswin,	`linux	]]	// integrated
	['gif',				`build,	[`mswin,	`linux	]]
	['glu',				`build,	[`mswin,	`linux	]]
	['guri',			`build,	[`mswin,	`linux	]]
	['gzip',			`build,	[`mswin,	`linux	]]
	['hash',			`build,	[`mswin,	`linux	]]
	['http',			`build,	[`mswin,	`linux	]]
	['jpeg',			`build,	[`mswin,	`linux	]]
	['llvm',			`skip,	[`mswin,	`linux	]]	// not completed
	['markdown',		`build,	[`mswin,	`linux	]]
	['math',			`skip,	[`mswin,	`linux	]]	// integrated
	['midi',			`build,	[`mswin,	`linux	]]
	['msico',			`build,	[`mswin,	`linux	]]
	['mswin',			`build,	[`mswin,			]]
	['mysql',			`skip,	[`mswin,	`linux	]]	// not completed
	['opengl',			`build,	[`mswin,	`linux	]]
	['os',				`skip,	[`mswin,	`linux	]]	// integrated
	['path',			`skip,	[`mswin,	`linux	]]	// integrated
	['png',				`build,	[`mswin,	`linux	]]
	['postgresql',		`skip,	[`mswin,	`linux	]]	// not completed
	['ppm',				`build,	[`mswin,	`linux	]]
	['re',				`build,	[`mswin,	`linux	]]
	['sample',			`build,	[`mswin,	`linux	]]
	['sdl',				`build,	[`mswin,	`linux	]]
	['sqlite3',			`build,	[`mswin,	`linux	]]
	['tar',				`build,	[`mswin,	`linux	]]
	['tcl',				`build,	[`mswin,	`linux	]]
	['tester',			`skip,	[`mswin,	`linux	]]	// just for test
	['tiff',			`build,	[`mswin,	`linux	]]
	['time',			`skip,	[`mswin,	`linux	]]	// integrated
	['uuid',			`build,	[`mswin,			]]
	['wav',				`build,	[`mswin,	`linux	]]
	['wx',				`build,	[`mswin,	`linux	]]
	['xml',				`build,	[`mswin,	`linux	]]
	['xpm',				`build,	[`mswin,	`linux	]]
	['yaml',			`build,	[`mswin,	`linux	]]
	['zip',				`build,	[`mswin,	`linux	]]
}

argopt.Parser {|p|
	p.addFlag('verbose',	'v', 'verbose mode')
	p.addFlag('debug',		'd', 'build module with debug information')
	p.addFlag('rebuild',	'r', 'clean output files before building')
	p.addParam('exclude',	'x', 'specify module to exclude', 'NAME', '')
	p.addParam('incdir',	'I', 'specify include directory', 'DIR')
	try {
		[cfg, argv] = p.parse(sys.argv)
	} catch {|e|
		sys.stderr.println(e.text)
		sys.exit(1)
	}
	command = if (argv.len() == 0) {
		`build
	} elsif (argv[0] == 'help') {
		sys.stderr.printf('usage: %s [options] command\n', path.filename(sys.argv[0]))
		sys.stderr.println('command:')
		sys.stderr.println(' clean          clean output files')
		sys.stderr.println(' install        install built files to root directory')
		sys.stderr.println(' build-install  build and install files to root directory')
		sys.stderr.println('options:')
		sys.stderr.println(' ', p.formatHelp())
		sys.exit(1)
	} elsif (argv[0] == 'clean') {
		`clean
	} elsif (argv[0] == 'install') {
		`install
	} elsif (argv[0] == 'build-install') {
		`build_install
	} else {
		sys.stderr.println('unknown command: ', argv[0])
		sys.exit(1)
	}
}
moduleNamesExcept = cfg['exclude'].split(',')
moduleNames = moduleInfos.filter(moduleInfos:*action == `build && \
		moduleInfos:*platforms:*contains(sys.platform))::moduleName
dirNamePre = path.dirname(sys.argv[0])
moduleNamesError = []
debFiles = []
rpmFiles = []
for (moduleName in moduleNames) {
	if (moduleName in moduleNamesExcept) {
		printf('[%s]', moduleName)
		conio.setcolor(`bright_red) {
			printf(' .. skipped\n')
		}
		continue
	}
	printf('[%s]\n', moduleName)
	if (!dirNamePre.isempty()) {
		pathName = path.join(dirNamePre, 'module-' + moduleName)
	}
	argvOrg = sys.argv
	sys.argv = ['build.gura']
	if (command == `build) {
		// nothing to do
	} elsif (command == `clean) {
		sys.argv.append('clean')
	} elsif (command == `install) {
		sys.argv.append('install-root')
	} elsif (command == `build_install) {
		sys.argv.append('build-install-root')
	} else {
		// nothing to do
	}
	cfg['verbose'] && sys.argv.append('--verbose')
	cfg['debug'] && sys.argv.append('--debug')
	cfg['rebuild'] && sys.argv.append('--rebuild')
	cfg['incdir'] && sys.argv.append('--incdir=' + cfg['incdir'])
	sys.argv.append('--basedir=' + path.join(fs.getcwd(), 'module-' + moduleName))
	fs.chdir(pathName) {
		scope {
			builder = open('build.gura').parse().eval()
			builder.errorFlag && moduleNamesError.append(moduleName)
			builder.debFiles && debFiles.append(builder.debFiles)
			builder.rpmFiles && rpmFiles.append(builder.rpmFiles)
		}
		sys.argv = argvOrg
	}
}
if (sys.argv.len() < 2 || !(command in [`install, `build_install])) {
	if (!moduleNamesError.isempty()) {
		println()
		conio.setcolor(`bright_red) {
			println('**** error while building ', moduleNamesError)
		}
		if (!debFiles.isempty()) {
			fileName = 'setup-gura-guest-deb.sh'
			open(fileName, 'w').println('apt-get install -y ', set(debFiles))
			fs.chmod('a+x', fileName)
			println('Execute ', fileName, ' to install necessary guest packages of Debian.')
		}
		if (!rpmFiles.isempty()) {
			fileName = 'setup-gura-guest-rpm.sh'
			open(fileName, 'w').println('yum install -y ', set(rpmFiles))
			fs.chmod('a+x', fileName)
				println('Execute ', fileName, ' to install necessary guest packages of RPM.')
		}
		sys.exit(1)
	}
}

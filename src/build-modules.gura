#!/usr/bin/env gura
import(argopt)

argopt.Parser {|p|
	p.addFlag('verbose',	'v', 'verbose mode')
	p.addFlag('debug',		'd', 'build module with debug information')
	p.addFlag('rebuild',	'r', 'clean output files before building')
	p.addParam('exclude',	'x', 'specify module to exclude', 'NAME', '')
	try {
		[cfg, argv] = p.parse(sys.argv)
	} except {|e|
		sys.stderr.println(e.text)
		sys.exit(1)
	}
	command = if (argv.len() == 0) {
		`build
	} elsif (argv[0] == 'help') {
		sys.stderr.printf('usage: %s [options] command\n', path.filename(sys.argv[0]))
		sys.stderr.println('command:')
		sys.stderr.println(' clean    clean output files')
		sys.stderr.println(' install  install produced files to root directory')
		sys.stderr.println('options:')
		sys.stderr.println(' ', p.formatHelp())
		sys.exit(1)
	} elsif (argv[0] == 'clean') {
		`clean
	} elsif (argv[0] == 'install') {
		`install
	} else {
		sys.stderr.println('unknown command: ', argv[0])
		sys.exit(1)
	}
}
DirInfo = struct(dirName:string, platforms[]:symbol)
dirInfos = @(DirInfo) {
	['Module_sample',		[`mswin, `linux]]
	['Module_csv',			[`mswin, `linux]]
	['Module_re',			[`mswin, `linux]]
	['Module_sqlite3',		[`mswin, `linux]]
	['Module_xml',			[`mswin, `linux]]
	['Module_yaml',			[`mswin, `linux]]
//	['Module_mysql',		[`mswin, `linux]]
//	['Module_postgresql',	[`mswin, `linux]]
	['Module_sdl',			[`mswin, `linux]]
	['Module_cairo',		[`mswin, `linux]]
	['Module_opengl',		[`mswin, `linux]]
	['Module_glu',			[`mswin, `linux]]
	['Module_bmp',			[`mswin, `linux]]
	['Module_ppm',			[`mswin, `linux]]
	['Module_xpm',			[`mswin, `linux]]
	['Module_msico',		[`mswin, `linux]]
	['Module_jpeg',			[`mswin, `linux]]
	['Module_png',			[`mswin, `linux]]
	['Module_gif',			[`mswin, `linux]]
	['Module_tiff',			[`mswin, `linux]]
	['Module_freetype',		[`mswin, `linux]]
	['Module_tcl',			[`mswin, `linux]]
	['Module_hash',			[`mswin, `linux]]
	['Module_gzip',			[`mswin, `linux]]
	['Module_bzip2',		[`mswin, `linux]]
	['Module_zip',			[`mswin, `linux]]
	['Module_tar',			[`mswin, `linux]]
	['Module_http',			[`mswin, `linux]]
	['Module_wx',			[`mswin, `linux]]
	['Module_guri',			[`mswin, `linux]]
	['Module_uuid',			[`mswin]]
	['Module_canvas',		[`mswin]]
	['Module_mswin',		[`mswin]]
}
dirNamesExcept = 'Module_' + cfg['exclude'].split(',')
dirNames = dirInfos.filter(dirInfos:*platforms:*iscontain(sys.platform))::dirName
dirNamePre = path.dirname(sys.argv[0])
dirNamesError = []
debFiles = []
rpmFiles = []
for (dirName in dirNames) {
	if (dirName in dirNamesExcept) {
		printf('[%s] .. skipped\n', dirName)
		continue
	}
	printf('[%s]\n', dirName)
	if (!dirNamePre.isempty()) {
		pathName = path.join(dirNamePre, dirName)
	}
	argvOrg = sys.argv
	sys.argv = ['build.gura']
	if (command == `build) {
		// nothing to do
	} elsif (command == `clean) {
		sys.argv.append('clean')
	} elsif (command == `install) {
		sys.argv.append('install-root')
	} else {
		// nothing to do
	}
	cfg['verbose'] && sys.argv.append('--verbose')
	cfg['debug'] && sys.argv.append('--debug')
	cfg['rebuild'] && sys.argv.append('--rebuild')
	sys.argv.append('--basedir=' + path.join(fs.getcwd(), dirName))
	fs.chdir(pathName) {
		scope {
			builder = open('build.gura').parse().eval()
			builder.errorFlag && dirNamesError.append(dirName)
			builder.debFiles && debFiles.append(builder.debFiles)
			builder.rpmFiles && rpmFiles.append(builder.rpmFiles)
		}
		sys.argv = argvOrg
	}
}
if (sys.argv.len() < 2 || command != `install) {
	if (!dirNamesError.isempty()) {
		println('**** error in ', dirNamesError)
	}
	if (!debFiles.isempty()) {
		fileName = 'install-deb.sh'
		open(fileName, 'w').println('apt-get install -y ', set(debFiles))
		fs.chmod('a+x', fileName)
		println(fileName, ' was created. Execute this to install Debian packages.')
	}
	if (!rpmFiles.isempty()) {
		fileName = 'install-rpm.sh'
		open(fileName, 'w').println('yum install -y ', set(rpmFiles))
		fs.chmod('a+x', fileName)
		println(fileName, ' was created. Execute this to install RPM packages.')
	}
	!dirNamesError.isempty() && sys.exit(1);
}

#!/usr/bin/env gura
import(argopt)

ModuleInfo = struct(moduleName:string, action:symbol, platforms[]:symbol)
moduleInfos = @(ModuleInfo) {
	['base64',			`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['basement',		`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['bmp',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['bzip2',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['cairo',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['canvas',			`build,	[`mswin,															]]
	['codecs',			`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['codecs_basic',	`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['codecs_iso8859',	`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['codecs_japanese',	`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['conio',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['csv',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['curl',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['diff',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['emf',				`skip,	[`mswin,				`ubuntu,	`fedora,	`centos,	`redhat	]]	// not completed
	['example',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['freetype',		`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['fs',				`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['gif',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['glu',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['glut',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['gmp',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['guri',			`build,	[`mswin,				`ubuntu,	`fedora,	`centos,	`redhat	]]
	['gzip',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['hash',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['http',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['jpeg',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['llvm',			`skip,	[`mswin,				`ubuntu,	`fedora,	`centos,	`redhat	]]	// not completed
	['markdown',		`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['math',			`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['midi',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['model_obj',		`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['model_stl',		`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['msico',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['mswin',			`build,	[`mswin,															]]
	['mysql',			`skip,	[`mswin,				`ubuntu,	`fedora,	`centos,	`redhat	]]	// not completed
	['opengl',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['os',				`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['path',			`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['png',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['postgresql',		`skip,	[`mswin,				`ubuntu,	`fedora,	`centos,	`redhat	]]	// not completed
	['ppm',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['re',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['sdl',				`build,	[`mswin,				`ubuntu,	`fedora,	`centos,	`redhat	]]
	['sdl2',			`build,	[`mswin,	`darwin,	`ubuntu										]]
	['sqlite3',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['sys',				`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// integrated
	['tar',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['tcl',				`build,	[`mswin,				`ubuntu,	`fedora,	`centos,	`redhat	]]
	['tester',			`skip,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]	// just for test
	['tiff',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['uuid',			`build,	[`mswin,	`darwin,												]]
	['wav',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['wx',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['xml',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['xpm',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['yaml',			`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
	['zip',				`build,	[`mswin,	`darwin,	`ubuntu,	`fedora,	`centos,	`redhat	]]
}

if (sys.platform == `linux) {
	platform = nil
	!platform && path.exists(fileName = '/etc/lsb-release') && \
										readlines(fileName):chop {|line|
		fields = line.split('='):list
		if (fields.len() == 2 && fields[0].strip() == 'DISTRIB_ID') {
			value = fields[1].strip()
			if (value == 'Ubuntu') {
				platform = `ubuntu
			}
			break
		}
	}
	!platform && path.exists(fileName = '/etc/system-release') && \
										readlines(fileName):chop {|line|
		if (line.startswith('Fedora')) {
			platform = `fedora
			break
		}
	}
	!platform && path.exists(fileName = '/etc/redhat-release') && \
										readlines(fileName):chop {|line|
		if (line.startswith('CentOS')) {
			platform = `centos
			break
		} elsif (line.startswith('Red Hat')) {
			platform = `redhat
			break
		}
	}
} else {
	platform = sys.platform
}
if (!(platform && platform in [`mswin, `ubuntu, `fedora, `darwin])) {
	println('unsupported platform')
	sys.exit(1)
}
argopt.Parser {|p|
	p.addFlag('verbose',	'v', 'verbose mode')
	p.addFlag('debug',		'd', 'build module with debug information')
	p.addFlag('rebuild',	'r', 'clean output files before building')
	p.addParam('exclude',	'x', 'specify module to exclude', 'NAME', '')
	p.addParam('incdir',	'I', 'specify include directory', 'DIR')
	p.addParam('libdir',	'L', 'specify library directory', 'DIR')
	p.addParam('moddir',	'M', 'specify directory to which module is installed', 'DIR')
	try {
		[cfg, argv] = p.parse(sys.argv)
	} catch {|e|
		sys.stderr.println(e.text)
		sys.exit(1)
	}
	command = if (argv.len() == 0) {
		cond(cfg['moddir'], `build_install, `build)
	} elsif (argv[0] == 'help') {
		R'''
		usage: ${path.filename(sys.argv[0])} [options] command
		command:
		 clean          clean output files
		 install        install built files to the module directory

		options:
		 ${p.formatHelp() + '\n'}
		'''.template().render(sys.stderr)
		sys.exit(1)
	} elsif (argv[0] == 'build-install') {
		`build_install
	} elsif (argv[0] == 'clean') {
		`clean
	} elsif (argv[0] == 'install') {
		`install
	} elsif (argv[0] == 'setup-guest') {
		`setup_guest
	} else {
		sys.stderr.println('unknown command: ', argv[0])
		sys.exit(1)
	}
}
moduleNamesExcept = cfg['exclude'].split(',')
dirNamePre = path.dirname(sys.argv[0])
moduleNamesError = []
debFilesDevel = []
rpmFilesDevel = []
moduleInfos.each {|moduleInfo|
	moduleName = moduleInfo.moduleName
	actualFlag = (moduleInfo.action == `build && moduleInfo.platforms.contains(platform))
	if (moduleName in moduleNamesExcept) {
		printf('[%s]', moduleName)
		printf(' .. skipped\n')
		continue
	}
	printf('[%s]\n', moduleName)
	if (!dirNamePre.isempty()) {
		pathName = path.join(dirNamePre, 'module-' + moduleName)
	}
	argvOrg = sys.argv
	sys.argv = ['build.gura']
	if (actualFlag) {
		if (command == `build) {
			// nothing to do
		} elsif (command == `clean) {
			sys.argv.append('clean')
		} elsif (command == `install) {
			sys.argv.append('install')
		} elsif (command == `build_install) {
			sys.argv.append('build-install')
		} elsif (command == `setup_guest) {
			sys.argv.append('guest')
		} else {
			// nothing to do
		}
	} else {
		if (command == `build) {
			continue
		} elsif (command == `clean) {
			continue
		} elsif (command == `install) {
			sys.argv.append('install')
		} elsif (command == `build_install) {
			sys.argv.append('install')
		} elsif (command == `setup_guest) {
			continue
		} else {
			continue
		}
	}
	cfg['verbose'] && sys.argv.append('--verbose')
	cfg['debug'] && sys.argv.append('--debug')
	cfg['rebuild'] && sys.argv.append('--rebuild')
	cfg['incdir'] && sys.argv.append('--incdir=' + cfg['incdir'])
	cfg['libdir'] && sys.argv.append('--libdir=' + cfg['libdir'])
	cfg['moddir'] && sys.argv.append('--moddir=' + cfg['moddir'])
	sys.argv.append('--basedir=' + path.join(fs.getcwd(), 'module-' + moduleName))
	fs.chdir(pathName) {
		scope {
			builder = expr('build.gura').eval()
			builder.errorFlag && moduleNamesError.append(moduleName)
			builder.debFilesDevel && debFilesDevel.append(builder.debFilesDevel)
			builder.rpmFilesDevel && rpmFilesDevel.append(builder.rpmFilesDevel)
		}
		sys.argv = argvOrg
	}
}
if (!moduleNamesError.isempty()) {
	println()
	println('**** error while building ', moduleNamesError)
	sys.exit(1)
}
if (command == `setup_guest) {
	if (platform in [`ubuntu, `debian]) {
		os.exec('apt-get', 'install', '-y', set(debFilesDevel))
	} elsif (platform in [`fedora, `centos, `redhat]) {
		os.exec('yum', 'install', '-y', set(rpmFilesDevel))
	}
}

#!/usr/bin/env gura
import(cbridge)

cbridge.AddTypeConvs {
	'unsigned_char@:const' => TypeConv(
			'string', 'Once', [],
			'const unsigned char *${arg.name} = reinterpret_cast<const unsigned char *>(arg.GetString(${idx}));',
			nil,
			R'''
			const char *_rtn = reinterpret_cast<const char *>(${fi.MakeCaller()});
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'string[]' => TypeConv(
			'string', 'Once', ['ListVar'],
			'const ValueList &${arg.name} = arg.GetList(${idx});',
			nil,
			nil)
	'GLenum' => TypeConv(
			'number', 'Once', [],
			'GLenum ${arg.name} = static_cast<GLenum>(arg.GetInt(${idx}));',
			nil,
			R'''
			GLenum _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLboolean' => TypeConv(
			'boolean', 'Once', [],
			'GLboolean ${arg.name} = (arg.GetBoolean(${idx})? GL_TRUE : GL_FALSE);',
			nil,
			R'''
			GLboolean _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn != GL_FALSE));
			''')
	'GLbitfield' => TypeConv(
			'number', 'Once', [],
			'GLbitfield ${arg.name} = arg.GetUInt(${idx});',
			nil,
			R'''
			GLbitfield _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLbyte' => TypeConv(
			'number', 'Once', [],
			'GLbyte ${arg.name} = arg.GetChar(${idx});',
			nil,
			R'''
			GLbyte _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLshort' => TypeConv(
			'number', 'Once', [],
			'GLshort ${arg.name} = arg.GetShort(${idx});',
			nil,
			R'''
			GLshort _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLint' => TypeConv(
			'number', 'Once', [],
			'GLint ${arg.name} = arg.GetInt(${idx});',
			nil,
			R'''
			GLint _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLsizei' => TypeConv(
			'number', 'Once', [],
			'GLsizei ${arg.name} = arg.GetInt(${idx});',
			nil,
			R'''
			GLsizei _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLsizeiptr' => TypeConv(
			'number', 'Once', [],
			'GLsizei ${arg.name} = arg.GetLong(${idx});',
			nil,
			R'''
			GLsizeiptr _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLubyte' => TypeConv(
			'number', 'Once', [],
			'GLubyte ${arg.name} = arg.GetUChar(${idx});',
			nil,
			R'''
			GLubyte _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLushort' => TypeConv(
			'number', 'Once', [],
			'GLushort ${arg.name} = arg.GetUShort(${idx});',
			nil,
			R'''
			GLushort _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLuint' => TypeConv(
			'number', 'Once', [],
			'GLuint ${arg.name} = arg.GetUInt(${idx});',
			nil,
			R'''
			GLuint _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLfloat' => TypeConv(
			'number', 'Once', [],
			'GLfloat ${arg.name} = arg.GetFloat(${idx});',
			nil,
			R'''
			GLfloat _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLclampf' => TypeConv(
			'number', 'Once', [],
			'GLclampf ${arg.name} = arg.GetFloat(${idx});',
			nil,
			R'''
			GLclampf _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLdouble' => TypeConv(
			'number', 'Once', [],
			'GLdouble ${arg.name} = arg.GetDouble(${idx});',
			nil,
			R'''
			GLdouble _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLclampd' => TypeConv(
			'number', 'Once', [],
			'GLclampd ${arg.name} = arg.GetDouble(${idx});',
			nil,
			R'''
			GLclampd _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(_rtn));
			''')
	'GLenum@' => TypeConv(
			'number', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLenum> > _${arg.name}(ArrayT<GLenum>::CreateFromList(arg.GetList(${idx})));
			GLenum *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLenum@:const' => TypeConv(
			'number', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLenum> > _${arg.name}(ArrayT<GLenum>::CreateFromList(arg.GetList(${idx})));
			GLenum *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLboolean@' => TypeConv(
			'boolean', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLboolean> > _${arg.name}(ArrayT<GLboolean>::CreateFromList(arg.GetList(${idx})));
			GLboolean *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLboolean@:const' => TypeConv(
			'boolean', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLboolean> > _${arg.name}(ArrayT<GLboolean>::CreateFromList(arg.GetList(${idx})));
			GLboolean *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLboolean@1:const' => TypeConv(
			'boolean', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLboolean> > _${arg.name}(ArrayT<GLboolean>::CreateFromList(arg.GetList(${idx})));
			GLboolean *${arg.name} = _${arg.name}->GetPointer();
			if (!_${arg.name}->GetDims().HasShape(1)) {
				env.SetError(ERR_ValueError, "the list must have one element");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLboolean@2:const' => TypeConv(
			'boolean', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLboolean> > _${arg.name}(ArrayT<GLboolean>::CreateFromList(arg.GetList(${idx})));
			GLboolean *${arg.name} = _${arg.name}->GetPointer();
			if (!_${arg.name}->GetDims().HasShape(2)) {
				env.SetError(ERR_ValueError, "the list must have two elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLboolean@3:const' => TypeConv(
			'boolean', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLboolean> > _${arg.name}(ArrayT<GLboolean>::CreateFromList(arg.GetList(${idx})));
			GLboolean *${arg.name} = _${arg.name}->GetPointer();
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLbyte@:const' => TypeConv(
			'array_at_int8', 'Once', ['NoMap'],
			R'''
			ArrayT<Int8> *_${arg.name} = Object_arrayT<Int8>::GetObject(arg, ${idx})->GetArrayT();
			GLbyte *${arg.name} = reinterpret_cast<GLbyte *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLbyte@3:const' => TypeConv(
			'array_at_int8', 'Once', ['NoMap'],
			R'''
			ArrayT<Int8> *_${arg.name} = Object_arrayT<Int8>::GetObject(arg, ${idx})->GetArrayT();
			GLbyte *${arg.name} = reinterpret_cast<GLbyte *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLbyte@4:const' => TypeConv(
			'array_at_int8', 'Once', ['NoMap'],
			R'''
			ArrayT<Int8> *_${arg.name} = Object_arrayT<Int8>::GetObject(arg, ${idx})->GetArrayT();
			GLbyte *${arg.name} = reinterpret_cast<GLbyte *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLbyte@pname:const' => TypeConv(
			'array_at_int8', 'Once', ['NoMap'],
			R'''
			ArrayT<Int8> *_${arg.name} = Object_arrayT<Int8>::GetObject(arg, ${idx})->GetArrayT();
			GLbyte *${arg.name} = reinterpret_cast<GLbyte *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLchar@' => TypeConv(
			'array_at_int8', 'Once', ['NoMap'],
			R'''
			ArrayT<Int8> *_${arg.name} = Object_arrayT<Int8>::GetObject(arg, ${idx})->GetArrayT();
			GLchar *${arg.name} = reinterpret_cast<GLchar *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLchar@:const' => TypeConv(
			'array_at_int8', 'Once', ['NoMap'],
			R'''
			ArrayT<Int8> *_${arg.name} = Object_arrayT<Int8>::GetObject(arg, ${idx})->GetArrayT();
			GLchar *${arg.name} = reinterpret_cast<GLchar *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLubyte@:const' => TypeConv(
			'array_at_uint8', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt8> *_${arg.name} = Object_arrayT<UInt8>::GetObject(arg, ${idx})->GetArrayT();
			GLubyte *${arg.name} = reinterpret_cast<GLubyte *>(_${arg.name}->GetPointer());
			''',
			R'''
			ArrayT<UInt8> *_${arg.name} = arg.IsValid(${idx})? Object_arrayT<UInt8>::GetObject(arg, ${idx})->GetArrayT() : nullptr;
			GLubyte *${arg.name} = (_${arg.name} == nullptr)? nullptr : reinterpret_cast<GLubyte *>(_${arg.name}->GetPointer());
			''',
			R'''
			const GLubyte *_rtn = ${fi.MakeCaller()};
			return ReturnValue(env, arg, Value(reinterpret_cast<const char *>(_rtn)));
			''')
	'GLubyte@' => TypeConv(
			'array_at_uint8', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt8> *_${arg.name} = Object_arrayT<UInt8>::GetObject(arg, ${idx})->GetArrayT();
			GLubyte *${arg.name} = reinterpret_cast<GLubyte *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLubyte@3:const' => TypeConv(
			'array_at_uint8', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt8> *_${arg.name} = Object_arrayT<UInt8>::GetObject(arg, ${idx})->GetArrayT();
			GLubyte *${arg.name} = reinterpret_cast<GLubyte *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLubyte@4:const' => TypeConv(
			'array_at_uint8', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt8> *_${arg.name} = Object_arrayT<UInt8>::GetObject(arg, ${idx})->GetArrayT();
			GLubyte *${arg.name} = reinterpret_cast<GLubyte *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLubyte@pname:const' => TypeConv(
			'array_at_uint8', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt8> *_${arg.name} = Object_arrayT<UInt8>::GetObject(arg, ${idx})->GetArrayT();
			GLubyte *${arg.name} = reinterpret_cast<GLubyte *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLshort@:const' => TypeConv(
			'array_at_int16', 'Once', ['NoMap'],
			R'''
			ArrayT<Int16> *_${arg.name} = Object_arrayT<Int16>::GetObject(arg, ${idx})->GetArrayT();
			GLshort *${arg.name} = reinterpret_cast<GLshort *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLshort@1:const' => TypeConv(
			'array_at_int16', 'Once', ['NoMap'],
			R'''
			ArrayT<Int16> *_${arg.name} = Object_arrayT<Int16>::GetObject(arg, ${idx})->GetArrayT();
			GLshort *${arg.name} = reinterpret_cast<GLshort *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(1)) {
				env.SetError(ERR_ValueError, "the list must have one element");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLshort@2:const' => TypeConv(
			'array_at_int16', 'Once', ['NoMap'],
			R'''
			ArrayT<Int16> *_${arg.name} = Object_arrayT<Int16>::GetObject(arg, ${idx})->GetArrayT();
			GLshort *${arg.name} = reinterpret_cast<GLshort *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(2)) {
				env.SetError(ERR_ValueError, "the list must have two elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLshort@3:const' => TypeConv(
			'array_at_int16', 'Once', ['NoMap'],
			R'''
			ArrayT<Int16> *_${arg.name} = Object_arrayT<Int16>::GetObject(arg, ${idx})->GetArrayT();
			GLshort *${arg.name} = reinterpret_cast<GLshort *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLshort@4:const' => TypeConv(
			'array_at_int16', 'Once', ['NoMap'],
			R'''
			ArrayT<Int16> *_${arg.name} = Object_arrayT<Int16>::GetObject(arg, ${idx})->GetArrayT();
			GLshort *${arg.name} = reinterpret_cast<GLshort *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLshort@pname:const' => TypeConv(
			'array_at_int16', 'Once', ['NoMap'],
			R'''
			ArrayT<Int16> *_${arg.name} = Object_arrayT<Int16>::GetObject(arg, ${idx})->GetArrayT();
			GLshort *${arg.name} = reinterpret_cast<GLshort *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLushort@' => TypeConv(
			'array_at_uint16', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt16> *_${arg.name} = Object_arrayT<UInt16>::GetObject(arg, ${idx})->GetArrayT();
			GLushort *${arg.name} = reinterpret_cast<GLushort *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLushort@:const' => TypeConv(
			'array_at_uint16', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt16> *_${arg.name} = Object_arrayT<UInt16>::GetObject(arg, ${idx})->GetArrayT();
			GLushort *${arg.name} = reinterpret_cast<GLushort *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLushort@3:const' => TypeConv(
			'array_at_uint16', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt16> *_${arg.name} = Object_arrayT<UInt16>::GetObject(arg, ${idx})->GetArrayT();
			GLushort *${arg.name} = reinterpret_cast<GLushort *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLushort@4:const' => TypeConv(
			'array_at_uint16', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt16> *_${arg.name} = Object_arrayT<UInt16>::GetObject(arg, ${idx})->GetArrayT();
			GLushort *${arg.name} = reinterpret_cast<GLushort *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLushort@pname:const' => TypeConv(
			'array_at_uint16', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt16> *_${arg.name} = Object_arrayT<UInt16>::GetObject(arg, ${idx})->GetArrayT();
			GLushort *${arg.name} = reinterpret_cast<GLushort *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLint@' => TypeConv(
			'array_at_int32', 'Once', ['NoMap'],
			R'''
			ArrayT<int> *_${arg.name} = Object_arrayT<int>::GetObject(arg, ${idx})->GetArrayT();
			GLint *${arg.name} = reinterpret_cast<GLint *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLint@:const' => TypeConv(
			'array_at_int32', 'Once', ['NoMap'],
			R'''
			ArrayT<int> *_${arg.name} = Object_arrayT<int>::GetObject(arg, ${idx})->GetArrayT();
			GLint *${arg.name} = reinterpret_cast<GLint *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLint@1:const' => TypeConv(
			'array_at_int32', 'Once', ['NoMap'],
			R'''
			ArrayT<int> *_${arg.name} = Object_arrayT<int>::GetObject(arg, ${idx})->GetArrayT();
			GLint *${arg.name} = reinterpret_cast<GLint *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(1)) {
				env.SetError(ERR_ValueError, "the list must have one element");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLint@2:const' => TypeConv(
			'array_at_int32', 'Once', ['NoMap'],
			R'''
			ArrayT<int> *_${arg.name} = Object_arrayT<int>::GetObject(arg, ${idx})->GetArrayT();
			GLint *${arg.name} = reinterpret_cast<GLint *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(2)) {
				env.SetError(ERR_ValueError, "the list must have two elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLint@3:const' => TypeConv(
			'array_at_int32', 'Once', ['NoMap'],
			R'''
			ArrayT<int> *_${arg.name} = Object_arrayT<int>::GetObject(arg, ${idx})->GetArrayT();
			GLint *${arg.name} = reinterpret_cast<GLint *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLint@4:const' => TypeConv(
			'array_at_int32', 'Once', ['NoMap'],
			R'''
			ArrayT<int> *_${arg.name} = Object_arrayT<int>::GetObject(arg, ${idx})->GetArrayT();
			GLint *${arg.name} = reinterpret_cast<GLint *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLint@pname:const' => TypeConv(
			'array_at_int32', 'Once', ['NoMap'],
			R'''
			ArrayT<int> *_${arg.name} = Object_arrayT<int>::GetObject(arg, ${idx})->GetArrayT();
			GLint *${arg.name} = reinterpret_cast<GLint *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLsizei@' => TypeConv(
			'number', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLsizei> > _${arg.name}(ArrayT<GLsizei>::CreateFromList(arg.GetList(${idx})));
			GLsizei *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLsizei@:const' => TypeConv(
			'number', 'Once', ['ListVar'],
			R'''
			AutoPtr<ArrayT<GLsizei> > _${arg.name}(ArrayT<GLsizei>::CreateFromList(arg.GetList(${idx})));
			GLsizei *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLuint@' => TypeConv(
			'array_at_uint32', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt> *_${arg.name} = Object_arrayT<UInt>::GetObject(arg, ${idx})->GetArrayT();
			GLuint *${arg.name} = reinterpret_cast<GLuint *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLuint@:const' => TypeConv(
			'array_at_uint32', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt> *_${arg.name} = Object_arrayT<UInt>::GetObject(arg, ${idx})->GetArrayT();
			GLuint *${arg.name} = reinterpret_cast<GLuint *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLuint@3:const' => TypeConv(
			'array_at_uint32', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt> *_${arg.name} = Object_arrayT<UInt>::GetObject(arg, ${idx})->GetArrayT();
			GLuint *${arg.name} = reinterpret_cast<GLuint *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLuint@4:const' => TypeConv(
			'array_at_uint32', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt> *_${arg.name} = Object_arrayT<UInt>::GetObject(arg, ${idx})->GetArrayT();
			GLuint *${arg.name} = reinterpret_cast<GLuint *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLuint@pname:const' => TypeConv(
			'array_at_uint32', 'Once', ['NoMap'],
			R'''
			ArrayT<UInt> *_${arg.name} = Object_arrayT<UInt>::GetObject(arg, ${idx})->GetArrayT();
			GLuint *${arg.name} = reinterpret_cast<GLuint *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLfloat@' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLfloat *${arg.name} = reinterpret_cast<GLfloat *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLfloat@:const' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLfloat *${arg.name} = reinterpret_cast<GLfloat *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLfloat@1:const' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLfloat *${arg.name} = reinterpret_cast<GLfloat *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(1)) {
				env.SetError(ERR_ValueError, "the list must have one element");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLfloat@2:const' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLfloat *${arg.name} = reinterpret_cast<GLfloat *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(2)) {
				env.SetError(ERR_ValueError, "the list must have two elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLfloat@3:const' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLfloat *${arg.name} = reinterpret_cast<GLfloat *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLfloat@4:const' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLfloat *${arg.name} = reinterpret_cast<GLfloat *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have four elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLfloat@matrix:const' => TypeConv(
			'any', 'Once', [],
			R'''
			AutoPtr<ArrayT<GLfloat> > _${arg.name}(MakeMatrix<GLfloat>(env, arg.GetValue(${idx})));
			if (env.IsSignalled()) return Value::Nil;
			GLfloat *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLfloat@pname:const' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLfloat *${arg.name} = reinterpret_cast<GLfloat *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLclampf@:const' => TypeConv(
			'array_at_float', 'Once', ['NoMap'],
			R'''
			ArrayT<float> *_${arg.name} = Object_arrayT<float>::GetObject(arg, ${idx})->GetArrayT();
			GLclampf *${arg.name} = reinterpret_cast<GLclampf *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLdouble@' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLdouble@:const' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			''',
			nil,
			nil)
	'GLdouble@1:const' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(1)) {
				env.SetError(ERR_ValueError, "the list must have one element");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLdouble@2:const' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(2)) {
				env.SetError(ERR_ValueError, "the list must have two elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLdouble@3:const' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(3)) {
				env.SetError(ERR_ValueError, "the list must have three elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLdouble@4:const' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have four elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLdouble@4' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			if (!_${arg.name}->GetDims().HasShape(4)) {
				env.SetError(ERR_ValueError, "the list must have four elements");
				return Value::Nil;
			}''',
			nil,
			nil)
	'GLdouble@matrix:const' => TypeConv(
			'any', 'Once', [],
			R'''
			AutoPtr<ArrayT<GLdouble> > _${arg.name}(MakeMatrix<GLdouble>(env, arg.GetValue(${idx})));
			if (env.IsSignalled()) return Value::Nil;
			GLdouble *${arg.name} = _${arg.name}->GetPointer();
			''',
			nil,
			nil)
	'GLdouble@pname:const' => TypeConv(
			'array_at_double', 'Once', ['NoMap'],
			R'''
			ArrayT<double> *_${arg.name} = Object_arrayT<double>::GetObject(arg, ${idx})->GetArrayT();
			GLdouble *${arg.name} = reinterpret_cast<GLdouble *>(_${arg.name}->GetPointer());
			if (!CheckArray(env.GetSignal(), pname, _${arg.name})) {
				return Value::Nil;
			}''',
			nil,
			nil)
}

Implement = cbridge.Implement
AddTypeConv = cbridge.AddTypeConv
AddTypeConvs = cbridge.AddTypeConvs
Renderer = cbridge.Renderer

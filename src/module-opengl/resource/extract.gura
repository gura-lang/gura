#!/usr/bin/env gura
import(re)

cntParamsDict = %{
	'single'		=> 1
	'a single'		=> 1
	'the single'	=> 1
	'one'			=> 1
	'two'			=> 2
	'three'			=> 3
	'four'			=> 4
	'16'			=> 16
	'sixteen'		=> 16
	'a list'		=> 99
	'the residence'	=> 1
}
constNameDict = %{
	// extracted from a document of glGetColorTableParameter
	'GL_COLOR_TABLE_SCALE'	=> 4
	'GL_COLOR_TABLE_BIAS'	=> 4
	'GL_COLOR_TABLE_FORMAT'	=> 1
	'GL_COLOR_TABLE_WIDTH'	=> 1
	'GL_COLOR_TABLE_RED_SIZE'	=> 1
	'GL_COLOR_TABLE_GREEN_SIZE'	=> 1
	'GL_COLOR_TABLE_BLUE_SIZE'	=> 1
	'GL_COLOR_TABLE_ALPHA_SIZE'	=> 1
	'GL_COLOR_TABLE_LUMINANCE_SIZE'	=> 1
	'GL_COLOR_TABLE_INTENSITY_SIZE'	=> 1
	// extracted from a document of glGetConvolutionParameter
	'GL_CONVOLUTION_BORDER_MODE'	=> 1
	'GL_CONVOLUTION_BORDER_COLOR'	=> 4
	'GL_CONVOLUTION_FILTER_SCALE'	=> 4
	'GL_CONVOLUTION_FILTER_BIAS'	=> 4
	'GL_CONVOLUTION_FORMAT'			=> 1
	'GL_CONVOLUTION_WIDTH'			=> 1
	'GL_CONVOLUTION_HEIGHT'			=> 1
	'GL_MAX_CONVOLUTION_WIDTH'		=> 1
	'GL_MAX_CONVOLUTION_HEIGHT'		=> 1
}
parseFile(fileName:string):map:void = {
	sys.stderr.println(fileName, ' was parsed')
	stat = `seek_const_name
	readlines(fileName) {|line|
		if (stat == `seek_const_name) {
			if (m = line.match(r'^(GL_\w+)$')) {
				constName = m[1]
				stat = `description
			}
		} elsif (stat == `description) {
			if (m = line.match(r'^(params\s+)?[rR]eturns? (single|a single|the single|one|two|three|four|16|sixteen|a list|the residence)')) {
				cntParams = cntParamsDict[m[2]]
				constNameDict[constName] = cntParams
			} else {
				println('** error **')
				print(line)
				sys.exit(1)
			}
			stat = `seek_const_name
		}
	}
}
parseFile(path.glob('params-*.txt'))
readlines('gl.h') {|line|
	if (m = line.match(r'^#define\s+(GL_\w+)\s+0x[0-9a-fA-F]{4}\s*$')) {
		cntParams = constNameDict.get(m[1])
		print(line.chop())
		printf('\t\t// %s\n', cntParams || 'unknown size')
	} else {
		print(line)
	}
}

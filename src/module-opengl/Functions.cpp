// Don't edit this file. This has been generated by Functions.cpp.gura.
#include "stdafx.h"

#if defined(GURA_ON_MSWIN)
typedef char GLchar;
#endif

Gura_BeginModuleScope(opengl)

// opengl.glAccum
Gura_DeclareFunction(glAccum)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "op", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"operate on the accumulation buffer\n");
}

Gura_ImplementFunction(glAccum)
{
	GLenum op = static_cast<GLenum>(args.GetInt(0));
	GLfloat value = args.GetFloat(1);
	glAccum(op, value);
	return Value::Null;
}

// opengl.glAlphaFunc
Gura_DeclareFunction(glAlphaFunc)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "func", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ref", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"specify the alpha test function\n");
}

Gura_ImplementFunction(glAlphaFunc)
{
	GLenum func = static_cast<GLenum>(args.GetInt(0));
	GLclampf ref = args.GetFloat(1);
	glAlphaFunc(func, ref);
	return Value::Null;
}

// opengl.glAreTexturesResident
Gura_DeclareFunction(glAreTexturesResident)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "textures", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"determine if textures are loaded in texture memory\n");
}

Gura_ImplementFunction(glAreTexturesResident)
{
	CArray<GLuint> textures = args.GetList(0);
	GLsizei n = textures.GetSize();
	CArray<GLboolean> residences(n);
	GLboolean _rtn = glAreTexturesResident(n, textures, residences);
	if (_rtn == 0) return Value::Null;
	Value _rtnVal;
	ValueList &valList = _rtnVal.InitAsList(env, n);
	for (GLsizei i = 0; i < n; i++) {
		valList.push_back(residences[i] != 0);
	}
	return ReturnValue(env, sig, args, _rtnVal);
}

// opengl.glArrayElement
Gura_DeclareFunction(glArrayElement)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "i", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"render a vertex using the specified vertex array element\n");
}

Gura_ImplementFunction(glArrayElement)
{
	GLint i = args.GetInt(0);
	glArrayElement(i);
	return Value::Null;
}

// opengl.glBegin
Gura_DeclareFunction(glBegin)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"delimit the vertices of a primitive or a group of like primitives\n");
}

Gura_ImplementFunction(glBegin)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	glBegin(mode);
	if (args.IsBlockSpecified()) {
		SeqPostHandler *pSeqPostHandler = NULL;
		const Expr_Block *pExprBlock = args.GetBlock(env, sig);
		if (sig.IsSignalled()) return Value::Null;
		pExprBlock->Exec2(env, sig, pSeqPostHandler);
		glEnd();
	}
	return Value::Null;
}

// opengl.glBindTexture
Gura_DeclareFunction(glBindTexture)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "texture", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glBindTexture)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLuint texture = args.GetUInt(1);
	glBindTexture(target, texture);
	return Value::Null;
}

// opengl.glBitmap
Gura_DeclareFunction(glBitmap)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "xorig", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "yorig", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "xmove", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ymove", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bitmap", VTYPE_binary, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glBitmap)
{
	GLsizei width = args.GetInt(0);
	GLsizei height = args.GetInt(1);
	GLfloat xorig = args.GetFloat(2);
	GLfloat yorig = args.GetFloat(3);
	GLfloat xmove = args.GetFloat(4);
	GLfloat ymove = args.GetFloat(5);
	const Binary &bitmap = Object_binary::GetObject(args, 6)->GetBinary();
	size_t bytesReq = ((width + 7) / 8) * height;
	if (bitmap.size() < bytesReq) {
		sig.SetError(ERR_ValueError, "binary doesn\'t contain enough data");
		return Value::Null;
	}
	glBitmap(width, height, xorig, yorig, xmove, ymove,
			 reinterpret_cast<const GLubyte *>(bitmap.data()));
	return Value::Null;
}

// opengl.glBlendFunc
Gura_DeclareFunction(glBlendFunc)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "sfactor", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "dfactor", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glBlendFunc)
{
	GLenum sfactor = static_cast<GLenum>(args.GetInt(0));
	GLenum dfactor = static_cast<GLenum>(args.GetInt(1));
	glBlendFunc(sfactor, dfactor);
	return Value::Null;
}

// opengl.glCallList
Gura_DeclareFunction(glCallList)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "list", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCallList)
{
	GLuint list = args.GetUInt(0);
	glCallList(list);
	return Value::Null;
}

// opengl.glCallLists
Gura_DeclareFunction(glCallLists)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "lists", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCallLists)
{
	GLenum type = static_cast<GLenum>(args.GetInt(0));
	const ValueList & lists = args.GetList(1);
	const ValueList &lists_in = args.GetList(1);
	GLsizei n = static_cast<GLsizei>(lists.size());
	AutoPtr<Memory> pListsBuff;
	if (type == GL_BYTE) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLbyte) * n));
		GLbyte *p = reinterpret_cast<GLbyte *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) { *p++ = pValue->GetChar(); }
	} else if (type == GL_UNSIGNED_BYTE) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLubyte) * n));
		GLubyte *p = reinterpret_cast<GLubyte *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) { *p++ = pValue->GetUChar(); }
	} else if (type == GL_SHORT) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLshort) * n));
		GLshort *p = reinterpret_cast<GLshort *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) { *p++ = pValue->GetShort(); }
	} else if (type == GL_UNSIGNED_SHORT) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLushort) * n));
		GLushort *p = reinterpret_cast<GLushort *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) { *p++ = pValue->GetUShort(); }
	} else if (type == GL_INT) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLint) * n));
		GLint *p = reinterpret_cast<GLint *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) { *p++ = pValue->GetInt(); }
	} else if (type == GL_UNSIGNED_INT) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLuint) * n));
		GLuint *p = reinterpret_cast<GLuint *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) { *p++ = pValue->GetUInt(); }
	} else if (type == GL_FLOAT) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLfloat) * n));
		GLfloat *p = reinterpret_cast<GLfloat *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) { *p++ = pValue->GetFloat(); }
	} else if (type == GL_2_BYTES) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLubyte) * 2 * n));
		GLubyte *p = reinterpret_cast<GLubyte *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) {
			UShort num = pValue->GetUShort();
			*p++ = static_cast<GLubyte>(num >> 8);
			*p++ = static_cast<GLubyte>(num);
		}
	} else if (type == GL_3_BYTES) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLubyte) * 3 * n));
		GLubyte *p = reinterpret_cast<GLubyte *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) {
			ULong num = pValue->GetULong();
			*p++ = static_cast<GLubyte>(num >> 16);
			*p++ = static_cast<GLubyte>(num >> 8);
			*p++ = static_cast<GLubyte>(num);
		}
	} else if (type == GL_4_BYTES) {
		pListsBuff.reset(new MemoryHeap(sizeof(GLubyte) * 4 * n));
		GLubyte *p = reinterpret_cast<GLubyte *>(pListsBuff->GetPointer());
		foreach_const (ValueList, pValue, lists_in) {
			ULong num = pValue->GetULong();
			*p++ = static_cast<GLubyte>(num >> 24);
			*p++ = static_cast<GLubyte>(num >> 16);
			*p++ = static_cast<GLubyte>(num >> 8);
			*p++ = static_cast<GLubyte>(num);
		}
	} else {
		sig.SetError(ERR_ValueError, "invalid type specification");
		return Value::Null;
	}
	// GLsizei n, GLenum type, const GLvoid *lists
	glCallLists(n, type, pListsBuff->GetPointer());
	return Value::Null;
}

// opengl.glClear
Gura_DeclareFunction(glClear)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mask", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glClear)
{
	GLbitfield mask = args.GetUInt(0);
	glClear(mask);
	return Value::Null;
}

// opengl.glClearAccum
Gura_DeclareFunction(glClearAccum)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glClearAccum)
{
	GLfloat red = args.GetFloat(0);
	GLfloat green = args.GetFloat(1);
	GLfloat blue = args.GetFloat(2);
	GLfloat alpha = args.GetFloat(3);
	glClearAccum(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glClearColor
Gura_DeclareFunction(glClearColor)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glClearColor)
{
	GLclampf red = args.GetFloat(0);
	GLclampf green = args.GetFloat(1);
	GLclampf blue = args.GetFloat(2);
	GLclampf alpha = args.GetFloat(3);
	glClearColor(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glClearDepth
Gura_DeclareFunction(glClearDepth)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "depth", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glClearDepth)
{
	GLclampd depth = args.GetDouble(0);
	glClearDepth(depth);
	return Value::Null;
}

// opengl.glClearIndex
Gura_DeclareFunction(glClearIndex)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glClearIndex)
{
	GLfloat c = args.GetFloat(0);
	glClearIndex(c);
	return Value::Null;
}

// opengl.glClearStencil
Gura_DeclareFunction(glClearStencil)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glClearStencil)
{
	GLint s = args.GetInt(0);
	glClearStencil(s);
	return Value::Null;
}

// opengl.glClipPlane
Gura_DeclareFunction(glClipPlane)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "plane", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "equation", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glClipPlane)
{
	GLenum plane = static_cast<GLenum>(args.GetInt(0));
	CArray<GLdouble> equation = args.GetList(1);
	if (equation.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glGetClipPlane(plane, equation);
	return Value::CreateList(env, equation, equation.GetSize());
}

// opengl.glColor3b
Gura_DeclareFunction(glColor3b)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3b)
{
	GLbyte red = args.GetChar(0);
	GLbyte green = args.GetChar(1);
	GLbyte blue = args.GetChar(2);
	glColor3b(red, green, blue);
	return Value::Null;
}

// opengl.glColor3bv
Gura_DeclareFunction(glColor3bv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3bv)
{
	CArray<GLbyte> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3bv(v);
	return Value::Null;
}

// opengl.glColor3d
Gura_DeclareFunction(glColor3d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3d)
{
	GLdouble red = args.GetDouble(0);
	GLdouble green = args.GetDouble(1);
	GLdouble blue = args.GetDouble(2);
	glColor3d(red, green, blue);
	return Value::Null;
}

// opengl.glColor3dv
Gura_DeclareFunction(glColor3dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3dv(v);
	return Value::Null;
}

// opengl.glColor3f
Gura_DeclareFunction(glColor3f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3f)
{
	GLfloat red = args.GetFloat(0);
	GLfloat green = args.GetFloat(1);
	GLfloat blue = args.GetFloat(2);
	glColor3f(red, green, blue);
	return Value::Null;
}

// opengl.glColor3fv
Gura_DeclareFunction(glColor3fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3fv(v);
	return Value::Null;
}

// opengl.glColor3i
Gura_DeclareFunction(glColor3i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3i)
{
	GLint red = args.GetInt(0);
	GLint green = args.GetInt(1);
	GLint blue = args.GetInt(2);
	glColor3i(red, green, blue);
	return Value::Null;
}

// opengl.glColor3iv
Gura_DeclareFunction(glColor3iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3iv(v);
	return Value::Null;
}

// opengl.glColor3s
Gura_DeclareFunction(glColor3s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3s)
{
	GLshort red = args.GetShort(0);
	GLshort green = args.GetShort(1);
	GLshort blue = args.GetShort(2);
	glColor3s(red, green, blue);
	return Value::Null;
}

// opengl.glColor3sv
Gura_DeclareFunction(glColor3sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3sv(v);
	return Value::Null;
}

// opengl.glColor3ub
Gura_DeclareFunction(glColor3ub)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3ub)
{
	GLubyte red = args.GetUChar(0);
	GLubyte green = args.GetUChar(1);
	GLubyte blue = args.GetUChar(2);
	glColor3ub(red, green, blue);
	return Value::Null;
}

// opengl.glColor3ubv
Gura_DeclareFunction(glColor3ubv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3ubv)
{
	CArray<GLubyte> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3ubv(v);
	return Value::Null;
}

// opengl.glColor3ui
Gura_DeclareFunction(glColor3ui)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3ui)
{
	GLuint red = args.GetUInt(0);
	GLuint green = args.GetUInt(1);
	GLuint blue = args.GetUInt(2);
	glColor3ui(red, green, blue);
	return Value::Null;
}

// opengl.glColor3uiv
Gura_DeclareFunction(glColor3uiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3uiv)
{
	CArray<GLuint> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3uiv(v);
	return Value::Null;
}

// opengl.glColor3us
Gura_DeclareFunction(glColor3us)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3us)
{
	GLushort red = args.GetUShort(0);
	GLushort green = args.GetUShort(1);
	GLushort blue = args.GetUShort(2);
	glColor3us(red, green, blue);
	return Value::Null;
}

// opengl.glColor3usv
Gura_DeclareFunction(glColor3usv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor3usv)
{
	CArray<GLushort> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor3usv(v);
	return Value::Null;
}

// opengl.glColor4b
Gura_DeclareFunction(glColor4b)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4b)
{
	GLbyte red = args.GetChar(0);
	GLbyte green = args.GetChar(1);
	GLbyte blue = args.GetChar(2);
	GLbyte alpha = args.GetChar(3);
	glColor4b(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4bv
Gura_DeclareFunction(glColor4bv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4bv)
{
	CArray<GLbyte> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor4bv(v);
	return Value::Null;
}

// opengl.glColor4d
Gura_DeclareFunction(glColor4d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4d)
{
	GLdouble red = args.GetDouble(0);
	GLdouble green = args.GetDouble(1);
	GLdouble blue = args.GetDouble(2);
	GLdouble alpha = args.GetDouble(3);
	glColor4d(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4dv
Gura_DeclareFunction(glColor4dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glColor4dv(v);
	return Value::Null;
}

// opengl.glColor4f
Gura_DeclareFunction(glColor4f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4f)
{
	GLfloat red = args.GetFloat(0);
	GLfloat green = args.GetFloat(1);
	GLfloat blue = args.GetFloat(2);
	GLfloat alpha = args.GetFloat(3);
	glColor4f(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4fv
Gura_DeclareFunction(glColor4fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glColor4fv(v);
	return Value::Null;
}

// opengl.glColor4i
Gura_DeclareFunction(glColor4i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4i)
{
	GLint red = args.GetInt(0);
	GLint green = args.GetInt(1);
	GLint blue = args.GetInt(2);
	GLint alpha = args.GetInt(3);
	glColor4i(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4iv
Gura_DeclareFunction(glColor4iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor4iv(v);
	return Value::Null;
}

// opengl.glColor4s
Gura_DeclareFunction(glColor4s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4s)
{
	GLshort red = args.GetShort(0);
	GLshort green = args.GetShort(1);
	GLshort blue = args.GetShort(2);
	GLshort alpha = args.GetShort(3);
	glColor4s(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4sv
Gura_DeclareFunction(glColor4sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor4sv(v);
	return Value::Null;
}

// opengl.glColor4ub
Gura_DeclareFunction(glColor4ub)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4ub)
{
	GLubyte red = args.GetUChar(0);
	GLubyte green = args.GetUChar(1);
	GLubyte blue = args.GetUChar(2);
	GLubyte alpha = args.GetUChar(3);
	glColor4ub(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4ubv
Gura_DeclareFunction(glColor4ubv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4ubv)
{
	CArray<GLubyte> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor4ubv(v);
	return Value::Null;
}

// opengl.glColor4ui
Gura_DeclareFunction(glColor4ui)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4ui)
{
	GLuint red = args.GetUInt(0);
	GLuint green = args.GetUInt(1);
	GLuint blue = args.GetUInt(2);
	GLuint alpha = args.GetUInt(3);
	glColor4ui(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4uiv
Gura_DeclareFunction(glColor4uiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4uiv)
{
	CArray<GLuint> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor4uiv(v);
	return Value::Null;
}

// opengl.glColor4us
Gura_DeclareFunction(glColor4us)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4us)
{
	GLushort red = args.GetUShort(0);
	GLushort green = args.GetUShort(1);
	GLushort blue = args.GetUShort(2);
	GLushort alpha = args.GetUShort(3);
	glColor4us(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColor4usv
Gura_DeclareFunction(glColor4usv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColor4usv)
{
	CArray<GLushort> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glColor4usv(v);
	return Value::Null;
}

// opengl.glColorMask
Gura_DeclareFunction(glColorMask)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "red", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "green", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "blue", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "alpha", VTYPE_boolean, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColorMask)
{
	GLboolean red = (args.GetBoolean(0)? GL_TRUE : GL_FALSE);
	GLboolean green = (args.GetBoolean(1)? GL_TRUE : GL_FALSE);
	GLboolean blue = (args.GetBoolean(2)? GL_TRUE : GL_FALSE);
	GLboolean alpha = (args.GetBoolean(3)? GL_TRUE : GL_FALSE);
	glColorMask(red, green, blue, alpha);
	return Value::Null;
}

// opengl.glColorMaterial
Gura_DeclareFunction(glColorMaterial)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glColorMaterial)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum mode = static_cast<GLenum>(args.GetInt(1));
	glColorMaterial(face, mode);
	return Value::Null;
}

// opengl.glCopyPixels
Gura_DeclareFunction(glCopyPixels)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCopyPixels)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLsizei width = args.GetInt(2);
	GLsizei height = args.GetInt(3);
	GLenum type = static_cast<GLenum>(args.GetInt(4));
	glCopyPixels(x, y, width, height, type);
	return Value::Null;
}

// opengl.glCopyTexImage1D
Gura_DeclareFunction(glCopyTexImage1D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalformat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "border", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCopyTexImage1D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLenum internalformat = static_cast<GLenum>(args.GetInt(2));
	GLint x = args.GetInt(3);
	GLint y = args.GetInt(4);
	GLsizei width = args.GetInt(5);
	GLint border = args.GetInt(6);
	glCopyTexImage1D(target, level, internalformat, x, y, width, border);
	return Value::Null;
}

// opengl.glCopyTexImage2D
Gura_DeclareFunction(glCopyTexImage2D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalformat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "border", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCopyTexImage2D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLenum internalformat = static_cast<GLenum>(args.GetInt(2));
	GLint x = args.GetInt(3);
	GLint y = args.GetInt(4);
	GLsizei width = args.GetInt(5);
	GLsizei height = args.GetInt(6);
	GLint border = args.GetInt(7);
	glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
	return Value::Null;
}

// opengl.glCopyTexSubImage1D
Gura_DeclareFunction(glCopyTexSubImage1D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "xoffset", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCopyTexSubImage1D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLint xoffset = args.GetInt(2);
	GLint x = args.GetInt(3);
	GLint y = args.GetInt(4);
	GLsizei width = args.GetInt(5);
	glCopyTexSubImage1D(target, level, xoffset, x, y, width);
	return Value::Null;
}

// opengl.glCopyTexSubImage2D
Gura_DeclareFunction(glCopyTexSubImage2D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "xoffset", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "yoffset", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCopyTexSubImage2D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLint xoffset = args.GetInt(2);
	GLint yoffset = args.GetInt(3);
	GLint x = args.GetInt(4);
	GLint y = args.GetInt(5);
	GLsizei width = args.GetInt(6);
	GLsizei height = args.GetInt(7);
	glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
	return Value::Null;
}

// opengl.glCullFace
Gura_DeclareFunction(glCullFace)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glCullFace)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	glCullFace(mode);
	return Value::Null;
}

// opengl.glDeleteLists
Gura_DeclareFunction(glDeleteLists)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "list", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "range", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDeleteLists)
{
	GLuint list = args.GetUInt(0);
	GLsizei range = args.GetInt(1);
	glDeleteLists(list, range);
	return Value::Null;
}

// opengl.glDeleteTextures
Gura_DeclareFunction(glDeleteTextures)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "textures", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDeleteTextures)
{
	CArray<GLuint> textures = args.GetList(0);
	GLsizei n = textures.GetSize();
	glDeleteTextures(n, textures);
	return Value::Null;
}

// opengl.glDepthFunc
Gura_DeclareFunction(glDepthFunc)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "func", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDepthFunc)
{
	GLenum func = static_cast<GLenum>(args.GetInt(0));
	glDepthFunc(func);
	return Value::Null;
}

// opengl.glDepthMask
Gura_DeclareFunction(glDepthMask)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "flag", VTYPE_boolean, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDepthMask)
{
	GLboolean flag = (args.GetBoolean(0)? GL_TRUE : GL_FALSE);
	glDepthMask(flag);
	return Value::Null;
}

// opengl.glDepthRange
Gura_DeclareFunction(glDepthRange)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "zNear", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zFar", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDepthRange)
{
	GLclampd zNear = args.GetDouble(0);
	GLclampd zFar = args.GetDouble(1);
	glDepthRange(zNear, zFar);
	return Value::Null;
}

// opengl.glDisable
Gura_DeclareFunction(glDisable)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "cap", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDisable)
{
	GLenum cap = static_cast<GLenum>(args.GetInt(0));
	glDisable(cap);
	return Value::Null;
}

// opengl.glDisableClientState
Gura_DeclareFunction(glDisableClientState)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "array", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDisableClientState)
{
	GLenum array = static_cast<GLenum>(args.GetInt(0));
	glDisableClientState(array);
	return Value::Null;
}

// opengl.glDrawArrays
Gura_DeclareFunction(glDrawArrays)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "first", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDrawArrays)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	GLint first = args.GetInt(1);
	GLsizei count = args.GetInt(2);
	glDrawArrays(mode, first, count);
	return Value::Null;
}

// opengl.glDrawBuffer
Gura_DeclareFunction(glDrawBuffer)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDrawBuffer)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	glDrawBuffer(mode);
	return Value::Null;
}

// opengl.glDrawPixels
Gura_DeclareFunction(glDrawPixels)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "image", VTYPE_image, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glDrawPixels)
{
	Image *image = Object_image::GetObject(args, 0)->GetImage();
	
	GLsizei width = static_cast<GLsizei>(image->GetWidth());
	GLsizei height = static_cast<GLsizei>(image->GetHeight());
	GLenum format = GetImageFormat(sig, image);
	if (sig.IsSignalled()) return Value::Null;
	GLenum type = GL_UNSIGNED_BYTE;
	const GLvoid *pixels = image->GetBuffer();
	// GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels
	glDrawPixels(width, height, format, type, pixels);
	return Value::Null;
}

// opengl.glEdgeFlag
Gura_DeclareFunction(glEdgeFlag)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "flag", VTYPE_boolean, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEdgeFlag)
{
	GLboolean flag = (args.GetBoolean(0)? GL_TRUE : GL_FALSE);
	glEdgeFlag(flag);
	return Value::Null;
}

// opengl.glEdgeFlagv
Gura_DeclareFunction(glEdgeFlagv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "flag", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEdgeFlagv)
{
	CArray<GLboolean> flag = args.GetList(0);
	if (flag.GetSize() != 1) {
		sig.SetError(ERR_ValueError, "the list must have one element");
		return Value::Null;
	}
	glEdgeFlagv(flag);
	return Value::Null;
}

// opengl.glEnable
Gura_DeclareFunction(glEnable)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "cap", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEnable)
{
	GLenum cap = static_cast<GLenum>(args.GetInt(0));
	glEnable(cap);
	return Value::Null;
}

// opengl.glEnableClientState
Gura_DeclareFunction(glEnableClientState)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "array", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEnableClientState)
{
	GLenum array = static_cast<GLenum>(args.GetInt(0));
	glEnableClientState(array);
	return Value::Null;
}

// opengl.glEnd
Gura_DeclareFunction(glEnd)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEnd)
{
	glEnd();
	return Value::Null;
}

// opengl.glEndList
Gura_DeclareFunction(glEndList)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEndList)
{
	glEndList();
	return Value::Null;
}

// opengl.glEvalCoord1d
Gura_DeclareFunction(glEvalCoord1d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord1d)
{
	GLdouble u = args.GetDouble(0);
	glEvalCoord1d(u);
	return Value::Null;
}

// opengl.glEvalCoord1dv
Gura_DeclareFunction(glEvalCoord1dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord1dv)
{
	CArray<GLdouble> u = args.GetList(0);
	if (u.GetSize() != 1) {
		sig.SetError(ERR_ValueError, "the list must have one element");
		return Value::Null;
	}
	glEvalCoord1dv(u);
	return Value::Null;
}

// opengl.glEvalCoord1f
Gura_DeclareFunction(glEvalCoord1f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord1f)
{
	GLfloat u = args.GetFloat(0);
	glEvalCoord1f(u);
	return Value::Null;
}

// opengl.glEvalCoord1fv
Gura_DeclareFunction(glEvalCoord1fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord1fv)
{
	CArray<GLfloat> u = args.GetList(0);
	if (u.GetSize() != 1) {
		sig.SetError(ERR_ValueError, "the list must have one element");
		return Value::Null;
	}
	glEvalCoord1fv(u);
	return Value::Null;
}

// opengl.glEvalCoord2d
Gura_DeclareFunction(glEvalCoord2d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord2d)
{
	GLdouble u = args.GetDouble(0);
	GLdouble v = args.GetDouble(1);
	glEvalCoord2d(u, v);
	return Value::Null;
}

// opengl.glEvalCoord2dv
Gura_DeclareFunction(glEvalCoord2dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord2dv)
{
	CArray<GLdouble> u = args.GetList(0);
	if (u.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glEvalCoord2dv(u);
	return Value::Null;
}

// opengl.glEvalCoord2f
Gura_DeclareFunction(glEvalCoord2f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord2f)
{
	GLfloat u = args.GetFloat(0);
	GLfloat v = args.GetFloat(1);
	glEvalCoord2f(u, v);
	return Value::Null;
}

// opengl.glEvalCoord2fv
Gura_DeclareFunction(glEvalCoord2fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "u", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalCoord2fv)
{
	CArray<GLfloat> u = args.GetList(0);
	if (u.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glEvalCoord2fv(u);
	return Value::Null;
}

// opengl.glEvalMesh1
Gura_DeclareFunction(glEvalMesh1)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "i1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "i2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalMesh1)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	GLint i1 = args.GetInt(1);
	GLint i2 = args.GetInt(2);
	glEvalMesh1(mode, i1, i2);
	return Value::Null;
}

// opengl.glEvalMesh2
Gura_DeclareFunction(glEvalMesh2)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "i1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "i2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "j1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "j2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalMesh2)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	GLint i1 = args.GetInt(1);
	GLint i2 = args.GetInt(2);
	GLint j1 = args.GetInt(3);
	GLint j2 = args.GetInt(4);
	glEvalMesh2(mode, i1, i2, j1, j2);
	return Value::Null;
}

// opengl.glEvalPoint1
Gura_DeclareFunction(glEvalPoint1)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "i", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalPoint1)
{
	GLint i = args.GetInt(0);
	glEvalPoint1(i);
	return Value::Null;
}

// opengl.glEvalPoint2
Gura_DeclareFunction(glEvalPoint2)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "i", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "j", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glEvalPoint2)
{
	GLint i = args.GetInt(0);
	GLint j = args.GetInt(1);
	glEvalPoint2(i, j);
	return Value::Null;
}

// opengl.glFeedbackBuffer
Gura_DeclareFunction(glFeedbackBuffer)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "buffer", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFeedbackBuffer)
{
	GLsizei size = args.GetInt(0);
	GLenum type = static_cast<GLenum>(args.GetInt(1));
	CArray<GLfloat> buffer = args.GetList(2);
	glFeedbackBuffer(size, type, buffer);
	return Value::Null;
}

// opengl.glFinish
Gura_DeclareFunction(glFinish)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFinish)
{
	glFinish();
	return Value::Null;
}

// opengl.glFlush
Gura_DeclareFunction(glFlush)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFlush)
{
	glFlush();
	return Value::Null;
}

// opengl.glFogf
Gura_DeclareFunction(glFogf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFogf)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLfloat param = args.GetFloat(1);
	glFogf(pname, param);
	return Value::Null;
}

// opengl.glFogfv
Gura_DeclareFunction(glFogfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFogfv)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	CArray<GLfloat> params = args.GetList(1);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glFogfv(pname, params);
	return Value::Null;
}

// opengl.glFogi
Gura_DeclareFunction(glFogi)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFogi)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLint param = args.GetInt(1);
	glFogi(pname, param);
	return Value::Null;
}

// opengl.glFogiv
Gura_DeclareFunction(glFogiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFogiv)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	CArray<GLint> params = args.GetList(1);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glFogiv(pname, params);
	return Value::Null;
}

// opengl.glFrontFace
Gura_DeclareFunction(glFrontFace)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFrontFace)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	glFrontFace(mode);
	return Value::Null;
}

// opengl.glFrustum
Gura_DeclareFunction(glFrustum)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "left", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "right", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bottom", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "top", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zNear", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zFar", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glFrustum)
{
	GLdouble left = args.GetDouble(0);
	GLdouble right = args.GetDouble(1);
	GLdouble bottom = args.GetDouble(2);
	GLdouble top = args.GetDouble(3);
	GLdouble zNear = args.GetDouble(4);
	GLdouble zFar = args.GetDouble(5);
	glFrustum(left, right, bottom, top, zNear, zFar);
	return Value::Null;
}

// opengl.glGenLists
Gura_DeclareFunction(glGenLists)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "range", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGenLists)
{
	GLsizei range = args.GetInt(0);
	GLuint _rtn = glGenLists(range);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// opengl.glGenTextures
Gura_DeclareFunction(glGenTextures)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "n", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGenTextures)
{
	GLsizei n = args.GetInt(0);
	CArray<GLuint> textures(n);
	glGenTextures(n, textures);
	return Value::CreateList(env, textures, n);
}

// opengl.glGetBooleanv
Gura_DeclareFunction(glGetBooleanv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetBooleanv)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	size_t n = GetParamCount(pname);
	CArray<GLboolean> params(n);
	glGetBooleanv(pname, params);
	Value _rtnVal;
	ValueList &valList = _rtnVal.InitAsList(env, n);
	for (GLsizei i = 0; i < n; i++) {
		valList.push_back(params[i] != 0);
	}
	return ReturnValue(env, sig, args, _rtnVal);
}

// opengl.glGetClipPlane
Gura_DeclareFunction(glGetClipPlane)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareArg(env, "plane", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetClipPlane)
{
	GLenum plane = static_cast<GLenum>(args.GetInt(0));
	GLdouble equation[4];
	glGetClipPlane(plane, equation);
	return ReturnValue(env, sig, args, Value::CreateList(env, equation, ArraySizeOf(equation)));
}

// opengl.glGetDoublev
Gura_DeclareFunction(glGetDoublev)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetDoublev)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	size_t n = GetParamCount(pname);
	CArray<GLdouble> params(n);
	glGetDoublev(pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetError
Gura_DeclareFunction(glGetError)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetError)
{
	GLenum _rtn = glGetError();
	return ReturnValue(env, sig, args, Value(_rtn));
}

// opengl.glGetFloatv
Gura_DeclareFunction(glGetFloatv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetFloatv)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	size_t n = GetParamCount(pname);
	CArray<GLfloat> params(n);
	glGetFloatv(pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetIntegerv
Gura_DeclareFunction(glGetIntegerv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetIntegerv)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	size_t n = GetParamCount(pname);
	CArray<GLint> params(n);
	glGetIntegerv(pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetLightfv
Gura_DeclareFunction(glGetLightfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "light", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetLightfv)
{
	GLenum light = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLfloat> params(n);
	glGetLightfv(light, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetLightiv
Gura_DeclareFunction(glGetLightiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "light", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetLightiv)
{
	GLenum light = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLint> params(n);
	glGetLightiv(light, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetMapdv
Gura_DeclareFunction(glGetMapdv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "query", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetMapdv)
{
#if 0
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum query = static_cast<GLenum>(args.GetInt(1));
	CArray<GLdouble> v = args.GetList(2);
	glGetMapdv(target, query, v);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetMapdv");
	return Value::Null;
}

// opengl.glGetMapfv
Gura_DeclareFunction(glGetMapfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "query", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetMapfv)
{
#if 0
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum query = static_cast<GLenum>(args.GetInt(1));
	CArray<GLfloat> v = args.GetList(2);
	glGetMapfv(target, query, v);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetMapfv");
	return Value::Null;
}

// opengl.glGetMapiv
Gura_DeclareFunction(glGetMapiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "query", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetMapiv)
{
#if 0
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum query = static_cast<GLenum>(args.GetInt(1));
	CArray<GLint> v = args.GetList(2);
	glGetMapiv(target, query, v);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetMapiv");
	return Value::Null;
}

// opengl.glGetMaterialfv
Gura_DeclareFunction(glGetMaterialfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetMaterialfv)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLfloat> params(n);
	glGetMaterialfv(face, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetMaterialiv
Gura_DeclareFunction(glGetMaterialiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetMaterialiv)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLint> params(n);
	glGetMaterialiv(face, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetPixelMapfv
Gura_DeclareFunction(glGetPixelMapfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "map", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "values", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetPixelMapfv)
{
#if 0
	GLenum map = static_cast<GLenum>(args.GetInt(0));
	CArray<GLfloat> values = args.GetList(1);
	glGetPixelMapfv(map, values);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetPixelMapfv");
	return Value::Null;
}

// opengl.glGetPixelMapuiv
Gura_DeclareFunction(glGetPixelMapuiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "map", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "values", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetPixelMapuiv)
{
#if 0
	GLenum map = static_cast<GLenum>(args.GetInt(0));
	CArray<GLuint> values = args.GetList(1);
	glGetPixelMapuiv(map, values);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetPixelMapuiv");
	return Value::Null;
}

// opengl.glGetPixelMapusv
Gura_DeclareFunction(glGetPixelMapusv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "map", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "values", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetPixelMapusv)
{
#if 0
	GLenum map = static_cast<GLenum>(args.GetInt(0));
	CArray<GLushort> values = args.GetList(1);
	glGetPixelMapusv(map, values);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetPixelMapusv");
	return Value::Null;
}

// opengl.glGetPolygonStipple
Gura_DeclareFunction(glGetPolygonStipple)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mask", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetPolygonStipple)
{
#if 0
	CArray<GLubyte> mask = args.GetList(0);
	glGetPolygonStipple(mask);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetPolygonStipple");
	return Value::Null;
}

// opengl.glGetString
Gura_DeclareFunction(glGetString)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetString)
{
	GLenum name = static_cast<GLenum>(args.GetInt(0));
	const GLubyte *_rtn = glGetString(name);
	if (_rtn == NULL) {
		sig.SetError(ERR_ValueError, "invalid name");
		return Value::Null;
	}
	return ReturnValue(env, sig, args, Value(reinterpret_cast<const char *>(_rtn)));
}

// opengl.glGetTexEnvfv
Gura_DeclareFunction(glGetTexEnvfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexEnvfv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLfloat> params(n);
	glGetTexEnvfv(target, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexEnviv
Gura_DeclareFunction(glGetTexEnviv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexEnviv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLint> params(n);
	glGetTexEnviv(target, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexGendv
Gura_DeclareFunction(glGetTexGendv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexGendv)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLdouble> params(n);
	glGetTexGendv(coord, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexGenfv
Gura_DeclareFunction(glGetTexGenfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexGenfv)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLfloat> params(n);
	glGetTexGenfv(coord, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexGeniv
Gura_DeclareFunction(glGetTexGeniv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexGeniv)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLint> params(n);
	glGetTexGeniv(coord, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexLevelParameterfv
Gura_DeclareFunction(glGetTexLevelParameterfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexLevelParameterfv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLenum pname = static_cast<GLenum>(args.GetInt(2));
	size_t n = GetParamCount(pname);
	CArray<GLfloat> params(n);
	glGetTexLevelParameterfv(target, level, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexLevelParameteriv
Gura_DeclareFunction(glGetTexLevelParameteriv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexLevelParameteriv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLenum pname = static_cast<GLenum>(args.GetInt(2));
	size_t n = GetParamCount(pname);
	CArray<GLint> params(n);
	glGetTexLevelParameteriv(target, level, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexParameterfv
Gura_DeclareFunction(glGetTexParameterfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexParameterfv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLfloat> params(n);
	glGetTexParameterfv(target, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glGetTexParameteriv
Gura_DeclareFunction(glGetTexParameteriv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetTexParameteriv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	size_t n = GetParamCount(pname);
	CArray<GLint> params(n);
	glGetTexParameteriv(target, pname, params);
	return ReturnValue(env, sig, args, Value::CreateList(env, params, n));
}

// opengl.glHint
Gura_DeclareFunction(glHint)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glHint)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum mode = static_cast<GLenum>(args.GetInt(1));
	glHint(target, mode);
	return Value::Null;
}

// opengl.glIndexMask
Gura_DeclareFunction(glIndexMask)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mask", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexMask)
{
	GLuint mask = args.GetUInt(0);
	glIndexMask(mask);
	return Value::Null;
}

// opengl.glIndexd
Gura_DeclareFunction(glIndexd)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexd)
{
	GLdouble c = args.GetDouble(0);
	glIndexd(c);
	return Value::Null;
}

// opengl.glIndexdv
Gura_DeclareFunction(glIndexdv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexdv)
{
	CArray<GLdouble> c = args.GetList(0);
	glIndexdv(c);
	return Value::Null;
}

// opengl.glIndexf
Gura_DeclareFunction(glIndexf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexf)
{
	GLfloat c = args.GetFloat(0);
	glIndexf(c);
	return Value::Null;
}

// opengl.glIndexfv
Gura_DeclareFunction(glIndexfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexfv)
{
	CArray<GLfloat> c = args.GetList(0);
	glIndexfv(c);
	return Value::Null;
}

// opengl.glIndexi
Gura_DeclareFunction(glIndexi)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexi)
{
	GLint c = args.GetInt(0);
	glIndexi(c);
	return Value::Null;
}

// opengl.glIndexiv
Gura_DeclareFunction(glIndexiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexiv)
{
	CArray<GLint> c = args.GetList(0);
	glIndexiv(c);
	return Value::Null;
}

// opengl.glIndexs
Gura_DeclareFunction(glIndexs)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexs)
{
	GLshort c = args.GetShort(0);
	glIndexs(c);
	return Value::Null;
}

// opengl.glIndexsv
Gura_DeclareFunction(glIndexsv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexsv)
{
	CArray<GLshort> c = args.GetList(0);
	glIndexsv(c);
	return Value::Null;
}

// opengl.glIndexub
Gura_DeclareFunction(glIndexub)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexub)
{
	GLubyte c = args.GetUChar(0);
	glIndexub(c);
	return Value::Null;
}

// opengl.glIndexubv
Gura_DeclareFunction(glIndexubv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "c", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIndexubv)
{
	CArray<GLubyte> c = args.GetList(0);
	glIndexubv(c);
	return Value::Null;
}

// opengl.glInitNames
Gura_DeclareFunction(glInitNames)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glInitNames)
{
	glInitNames();
	return Value::Null;
}

// opengl.glIsEnabled
Gura_DeclareFunction(glIsEnabled)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "cap", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIsEnabled)
{
	GLenum cap = static_cast<GLenum>(args.GetInt(0));
	GLboolean _rtn = glIsEnabled(cap);
	return ReturnValue(env, sig, args, Value(_rtn != GL_FALSE));
}

// opengl.glIsList
Gura_DeclareFunction(glIsList)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "list", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIsList)
{
	GLuint list = args.GetUInt(0);
	GLboolean _rtn = glIsList(list);
	return ReturnValue(env, sig, args, Value(_rtn != GL_FALSE));
}

// opengl.glIsTexture
Gura_DeclareFunction(glIsTexture)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "texture", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glIsTexture)
{
	GLuint texture = args.GetUInt(0);
	GLboolean _rtn = glIsTexture(texture);
	return ReturnValue(env, sig, args, Value(_rtn != GL_FALSE));
}

// opengl.glLightModelf
Gura_DeclareFunction(glLightModelf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLightModelf)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLfloat param = args.GetFloat(1);
	glLightModelf(pname, param);
	return Value::Null;
}

// opengl.glLightModelfv
Gura_DeclareFunction(glLightModelfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLightModelfv)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	CArray<GLfloat> params = args.GetList(1);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glLightModelfv(pname, params);
	return Value::Null;
}

// opengl.glLightModeli
Gura_DeclareFunction(glLightModeli)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLightModeli)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLint param = args.GetInt(1);
	glLightModeli(pname, param);
	return Value::Null;
}

// opengl.glLightModeliv
Gura_DeclareFunction(glLightModeliv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLightModeliv)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	CArray<GLint> params = args.GetList(1);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glLightModeliv(pname, params);
	return Value::Null;
}

// opengl.glLightf
Gura_DeclareFunction(glLightf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "light", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLightf)
{
	GLenum light = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLfloat param = args.GetFloat(2);
	glLightf(light, pname, param);
	return Value::Null;
}

// opengl.glLightfv
Gura_DeclareFunction(glLightfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "light", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLightfv)
{
	GLenum light = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLfloat> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glLightfv(light, pname, params);
	return Value::Null;
}

// opengl.glLighti
Gura_DeclareFunction(glLighti)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "light", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLighti)
{
	GLenum light = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLint param = args.GetInt(2);
	glLighti(light, pname, param);
	return Value::Null;
}

// opengl.glLightiv
Gura_DeclareFunction(glLightiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "light", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLightiv)
{
	GLenum light = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLint> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glLightiv(light, pname, params);
	return Value::Null;
}

// opengl.glLineStipple
Gura_DeclareFunction(glLineStipple)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "factor", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pattern", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLineStipple)
{
	GLint factor = args.GetInt(0);
	GLushort pattern = args.GetUShort(1);
	glLineStipple(factor, pattern);
	return Value::Null;
}

// opengl.glLineWidth
Gura_DeclareFunction(glLineWidth)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLineWidth)
{
	GLfloat width = args.GetFloat(0);
	glLineWidth(width);
	return Value::Null;
}

// opengl.glListBase
Gura_DeclareFunction(glListBase)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "base", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glListBase)
{
	GLuint base = args.GetUInt(0);
	glListBase(base);
	return Value::Null;
}

// opengl.glLoadIdentity
Gura_DeclareFunction(glLoadIdentity)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLoadIdentity)
{
	glLoadIdentity();
	return Value::Null;
}

// opengl.glLoadMatrixd
Gura_DeclareFunction(glLoadMatrixd)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "m", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLoadMatrixd)
{
	CArray<GLdouble> m = args.GetList(0);
	if (m.GetSize() != 16) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glLoadMatrixd(m);
	return Value::Null;
}

// opengl.glLoadMatrixf
Gura_DeclareFunction(glLoadMatrixf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "m", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLoadMatrixf)
{
	CArray<GLfloat> m = args.GetList(0);
	if (m.GetSize() != 16) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glLoadMatrixf(m);
	return Value::Null;
}

// opengl.glLoadName
Gura_DeclareFunction(glLoadName)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLoadName)
{
	GLuint name = args.GetUInt(0);
	glLoadName(name);
	return Value::Null;
}

// opengl.glLogicOp
Gura_DeclareFunction(glLogicOp)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "opcode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glLogicOp)
{
	GLenum opcode = static_cast<GLenum>(args.GetInt(0));
	glLogicOp(opcode);
	return Value::Null;
}

// opengl.glMap1d
Gura_DeclareFunction(glMap1d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "order", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "points", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMap1d)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLdouble u1 = args.GetDouble(1);
	GLdouble u2 = args.GetDouble(2);
	GLint stride = args.GetInt(3);
	GLint order = args.GetInt(4);
	CArray<GLdouble> points = args.GetList(5);
	glMap1d(target, u1, u2, stride, order, points);
	return Value::Null;
}

// opengl.glMap1f
Gura_DeclareFunction(glMap1f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "order", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "points", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMap1f)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLfloat u1 = args.GetFloat(1);
	GLfloat u2 = args.GetFloat(2);
	GLint stride = args.GetInt(3);
	GLint order = args.GetInt(4);
	CArray<GLfloat> points = args.GetList(5);
	glMap1f(target, u1, u2, stride, order, points);
	return Value::Null;
}

// opengl.glMap2d
Gura_DeclareFunction(glMap2d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ustride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "uorder", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "vstride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "vorder", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "points", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMap2d)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLdouble u1 = args.GetDouble(1);
	GLdouble u2 = args.GetDouble(2);
	GLint ustride = args.GetInt(3);
	GLint uorder = args.GetInt(4);
	GLdouble v1 = args.GetDouble(5);
	GLdouble v2 = args.GetDouble(6);
	GLint vstride = args.GetInt(7);
	GLint vorder = args.GetInt(8);
	CArray<GLdouble> points = args.GetList(9);
	glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
	return Value::Null;
}

// opengl.glMap2f
Gura_DeclareFunction(glMap2f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ustride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "uorder", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "vstride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "vorder", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "points", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMap2f)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLfloat u1 = args.GetFloat(1);
	GLfloat u2 = args.GetFloat(2);
	GLint ustride = args.GetInt(3);
	GLint uorder = args.GetInt(4);
	GLfloat v1 = args.GetFloat(5);
	GLfloat v2 = args.GetFloat(6);
	GLint vstride = args.GetInt(7);
	GLint vorder = args.GetInt(8);
	CArray<GLfloat> points = args.GetList(9);
	glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
	return Value::Null;
}

// opengl.glMapGrid1d
Gura_DeclareFunction(glMapGrid1d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "un", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMapGrid1d)
{
	GLint un = args.GetInt(0);
	GLdouble u1 = args.GetDouble(1);
	GLdouble u2 = args.GetDouble(2);
	glMapGrid1d(un, u1, u2);
	return Value::Null;
}

// opengl.glMapGrid1f
Gura_DeclareFunction(glMapGrid1f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "un", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMapGrid1f)
{
	GLint un = args.GetInt(0);
	GLfloat u1 = args.GetFloat(1);
	GLfloat u2 = args.GetFloat(2);
	glMapGrid1f(un, u1, u2);
	return Value::Null;
}

// opengl.glMapGrid2d
Gura_DeclareFunction(glMapGrid2d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "un", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "vn", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMapGrid2d)
{
	GLint un = args.GetInt(0);
	GLdouble u1 = args.GetDouble(1);
	GLdouble u2 = args.GetDouble(2);
	GLint vn = args.GetInt(3);
	GLdouble v1 = args.GetDouble(4);
	GLdouble v2 = args.GetDouble(5);
	glMapGrid2d(un, u1, u2, vn, v1, v2);
	return Value::Null;
}

// opengl.glMapGrid2f
Gura_DeclareFunction(glMapGrid2f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "un", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "u2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "vn", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMapGrid2f)
{
	GLint un = args.GetInt(0);
	GLfloat u1 = args.GetFloat(1);
	GLfloat u2 = args.GetFloat(2);
	GLint vn = args.GetInt(3);
	GLfloat v1 = args.GetFloat(4);
	GLfloat v2 = args.GetFloat(5);
	glMapGrid2f(un, u1, u2, vn, v1, v2);
	return Value::Null;
}

// opengl.glMaterialf
Gura_DeclareFunction(glMaterialf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMaterialf)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLfloat param = args.GetFloat(2);
	glMaterialf(face, pname, param);
	return Value::Null;
}

// opengl.glMaterialfv
Gura_DeclareFunction(glMaterialfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMaterialfv)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLfloat> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glMaterialfv(face, pname, params);
	return Value::Null;
}

// opengl.glMateriali
Gura_DeclareFunction(glMateriali)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMateriali)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLint param = args.GetInt(2);
	glMateriali(face, pname, param);
	return Value::Null;
}

// opengl.glMaterialiv
Gura_DeclareFunction(glMaterialiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMaterialiv)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLint> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glMaterialiv(face, pname, params);
	return Value::Null;
}

// opengl.glMatrixMode
Gura_DeclareFunction(glMatrixMode)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMatrixMode)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	glMatrixMode(mode);
	return Value::Null;
}

// opengl.glMultMatrixd
Gura_DeclareFunction(glMultMatrixd)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "m", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMultMatrixd)
{
	CArray<GLdouble> m = args.GetList(0);
	if (m.GetSize() != 16) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glMultMatrixd(m);
	return Value::Null;
}

// opengl.glMultMatrixf
Gura_DeclareFunction(glMultMatrixf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "m", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glMultMatrixf)
{
	CArray<GLfloat> m = args.GetList(0);
	if (m.GetSize() != 16) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glMultMatrixf(m);
	return Value::Null;
}

// opengl.glNewList
Gura_DeclareFunction(glNewList)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "list", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNewList)
{
	GLuint list = args.GetUInt(0);
	GLenum mode = static_cast<GLenum>(args.GetInt(1));
	glNewList(list, mode);
	if (args.IsBlockSpecified()) {
		SeqPostHandler *pSeqPostHandler = NULL;
		const Expr_Block *pExprBlock = args.GetBlock(env, sig);
		if (sig.IsSignalled()) return Value::Null;
		pExprBlock->Exec2(env, sig, pSeqPostHandler);
		glEndList();
	}
	return Value::Null;
}

// opengl.glNormal3b
Gura_DeclareFunction(glNormal3b)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "nx", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ny", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "nz", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3b)
{
	GLbyte nx = args.GetChar(0);
	GLbyte ny = args.GetChar(1);
	GLbyte nz = args.GetChar(2);
	glNormal3b(nx, ny, nz);
	return Value::Null;
}

// opengl.glNormal3bv
Gura_DeclareFunction(glNormal3bv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3bv)
{
	CArray<GLbyte> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glNormal3bv(v);
	return Value::Null;
}

// opengl.glNormal3d
Gura_DeclareFunction(glNormal3d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "nx", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ny", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "nz", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3d)
{
	GLdouble nx = args.GetDouble(0);
	GLdouble ny = args.GetDouble(1);
	GLdouble nz = args.GetDouble(2);
	glNormal3d(nx, ny, nz);
	return Value::Null;
}

// opengl.glNormal3dv
Gura_DeclareFunction(glNormal3dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glNormal3dv(v);
	return Value::Null;
}

// opengl.glNormal3f
Gura_DeclareFunction(glNormal3f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "nx", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ny", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "nz", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3f)
{
	GLfloat nx = args.GetFloat(0);
	GLfloat ny = args.GetFloat(1);
	GLfloat nz = args.GetFloat(2);
	glNormal3f(nx, ny, nz);
	return Value::Null;
}

// opengl.glNormal3fv
Gura_DeclareFunction(glNormal3fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glNormal3fv(v);
	return Value::Null;
}

// opengl.glNormal3i
Gura_DeclareFunction(glNormal3i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "nx", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ny", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "nz", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3i)
{
	GLint nx = args.GetInt(0);
	GLint ny = args.GetInt(1);
	GLint nz = args.GetInt(2);
	glNormal3i(nx, ny, nz);
	return Value::Null;
}

// opengl.glNormal3iv
Gura_DeclareFunction(glNormal3iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glNormal3iv(v);
	return Value::Null;
}

// opengl.glNormal3s
Gura_DeclareFunction(glNormal3s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "nx", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ny", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "nz", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3s)
{
	GLshort nx = args.GetShort(0);
	GLshort ny = args.GetShort(1);
	GLshort nz = args.GetShort(2);
	glNormal3s(nx, ny, nz);
	return Value::Null;
}

// opengl.glNormal3sv
Gura_DeclareFunction(glNormal3sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glNormal3sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glNormal3sv(v);
	return Value::Null;
}

// opengl.glOrtho
Gura_DeclareFunction(glOrtho)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "left", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "right", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bottom", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "top", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zNear", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zFar", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glOrtho)
{
	GLdouble left = args.GetDouble(0);
	GLdouble right = args.GetDouble(1);
	GLdouble bottom = args.GetDouble(2);
	GLdouble top = args.GetDouble(3);
	GLdouble zNear = args.GetDouble(4);
	GLdouble zFar = args.GetDouble(5);
	glOrtho(left, right, bottom, top, zNear, zFar);
	return Value::Null;
}

// opengl.glPassThrough
Gura_DeclareFunction(glPassThrough)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "token", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPassThrough)
{
	GLfloat token = args.GetFloat(0);
	glPassThrough(token);
	return Value::Null;
}

// opengl.glPixelMapfv
Gura_DeclareFunction(glPixelMapfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "map", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mapsize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "values", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelMapfv)
{
	GLenum map = static_cast<GLenum>(args.GetInt(0));
	GLint mapsize = args.GetInt(1);
	CArray<GLfloat> values = args.GetList(2);
	glPixelMapfv(map, mapsize, values);
	return Value::Null;
}

// opengl.glPixelMapuiv
Gura_DeclareFunction(glPixelMapuiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "map", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mapsize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "values", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelMapuiv)
{
	GLenum map = static_cast<GLenum>(args.GetInt(0));
	GLint mapsize = args.GetInt(1);
	CArray<GLuint> values = args.GetList(2);
	glPixelMapuiv(map, mapsize, values);
	return Value::Null;
}

// opengl.glPixelMapusv
Gura_DeclareFunction(glPixelMapusv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "map", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mapsize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "values", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelMapusv)
{
	GLenum map = static_cast<GLenum>(args.GetInt(0));
	GLint mapsize = args.GetInt(1);
	CArray<GLushort> values = args.GetList(2);
	glPixelMapusv(map, mapsize, values);
	return Value::Null;
}

// opengl.glPixelStoref
Gura_DeclareFunction(glPixelStoref)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelStoref)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLfloat param = args.GetFloat(1);
	glPixelStoref(pname, param);
	return Value::Null;
}

// opengl.glPixelStorei
Gura_DeclareFunction(glPixelStorei)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelStorei)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLint param = args.GetInt(1);
	glPixelStorei(pname, param);
	return Value::Null;
}

// opengl.glPixelTransferf
Gura_DeclareFunction(glPixelTransferf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelTransferf)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLfloat param = args.GetFloat(1);
	glPixelTransferf(pname, param);
	return Value::Null;
}

// opengl.glPixelTransferi
Gura_DeclareFunction(glPixelTransferi)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelTransferi)
{
	GLenum pname = static_cast<GLenum>(args.GetInt(0));
	GLint param = args.GetInt(1);
	glPixelTransferi(pname, param);
	return Value::Null;
}

// opengl.glPixelZoom
Gura_DeclareFunction(glPixelZoom)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "xfactor", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "yfactor", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPixelZoom)
{
	GLfloat xfactor = args.GetFloat(0);
	GLfloat yfactor = args.GetFloat(1);
	glPixelZoom(xfactor, yfactor);
	return Value::Null;
}

// opengl.glPointSize
Gura_DeclareFunction(glPointSize)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPointSize)
{
	GLfloat size = args.GetFloat(0);
	glPointSize(size);
	return Value::Null;
}

// opengl.glPolygonMode
Gura_DeclareFunction(glPolygonMode)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "face", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPolygonMode)
{
	GLenum face = static_cast<GLenum>(args.GetInt(0));
	GLenum mode = static_cast<GLenum>(args.GetInt(1));
	glPolygonMode(face, mode);
	return Value::Null;
}

// opengl.glPolygonOffset
Gura_DeclareFunction(glPolygonOffset)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "factor", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "units", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPolygonOffset)
{
	GLfloat factor = args.GetFloat(0);
	GLfloat units = args.GetFloat(1);
	glPolygonOffset(factor, units);
	return Value::Null;
}

// opengl.glPolygonStipple
Gura_DeclareFunction(glPolygonStipple)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mask", VTYPE_binary, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPolygonStipple)
{
	const Binary &mask = Object_binary::GetObject(args, 0)->GetBinary();
	if (mask.size() != 32 * 4) {
		sig.SetError(ERR_ValueError, "mask must be a binary containing 32 * 4 elements");
		return Value::Null;
	}
	glPolygonStipple(reinterpret_cast<const GLubyte *>(mask.data()));
	return Value::Null;
}

// opengl.glPopAttrib
Gura_DeclareFunction(glPopAttrib)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPopAttrib)
{
	glPopAttrib();
	return Value::Null;
}

// opengl.glPopClientAttrib
Gura_DeclareFunction(glPopClientAttrib)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPopClientAttrib)
{
	glPopClientAttrib();
	return Value::Null;
}

// opengl.glPopMatrix
Gura_DeclareFunction(glPopMatrix)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPopMatrix)
{
	glPopMatrix();
	return Value::Null;
}

// opengl.glPopName
Gura_DeclareFunction(glPopName)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPopName)
{
	glPopName();
	return Value::Null;
}

// opengl.glPrioritizeTextures
Gura_DeclareFunction(glPrioritizeTextures)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "textures", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "priorities", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPrioritizeTextures)
{
	CArray<GLuint> textures = args.GetList(0);
	CArray<GLclampf> priorities = args.GetList(1);
	GLsizei n = textures.GetSize();
	if (n != priorities.GetSize()) {
		sig.SetError(ERR_ValueError, "textures and priorities must have the same number of elements");
		return Value::Null;
	}
	glPrioritizeTextures(n, textures, priorities);
	return Value::Null;
}

// opengl.glPushAttrib
Gura_DeclareFunction(glPushAttrib)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "mask", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPushAttrib)
{
	GLbitfield mask = args.GetUInt(0);
	glPushAttrib(mask);
	if (args.IsBlockSpecified()) {
		SeqPostHandler *pSeqPostHandler = NULL;
		const Expr_Block *pExprBlock = args.GetBlock(env, sig);
		if (sig.IsSignalled()) return Value::Null;
		pExprBlock->Exec2(env, sig, pSeqPostHandler);
		glPopAttrib();
	}
	return Value::Null;
}

// opengl.glPushClientAttrib
Gura_DeclareFunction(glPushClientAttrib)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "mask", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPushClientAttrib)
{
	GLbitfield mask = args.GetUInt(0);
	glPushClientAttrib(mask);
	if (args.IsBlockSpecified()) {
		SeqPostHandler *pSeqPostHandler = NULL;
		const Expr_Block *pExprBlock = args.GetBlock(env, sig);
		if (sig.IsSignalled()) return Value::Null;
		pExprBlock->Exec2(env, sig, pSeqPostHandler);
		glPopClientAttrib();
	}
	return Value::Null;
}

// opengl.glPushMatrix
Gura_DeclareFunction(glPushMatrix)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPushMatrix)
{
	glPushMatrix();
	if (args.IsBlockSpecified()) {
		SeqPostHandler *pSeqPostHandler = NULL;
		const Expr_Block *pExprBlock = args.GetBlock(env, sig);
		if (sig.IsSignalled()) return Value::Null;
		pExprBlock->Exec2(env, sig, pSeqPostHandler);
		glPopMatrix();
	}
	return Value::Null;
}

// opengl.glPushName
Gura_DeclareFunction(glPushName)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glPushName)
{
	GLuint name = args.GetUInt(0);
	glPushName(name);
	if (args.IsBlockSpecified()) {
		SeqPostHandler *pSeqPostHandler = NULL;
		const Expr_Block *pExprBlock = args.GetBlock(env, sig);
		if (sig.IsSignalled()) return Value::Null;
		pExprBlock->Exec2(env, sig, pSeqPostHandler);
		glPopName();
	}
	return Value::Null;
}

// opengl.glRasterPos2d
Gura_DeclareFunction(glRasterPos2d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2d)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	glRasterPos2d(x, y);
	return Value::Null;
}

// opengl.glRasterPos2dv
Gura_DeclareFunction(glRasterPos2dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRasterPos2dv(v);
	return Value::Null;
}

// opengl.glRasterPos2f
Gura_DeclareFunction(glRasterPos2f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2f)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	glRasterPos2f(x, y);
	return Value::Null;
}

// opengl.glRasterPos2fv
Gura_DeclareFunction(glRasterPos2fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRasterPos2fv(v);
	return Value::Null;
}

// opengl.glRasterPos2i
Gura_DeclareFunction(glRasterPos2i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2i)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	glRasterPos2i(x, y);
	return Value::Null;
}

// opengl.glRasterPos2iv
Gura_DeclareFunction(glRasterPos2iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRasterPos2iv(v);
	return Value::Null;
}

// opengl.glRasterPos2s
Gura_DeclareFunction(glRasterPos2s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2s)
{
	GLshort x = args.GetShort(0);
	GLshort y = args.GetShort(1);
	glRasterPos2s(x, y);
	return Value::Null;
}

// opengl.glRasterPos2sv
Gura_DeclareFunction(glRasterPos2sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos2sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRasterPos2sv(v);
	return Value::Null;
}

// opengl.glRasterPos3d
Gura_DeclareFunction(glRasterPos3d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3d)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	GLdouble z = args.GetDouble(2);
	glRasterPos3d(x, y, z);
	return Value::Null;
}

// opengl.glRasterPos3dv
Gura_DeclareFunction(glRasterPos3dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glRasterPos3dv(v);
	return Value::Null;
}

// opengl.glRasterPos3f
Gura_DeclareFunction(glRasterPos3f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3f)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	GLfloat z = args.GetFloat(2);
	glRasterPos3f(x, y, z);
	return Value::Null;
}

// opengl.glRasterPos3fv
Gura_DeclareFunction(glRasterPos3fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glRasterPos3fv(v);
	return Value::Null;
}

// opengl.glRasterPos3i
Gura_DeclareFunction(glRasterPos3i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3i)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLint z = args.GetInt(2);
	glRasterPos3i(x, y, z);
	return Value::Null;
}

// opengl.glRasterPos3iv
Gura_DeclareFunction(glRasterPos3iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glRasterPos3iv(v);
	return Value::Null;
}

// opengl.glRasterPos3s
Gura_DeclareFunction(glRasterPos3s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3s)
{
	GLshort x = args.GetShort(0);
	GLshort y = args.GetShort(1);
	GLshort z = args.GetShort(2);
	glRasterPos3s(x, y, z);
	return Value::Null;
}

// opengl.glRasterPos3sv
Gura_DeclareFunction(glRasterPos3sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos3sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glRasterPos3sv(v);
	return Value::Null;
}

// opengl.glRasterPos4d
Gura_DeclareFunction(glRasterPos4d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4d)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	GLdouble z = args.GetDouble(2);
	GLdouble w = args.GetDouble(3);
	glRasterPos4d(x, y, z, w);
	return Value::Null;
}

// opengl.glRasterPos4dv
Gura_DeclareFunction(glRasterPos4dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glRasterPos4dv(v);
	return Value::Null;
}

// opengl.glRasterPos4f
Gura_DeclareFunction(glRasterPos4f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4f)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	GLfloat z = args.GetFloat(2);
	GLfloat w = args.GetFloat(3);
	glRasterPos4f(x, y, z, w);
	return Value::Null;
}

// opengl.glRasterPos4fv
Gura_DeclareFunction(glRasterPos4fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glRasterPos4fv(v);
	return Value::Null;
}

// opengl.glRasterPos4i
Gura_DeclareFunction(glRasterPos4i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4i)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLint z = args.GetInt(2);
	GLint w = args.GetInt(3);
	glRasterPos4i(x, y, z, w);
	return Value::Null;
}

// opengl.glRasterPos4iv
Gura_DeclareFunction(glRasterPos4iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glRasterPos4iv(v);
	return Value::Null;
}

// opengl.glRasterPos4s
Gura_DeclareFunction(glRasterPos4s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4s)
{
	GLshort x = args.GetShort(0);
	GLshort y = args.GetShort(1);
	GLshort z = args.GetShort(2);
	GLshort w = args.GetShort(3);
	glRasterPos4s(x, y, z, w);
	return Value::Null;
}

// opengl.glRasterPos4sv
Gura_DeclareFunction(glRasterPos4sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRasterPos4sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glRasterPos4sv(v);
	return Value::Null;
}

// opengl.glReadBuffer
Gura_DeclareFunction(glReadBuffer)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glReadBuffer)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	glReadBuffer(mode);
	return Value::Null;
}

// opengl.glReadPixels
Gura_DeclareFunction(glReadPixels)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "format", VTYPE_symbol, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glReadPixels)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLsizei width = args.GetInt(2);
	GLsizei height = args.GetInt(3);
	const Symbol *format = args.GetSymbol(4);
	Image::Format fmt = Image::SymbolToFormat(sig, format);
	if (sig.IsSignalled()) return Value::Null;
	AutoPtr<Image> pImage(new Image(fmt));
	GLenum _format = GetImageFormat(sig, pImage.get());
	if (sig.IsSignalled()) return Value::Null;
	if (!pImage->AllocBuffer(sig, width, height, 0xff)) return Value::Null;
	GLenum type = GL_UNSIGNED_BYTE;
	glReadPixels(x, y, width, height, _format, type, pImage->GetBuffer());
	return ReturnValue(env, sig, args, Value(new Object_image(env, pImage.release())));
}

// opengl.glRectd
Gura_DeclareFunction(glRectd)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRectd)
{
	GLdouble x1 = args.GetDouble(0);
	GLdouble y1 = args.GetDouble(1);
	GLdouble x2 = args.GetDouble(2);
	GLdouble y2 = args.GetDouble(3);
	glRectd(x1, y1, x2, y2);
	return Value::Null;
}

// opengl.glRectdv
Gura_DeclareFunction(glRectdv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRectdv)
{
	CArray<GLdouble> v1 = args.GetList(0);
	if (v1.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	CArray<GLdouble> v2 = args.GetList(1);
	if (v2.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRectdv(v1, v2);
	return Value::Null;
}

// opengl.glRectf
Gura_DeclareFunction(glRectf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRectf)
{
	GLfloat x1 = args.GetFloat(0);
	GLfloat y1 = args.GetFloat(1);
	GLfloat x2 = args.GetFloat(2);
	GLfloat y2 = args.GetFloat(3);
	glRectf(x1, y1, x2, y2);
	return Value::Null;
}

// opengl.glRectfv
Gura_DeclareFunction(glRectfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRectfv)
{
	CArray<GLfloat> v1 = args.GetList(0);
	if (v1.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	CArray<GLfloat> v2 = args.GetList(1);
	if (v2.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRectfv(v1, v2);
	return Value::Null;
}

// opengl.glRecti
Gura_DeclareFunction(glRecti)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRecti)
{
	GLint x1 = args.GetInt(0);
	GLint y1 = args.GetInt(1);
	GLint x2 = args.GetInt(2);
	GLint y2 = args.GetInt(3);
	glRecti(x1, y1, x2, y2);
	return Value::Null;
}

// opengl.glRectiv
Gura_DeclareFunction(glRectiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRectiv)
{
	CArray<GLint> v1 = args.GetList(0);
	if (v1.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	CArray<GLint> v2 = args.GetList(1);
	if (v2.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRectiv(v1, v2);
	return Value::Null;
}

// opengl.glRects
Gura_DeclareFunction(glRects)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y1", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x2", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y2", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRects)
{
	GLshort x1 = args.GetShort(0);
	GLshort y1 = args.GetShort(1);
	GLshort x2 = args.GetShort(2);
	GLshort y2 = args.GetShort(3);
	glRects(x1, y1, x2, y2);
	return Value::Null;
}

// opengl.glRectsv
Gura_DeclareFunction(glRectsv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v1", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "v2", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRectsv)
{
	CArray<GLshort> v1 = args.GetList(0);
	if (v1.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	CArray<GLshort> v2 = args.GetList(1);
	if (v2.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glRectsv(v1, v2);
	return Value::Null;
}

// opengl.glRenderMode
Gura_DeclareFunction(glRenderMode)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRenderMode)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	GLint _rtn = glRenderMode(mode);
	return ReturnValue(env, sig, args, Value(_rtn));
}

// opengl.glRotated
Gura_DeclareFunction(glRotated)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "angle", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRotated)
{
	GLdouble angle = args.GetDouble(0);
	GLdouble x = args.GetDouble(1);
	GLdouble y = args.GetDouble(2);
	GLdouble z = args.GetDouble(3);
	glRotated(angle, x, y, z);
	return Value::Null;
}

// opengl.glRotatef
Gura_DeclareFunction(glRotatef)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "angle", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glRotatef)
{
	GLfloat angle = args.GetFloat(0);
	GLfloat x = args.GetFloat(1);
	GLfloat y = args.GetFloat(2);
	GLfloat z = args.GetFloat(3);
	glRotatef(angle, x, y, z);
	return Value::Null;
}

// opengl.glScaled
Gura_DeclareFunction(glScaled)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glScaled)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	GLdouble z = args.GetDouble(2);
	glScaled(x, y, z);
	return Value::Null;
}

// opengl.glScalef
Gura_DeclareFunction(glScalef)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glScalef)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	GLfloat z = args.GetFloat(2);
	glScalef(x, y, z);
	return Value::Null;
}

// opengl.glScissor
Gura_DeclareFunction(glScissor)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glScissor)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLsizei width = args.GetInt(2);
	GLsizei height = args.GetInt(3);
	glScissor(x, y, width, height);
	return Value::Null;
}

// opengl.glSelectBuffer
Gura_DeclareFunction(glSelectBuffer)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glSelectBuffer)
{
	GLsizei size = args.GetInt(0);
	CArray<GLuint> buffer(size);
	glSelectBuffer(size, buffer);
	return ReturnValue(env, sig, args, Value::CreateList(env, buffer, size));
}

// opengl.glShadeModel
Gura_DeclareFunction(glShadeModel)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mode", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glShadeModel)
{
	GLenum mode = static_cast<GLenum>(args.GetInt(0));
	glShadeModel(mode);
	return Value::Null;
}

// opengl.glStencilFunc
Gura_DeclareFunction(glStencilFunc)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "func", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "ref", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "mask", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glStencilFunc)
{
	GLenum func = static_cast<GLenum>(args.GetInt(0));
	GLint ref = args.GetInt(1);
	GLuint mask = args.GetUInt(2);
	glStencilFunc(func, ref, mask);
	return Value::Null;
}

// opengl.glStencilMask
Gura_DeclareFunction(glStencilMask)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "mask", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glStencilMask)
{
	GLuint mask = args.GetUInt(0);
	glStencilMask(mask);
	return Value::Null;
}

// opengl.glStencilOp
Gura_DeclareFunction(glStencilOp)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "fail", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zfail", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zpass", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glStencilOp)
{
	GLenum fail = static_cast<GLenum>(args.GetInt(0));
	GLenum zfail = static_cast<GLenum>(args.GetInt(1));
	GLenum zpass = static_cast<GLenum>(args.GetInt(2));
	glStencilOp(fail, zfail, zpass);
	return Value::Null;
}

// opengl.glTexCoord1d
Gura_DeclareFunction(glTexCoord1d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1d)
{
	GLdouble s = args.GetDouble(0);
	glTexCoord1d(s);
	return Value::Null;
}

// opengl.glTexCoord1dv
Gura_DeclareFunction(glTexCoord1dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 1) {
		sig.SetError(ERR_ValueError, "the list must have one element");
		return Value::Null;
	}
	glTexCoord1dv(v);
	return Value::Null;
}

// opengl.glTexCoord1f
Gura_DeclareFunction(glTexCoord1f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1f)
{
	GLfloat s = args.GetFloat(0);
	glTexCoord1f(s);
	return Value::Null;
}

// opengl.glTexCoord1fv
Gura_DeclareFunction(glTexCoord1fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 1) {
		sig.SetError(ERR_ValueError, "the list must have one element");
		return Value::Null;
	}
	glTexCoord1fv(v);
	return Value::Null;
}

// opengl.glTexCoord1i
Gura_DeclareFunction(glTexCoord1i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1i)
{
	GLint s = args.GetInt(0);
	glTexCoord1i(s);
	return Value::Null;
}

// opengl.glTexCoord1iv
Gura_DeclareFunction(glTexCoord1iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 1) {
		sig.SetError(ERR_ValueError, "the list must have one element");
		return Value::Null;
	}
	glTexCoord1iv(v);
	return Value::Null;
}

// opengl.glTexCoord1s
Gura_DeclareFunction(glTexCoord1s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1s)
{
	GLshort s = args.GetShort(0);
	glTexCoord1s(s);
	return Value::Null;
}

// opengl.glTexCoord1sv
Gura_DeclareFunction(glTexCoord1sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord1sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 1) {
		sig.SetError(ERR_ValueError, "the list must have one element");
		return Value::Null;
	}
	glTexCoord1sv(v);
	return Value::Null;
}

// opengl.glTexCoord2d
Gura_DeclareFunction(glTexCoord2d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2d)
{
	GLdouble s = args.GetDouble(0);
	GLdouble t = args.GetDouble(1);
	glTexCoord2d(s, t);
	return Value::Null;
}

// opengl.glTexCoord2dv
Gura_DeclareFunction(glTexCoord2dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glTexCoord2dv(v);
	return Value::Null;
}

// opengl.glTexCoord2f
Gura_DeclareFunction(glTexCoord2f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2f)
{
	GLfloat s = args.GetFloat(0);
	GLfloat t = args.GetFloat(1);
	glTexCoord2f(s, t);
	return Value::Null;
}

// opengl.glTexCoord2fv
Gura_DeclareFunction(glTexCoord2fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glTexCoord2fv(v);
	return Value::Null;
}

// opengl.glTexCoord2i
Gura_DeclareFunction(glTexCoord2i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2i)
{
	GLint s = args.GetInt(0);
	GLint t = args.GetInt(1);
	glTexCoord2i(s, t);
	return Value::Null;
}

// opengl.glTexCoord2iv
Gura_DeclareFunction(glTexCoord2iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glTexCoord2iv(v);
	return Value::Null;
}

// opengl.glTexCoord2s
Gura_DeclareFunction(glTexCoord2s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2s)
{
	GLshort s = args.GetShort(0);
	GLshort t = args.GetShort(1);
	glTexCoord2s(s, t);
	return Value::Null;
}

// opengl.glTexCoord2sv
Gura_DeclareFunction(glTexCoord2sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord2sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glTexCoord2sv(v);
	return Value::Null;
}

// opengl.glTexCoord3d
Gura_DeclareFunction(glTexCoord3d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3d)
{
	GLdouble s = args.GetDouble(0);
	GLdouble t = args.GetDouble(1);
	GLdouble r = args.GetDouble(2);
	glTexCoord3d(s, t, r);
	return Value::Null;
}

// opengl.glTexCoord3dv
Gura_DeclareFunction(glTexCoord3dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glTexCoord3dv(v);
	return Value::Null;
}

// opengl.glTexCoord3f
Gura_DeclareFunction(glTexCoord3f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3f)
{
	GLfloat s = args.GetFloat(0);
	GLfloat t = args.GetFloat(1);
	GLfloat r = args.GetFloat(2);
	glTexCoord3f(s, t, r);
	return Value::Null;
}

// opengl.glTexCoord3fv
Gura_DeclareFunction(glTexCoord3fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glTexCoord3fv(v);
	return Value::Null;
}

// opengl.glTexCoord3i
Gura_DeclareFunction(glTexCoord3i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3i)
{
	GLint s = args.GetInt(0);
	GLint t = args.GetInt(1);
	GLint r = args.GetInt(2);
	glTexCoord3i(s, t, r);
	return Value::Null;
}

// opengl.glTexCoord3iv
Gura_DeclareFunction(glTexCoord3iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glTexCoord3iv(v);
	return Value::Null;
}

// opengl.glTexCoord3s
Gura_DeclareFunction(glTexCoord3s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3s)
{
	GLshort s = args.GetShort(0);
	GLshort t = args.GetShort(1);
	GLshort r = args.GetShort(2);
	glTexCoord3s(s, t, r);
	return Value::Null;
}

// opengl.glTexCoord3sv
Gura_DeclareFunction(glTexCoord3sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord3sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glTexCoord3sv(v);
	return Value::Null;
}

// opengl.glTexCoord4d
Gura_DeclareFunction(glTexCoord4d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "q", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4d)
{
	GLdouble s = args.GetDouble(0);
	GLdouble t = args.GetDouble(1);
	GLdouble r = args.GetDouble(2);
	GLdouble q = args.GetDouble(3);
	glTexCoord4d(s, t, r, q);
	return Value::Null;
}

// opengl.glTexCoord4dv
Gura_DeclareFunction(glTexCoord4dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glTexCoord4dv(v);
	return Value::Null;
}

// opengl.glTexCoord4f
Gura_DeclareFunction(glTexCoord4f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "q", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4f)
{
	GLfloat s = args.GetFloat(0);
	GLfloat t = args.GetFloat(1);
	GLfloat r = args.GetFloat(2);
	GLfloat q = args.GetFloat(3);
	glTexCoord4f(s, t, r, q);
	return Value::Null;
}

// opengl.glTexCoord4fv
Gura_DeclareFunction(glTexCoord4fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glTexCoord4fv(v);
	return Value::Null;
}

// opengl.glTexCoord4i
Gura_DeclareFunction(glTexCoord4i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "q", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4i)
{
	GLint s = args.GetInt(0);
	GLint t = args.GetInt(1);
	GLint r = args.GetInt(2);
	GLint q = args.GetInt(3);
	glTexCoord4i(s, t, r, q);
	return Value::Null;
}

// opengl.glTexCoord4iv
Gura_DeclareFunction(glTexCoord4iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glTexCoord4iv(v);
	return Value::Null;
}

// opengl.glTexCoord4s
Gura_DeclareFunction(glTexCoord4s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "s", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "t", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "r", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "q", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4s)
{
	GLshort s = args.GetShort(0);
	GLshort t = args.GetShort(1);
	GLshort r = args.GetShort(2);
	GLshort q = args.GetShort(3);
	glTexCoord4s(s, t, r, q);
	return Value::Null;
}

// opengl.glTexCoord4sv
Gura_DeclareFunction(glTexCoord4sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexCoord4sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glTexCoord4sv(v);
	return Value::Null;
}

// opengl.glTexEnvf
Gura_DeclareFunction(glTexEnvf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexEnvf)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLfloat param = args.GetFloat(2);
	glTexEnvf(target, pname, param);
	return Value::Null;
}

// opengl.glTexEnvfv
Gura_DeclareFunction(glTexEnvfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexEnvfv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLfloat> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glTexEnvfv(target, pname, params);
	return Value::Null;
}

// opengl.glTexEnvi
Gura_DeclareFunction(glTexEnvi)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexEnvi)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLint param = args.GetInt(2);
	glTexEnvi(target, pname, param);
	return Value::Null;
}

// opengl.glTexEnviv
Gura_DeclareFunction(glTexEnviv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexEnviv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLint> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glTexEnviv(target, pname, params);
	return Value::Null;
}

// opengl.glTexGend
Gura_DeclareFunction(glTexGend)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexGend)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLdouble param = args.GetDouble(2);
	glTexGend(coord, pname, param);
	return Value::Null;
}

// opengl.glTexGendv
Gura_DeclareFunction(glTexGendv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexGendv)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLdouble> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glTexGendv(coord, pname, params);
	return Value::Null;
}

// opengl.glTexGenf
Gura_DeclareFunction(glTexGenf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexGenf)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLfloat param = args.GetFloat(2);
	glTexGenf(coord, pname, param);
	return Value::Null;
}

// opengl.glTexGenfv
Gura_DeclareFunction(glTexGenfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexGenfv)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLfloat> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glTexGenfv(coord, pname, params);
	return Value::Null;
}

// opengl.glTexGeni
Gura_DeclareFunction(glTexGeni)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexGeni)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLint param = args.GetInt(2);
	glTexGeni(coord, pname, param);
	return Value::Null;
}

// opengl.glTexGeniv
Gura_DeclareFunction(glTexGeniv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "coord", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexGeniv)
{
	GLenum coord = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLint> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glTexGeniv(coord, pname, params);
	return Value::Null;
}

// opengl.glTexImage1D
Gura_DeclareFunction(glTexImage1D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalformat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "border", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "image", VTYPE_image, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexImage1D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLint internalformat = args.GetInt(2);
	GLint border = args.GetInt(3);
	Image *image = Object_image::GetObject(args, 4)->GetImage();
	GLsizei width = static_cast<GLsizei>(image->GetWidth()) + border * 2;
	GLenum format = GetImageFormat(sig, image);
	if (sig.IsSignalled()) return Value::Null;
	GLenum type = GL_UNSIGNED_BYTE;
	const GLvoid *pixels = reinterpret_cast<const GLvoid *>(image->GetBuffer());
	glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
	return Value::Null;
}

// opengl.glTexImage2D
Gura_DeclareFunction(glTexImage2D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalformat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "border", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "image", VTYPE_image, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexImage2D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLint internalformat = args.GetInt(2);
	GLint border = args.GetInt(3);
	Image *image = Object_image::GetObject(args, 4)->GetImage();
	GLsizei width = static_cast<GLsizei>(image->GetWidth()) + border * 2;
	GLsizei height = static_cast<GLsizei>(image->GetHeight()) + border * 2;
	GLenum format = GetImageFormat(sig, image);
	if (sig.IsSignalled()) return Value::Null;
	GLenum type = GL_UNSIGNED_BYTE;
	const GLvoid *pixels = reinterpret_cast<const GLvoid *>(image->GetBuffer());
	glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
	return Value::Null;
}

// opengl.glTexParameterf
Gura_DeclareFunction(glTexParameterf)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexParameterf)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLfloat param = args.GetFloat(2);
	glTexParameterf(target, pname, param);
	return Value::Null;
}

// opengl.glTexParameterfv
Gura_DeclareFunction(glTexParameterfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexParameterfv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLfloat> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glTexParameterfv(target, pname, params);
	return Value::Null;
}

// opengl.glTexParameteri
Gura_DeclareFunction(glTexParameteri)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "param", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexParameteri)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	GLint param = args.GetInt(2);
	glTexParameteri(target, pname, param);
	return Value::Null;
}

// opengl.glTexParameteriv
Gura_DeclareFunction(glTexParameteriv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "pname", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexParameteriv)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLenum pname = static_cast<GLenum>(args.GetInt(1));
	CArray<GLint> params = args.GetList(2);
	if (!CheckParamCount(pname, params.GetSize())) {
		sig.SetError(ERR_ValueError,
				"the list must have %d elements", GetParamCount(pname));
		return Value::Null;
	}
	glTexParameteriv(target, pname, params);
	return Value::Null;
}

// opengl.glTexSubImage1D
Gura_DeclareFunction(glTexSubImage1D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "xoffset", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "image", VTYPE_image, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexSubImage1D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLint xoffset = args.GetInt(2);
	Image *image = Object_image::GetObject(args, 3)->GetImage();
	GLsizei width = static_cast<GLsizei>(image->GetWidth());
	GLenum format = GetImageFormat(sig, image);
	if (sig.IsSignalled()) return Value::Null;
	GLenum type = GL_UNSIGNED_BYTE;
	const GLvoid *pixels = reinterpret_cast<const GLvoid *>(image->GetBuffer());
	glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
	return Value::Null;
}

// opengl.glTexSubImage2D
Gura_DeclareFunction(glTexSubImage2D)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "level", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "xoffset", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "yoffset", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "image", VTYPE_image, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTexSubImage2D)
{
	GLenum target = static_cast<GLenum>(args.GetInt(0));
	GLint level = args.GetInt(1);
	GLint xoffset = args.GetInt(2);
	GLint yoffset = args.GetInt(3);
	Image *image = Object_image::GetObject(args, 4)->GetImage();
	GLsizei width = static_cast<GLsizei>(image->GetWidth());
	GLsizei height = static_cast<GLsizei>(image->GetHeight());
	GLenum format = GetImageFormat(sig, image);
	if (sig.IsSignalled()) return Value::Null;
	GLenum type = GL_UNSIGNED_BYTE;
	const GLvoid *pixels = reinterpret_cast<const GLvoid *>(image->GetBuffer());
	glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
	return Value::Null;
}

// opengl.glTranslated
Gura_DeclareFunction(glTranslated)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTranslated)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	GLdouble z = args.GetDouble(2);
	glTranslated(x, y, z);
	return Value::Null;
}

// opengl.glTranslatef
Gura_DeclareFunction(glTranslatef)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glTranslatef)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	GLfloat z = args.GetFloat(2);
	glTranslatef(x, y, z);
	return Value::Null;
}

// opengl.glVertex2d
Gura_DeclareFunction(glVertex2d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2d)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	glVertex2d(x, y);
	return Value::Null;
}

// opengl.glVertex2dv
Gura_DeclareFunction(glVertex2dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glVertex2dv(v);
	return Value::Null;
}

// opengl.glVertex2f
Gura_DeclareFunction(glVertex2f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2f)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	glVertex2f(x, y);
	return Value::Null;
}

// opengl.glVertex2fv
Gura_DeclareFunction(glVertex2fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glVertex2fv(v);
	return Value::Null;
}

// opengl.glVertex2i
Gura_DeclareFunction(glVertex2i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2i)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	glVertex2i(x, y);
	return Value::Null;
}

// opengl.glVertex2iv
Gura_DeclareFunction(glVertex2iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glVertex2iv(v);
	return Value::Null;
}

// opengl.glVertex2s
Gura_DeclareFunction(glVertex2s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2s)
{
	GLshort x = args.GetShort(0);
	GLshort y = args.GetShort(1);
	glVertex2s(x, y);
	return Value::Null;
}

// opengl.glVertex2sv
Gura_DeclareFunction(glVertex2sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex2sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 2) {
		sig.SetError(ERR_ValueError, "the list must have two elements");
		return Value::Null;
	}
	glVertex2sv(v);
	return Value::Null;
}

// opengl.glVertex3d
Gura_DeclareFunction(glVertex3d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3d)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	GLdouble z = args.GetDouble(2);
	glVertex3d(x, y, z);
	return Value::Null;
}

// opengl.glVertex3dv
Gura_DeclareFunction(glVertex3dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glVertex3dv(v);
	return Value::Null;
}

// opengl.glVertex3f
Gura_DeclareFunction(glVertex3f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3f)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	GLfloat z = args.GetFloat(2);
	glVertex3f(x, y, z);
	return Value::Null;
}

// opengl.glVertex3fv
Gura_DeclareFunction(glVertex3fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glVertex3fv(v);
	return Value::Null;
}

// opengl.glVertex3i
Gura_DeclareFunction(glVertex3i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3i)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLint z = args.GetInt(2);
	glVertex3i(x, y, z);
	return Value::Null;
}

// opengl.glVertex3iv
Gura_DeclareFunction(glVertex3iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glVertex3iv(v);
	return Value::Null;
}

// opengl.glVertex3s
Gura_DeclareFunction(glVertex3s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3s)
{
	GLshort x = args.GetShort(0);
	GLshort y = args.GetShort(1);
	GLshort z = args.GetShort(2);
	glVertex3s(x, y, z);
	return Value::Null;
}

// opengl.glVertex3sv
Gura_DeclareFunction(glVertex3sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex3sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 3) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glVertex3sv(v);
	return Value::Null;
}

// opengl.glVertex4d
Gura_DeclareFunction(glVertex4d)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4d)
{
	GLdouble x = args.GetDouble(0);
	GLdouble y = args.GetDouble(1);
	GLdouble z = args.GetDouble(2);
	GLdouble w = args.GetDouble(3);
	glVertex4d(x, y, z, w);
	return Value::Null;
}

// opengl.glVertex4dv
Gura_DeclareFunction(glVertex4dv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4dv)
{
	CArray<GLdouble> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glVertex4dv(v);
	return Value::Null;
}

// opengl.glVertex4f
Gura_DeclareFunction(glVertex4f)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4f)
{
	GLfloat x = args.GetFloat(0);
	GLfloat y = args.GetFloat(1);
	GLfloat z = args.GetFloat(2);
	GLfloat w = args.GetFloat(3);
	glVertex4f(x, y, z, w);
	return Value::Null;
}

// opengl.glVertex4fv
Gura_DeclareFunction(glVertex4fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4fv)
{
	CArray<GLfloat> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have four elements");
		return Value::Null;
	}
	glVertex4fv(v);
	return Value::Null;
}

// opengl.glVertex4i
Gura_DeclareFunction(glVertex4i)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4i)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLint z = args.GetInt(2);
	GLint w = args.GetInt(3);
	glVertex4i(x, y, z, w);
	return Value::Null;
}

// opengl.glVertex4iv
Gura_DeclareFunction(glVertex4iv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4iv)
{
	CArray<GLint> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glVertex4iv(v);
	return Value::Null;
}

// opengl.glVertex4s
Gura_DeclareFunction(glVertex4s)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "z", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "w", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4s)
{
	GLshort x = args.GetShort(0);
	GLshort y = args.GetShort(1);
	GLshort z = args.GetShort(2);
	GLshort w = args.GetShort(3);
	glVertex4s(x, y, z, w);
	return Value::Null;
}

// opengl.glVertex4sv
Gura_DeclareFunction(glVertex4sv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "v", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glVertex4sv)
{
	CArray<GLshort> v = args.GetList(0);
	if (v.GetSize() != 4) {
		sig.SetError(ERR_ValueError, "the list must have three elements");
		return Value::Null;
	}
	glVertex4sv(v);
	return Value::Null;
}

// opengl.glViewport
Gura_DeclareFunction(glViewport)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glViewport)
{
	GLint x = args.GetInt(0);
	GLint y = args.GetInt(1);
	GLsizei width = args.GetInt(2);
	GLsizei height = args.GetInt(3);
	glViewport(x, y, width, height);
	return Value::Null;
}

// opengl.glGetAttachedShaders
Gura_DeclareFunction(glGetAttachedShaders)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "maxCount", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "shaders", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetAttachedShaders)
{
#if 0
	GLuint program = args.GetUInt(0);
	GLsizei maxCount = args.GetInt(1);
	CArray<GLsizei> count = args.GetList(2);
	CArray<GLuint> shaders = args.GetList(3);
	glGetAttachedShaders(program, maxCount, count, shaders);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetAttachedShaders");
	return Value::Null;
}

// opengl.glGetShaderInfoLog
Gura_DeclareFunction(glGetShaderInfoLog)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "shader", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bufSize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "length", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "infoLog", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetShaderInfoLog)
{
#if 0
	GLuint shader = args.GetUInt(0);
	GLsizei bufSize = args.GetInt(1);
	CArray<GLsizei> length = args.GetList(2);
	CArray<GLchar> infoLog = args.GetList(3);
	glGetShaderInfoLog(shader, bufSize, length, infoLog);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetShaderInfoLog");
	return Value::Null;
}

// opengl.glGetProgramInfoLog
Gura_DeclareFunction(glGetProgramInfoLog)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bufSize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "length", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "infoLog", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetProgramInfoLog)
{
#if 0
	GLuint program = args.GetUInt(0);
	GLsizei bufSize = args.GetInt(1);
	CArray<GLsizei> length = args.GetList(2);
	CArray<GLchar> infoLog = args.GetList(3);
	glGetProgramInfoLog(program, bufSize, length, infoLog);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetProgramInfoLog");
	return Value::Null;
}

// opengl.glGetUniformLocation
Gura_DeclareFunction(glGetUniformLocation)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetUniformLocation)
{
#if 0
	GLuint program = args.GetUInt(0);
	CArray<GLchar> name = args.GetList(1);
	GLint _rtn = glGetUniformLocation(program, name);
	return ReturnValue(env, sig, args, Value(_rtn));
#endif
	SetError_NotImpFunction(sig, "glGetUniformLocation");
	return Value::Null;
}

// opengl.glGetActiveUniform
Gura_DeclareFunction(glGetActiveUniform)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "index", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bufSize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "length", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetActiveUniform)
{
#if 0
	GLuint program = args.GetUInt(0);
	GLuint index = args.GetUInt(1);
	GLsizei bufSize = args.GetInt(2);
	CArray<GLsizei> length = args.GetList(3);
	CArray<GLint> size = args.GetList(4);
	CArray<GLenum> type = args.GetList(5);
	CArray<GLchar> name = args.GetList(6);
	glGetActiveUniform(program, index, bufSize, length, size, type, name);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetActiveUniform");
	return Value::Null;
}

// opengl.glGetUniformfv
Gura_DeclareFunction(glGetUniformfv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetUniformfv)
{
#if 0
	GLuint program = args.GetUInt(0);
	GLint location = args.GetInt(1);
	CArray<GLfloat> params = args.GetList(2);
	glGetUniformfv(program, location, params);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetUniformfv");
	return Value::Null;
}

// opengl.glGetUniformiv
Gura_DeclareFunction(glGetUniformiv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "params", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetUniformiv)
{
#if 0
	GLuint program = args.GetUInt(0);
	GLint location = args.GetInt(1);
	CArray<GLint> params = args.GetList(2);
	glGetUniformiv(program, location, params);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetUniformiv");
	return Value::Null;
}

// opengl.glGetShaderSource
Gura_DeclareFunction(glGetShaderSource)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "shader", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bufSize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "length", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "source", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetShaderSource)
{
#if 0
	GLuint shader = args.GetUInt(0);
	GLsizei bufSize = args.GetInt(1);
	CArray<GLsizei> length = args.GetList(2);
	CArray<GLchar> source = args.GetList(3);
	glGetShaderSource(shader, bufSize, length, source);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetShaderSource");
	return Value::Null;
}

// opengl.glBindAttribLocation
Gura_DeclareFunction(glBindAttribLocation)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "index", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glBindAttribLocation)
{
#if 0
	GLuint program = args.GetUInt(0);
	GLuint index = args.GetUInt(1);
	CArray<GLchar> name = args.GetList(2);
	glBindAttribLocation(program, index, name);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glBindAttribLocation");
	return Value::Null;
}

// opengl.glGetActiveAttrib
Gura_DeclareFunction(glGetActiveAttrib)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "index", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bufSize", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "length", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "size", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_List);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetActiveAttrib)
{
#if 0
	GLuint program = args.GetUInt(0);
	GLuint index = args.GetUInt(1);
	GLsizei bufSize = args.GetInt(2);
	CArray<GLsizei> length = args.GetList(3);
	CArray<GLint> size = args.GetList(4);
	CArray<GLenum> type = args.GetList(5);
	CArray<GLchar> name = args.GetList(6);
	glGetActiveAttrib(program, index, bufSize, length, size, type, name);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glGetActiveAttrib");
	return Value::Null;
}

// opengl.glGetAttribLocation
Gura_DeclareFunction(glGetAttribLocation)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_Map);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "program", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glGetAttribLocation)
{
#if 0
	GLuint program = args.GetUInt(0);
	CArray<GLchar> name = args.GetList(1);
	GLint _rtn = glGetAttribLocation(program, name);
	return ReturnValue(env, sig, args, Value(_rtn));
#endif
	SetError_NotImpFunction(sig, "glGetAttribLocation");
	return Value::Null;
}

// opengl.glUniformMatrix2x3fv
Gura_DeclareFunction(glUniformMatrix2x3fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "transpose", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glUniformMatrix2x3fv)
{
#if 0
	GLint location = args.GetInt(0);
	GLsizei count = args.GetInt(1);
	GLboolean transpose = (args.GetBoolean(2)? GL_TRUE : GL_FALSE);
	CArray<GLfloat> value = args.GetList(3);
	glUniformMatrix2x3fv(location, count, transpose, value);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glUniformMatrix2x3fv");
	return Value::Null;
}

// opengl.glUniformMatrix3x2fv
Gura_DeclareFunction(glUniformMatrix3x2fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "transpose", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glUniformMatrix3x2fv)
{
#if 0
	GLint location = args.GetInt(0);
	GLsizei count = args.GetInt(1);
	GLboolean transpose = (args.GetBoolean(2)? GL_TRUE : GL_FALSE);
	CArray<GLfloat> value = args.GetList(3);
	glUniformMatrix3x2fv(location, count, transpose, value);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glUniformMatrix3x2fv");
	return Value::Null;
}

// opengl.glUniformMatrix2x4fv
Gura_DeclareFunction(glUniformMatrix2x4fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "transpose", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glUniformMatrix2x4fv)
{
#if 0
	GLint location = args.GetInt(0);
	GLsizei count = args.GetInt(1);
	GLboolean transpose = (args.GetBoolean(2)? GL_TRUE : GL_FALSE);
	CArray<GLfloat> value = args.GetList(3);
	glUniformMatrix2x4fv(location, count, transpose, value);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glUniformMatrix2x4fv");
	return Value::Null;
}

// opengl.glUniformMatrix4x2fv
Gura_DeclareFunction(glUniformMatrix4x2fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "transpose", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glUniformMatrix4x2fv)
{
#if 0
	GLint location = args.GetInt(0);
	GLsizei count = args.GetInt(1);
	GLboolean transpose = (args.GetBoolean(2)? GL_TRUE : GL_FALSE);
	CArray<GLfloat> value = args.GetList(3);
	glUniformMatrix4x2fv(location, count, transpose, value);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glUniformMatrix4x2fv");
	return Value::Null;
}

// opengl.glUniformMatrix3x4fv
Gura_DeclareFunction(glUniformMatrix3x4fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "transpose", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glUniformMatrix3x4fv)
{
#if 0
	GLint location = args.GetInt(0);
	GLsizei count = args.GetInt(1);
	GLboolean transpose = (args.GetBoolean(2)? GL_TRUE : GL_FALSE);
	CArray<GLfloat> value = args.GetList(3);
	glUniformMatrix3x4fv(location, count, transpose, value);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glUniformMatrix3x4fv");
	return Value::Null;
}

// opengl.glUniformMatrix4x3fv
Gura_DeclareFunction(glUniformMatrix4x3fv)
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_Map);
	DeclareArg(env, "location", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "count", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "transpose", VTYPE_boolean, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_List);
	AddHelp(
		Gura_Symbol(en), Help::FMT_markdown,
		"");
}

Gura_ImplementFunction(glUniformMatrix4x3fv)
{
#if 0
	GLint location = args.GetInt(0);
	GLsizei count = args.GetInt(1);
	GLboolean transpose = (args.GetBoolean(2)? GL_TRUE : GL_FALSE);
	CArray<GLfloat> value = args.GetList(3);
	glUniformMatrix4x3fv(location, count, transpose, value);
	return Value::Null;
#endif
	SetError_NotImpFunction(sig, "glUniformMatrix4x3fv");
	return Value::Null;
}


void AssignFunctions(Environment &env)
{
	Gura_AssignFunction(glAccum);
	Gura_AssignFunction(glAlphaFunc);
	Gura_AssignFunction(glAreTexturesResident);
	Gura_AssignFunction(glArrayElement);
	Gura_AssignFunction(glBegin);
	Gura_AssignFunction(glBindTexture);
	Gura_AssignFunction(glBitmap);
	Gura_AssignFunction(glBlendFunc);
	Gura_AssignFunction(glCallList);
	Gura_AssignFunction(glCallLists);
	Gura_AssignFunction(glClear);
	Gura_AssignFunction(glClearAccum);
	Gura_AssignFunction(glClearColor);
	Gura_AssignFunction(glClearDepth);
	Gura_AssignFunction(glClearIndex);
	Gura_AssignFunction(glClearStencil);
	Gura_AssignFunction(glClipPlane);
	Gura_AssignFunction(glColor3b);
	Gura_AssignFunction(glColor3bv);
	Gura_AssignFunction(glColor3d);
	Gura_AssignFunction(glColor3dv);
	Gura_AssignFunction(glColor3f);
	Gura_AssignFunction(glColor3fv);
	Gura_AssignFunction(glColor3i);
	Gura_AssignFunction(glColor3iv);
	Gura_AssignFunction(glColor3s);
	Gura_AssignFunction(glColor3sv);
	Gura_AssignFunction(glColor3ub);
	Gura_AssignFunction(glColor3ubv);
	Gura_AssignFunction(glColor3ui);
	Gura_AssignFunction(glColor3uiv);
	Gura_AssignFunction(glColor3us);
	Gura_AssignFunction(glColor3usv);
	Gura_AssignFunction(glColor4b);
	Gura_AssignFunction(glColor4bv);
	Gura_AssignFunction(glColor4d);
	Gura_AssignFunction(glColor4dv);
	Gura_AssignFunction(glColor4f);
	Gura_AssignFunction(glColor4fv);
	Gura_AssignFunction(glColor4i);
	Gura_AssignFunction(glColor4iv);
	Gura_AssignFunction(glColor4s);
	Gura_AssignFunction(glColor4sv);
	Gura_AssignFunction(glColor4ub);
	Gura_AssignFunction(glColor4ubv);
	Gura_AssignFunction(glColor4ui);
	Gura_AssignFunction(glColor4uiv);
	Gura_AssignFunction(glColor4us);
	Gura_AssignFunction(glColor4usv);
	Gura_AssignFunction(glColorMask);
	Gura_AssignFunction(glColorMaterial);
	Gura_AssignFunction(glCopyPixels);
	Gura_AssignFunction(glCopyTexImage1D);
	Gura_AssignFunction(glCopyTexImage2D);
	Gura_AssignFunction(glCopyTexSubImage1D);
	Gura_AssignFunction(glCopyTexSubImage2D);
	Gura_AssignFunction(glCullFace);
	Gura_AssignFunction(glDeleteLists);
	Gura_AssignFunction(glDeleteTextures);
	Gura_AssignFunction(glDepthFunc);
	Gura_AssignFunction(glDepthMask);
	Gura_AssignFunction(glDepthRange);
	Gura_AssignFunction(glDisable);
	Gura_AssignFunction(glDisableClientState);
	Gura_AssignFunction(glDrawArrays);
	Gura_AssignFunction(glDrawBuffer);
	Gura_AssignFunction(glDrawPixels);
	Gura_AssignFunction(glEdgeFlag);
	Gura_AssignFunction(glEdgeFlagv);
	Gura_AssignFunction(glEnable);
	Gura_AssignFunction(glEnableClientState);
	Gura_AssignFunction(glEnd);
	Gura_AssignFunction(glEndList);
	Gura_AssignFunction(glEvalCoord1d);
	Gura_AssignFunction(glEvalCoord1dv);
	Gura_AssignFunction(glEvalCoord1f);
	Gura_AssignFunction(glEvalCoord1fv);
	Gura_AssignFunction(glEvalCoord2d);
	Gura_AssignFunction(glEvalCoord2dv);
	Gura_AssignFunction(glEvalCoord2f);
	Gura_AssignFunction(glEvalCoord2fv);
	Gura_AssignFunction(glEvalMesh1);
	Gura_AssignFunction(glEvalMesh2);
	Gura_AssignFunction(glEvalPoint1);
	Gura_AssignFunction(glEvalPoint2);
	Gura_AssignFunction(glFeedbackBuffer);
	Gura_AssignFunction(glFinish);
	Gura_AssignFunction(glFlush);
	Gura_AssignFunction(glFogf);
	Gura_AssignFunction(glFogfv);
	Gura_AssignFunction(glFogi);
	Gura_AssignFunction(glFogiv);
	Gura_AssignFunction(glFrontFace);
	Gura_AssignFunction(glFrustum);
	Gura_AssignFunction(glGenLists);
	Gura_AssignFunction(glGenTextures);
	Gura_AssignFunction(glGetBooleanv);
	Gura_AssignFunction(glGetClipPlane);
	Gura_AssignFunction(glGetDoublev);
	Gura_AssignFunction(glGetError);
	Gura_AssignFunction(glGetFloatv);
	Gura_AssignFunction(glGetIntegerv);
	Gura_AssignFunction(glGetLightfv);
	Gura_AssignFunction(glGetLightiv);
	Gura_AssignFunction(glGetMapdv);
	Gura_AssignFunction(glGetMapfv);
	Gura_AssignFunction(glGetMapiv);
	Gura_AssignFunction(glGetMaterialfv);
	Gura_AssignFunction(glGetMaterialiv);
	Gura_AssignFunction(glGetPixelMapfv);
	Gura_AssignFunction(glGetPixelMapuiv);
	Gura_AssignFunction(glGetPixelMapusv);
	Gura_AssignFunction(glGetPolygonStipple);
	Gura_AssignFunction(glGetString);
	Gura_AssignFunction(glGetTexEnvfv);
	Gura_AssignFunction(glGetTexEnviv);
	Gura_AssignFunction(glGetTexGendv);
	Gura_AssignFunction(glGetTexGenfv);
	Gura_AssignFunction(glGetTexGeniv);
	Gura_AssignFunction(glGetTexLevelParameterfv);
	Gura_AssignFunction(glGetTexLevelParameteriv);
	Gura_AssignFunction(glGetTexParameterfv);
	Gura_AssignFunction(glGetTexParameteriv);
	Gura_AssignFunction(glHint);
	Gura_AssignFunction(glIndexMask);
	Gura_AssignFunction(glIndexd);
	Gura_AssignFunction(glIndexdv);
	Gura_AssignFunction(glIndexf);
	Gura_AssignFunction(glIndexfv);
	Gura_AssignFunction(glIndexi);
	Gura_AssignFunction(glIndexiv);
	Gura_AssignFunction(glIndexs);
	Gura_AssignFunction(glIndexsv);
	Gura_AssignFunction(glIndexub);
	Gura_AssignFunction(glIndexubv);
	Gura_AssignFunction(glInitNames);
	Gura_AssignFunction(glIsEnabled);
	Gura_AssignFunction(glIsList);
	Gura_AssignFunction(glIsTexture);
	Gura_AssignFunction(glLightModelf);
	Gura_AssignFunction(glLightModelfv);
	Gura_AssignFunction(glLightModeli);
	Gura_AssignFunction(glLightModeliv);
	Gura_AssignFunction(glLightf);
	Gura_AssignFunction(glLightfv);
	Gura_AssignFunction(glLighti);
	Gura_AssignFunction(glLightiv);
	Gura_AssignFunction(glLineStipple);
	Gura_AssignFunction(glLineWidth);
	Gura_AssignFunction(glListBase);
	Gura_AssignFunction(glLoadIdentity);
	Gura_AssignFunction(glLoadMatrixd);
	Gura_AssignFunction(glLoadMatrixf);
	Gura_AssignFunction(glLoadName);
	Gura_AssignFunction(glLogicOp);
	Gura_AssignFunction(glMap1d);
	Gura_AssignFunction(glMap1f);
	Gura_AssignFunction(glMap2d);
	Gura_AssignFunction(glMap2f);
	Gura_AssignFunction(glMapGrid1d);
	Gura_AssignFunction(glMapGrid1f);
	Gura_AssignFunction(glMapGrid2d);
	Gura_AssignFunction(glMapGrid2f);
	Gura_AssignFunction(glMaterialf);
	Gura_AssignFunction(glMaterialfv);
	Gura_AssignFunction(glMateriali);
	Gura_AssignFunction(glMaterialiv);
	Gura_AssignFunction(glMatrixMode);
	Gura_AssignFunction(glMultMatrixd);
	Gura_AssignFunction(glMultMatrixf);
	Gura_AssignFunction(glNewList);
	Gura_AssignFunction(glNormal3b);
	Gura_AssignFunction(glNormal3bv);
	Gura_AssignFunction(glNormal3d);
	Gura_AssignFunction(glNormal3dv);
	Gura_AssignFunction(glNormal3f);
	Gura_AssignFunction(glNormal3fv);
	Gura_AssignFunction(glNormal3i);
	Gura_AssignFunction(glNormal3iv);
	Gura_AssignFunction(glNormal3s);
	Gura_AssignFunction(glNormal3sv);
	Gura_AssignFunction(glOrtho);
	Gura_AssignFunction(glPassThrough);
	Gura_AssignFunction(glPixelMapfv);
	Gura_AssignFunction(glPixelMapuiv);
	Gura_AssignFunction(glPixelMapusv);
	Gura_AssignFunction(glPixelStoref);
	Gura_AssignFunction(glPixelStorei);
	Gura_AssignFunction(glPixelTransferf);
	Gura_AssignFunction(glPixelTransferi);
	Gura_AssignFunction(glPixelZoom);
	Gura_AssignFunction(glPointSize);
	Gura_AssignFunction(glPolygonMode);
	Gura_AssignFunction(glPolygonOffset);
	Gura_AssignFunction(glPolygonStipple);
	Gura_AssignFunction(glPopAttrib);
	Gura_AssignFunction(glPopClientAttrib);
	Gura_AssignFunction(glPopMatrix);
	Gura_AssignFunction(glPopName);
	Gura_AssignFunction(glPrioritizeTextures);
	Gura_AssignFunction(glPushAttrib);
	Gura_AssignFunction(glPushClientAttrib);
	Gura_AssignFunction(glPushMatrix);
	Gura_AssignFunction(glPushName);
	Gura_AssignFunction(glRasterPos2d);
	Gura_AssignFunction(glRasterPos2dv);
	Gura_AssignFunction(glRasterPos2f);
	Gura_AssignFunction(glRasterPos2fv);
	Gura_AssignFunction(glRasterPos2i);
	Gura_AssignFunction(glRasterPos2iv);
	Gura_AssignFunction(glRasterPos2s);
	Gura_AssignFunction(glRasterPos2sv);
	Gura_AssignFunction(glRasterPos3d);
	Gura_AssignFunction(glRasterPos3dv);
	Gura_AssignFunction(glRasterPos3f);
	Gura_AssignFunction(glRasterPos3fv);
	Gura_AssignFunction(glRasterPos3i);
	Gura_AssignFunction(glRasterPos3iv);
	Gura_AssignFunction(glRasterPos3s);
	Gura_AssignFunction(glRasterPos3sv);
	Gura_AssignFunction(glRasterPos4d);
	Gura_AssignFunction(glRasterPos4dv);
	Gura_AssignFunction(glRasterPos4f);
	Gura_AssignFunction(glRasterPos4fv);
	Gura_AssignFunction(glRasterPos4i);
	Gura_AssignFunction(glRasterPos4iv);
	Gura_AssignFunction(glRasterPos4s);
	Gura_AssignFunction(glRasterPos4sv);
	Gura_AssignFunction(glReadBuffer);
	Gura_AssignFunction(glReadPixels);
	Gura_AssignFunction(glRectd);
	Gura_AssignFunction(glRectdv);
	Gura_AssignFunction(glRectf);
	Gura_AssignFunction(glRectfv);
	Gura_AssignFunction(glRecti);
	Gura_AssignFunction(glRectiv);
	Gura_AssignFunction(glRects);
	Gura_AssignFunction(glRectsv);
	Gura_AssignFunction(glRenderMode);
	Gura_AssignFunction(glRotated);
	Gura_AssignFunction(glRotatef);
	Gura_AssignFunction(glScaled);
	Gura_AssignFunction(glScalef);
	Gura_AssignFunction(glScissor);
	Gura_AssignFunction(glSelectBuffer);
	Gura_AssignFunction(glShadeModel);
	Gura_AssignFunction(glStencilFunc);
	Gura_AssignFunction(glStencilMask);
	Gura_AssignFunction(glStencilOp);
	Gura_AssignFunction(glTexCoord1d);
	Gura_AssignFunction(glTexCoord1dv);
	Gura_AssignFunction(glTexCoord1f);
	Gura_AssignFunction(glTexCoord1fv);
	Gura_AssignFunction(glTexCoord1i);
	Gura_AssignFunction(glTexCoord1iv);
	Gura_AssignFunction(glTexCoord1s);
	Gura_AssignFunction(glTexCoord1sv);
	Gura_AssignFunction(glTexCoord2d);
	Gura_AssignFunction(glTexCoord2dv);
	Gura_AssignFunction(glTexCoord2f);
	Gura_AssignFunction(glTexCoord2fv);
	Gura_AssignFunction(glTexCoord2i);
	Gura_AssignFunction(glTexCoord2iv);
	Gura_AssignFunction(glTexCoord2s);
	Gura_AssignFunction(glTexCoord2sv);
	Gura_AssignFunction(glTexCoord3d);
	Gura_AssignFunction(glTexCoord3dv);
	Gura_AssignFunction(glTexCoord3f);
	Gura_AssignFunction(glTexCoord3fv);
	Gura_AssignFunction(glTexCoord3i);
	Gura_AssignFunction(glTexCoord3iv);
	Gura_AssignFunction(glTexCoord3s);
	Gura_AssignFunction(glTexCoord3sv);
	Gura_AssignFunction(glTexCoord4d);
	Gura_AssignFunction(glTexCoord4dv);
	Gura_AssignFunction(glTexCoord4f);
	Gura_AssignFunction(glTexCoord4fv);
	Gura_AssignFunction(glTexCoord4i);
	Gura_AssignFunction(glTexCoord4iv);
	Gura_AssignFunction(glTexCoord4s);
	Gura_AssignFunction(glTexCoord4sv);
	Gura_AssignFunction(glTexEnvf);
	Gura_AssignFunction(glTexEnvfv);
	Gura_AssignFunction(glTexEnvi);
	Gura_AssignFunction(glTexEnviv);
	Gura_AssignFunction(glTexGend);
	Gura_AssignFunction(glTexGendv);
	Gura_AssignFunction(glTexGenf);
	Gura_AssignFunction(glTexGenfv);
	Gura_AssignFunction(glTexGeni);
	Gura_AssignFunction(glTexGeniv);
	Gura_AssignFunction(glTexImage1D);
	Gura_AssignFunction(glTexImage2D);
	Gura_AssignFunction(glTexParameterf);
	Gura_AssignFunction(glTexParameterfv);
	Gura_AssignFunction(glTexParameteri);
	Gura_AssignFunction(glTexParameteriv);
	Gura_AssignFunction(glTexSubImage1D);
	Gura_AssignFunction(glTexSubImage2D);
	Gura_AssignFunction(glTranslated);
	Gura_AssignFunction(glTranslatef);
	Gura_AssignFunction(glVertex2d);
	Gura_AssignFunction(glVertex2dv);
	Gura_AssignFunction(glVertex2f);
	Gura_AssignFunction(glVertex2fv);
	Gura_AssignFunction(glVertex2i);
	Gura_AssignFunction(glVertex2iv);
	Gura_AssignFunction(glVertex2s);
	Gura_AssignFunction(glVertex2sv);
	Gura_AssignFunction(glVertex3d);
	Gura_AssignFunction(glVertex3dv);
	Gura_AssignFunction(glVertex3f);
	Gura_AssignFunction(glVertex3fv);
	Gura_AssignFunction(glVertex3i);
	Gura_AssignFunction(glVertex3iv);
	Gura_AssignFunction(glVertex3s);
	Gura_AssignFunction(glVertex3sv);
	Gura_AssignFunction(glVertex4d);
	Gura_AssignFunction(glVertex4dv);
	Gura_AssignFunction(glVertex4f);
	Gura_AssignFunction(glVertex4fv);
	Gura_AssignFunction(glVertex4i);
	Gura_AssignFunction(glVertex4iv);
	Gura_AssignFunction(glVertex4s);
	Gura_AssignFunction(glVertex4sv);
	Gura_AssignFunction(glViewport);
	Gura_AssignFunction(glGetAttachedShaders);
	Gura_AssignFunction(glGetShaderInfoLog);
	Gura_AssignFunction(glGetProgramInfoLog);
	Gura_AssignFunction(glGetUniformLocation);
	Gura_AssignFunction(glGetActiveUniform);
	Gura_AssignFunction(glGetUniformfv);
	Gura_AssignFunction(glGetUniformiv);
	Gura_AssignFunction(glGetShaderSource);
	Gura_AssignFunction(glBindAttribLocation);
	Gura_AssignFunction(glGetActiveAttrib);
	Gura_AssignFunction(glGetAttribLocation);
	Gura_AssignFunction(glUniformMatrix2x3fv);
	Gura_AssignFunction(glUniformMatrix3x2fv);
	Gura_AssignFunction(glUniformMatrix2x4fv);
	Gura_AssignFunction(glUniformMatrix4x2fv);
	Gura_AssignFunction(glUniformMatrix3x4fv);
	Gura_AssignFunction(glUniformMatrix4x3fv);
}

Gura_EndModuleScope(opengl)

#!/usr/bin/env gura
import(sdl2, sdl)
import(gif)
import(jpeg)
import(freetype)

I(filename:string) = path.join(sys.datadir, 'sample', 'resource', filename)
sdl.Init(sdl.INIT_EVERYTHING)
[wdScreen, htScreen] = [800, 600]
window = sdl.CreateWindow('sample',
	sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED, wdScreen, htScreen, 0)
renderer = sdl.CreateRenderer(window, -1, 0)
//screen = sdl.SetVideoMode(wdScreen, htScreen, 16, sdl.SWSURFACE)
wdImage = 200
imageBg = image(I('Winter.jpg'), `rgb).resize(wdScreen, htScreen)
imageText = image(`rgba, wdScreen, htScreen)
imagesL = gif.content(I('chicken-anim.gif'), `rgba).images::resize(wdImage)
imagesR = imagesL::flip(`horz)
xStep = wdImage / 10
font = freetype.font(I('Kaufmann_Bold_BT.ttf'))
font.height = 32, font.color = `white, font.mode = `alpha

texture = sdl.CreateTextureFromSurface(renderer, imagesL[0])
sdl.RenderCopy(renderer, texture, nil, sdl.Rect(100, 100, 100, 100))
sdl.RenderPresent(renderer)

Chicken = class {
	__init__(x:number, y:number, dir:symbol) = {
		[this.x, this.y] = [x, y]
		if (dir == `right) { this.turnRight() } else { this.turnLeft() }
	}
	turnRight():void = {
		this.xDir = xStep
		this.imageIter = imagesR.cycle()
	}
	turnLeft():void = {
		this.xDir = -xStep
		this.imageIter = imagesL.cycle()
	}
	doAction():void = {
		image = this.imageIter.next()
		sdl.BlitSurface(image, nil,
				renderer, sdl.Rect(this.x, this.y - image.height, 0, 0))
		this.x += this.xDir
		if (this.x + wdImage > wdScreen) { this.turnLeft() }
		if (this.x < 0) { this.turnRight() }
	}
}

chickens = repeat(3):list {
	x = rand(wdScreen - wdImage)
	y = rand(htScreen - wdImage) + wdImage
	dir = cond(rand() < .5, `left, `right)
	Chicken(x, y, dir)
}

/*
sdl.AddTimer(100) {
	sdl.BlitSurface(imageBg, nil, renderer, nil)
	imageText.clear()
	imageText.drawtext(font, 10, 50, 'Chickens: %d' % chickens.len())
	sdl.BlitSurface(imageText, nil, renderer, nil)
	chickens::doAction()
	screen.UpdateRect()
	true
}
*/

repeat {
	event = sdl.WaitEvent()
	if (event.type == sdl.QUIT) {
		break
	} elsif (event.type == sdl.KEYDOWN) {
		(event.sym == sdl.K_ESCAPE) && break
	} elsif (event.type == sdl.MOUSEBUTTONDOWN) {
		dir = choose(event.button, `left, `left, `right, `right)
		chickens.add(Chicken(event.x, event.y, dir))
	}
}

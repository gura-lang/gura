import(re)

text = R'''
//-----------------------------------------------------------------------------
// Basics - Initialization and Shutdown
Init
InitSubSystem
Quit
QuitSubSystem
SetMainReady
WasInit
//-----------------------------------------------------------------------------
// Basics - Configuration Variables
AddHintCallback
ClearHints
DelhintCallback
GetHint
SetHint
SetHintWithPriority
//-----------------------------------------------------------------------------
// Basics - Error Handling
ClearError
GetError
SetError
//-----------------------------------------------------------------------------
// Basics - Log Handling
Log
LogCritical
LogDebug
LogError
LogGetOutputFunction
LogGetPriority
LogInfo
LogMessage
LogMessageV
LogResetPriorities
LogSetAllPriority
LogSetOutputFunction
LogSetPriority
LogVerbose
LogWarn
//-----------------------------------------------------------------------------
// Basics - Assertions
GetAssertionHandler
GetAssertionReport
GetDefaultAssertionHandler
ResetAssertionReport
SetAssertionHandler
TriggerBreakpoint
assert
assert_paranoid
assert_release
//-----------------------------------------------------------------------------
// Basics - Querying SDL Version
GetRevision
GetRevisionNumber
GetVersion
//-----------------------------------------------------------------------------
// Video - Display and Window Management
CreateWindow
CreateWindowAndRenderer
CreateWindowFrom
Window#DestroyWindow
DisableScreenSaver
EnableScreenSaver
Window#GL_CreateContext
GLContext#DeleteContext
GL_ExtensionSupported
GL_GetAttribute
GL_GetCurrentContext
GL_GetCurrentWindow
GL_GetDrawableSize
GL_GetProcAddress
GL_GetSwapInterval
GL_LoadLibrary
Window#GL_MakeCurrent
GL_ResetAttributes
GL_SetAttribute
GL_SetSwapInterval
Window#GL_SwapWindow
GL_UnloadLibrary
GetClosestDisplayMode
GetCurrentDisplayMode
GetCurrentVideoDriver
GetDesktopDisplayMode
GetDisplayBounds
GetDisplayMode
GetDisplayName
GetNumDisplayModes
GetNumVideoDisplays
GetNumVideoDrivers
GetVideoDriver
Window#GetWindowBrightness
Window#GetWindowData
Window#GetWindowDisplayIndex
Window#GetWindowDisplayMode
Window#GetWindowFlags
GetWindowFromID
Window#GetWindowGammaRamp
Window#GetWindowGrab
Window#GetWindowID
Window#GetWindowMaximumSize
Window#GetWindowMinimumSize
Window#GetWindowPixelFormat
Window#GetWindowPosition
Window#GetWindowSize
Window#GetWindowSurface
Window#GetWindowTitle
Window#GetWindowWMInfo
Window#HideWindow
IsScreenSaverEnabled
Window#MaximizeWindow
Window#MinimizeWindow
Window#RaiseWindow
Window#ResotoreWindow
Window#SetWindowBordered
Window#SetWindowBrightness
Window#SetWindowData
Window#SetWindowDisplayMode
Window#SetWindowFullscreen
Window#SetWindowGammaRamp
Window#SetWindowGrab
Window#SetWindowHitTest
Window#SetWindowIcon
Window#SetWindowMaximumSize
Window#SetWindowMinimumSize
Window#SetWindowPosition
Window#SetWindowSize
Window#SetWindowTitle
//MessageBoxData#ShowMessageBox
ShowSimpleMessageBox
Window#ShowWindow
Window#UpdateWindowSurface
Window#UpdateWindowSurfaceRects
VideoInit
VideoQuit
//-----------------------------------------------------------------------------
// Video - 2D Accelerated Rendering
Window#CreateRenderer
Surface#CreateSoftwareRenderer
Renderer#CreateTexture
Renderer#CreateTextureFromSurface
//CreateWindowAndRenderer
Renderer#DestroyRenderer
Texture#DestroyTexture
Texture#GL_BindTexture
Texture#GL_UnbindTexture
GetNumRenderDrivers
Renderer#GetRenderDrawBlendMode
Renderer#GetRenderDrawColor
GetRenderDriverInfo
Renderer#GetRenderTarget
Window#GetRenderer
Renderer#GetRenderInfo
Renderer#GetRenderOutputSize
Texture#GetTextureAlphaMod
Texture#GetTextureBlendMode
Texture#GetTextureColorMod
Texture#LockTexture
Texture#QueryTexture
Renderer#RenderClear
Renderer#RenderCopy
Renderer#RenderCopyEx
Renderer#DrawLine
Renderer#DrawLines
Renderer#DrawPoint
Renderer#DrawPoints
Renderer#RenderDrawRect
Renderer#RenderDrawRects
Renderer#RenderFillRect
Renderer#RenderFillRects
Renderer#RenderGetClipRect
Renderer#RenderGetLogicalSize
Renderer#RenderGetScale
Renderer#RenderGetViewport
Renderer#RenderIsClipEnabled
Renderer#RenderPresent
Renderer#RenderReadPixels
Renderer#RenderSetClipRect
Renderer#RenderSetLogicalSize
Renderer#RenderSetScale
Renderer#RenderSetViewport
Renderer#RenderTargetSupported
Renderer#SetRenderDrawBlendMode
Renderer#SetRenderDrawColor
Renderer#SetRenderTarget
Texture#SetTextureAlphaMod
Texture#SetTextureBlendMode
Texture#SetTextureColorMod
Texture#UnlockTexture
Texture#UpdateTexture
Texture#UpdateYUVTexture
//-----------------------------------------------------------------------------
// Video - Pixel Formats and Conversion Routines
AllocFormat
AllocPalette
CalculateGammaRamp
PixelFormat#FreeFormat
Palette#FreePalette
GetPixelFormatName
PixelFormat#GetRGB
PixelFormat#GetRGBA
PixelFormat#MapRGB
PixelFormat#MapRGBA
MasksToPixelFormatEnum
PixelFormatEnumToMasks
Palette#SetPaletteColors
PixelFormat#SetPixelFormatPalette
//-----------------------------------------------------------------------------
// Video - Rectangle Functions
//-----------------------------------------------------------------------------
// Video - Surface Creation and Simple Drawing
//-----------------------------------------------------------------------------
// Video - Platform-specific Window Management
//-----------------------------------------------------------------------------
// Video - Clipboard Handling
//-----------------------------------------------------------------------------
// Input Events - Event Handling
//-----------------------------------------------------------------------------
// Input Events - Keyboard Support
//-----------------------------------------------------------------------------
// Input Events - Mouse Support
//-----------------------------------------------------------------------------
// Input Events - Joystick Support
//-----------------------------------------------------------------------------
// Input Events - Game Controller Support
//-----------------------------------------------------------------------------
// Force Feedback - Force Feedback Support
//-----------------------------------------------------------------------------
// Audio - Audio Device Management, Playing and Recording
//-----------------------------------------------------------------------------
// Threads - Thread Management
//-----------------------------------------------------------------------------
// Threads - Thread Synchronization Primitives
//-----------------------------------------------------------------------------
// Threads - Atomic Operations
//-----------------------------------------------------------------------------
// Timers - Timer Support
//-----------------------------------------------------------------------------
// File Abstraction - Filesystem Paths
//-----------------------------------------------------------------------------
// File Abstraction - File I/O Abstraction
//-----------------------------------------------------------------------------
// Shared Object Support - Shared Object Loading and Function Lookup
//-----------------------------------------------------------------------------
// Platform and CPU Information - Platform Detection
//-----------------------------------------------------------------------------
// Platform and CPU Information - CPU Feature Detection
//-----------------------------------------------------------------------------
// Platform and CPU Information - Byte Order and Byte Swapping
//-----------------------------------------------------------------------------
// Platform and CPU Information - Bit Manipulation
//-----------------------------------------------------------------------------
// Power Management - Power Management Status
//-----------------------------------------------------------------------------
// Additional - Platform-specific functionality
//-----------------------------------------------------------------------------
// Additional - Other

'''

tmplImplementFunction = R'''
// sdl2.${funcName}()
Gura_DeclareFunction(${funcName})
{
	SetMode(RSLTMODE_Normal, FLAG_None);
	AddHelp(Gura_Symbol(en), Help::FMT_markdown,
	"");
}

Gura_ImplementFunction(${funcName})
{
	//::SDL_${funcName}();
	SetError_NotImpFunction(sig, "${funcName}");
	return Value::Null;
}
'''.template()

tmplImplementMethod = R'''
// sdl2.${className}#${methodName}()
Gura_DeclareMethod(${className}, ${methodName})
{
	SetMode(RSLTMODE_Normal, FLAG_None);
	AddHelp(Gura_Symbol(en), Help::FMT_markdown,
	"");
}

Gura_ImplementMethod(${className}, ${methodName})
{
	//::SDL_${methodName}();
	SetError_NotImpMethod(sig, "${className}", "${methodName}");
	return Value::Null;
}
'''.template()

tmplAssignFunction = R'''
	Gura_AssignFunction(${funcName});
'''.template()

tmplAssignMethod = R'''
	Gura_AssignMethod(${className}, ${methodName});
'''.template()

funcNames = []
classDict = %{}
text.eachline {|line, i|
	line = line.strip()
	(line.startswith('//') || line.isempty()) && continue
	lineNo = i + 1
	if (m = line.match(r'^(\w+)#(\w+)$')) {
		className = m[1]
		methodName = m[2]
		if (!classDict.haskey(className)) {
			classDict[className] = []
		}
		methodNames = classDict[className]
		if (methodNames.find(methodName)) {
			sys.stderr.printf('%d: duplicated method %s\n', lineNo, methodName)
			sys.exit(1)
		}
		methodNames.add(methodName)
	} elsif (m = line.match(r'^(\w+)$')) {
		funcName = m[1]
		if (funcNames.find(funcName)) {
			sys.stderr.printf('%d: duplicated function %s\n', lineNo, funcName)
			sys.exit(1)
		}
		funcNames.add(funcName)
	} else {
		sys.stderr.printf('%d: invalid format\n', lineNo)
		sys.exit(1)
	}
}

println('--------')
funcNames.each {|funcName|
	tmplImplementFunction.render(sys.stdout)
	println()
}
classDict.keys {|className|
	println('--------')
	classDict[className].each {|methodName|
		tmplImplementMethod.render(sys.stdout)
	}
}
println('--------')
funcNames.each {|funcName|
	tmplAssignFunction.render(sys.stdout)
}
println('--------')
classDict.keys {|className|
	classDict[className].each {|methodName|
		tmplAssignMethod.render(sys.stdout)
	}
}

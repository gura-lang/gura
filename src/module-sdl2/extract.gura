import(re)

text = R'''
Init
InitSubSystem
Quit
QuitSubSystem
CreateWindow
CreateWindowAndRenderer
CreateWindowFrom
Window#DestroyWindow
DisableScreenSaver
EnableScreenSaver
Window#GL_CreateContext
GLContext#DeleteContext
GL_ExtensionSupported
GL_GetAttribute
GL_GetCurrentContext
GL_GetCurrentWindow
GL_GetDrawableSize
GL_GetProcAddress
GL_GetSwapInterval
GL_LoadLibrary
Window#GL_MakeCurrent
GL_ResetAttributes
GL_SetAttribute
GL_SetSwapInterval
Window#GL_SwapWindow
GL_UnloadLibrary
GetClosestDisplayMode
GetCurrentDisplayMode
GetCurrentVideoDriver
GetDesktopDisplayMode
GetDisplayBounds
GetDisplayMode
GetDisplayName
GetNumDisplayModes
GetNumVideoDisplays

Window#CreateRenderer
'''

tmplImplementFunction = R'''
// sdl2.${funcName}()
Gura_DeclareFunction(${funcName})
{
	SetMode(RSLTMODE_Normal, FLAG_None);
	AddHelp(Gura_Symbol(en), Help::FMT_markdown,
	"");
}

Gura_ImplementFunction(${funcName})
{
	//::SDL_${funcName}();
	return Value::Null;
}
'''.template()

tmplImplementMethod = R'''
// sdl2.${className}#${methodName}()
Gura_DeclareMethod(${className}, ${methodName})
{
	SetMode(RSLTMODE_Normal, FLAG_None);
	AddHelp(Gura_Symbol(en), Help::FMT_markdown,
	"");
}

Gura_ImplementMethod(${className}, ${methodName})
{
	//::SDL_${methodName}();
	return Value::Null;
}
'''.template()

tmplAssignFunction = R'''
	Gura_AssignFunction(${funcName});
'''.template()

tmplAssignMethod = R'''
	Gura_AssignMethod(${className}, ${methodName});
'''.template()

funcNames = []
classDict = %{}
text.eachline {|line, i|
	line = line.strip()
	(line.startswith('//') || line.isempty()) && continue
	lineNo = i + 1
	if (m = line.match(r'^(\w+)#(\w+)$')) {
		className = m[1]
		funcName = m[2]
		if (!classDict.haskey(className)) {
			classDict[className] = []
		}
		classDict[className].add(funcName)
	} elsif (m = line.match(r'^(\w+)$')) {
		funcName = m[1]
		funcNames.add(funcName)
	} else {
		sys.stderr.printf('error at %d\n', lineNo)
		sys.exit(1)
	}
}

println('--------')
funcNames.each {|funcName|
	tmplImplementFunction.render(sys.stdout)
	println()
}
classDict.keys {|className|
	println('--------')
	classDict[className].each {|methodName|
		tmplImplementMethod.render(sys.stdout)
	}
}
println('--------')
funcNames.each {|funcName|
	tmplAssignFunction.render(sys.stdout)
}
println('--------')
classDict.keys {|className|
	classDict[className].each {|methodName|
		tmplAssignMethod.render(sys.stdout)
	}
}

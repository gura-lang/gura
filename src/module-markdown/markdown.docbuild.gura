#!/usr/bin/env gura
//----------------------------------------------------------------------------
// markdown.reftool.gura
// A module to convert a markdown document into jekyll-style HTML, PDF and RTF.
//----------------------------------------------------------------------------
import(markdown)

Renderer@jekyll = class(markdown.Renderer@html) {
	tmpl@header:public = R'''
	---
	layout: ${layout}
	lang: ${lang}
	title: ${title}
	prevpage: ${prevPage}
	nextpage: ${nextPage}
	---
	{% raw %}
	'''T
	tmpl@footer:public = R'''
	{% endraw %}
	'''T
	__init__(dirNameOut:string, layout:string, lang:string,
			 title:string, author:string, date:string) = {|sys.stdout, true|
		this.dirNameOut = dirNameOut
		this.layout = layout
		this.lang = lang
		this.title = title
		this.author = author
		this.date = date
		this.out = nil
		this.enableAnchorFlags[0] = false	// suppress anchor for <h1>
	}
	RenderEx(doc:markdown.document) = {
		this.nChapters = doc.countitem(`h1)
		this.Render(doc)
	}
	OnRenderItemPre(item:item) = {
		if (item.type == `h1) {
			this.out && tmpl@footer.render(this.out)
			idxChapter = this.indices[0] + 1
			fileName = path.join(this.dirNameOut, 'chapter-%02d.md' % (idxChapter))
			println('rendering ', path.filename(fileName))
			this.out = open(fileName, 'w')
			prevPage = nextPage = '""'
			if (idxChapter == 1) {
				prevPage = 'index.html'
			} else {
				prevPage = 'chapter-%02d.html#naviitem-selected' % (idxChapter - 1)
			}
			if (idxChapter + 1 <= this.nChapters) {
				nextPage = 'chapter-%02d.html#naviitem-selected' % (idxChapter + 1)
			}
			layout = this.layout
			lang = this.lang
			title = this.title
			tmpl@header.render(this.out)
		}
		true
	}
	OnRenderItemPost(item:item):void = {
		if (item.type == `root) {
			this.out && tmpl@footer.render(this.out)
			this.out = nil
		}
	}
}

Renderer@tex = class(markdown.Renderer@tex) {
	OnRenderItemPre(item:item) = {
		if (item.type == `tag && item.text == 'gura.funcentry') {
			if (m = item.attrs.match('fullname="([^\"]+)" format="([^\"]+)"')) {
				this.out.printf(R'''
				\vspace{5mm}
				\vbox{
				\underline{\tt\small %s}}
				''', this.EscapeText(m[2].unescapehtml()))
			} else {
				println('**** error ****')
				sys.exit(1)
			}
			return(false)
		}
		true
	}
}

Renderer@rtf = class(markdown.Renderer@rtf) {
}

NaviItem = struct(level:number, indices[]:number, anchorName:string, text:string, itemList[] => [])

printNaviItems(out:stream:w, itemList[]:NaviItem) = {
	tmpl@naviItemTop = R'''
	<span class="list-group-item border-0 py-2 font-weight-bold{% if page.url contains "/${fileNameHTML}" %} active{% endif %}">
	{% if page.url contains "/${fileNameHTML}" %}
	<a name="naviitem-selected"></a><a href="#">${item.indices[0]} ${item.text}</a>
	{% else %}
	<a href="${fileNameHTML + "#naviitem-selected"}">${item.indices[0]} ${item.text}</a>
	{% endif %}
	</span>
	'''T
	tmpl@naviItem = R'''
	<span class="list-group-item border-0 py-1{% if page.url contains "/${fileNameHTML}" %} active{% endif %}">
	<a href="${fileNameHTML + "#" + item.anchorName}">${item.indices.head(item.level + 1).join('.')} ${item.text}</a>
	</span>
	'''T
	tmpl@naviGroupBegin = R'''
	{% if page.url contains "/${fileNameHTML}" %}
	<div class="list-group" id="naviitem-${item.anchorName}">
	'''T
	tmpl@naviGroupEnd = R'''
	</div>
	{% endif %}
	'''T
	itemList.each {|item|
		fileNameHTML = 'chapter-%02d.html' % item.indices[0]
		if (item.level == 0) {
			tmpl@naviItemTop.render(out)
		} else {
			tmpl@naviItem.render(out)
		}
		if (!item.itemList.isempty() && item.level == 0) {
			tmpl@naviGroupBegin.render(out)
			printNaviItems(out, item.itemList)
			tmpl@naviGroupEnd.render(out)
		}
	}
}

output@tex(doc:markdown.document, baseName:string, title:string, author:string, date:string) = {
	fileNameTeX = baseName + '.tex'
	open(fileNameTeX, 'w') {|out|
		Renderer@tex(out, title, author, date).Render(doc)
	}
	sys.stderr.println(fileNameTeX, ' was created.')
}

output@pdf(doc:markdown.document, baseName:string, title:string, author:string, date:string) = {
	fileNameTeX = baseName + '.tex'
	fileNameDVI = baseName + '.dvi'
	output@tex(doc, baseName, title, author, date)
	repeat (2) { os.exec('platex', fileNameTeX) }
	os.exec('dvipdfmx', fileNameDVI)
}

output@jekyll(doc:markdown.document, dirNameOut:string, layout:string, lang:string,
			  title:string, author:string, date:string) = {
	println('Output directory: ', dirNameOut)
	!path.exists(dirNameOut) && fs.mkdir(dirNameOut):tree
	output@jekyll_index(doc, dirNameOut, layout, lang, title, author, date)
	output@jekyll_navi(doc, dirNameOut, title)
	Renderer@jekyll(dirNameOut, layout, lang, title, author, date).RenderEx(doc)
}

output@jekyll_index(doc:markdown.document, dirNameOut:string, layout:string, lang:string,
					title:string, author:string, date:string) = {
	tmpl@content:public = R'''
	---
	layout: ${layout}
	lang: ${lang}
	title: ${title}
	prevpage: ""
	nextpage: chapter-01.html#naviitem-selected
	---
	<h1>${title}</h1>
	<div>${author}</div>
	<div>${date}</div>
	'''T
	fileName = path.join(dirNameOut, 'index.md')
	println('rendering ', path.filename(fileName))
	open(fileName, 'w') {|out|
		tmpl@content.render(out)
	}
}

output@jekyll_navi(doc:markdown.document, dirNameOut:string, title:string) = {
	itemListRoot = []
	itemStack = []
	itemList = itemListRoot
	doc.render@toc {|level:number, indices[]:number, anchorName:string, text:string|
		item = NaviItem(level, indices.clone(), anchorName, text)
		if (!itemStack.isempty()) {
			itemPrev = itemStack[-1]
			if (level <= itemPrev.level) {
				repeat (itemPrev.level - level + 1) {
					try {itemStack.erase(-1) } catch {
						println('**** error ****')
						printf('%*s%s\n', itemStack:*level * 2, '', itemStack:*text)
					}
				}
				itemList = if (itemStack.isempty()) { itemListRoot } else { itemStack[-1].itemList }
			} else {
				if (level > itemPrev.level + 1) {
					println('**** error ****')
					printf('%*s%s\n', itemStack:*level * 2, '', itemStack:*text)
				}
				itemList = itemPrev.itemList
			}
		}
		itemList.add(item)
		itemStack.add(item)
	}
	fileName = path.join(dirNameOut, 'navi.html')
	println('rendering ', path.filename(fileName))
	open(fileName, 'w') {|out|
		out.println('<div classs="list-group">')
		printNaviItems(out, itemListRoot)
		out.println('</div>')
	}
}

output@rtf(doc:markdown.document, baseName:string, title:string, author:string, date:string) = {
	open(fileNameRTF, 'w') {|out|
		Renderer@rtf(out, true).Render(doc)
	}
	sys.stderr.println(fileNameRTF, ' was created.')
}

availableCommands:public = ['tex', 'pdf', 'jekyll', 'rtf']

Composer = class {
	__init__(baseName:string, dirNameOut@jekyll:string, layout@jekyll:string,
			 lang:string, title:string, author:string, date:string) = {
		this.baseName:public = baseName
		this.dirNameOut@jekyll:public = dirNameOut@jekyll
		this.layout@jekyll:public = layout@jekyll
		this.lang:public = lang
		this.title:public = title
		this.author:public = author
		this.date:public = date
	}
	output(doc:markdown.document) = {
		sys.argv[1..].each {|cmd|
			if (cmd == 'tex') {
				output@tex(doc, this.baseName, this.title, this.author, this.date)
			} elsif (cmd == 'pdf') {
				output@pdf(doc, this.baseName, this.title, this.author, this.date)
			} elsif (cmd == 'jekyll') {
				output@jekyll(doc, this.dirNameOut@jekyll, this.layout@jekyll,
							  this.lang, this.title, this.author, this.date)
			} elsif (cmd == 'rtf') {
				output@rtf(doc, this.baseName, this.title, this.author, this.date)
			} else {
				sys.stderr.printf('unknown command: %s\n', cmd)
			}
		}
	}
}

checkArgument() = {
	if (sys.argv.len() < 2) {
		sys.stderr.println('usage: gura build-doc.gura [tex|pdf|jekyll]')
		sys.exit(1)
	}
}

output(doc:markdown.document, baseName:string, dirNameOut@jekyll:string, layout@jekyll:string,
	   lang:string, title:string, author:string, date:string) = {
	sys.argv[1..].each {|cmd|
		if (cmd == 'tex') {
			output@tex(doc, baseName, title, author, date)
		} elsif (cmd == 'pdf') {
			output@pdf(doc, baseName, title, author, date)
		} elsif (cmd == 'jekyll') {
			output@jekyll(doc, dirNameOut@jekyll, layout@jekyll, lang, title, author, date)
		} elsif (cmd == 'rtf') {
			output@rtf(doc, baseName, title, author, date)
		} else {
			sys.stderr.printf('unknown command: %s\n', cmd)
		}
	}
}

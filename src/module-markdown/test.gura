#!/usr/bin/env gura
import(markdown)

str = R'''
# Overview

The `image` class provides following measures to handle graphic image data:

- Reads image data from a file.
- Writes image data to a file.
- Apply some modifications on image data including rotation, resize and color conversion.

Acceptable image data formats can be extended by importing modules.
Below is a table to show image formats and name of modules that handle them.
The string listed in "imagetype" column shows a name that is used by functions
`image()`, `image#read()` and `image#write()` to explicitly specify the image data format
in a process of reading and writing files.

<table>
<tr><th>Image Format</th><th>Module Name</th><th>imagetype</th></tr>
<tr><td>BMP</td><td><code>bmp</code></td><td><code>'bmp'</code></td></tr>
<tr><td>GIF</td><td><code>gif</code></td><td><code>'gif'</code></td></tr>
<tr><td>JPEG</td><td><code>jpeg</code></td><td><code>'jpeg'</code></td></tr>
<tr><td>Microsoft Icon</td><td><code>msico</code></td><td><code>'msico'</code></td></tr>
<tr><td>PNG</td><td><code>png</code></td><td><code>'png'</code></td></tr>
<tr><td>PPM</td><td><code>ppm</code></td><td><code>'ppm'</code></td></tr>
<tr><td>TIFF</td><td><code>tiff</code></td><td><code>'tiff'</code></td></tr>
</table>


# Property

An `image` instance has the following properties:

<table>
<tr><th>Property</th><th>Type</th><th>R/W</th><th>Note</th></tr>

<tr><td><code>format</code></td><td><code>symbol</code></td><td>R</td>
<@td>Takes one of the following symbols indicating what elements are stored in the memory:

`` `rgb`` .. red, green and blue

`` `rgba`` .. red, green, blue and alpha</@td></tr>
<tr><td><code>height</code></td><td><code>number</code></td><td>R</td>
<@td>Image height.</@td></tr>
<tr><td><code>palette</code></td><td><code>palette</code></td><td>R/W</td>
<@td>A `palette` instance associated with this image.
If there's no palette associated, this property returns `nil`.</@td></tr>
<tr><td><code>width</code></td><td><code>number</code></td><td>R</td>
<@td>Image width.</@td></tr>

</table>


# Constructor

<gura.funcentry fullname="image" format="image(args+):map {block?}" />
Returns an image instance with specified characteristics.
There are three forms to call the function as below:

- `image(format:symbol)` ..
  Creates an image instance of the specified format without buffer allocated.
- `image(format:symbol, width:number, height:number, color?:color)` ..
  Allocates an image buffer with the specified size and fills it with the color.
- `image(stream:stream, format?:symbol, imagetype?:string)` ..
  Reads image data from the stream and allocates necessary buffer
  in which the read data is stored.

The argument `format` specifies what elements are stored in the memory
and takes one of the following symbols:

- `` `rgb`` .. red, green and blue
- `` `rgba`` .. red, green, blue and alpha

In the third form, the format of the image data is determined
by the byte sequence of the stream data and its file name.

You can also explicitly specify the image data format by the argument `imagetype`.



# Method

<gura.funcentry fullname="image#allocbuff" format="image#allocbuff(width:number, height:number, color?:color):reduce" />
Allocates a specified size of buffer in the `image` instance
that is supposed to has no buffer allocated.

The allocated buffer will be filled with `color`.
If omitted, it will be filled with zero value.

An error occurs in following cases:

- It fails to allocate necessary buffer.
- The `image` instance already has allocated buffer.

<gura.funcentry fullname="image#blur" format="image#blur(radius:number, sigma?:number) {block?}" />
Returns a new image that blurs the original image with the given parameters.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#clear" format="image#clear():reduce" />
Fills the buffer in the `image` instance with zero value.

This has the same effect with calling `image#fill()` with `color.zero`.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#crop" format="image#crop(x:number, y:number, width?:number, height?:number):map {block?}" />
Returns a new image instance of the extracted area of the source image.

The extracted area is specified by the following arguments:

- `x` .. The left position.
- `y` .. The top position.
- `width` .. The width. If it's omitted or specified with `nil`,
             the whole area on the right of `x` will be extracted.
- `height` .. The height. If it's omitted or specified with `nil`,
             the whole area on the bottom of `y` will be extracted.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#delpalette" format="image#delpalette():reduce" />
Deletes a `palette` instance that belongs to the `image`.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#extract" format="image#extract(x:number, y:number, width:number, height:number, element:symbol, dst):reduce" />
Extracts the element values within the specified area of the image,
and store them into a list.
The argument `x` and `y` specifies the left-top position,
and `width`, and `height` does the size of the area.

The argument `element` takes the following symbol
that specifies which element should be extracted:

- `` `r`` .. red
- `` `g`` .. green
- `` `b`` .. blue
- `` `a`` .. alpha

The argument `dst` specifies the variable into which the extracted data is stored,
which must be a list that has enough space to store the data.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#fill" format="image#fill(color:color):reduce" />
Fills the whole image with the specified color.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#fillrect" format="image#fillrect(x:number, y:number, width:number, height:number, color:color):map:reduce" />
Fills the specified area with the specified color.
The argument `x` and `y` specifies the left-top position,
and `width`, and `height` does the size of the area.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#flip" format="image#flip(orient:symbol):map {block?}" />
Returns a new `image` instance that flips the source image horizontally or vertically.
You can specify the following symbol to the `orient` argument.

- `` `horz`` .. flips horizontally.
- `` `vert`` .. flips vertically.
- `` `both`` .. flips both horizontally and vertically. This has the same effect with
            rotating the image 180 degrees.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#getpixel" format="image#getpixel(x:number, y:number):map {block?}" />
Returns a color of a pixel data at the specified position.

If `block` is specified, it would be evaluated with a block parameter `|c:color|`,
where `c` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#grayscale" format="image#grayscale() {block?}" />
Returns a new image instance that converts the source image into gray scale.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#mapcolorlevel" format="image#mapcolorlevel(map@r:array@uint8, map@g?:array@uint8, map@b?:array@uint8) {block?}" />
Returns a new image that converts color levels according to the given table.

Each of the arguments `map@r`, `map@g` and `map@b` is an instance of array@uchar
containing 256 numbers that range between 0 and 255
and corresponds to elements red, green and blue respectively.
An element value in the source image becomes an index of the list
and the indexed value will be stored as a converted element value.

If you want to apply a mapping table to all the elements,
call the method with a single argument like `image#mapcolorlevel(map)`.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#paste" format="image#paste(x:number, y:number, src:image, width?:number, height?:number, xoffset:number =&gt; 0, yoffset:number =&gt; 0, a:number =&gt; 255):map:reduce" />
Pastes the source image `src` onto the target image instance at the specified position.

The argument `width`, `height`, `xoffset` and `yoffset` specify
the source image's area to be pasted.
If they're omitted, the whole image will be pasted.

The argument `a` specifies the alpha value that is put on the target image.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#putpixel" format="image#putpixel(x:number, y:number, color:color):map:reduce" />
Puts a color on the specified position.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#size" format="image#size()" />
Returns the image size as a list `[width, height]`.

<gura.funcentry fullname="image#store" format="image#store(x:number, y:number, width:number, height:number, element:symbol, src):reduce" />

<gura.funcentry fullname="image#read" format="image#read(stream:stream:r, imagetype?:string):map:reduce" />
Reads image data from a stream.

The format of the image data is determined
by the byte sequence of the stream data and its file name.

You can also explicitly specify the image data format by the argument `imagetype`.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#reducecolor" format="image#reducecolor(palette?:palette) {block?}" />
Creates an image that reduces colors in the original image
with a set of colors in the given palette.
The specified palette would be associated with the created image.

If no argument is specified, the associated palette would be used.
In this case, an error occurs if there's no palette associated.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#replacecolor" format="image#replacecolor(colorOrg:color, color:color, tolerance?:number):reduce" />
Replaces pixels that have a color matching `colorOrg` with the `color`.

The argument `tolerance` specifies an acceptable distance for the matching.
If omitted, only an exact match is acceptable.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#resize" format="image#resize(width?:number, height?:number):map:[box,ratio] {block?}" />
Resizes the image to the size specified by `width` and `height` and returns the result.

- When both `width` and `height` are specified, the image would be resized to the size.
- When `width` is specified and `height` is omitted or `nil`,
  the resized height would be calculated from the width
  so that they keep the same ratio as the original.
- When `width` is `nil` and `height` is specified,
  the resized width would be calculated from the height
  so that they keep the same ratio as the original.

The following attributes are acceptable:

- `:box` .. When only `width` is specified, the same value is set to `height`.
- `:ratio` .. Treats values of `width` and `height` as magnifying ration instead of pixel size.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#rotate" format="image#rotate(rotate:number, background?:color):map {block?}" />
Creates an image that rotates the original image by the specified angle.

The argument `angle` specifies the rotation angle in degree unit,
and positive numbers for counterclockwise direction and
negative for clockwise direction.

The created instance has a size that exactly fits the rotated image.
The argument `background` specifies the color of pixels to fill
the empty area that appears after rotation.
If omitted, the color that has all elements set to zero is used for filling.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#scan" format="image#scan(x?:number, y?:number, width?:number, height?:number, scandir?:symbol) {block?}" />
Returns an iterator that scans pixels in the image.

The arguments `x`, `y`, `width` and `height` specify the image area to scan.
The argument `scandir` specifies the scan direction and
takes one of the following symbol:

<table>
<tr><th>Symbol</th><th>Start Pos</th><th>Direction</th></tr>
<tr><td><code>`left_top_horz</code></td><td>left-top</td><td>horizontal</td></tr>
<tr><td><code>`left_top_vert</code></td><td>left-top</td><td>vertical</td></tr>
<tr><td><code>`left_bottom_horz</code></td><td>left-bottom</td><td>horizontal</td></tr>
<tr><td><code>`left_bottom_vert</code></td><td>left-bottom</td><td>vertical</td></tr>
<tr><td><code>`right_top_horz</code></td><td>right-top</td><td>horizontal</td></tr>
<tr><td><code>`right_top_vert</code></td><td>right-top</td><td>vertical</td></tr>
<tr><td><code>`right_bottom_horz</code></td><td>right-bottom</td><td>horizontal</td></tr>
<tr><td><code>`right_bottom_vert</code></td><td>right-bottom</td><td>vertical</td></tr>
</table>

In default, this returns an iterator as its result value.
Specifying the following attributes would customize the returned value:

- `:iter` .. An iterator. This is the default behavior.
- `:xiter` .. An iterator that eliminates `nil` from its elements.
- `:list` .. A list.
- `:xlist` .. A list that eliminates `nil` from its elements.
- `:set` ..  A list that eliminates duplicated values from its elements.
- `:xset` .. A list that eliminates duplicated values and `nil` from its elements.

See the chapter of Mapping Process in Gura Language Manual for the detail.

If a block is specified, it would be evaluated repeatingly
with block parameters `|value, idx:number|` where `value` is the iterated value
and `idx` the loop index starting from zero.
In this case, the last evaluated value of the block would be the result value.
If one of the attributes listed above is specified,
an iterator or a list of the evaluated value would be returned.

<gura.funcentry fullname="image#setalpha" format="image#setalpha(a:number, color?:color, tolerance?:number):reduce" />
Replaces the alpha element of all the pixels in the image with the value specified by `a`.

If the argument `color` is specified, alpha element of pixels
that match with that color would be replaced.
The argument `tolerance` specifies the distance
within which the color is determined as matched.

This method returns the reference to the target instance itself.

<gura.funcentry fullname="image#thumbnail" format="image#thumbnail(width?:number, height?:number):map:[box] {block?}" />
Resizes the image so that it fits within a rectangular area
specified by `width` and `height` and returns the result.

If `block` is specified, it would be evaluated with a block parameter `|img:image|`,
where `img` is the created instance.
In this case, the block's result would become the function's returned value.

<gura.funcentry fullname="image#write" format="image#write(stream:stream:w, imagetype?:string):map:reduce" />
Writes image data to a stream.

The format of the image data is determined by the stream's file name.

You can also explicitly specify the image data format by the argument `imagetype`.

This method returns the reference to the target instance itself.
'''

doc = markdown.document()
doc << str
doc.root.print()

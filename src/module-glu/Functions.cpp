// Don't edit this file. This has been generated by Functions.cpp.gura.
#include "stdafx.h"

#if defined(GURA_ON_MSWIN)
typedef char GLchar;
#endif

Gura_BeginModuleScope(glu)

// glu.gluBeginCurve
Gura_DeclareFunctionAlias(__gluBeginCurve, "gluBeginCurve")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBeginCurve)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	gluBeginCurve(nurb);
	if (arg.IsBlockSpecified()) {
		const Expr_Block *pExprBlock = arg.GetBlockCooked(env);
		if (env.IsSignalled()) return Value::Nil;
		pExprBlock->Exec(env);
		gluEndCurve(nurb);
	}
	return Value::Nil;
}

// glu.gluBeginPolygon
Gura_DeclareFunctionAlias(__gluBeginPolygon, "gluBeginPolygon")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBeginPolygon)
{
	Object_Tesselator *tess = Object_Tesselator::GetObject(arg, 0);
	tess->CreatePolygonPack(Value::Nil);
	gluBeginPolygon(tess->GetTesselator());
	if (arg.IsBlockSpecified()) {
		const Expr_Block *pExprBlock = arg.GetBlockCooked(env);
		if (env.IsSignalled()) return Value::Nil;
		pExprBlock->Exec(env);
		gluEndPolygon(tess->GetTesselator());
		tess->DeletePolygonPack();
	}
	return Value::Nil;
}

// glu.gluBeginSurface
Gura_DeclareFunctionAlias(__gluBeginSurface, "gluBeginSurface")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBeginSurface)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	gluBeginSurface(nurb);
	if (arg.IsBlockSpecified()) {
		const Expr_Block *pExprBlock = arg.GetBlockCooked(env);
		if (env.IsSignalled()) return Value::Nil;
		pExprBlock->Exec(env);
		gluEndSurface(nurb);
	}
	return Value::Nil;
}

// glu.gluBeginTrim
Gura_DeclareFunctionAlias(__gluBeginTrim, "gluBeginTrim")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBeginTrim)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	gluBeginTrim(nurb);
	if (arg.IsBlockSpecified()) {
		const Expr_Block *pExprBlock = arg.GetBlockCooked(env);
		if (env.IsSignalled()) return Value::Nil;
		pExprBlock->Exec(env);
		gluEndTrim(nurb);
	}
	return Value::Nil;
}

// glu.gluBuild1DMipmaps
Gura_DeclareFunctionAlias(__gluBuild1DMipmaps, "gluBuild1DMipmaps")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalFormat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "format", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "data", VTYPE_array, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBuild1DMipmaps)
{
	GLenum target = static_cast<GLenum>(arg.GetInt(0));
	GLint internalFormat = arg.GetInt(1);
	GLsizei width = arg.GetInt(2);
	GLenum format = static_cast<GLenum>(arg.GetInt(3));
	GLenum type = static_cast<GLenum>(arg.GetInt(4));
	Array *data = Object_array::GetObject(arg, 5)->GetArray();
	const void *p = GetArrayTPointer(env, type, data);
	if (p == nullptr) return Value::Nil;
	GLint _rtn = gluBuild1DMipmaps(target,
					internalFormat, width, format, type, p);
	return Value(_rtn);
}

// glu.gluBuild1DMipmapsFromImage
Gura_DeclareFunctionAlias(__gluBuild1DMipmapsFromImage, "gluBuild1DMipmapsFromImage")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalFormat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "image", VTYPE_image, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBuild1DMipmapsFromImage)
{
	GLenum target = static_cast<GLenum>(arg.GetInt(0));
	GLint internalFormat = arg.GetInt(1);
	Image *image = Object_image::GetObject(arg, 2)->GetImage();
	GLsizei width = static_cast<GLsizei>(image->GetWidth());
	GLenum format = static_cast<GLsizei>(GetImageFormat(env, image));
	if (env.IsSignalled()) return Value::Nil;
	GLenum type = GL_UNSIGNED_BYTE;
	const void *data = image->GetBuffer();
	GLint _rtn = gluBuild1DMipmaps(target,
					internalFormat, width, format, type, data);
	return Value(_rtn);
}

// glu.gluBuild2DMipmaps
Gura_DeclareFunctionAlias(__gluBuild2DMipmaps, "gluBuild2DMipmaps")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalFormat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "width", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "format", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "data", VTYPE_array, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBuild2DMipmaps)
{
	GLenum target = static_cast<GLenum>(arg.GetInt(0));
	GLint internalFormat = arg.GetInt(1);
	GLsizei width = arg.GetInt(2);
	GLsizei height = arg.GetInt(3);
	GLenum format = static_cast<GLenum>(arg.GetInt(4));
	GLenum type = static_cast<GLenum>(arg.GetInt(5));
	Array *data = Object_array::GetObject(arg, 6)->GetArray();
	const void *p = GetArrayTPointer(env, type, data);
	if (p == nullptr) return Value::Nil;
	GLint _rtn = gluBuild2DMipmaps(target,
					internalFormat, width, height, format, type, p);
	return Value(_rtn);
}

// glu.gluBuild2DMipmapsFromImage
Gura_DeclareFunctionAlias(__gluBuild2DMipmapsFromImage, "gluBuild2DMipmapsFromImage")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "target", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "internalFormat", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "image", VTYPE_image, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluBuild2DMipmapsFromImage)
{
	GLenum target = static_cast<GLenum>(arg.GetInt(0));
	GLint internalFormat = arg.GetInt(1);
	Image *image = Object_image::GetObject(arg, 2)->GetImage();
	GLsizei width = static_cast<GLsizei>(image->GetWidth());
	GLsizei height = static_cast<GLsizei>(image->GetHeight());
	GLenum format = static_cast<GLsizei>(GetImageFormat(env, image));
	if (env.IsSignalled()) return Value::Nil;
	GLenum type = GL_UNSIGNED_BYTE;
	const void *data = image->GetBuffer();
	GLint _rtn = gluBuild2DMipmaps(target,
					internalFormat, width, height, format, type, data);
	return Value(_rtn);
}

// glu.gluCylinder
Gura_DeclareFunctionAlias(__gluCylinder, "gluCylinder")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "base", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "top", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "height", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stacks", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluCylinder)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLdouble base = arg.GetDouble(1);
	GLdouble top = arg.GetDouble(2);
	GLdouble height = arg.GetDouble(3);
	GLint slices = arg.GetInt(4);
	GLint stacks = arg.GetInt(5);
	gluCylinder(quad, base, top, height, slices, stacks);
	return Value::Nil;
}

// glu.gluDeleteNurbsRenderer
Gura_DeclareFunctionAlias(__gluDeleteNurbsRenderer, "gluDeleteNurbsRenderer")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluDeleteNurbsRenderer)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	gluDeleteNurbsRenderer(nurb);
	return Value::Nil;
}

// glu.gluDeleteQuadric
Gura_DeclareFunctionAlias(__gluDeleteQuadric, "gluDeleteQuadric")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluDeleteQuadric)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	gluDeleteQuadric(quad);
	return Value::Nil;
}

// glu.gluDeleteTess
Gura_DeclareFunctionAlias(__gluDeleteTess, "gluDeleteTess")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluDeleteTess)
{
	GLUtesselator *tess = Object_Tesselator::GetObject(arg, 0)->GetTesselator();
	gluDeleteTess(tess);
	return Value::Nil;
}

// glu.gluDisk
Gura_DeclareFunctionAlias(__gluDisk, "gluDisk")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "inner", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "outer", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "loops", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluDisk)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLdouble inner = arg.GetDouble(1);
	GLdouble outer = arg.GetDouble(2);
	GLint slices = arg.GetInt(3);
	GLint loops = arg.GetInt(4);
	gluDisk(quad, inner, outer, slices, loops);
	return Value::Nil;
}

// glu.gluEndCurve
Gura_DeclareFunctionAlias(__gluEndCurve, "gluEndCurve")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluEndCurve)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	gluEndCurve(nurb);
	return Value::Nil;
}

// glu.gluEndPolygon
Gura_DeclareFunctionAlias(__gluEndPolygon, "gluEndPolygon")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluEndPolygon)
{
	Object_Tesselator *tess = Object_Tesselator::GetObject(arg, 0);
	gluEndPolygon(tess->GetTesselator());
	tess->DeletePolygonPack();
	return Value::Nil;
}

// glu.gluEndSurface
Gura_DeclareFunctionAlias(__gluEndSurface, "gluEndSurface")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluEndSurface)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	gluEndSurface(nurb);
	return Value::Nil;
}

// glu.gluEndTrim
Gura_DeclareFunctionAlias(__gluEndTrim, "gluEndTrim")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluEndTrim)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	gluEndTrim(nurb);
	return Value::Nil;
}

// glu.gluErrorString
Gura_DeclareFunctionAlias(__gluErrorString, "gluErrorString")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "error", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluErrorString)
{
	GLenum error = static_cast<GLenum>(arg.GetInt(0));
	const GLubyte *_rtn = gluErrorString(error);
	return ReturnValue(env, arg, Value(reinterpret_cast<const char *>(_rtn)));
}

// glu.gluGetNurbsProperty
Gura_DeclareFunctionAlias(__gluGetNurbsProperty, "gluGetNurbsProperty")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "property", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "data", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluGetNurbsProperty)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	GLenum property = static_cast<GLenum>(arg.GetInt(1));
	ArrayT<float> *_data = Object_arrayT<float>::GetObject(arg, 2)->GetArrayT();
	GLfloat *data = reinterpret_cast<GLfloat *>(_data->GetPointer());
	gluGetNurbsProperty(nurb, property, data);
	return Value::Nil;
}

// glu.gluGetString
Gura_DeclareFunctionAlias(__gluGetString, "gluGetString")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "name", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluGetString)
{
	GLenum name = static_cast<GLenum>(arg.GetInt(0));
	const GLubyte *_rtn = gluGetString(name);
	return ReturnValue(env, arg, Value(reinterpret_cast<const char *>(_rtn)));
}

// glu.gluGetTessProperty
Gura_DeclareFunctionAlias(__gluGetTessProperty, "gluGetTessProperty")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	DeclareArg(env, "which", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "data", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluGetTessProperty)
{
	GLUtesselator *tess = Object_Tesselator::GetObject(arg, 0)->GetTesselator();
	GLenum which = static_cast<GLenum>(arg.GetInt(1));
	ArrayT<double> *_data = Object_arrayT<double>::GetObject(arg, 2)->GetArrayT();
	GLdouble *data = reinterpret_cast<GLdouble *>(_data->GetPointer());
	gluGetTessProperty(tess, which, data);
	return Value::Nil;
}

// glu.gluLoadSamplingMatrices
Gura_DeclareFunctionAlias(__gluLoadSamplingMatrices, "gluLoadSamplingMatrices")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "model", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "perspective", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "view", VTYPE_array_at_int32, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluLoadSamplingMatrices)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	ArrayT<float> *_model = Object_arrayT<float>::GetObject(arg, 1)->GetArrayT();
	GLfloat *model = reinterpret_cast<GLfloat *>(_model->GetPointer());
	ArrayT<float> *_perspective = Object_arrayT<float>::GetObject(arg, 2)->GetArrayT();
	GLfloat *perspective = reinterpret_cast<GLfloat *>(_perspective->GetPointer());
	ArrayT<int> *_view = Object_arrayT<int>::GetObject(arg, 3)->GetArrayT();
	GLint *view = reinterpret_cast<GLint *>(_view->GetPointer());
	gluLoadSamplingMatrices(nurb, model, perspective, view);
	return Value::Nil;
}

// glu.gluLookAt
Gura_DeclareFunctionAlias(__gluLookAt, "gluLookAt")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "eyeX", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "eyeY", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "eyeZ", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "centerX", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "centerY", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "centerZ", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "upX", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "upY", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "upZ", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluLookAt)
{
	GLdouble eyeX = arg.GetDouble(0);
	GLdouble eyeY = arg.GetDouble(1);
	GLdouble eyeZ = arg.GetDouble(2);
	GLdouble centerX = arg.GetDouble(3);
	GLdouble centerY = arg.GetDouble(4);
	GLdouble centerZ = arg.GetDouble(5);
	GLdouble upX = arg.GetDouble(6);
	GLdouble upY = arg.GetDouble(7);
	GLdouble upZ = arg.GetDouble(8);
	gluLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
	return Value::Nil;
}

// glu.gluNewNurbsRenderer
Gura_DeclareFunctionAlias(__gluNewNurbsRenderer, "gluNewNurbsRenderer")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNewNurbsRenderer)
{
	GLUnurbs *_rtn = gluNewNurbsRenderer();
	return ReturnValue(env, arg, Value(new Object_Nurbs(_rtn)));
}

// glu.gluNewQuadric
Gura_DeclareFunctionAlias(__gluNewQuadric, "gluNewQuadric")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNewQuadric)
{
	GLUquadric *_rtn = gluNewQuadric();
	return ReturnValue(env, arg, Value(new Object_Quadric(_rtn)));
}

// glu.gluNewTess
Gura_DeclareFunctionAlias(__gluNewTess, "gluNewTess")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNewTess)
{
	GLUtesselator *_rtn = gluNewTess();
	return ReturnValue(env, arg, Value(new Object_Tesselator(_rtn)));
}

// glu.gluNextContour
Gura_DeclareFunctionAlias(__gluNextContour, "gluNextContour")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNextContour)
{
	GLUtesselator *tess = Object_Tesselator::GetObject(arg, 0)->GetTesselator();
	GLenum type = static_cast<GLenum>(arg.GetInt(1));
	gluNextContour(tess, type);
	return Value::Nil;
}

// glu.gluNurbsCallback
Gura_DeclareFunctionAlias(__gluNurbsCallback, "gluNurbsCallback")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "nurbs", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "which", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNurbsCallback)
{
	Object_Nurbs *nurbs = Object_Nurbs::GetObject(arg, 0);
	GLenum which = static_cast<GLenum>(arg.GetInt(1));
	const Function *func = Object_function::GetObject(arg, 2)->GetFunction();
	nurbs->SetCallback(env, which, func);
	return Value::Nil;
}

// glu.gluNurbsCallbackData
Gura_DeclareFunctionAlias(__gluNurbsCallbackData, "gluNurbsCallbackData")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "userData", VTYPE_any, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNurbsCallbackData)
{
	Object_Nurbs *nurb = Object_Nurbs::GetObject(arg, 0);
	Value userData = arg.GetValue(1);
#if defined(GLU_VERSION_1_3)
	nurb->SetCallbackData(userData);
	gluNurbsCallbackData(nurb->GetNurbs(), nurb);
	return Value::Nil;
#else
	env.SetError(ERR_NotImplementedError,
				"this function is provided in GLU 1.3 or later");
	return Value::Nil;
#endif
}

// glu.gluNurbsCallbackDataEXT
Gura_DeclareFunctionAlias(__gluNurbsCallbackDataEXT, "gluNurbsCallbackDataEXT")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "userData", VTYPE_any, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNurbsCallbackDataEXT)
{
	Object_Nurbs *nurb = Object_Nurbs::GetObject(arg, 0);
	Value userData = arg.GetValue(1);
#if defined(GLU_VERSION_1_3)
	nurb->SetCallbackDataEXT(userData);
	gluNurbsCallbackData(nurb->GetNurbs(), nurb);
	return Value::Nil;
#else
	env.SetError(ERR_NotImplementedError,
				"this function is provided in GLU 1.3 or later");
	return Value::Nil;
#endif
}

// glu.gluNurbsCurve
Gura_DeclareFunctionAlias(__gluNurbsCurve, "gluNurbsCurve")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "knots", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "stride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "control", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "order", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNurbsCurve)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	ArrayT<float> *_knots = Object_arrayT<float>::GetObject(arg, 1)->GetArrayT();
	GLfloat *knots = reinterpret_cast<GLfloat *>(_knots->GetPointer());
	GLint stride = arg.GetInt(2);
	ArrayT<float> *_control = Object_arrayT<float>::GetObject(arg, 3)->GetArrayT();
	GLfloat *control = reinterpret_cast<GLfloat *>(_control->GetPointer());
	GLint order = arg.GetInt(4);
	GLenum type = static_cast<GLenum>(arg.GetInt(5));
	GLint knotCount = static_cast<GLint>(_knots->GetElemNum());
	gluNurbsCurve(nurb, knotCount, knots, stride, control, order, type);
	return Value::Nil;
}

// glu.gluNurbsProperty
Gura_DeclareFunctionAlias(__gluNurbsProperty, "gluNurbsProperty")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "property", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "value", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNurbsProperty)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	GLenum property = static_cast<GLenum>(arg.GetInt(1));
	GLfloat value = arg.GetFloat(2);
	gluNurbsProperty(nurb, property, value);
	return Value::Nil;
}

// glu.gluNurbsSurface
Gura_DeclareFunctionAlias(__gluNurbsSurface, "gluNurbsSurface")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "sKnots", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "tKnots", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "sStride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "tStride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "control", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "sOrder", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "tOrder", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluNurbsSurface)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	ArrayT<float> *_sKnots = Object_arrayT<float>::GetObject(arg, 1)->GetArrayT();
	GLfloat *sKnots = reinterpret_cast<GLfloat *>(_sKnots->GetPointer());
	ArrayT<float> *_tKnots = Object_arrayT<float>::GetObject(arg, 2)->GetArrayT();
	GLfloat *tKnots = reinterpret_cast<GLfloat *>(_tKnots->GetPointer());
	GLint sStride = arg.GetInt(3);
	GLint tStride = arg.GetInt(4);
	ArrayT<float> *_control = Object_arrayT<float>::GetObject(arg, 5)->GetArrayT();
	GLfloat *control = reinterpret_cast<GLfloat *>(_control->GetPointer());
	GLint sOrder = arg.GetInt(6);
	GLint tOrder = arg.GetInt(7);
	GLenum type = static_cast<GLenum>(arg.GetInt(8));
	GLint sKnotCount = static_cast<GLint>(_sKnots->GetElemNum());
	GLint tKnotCount = static_cast<GLint>(_tKnots->GetElemNum());
	gluNurbsSurface(nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride,
	control, sOrder, tOrder, type);
	return Value::Nil;
}

// glu.gluOrtho2D
Gura_DeclareFunctionAlias(__gluOrtho2D, "gluOrtho2D")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "left", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "right", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "bottom", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "top", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluOrtho2D)
{
	GLdouble left = arg.GetDouble(0);
	GLdouble right = arg.GetDouble(1);
	GLdouble bottom = arg.GetDouble(2);
	GLdouble top = arg.GetDouble(3);
	gluOrtho2D(left, right, bottom, top);
	return Value::Nil;
}

// glu.gluPartialDisk
Gura_DeclareFunctionAlias(__gluPartialDisk, "gluPartialDisk")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "inner", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "outer", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "loops", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "start", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "sweep", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluPartialDisk)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLdouble inner = arg.GetDouble(1);
	GLdouble outer = arg.GetDouble(2);
	GLint slices = arg.GetInt(3);
	GLint loops = arg.GetInt(4);
	GLdouble start = arg.GetDouble(5);
	GLdouble sweep = arg.GetDouble(6);
	gluPartialDisk(quad, inner, outer, slices, loops, start, sweep);
	return Value::Nil;
}

// glu.gluPerspective
Gura_DeclareFunctionAlias(__gluPerspective, "gluPerspective")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "fovy", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "aspect", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zNear", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "zFar", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluPerspective)
{
	GLdouble fovy = arg.GetDouble(0);
	GLdouble aspect = arg.GetDouble(1);
	GLdouble zNear = arg.GetDouble(2);
	GLdouble zFar = arg.GetDouble(3);
	gluPerspective(fovy, aspect, zNear, zFar);
	return Value::Nil;
}

// glu.gluPickMatrix
Gura_DeclareFunctionAlias(__gluPickMatrix, "gluPickMatrix")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "x", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "y", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "delX", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "delY", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "viewport", VTYPE_array_at_int32, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluPickMatrix)
{
	GLdouble x = arg.GetDouble(0);
	GLdouble y = arg.GetDouble(1);
	GLdouble delX = arg.GetDouble(2);
	GLdouble delY = arg.GetDouble(3);
	ArrayT<int> *_viewport = Object_arrayT<int>::GetObject(arg, 4)->GetArrayT();
	GLint *viewport = reinterpret_cast<GLint *>(_viewport->GetPointer());
	gluPickMatrix(x, y, delX, delY, viewport);
	return Value::Nil;
}

// glu.gluProject
Gura_DeclareFunctionAlias(__gluProject, "gluProject")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "objX", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "objY", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "objZ", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "model", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "proj", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "view", VTYPE_array_at_int32, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "winX", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "winY", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "winZ", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluProject)
{
	GLdouble objX = arg.GetDouble(0);
	GLdouble objY = arg.GetDouble(1);
	GLdouble objZ = arg.GetDouble(2);
	ArrayT<double> *_model = Object_arrayT<double>::GetObject(arg, 3)->GetArrayT();
	GLdouble *model = reinterpret_cast<GLdouble *>(_model->GetPointer());
	ArrayT<double> *_proj = Object_arrayT<double>::GetObject(arg, 4)->GetArrayT();
	GLdouble *proj = reinterpret_cast<GLdouble *>(_proj->GetPointer());
	ArrayT<int> *_view = Object_arrayT<int>::GetObject(arg, 5)->GetArrayT();
	GLint *view = reinterpret_cast<GLint *>(_view->GetPointer());
	ArrayT<double> *_winX = Object_arrayT<double>::GetObject(arg, 6)->GetArrayT();
	GLdouble *winX = reinterpret_cast<GLdouble *>(_winX->GetPointer());
	ArrayT<double> *_winY = Object_arrayT<double>::GetObject(arg, 7)->GetArrayT();
	GLdouble *winY = reinterpret_cast<GLdouble *>(_winY->GetPointer());
	ArrayT<double> *_winZ = Object_arrayT<double>::GetObject(arg, 8)->GetArrayT();
	GLdouble *winZ = reinterpret_cast<GLdouble *>(_winZ->GetPointer());
	GLint _rtn = gluProject(objX, objY, objZ, model, proj, view, winX, winY, winZ);
	return ReturnValue(env, arg, Value(_rtn));
}

// glu.gluPwlCurve
Gura_DeclareFunctionAlias(__gluPwlCurve, "gluPwlCurve")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "nurb", VTYPE_Nurbs, OCCUR_Once, FLAG_None);
	DeclareArg(env, "data", VTYPE_array_at_float, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "stride", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "type", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluPwlCurve)
{
	GLUnurbs *nurb = Object_Nurbs::GetObject(arg, 0)->GetNurbs();
	ArrayT<float> *_data = Object_arrayT<float>::GetObject(arg, 1)->GetArrayT();
	GLfloat *data = reinterpret_cast<GLfloat *>(_data->GetPointer());
	GLint stride = arg.GetInt(2);
	GLenum type = static_cast<GLenum>(arg.GetInt(3));
	GLint count = static_cast<GLint>(_data->GetElemNum());
	gluPwlCurve(nurb, count, data, stride, type);
	return Value::Nil;
}

// glu.gluQuadricCallback
Gura_DeclareFunctionAlias(__gluQuadricCallback, "gluQuadricCallback")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "which", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_Nil);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluQuadricCallback)
{
	Object_Quadric *quad = Object_Quadric::GetObject(arg, 0);
	GLenum which = static_cast<GLenum>(arg.GetInt(1));
	const Function *func = arg.IsValid(2)? Object_function::GetObject(arg, 2)->GetFunction() : nullptr;
	quad->SetCallback(env, which, func);
	return Value::Nil;
}

// glu.gluQuadricDrawStyle
Gura_DeclareFunctionAlias(__gluQuadricDrawStyle, "gluQuadricDrawStyle")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "draw", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluQuadricDrawStyle)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLenum draw = static_cast<GLenum>(arg.GetInt(1));
	gluQuadricDrawStyle(quad, draw);
	return Value::Nil;
}

// glu.gluQuadricNormals
Gura_DeclareFunctionAlias(__gluQuadricNormals, "gluQuadricNormals")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "normal", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluQuadricNormals)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLenum normal = static_cast<GLenum>(arg.GetInt(1));
	gluQuadricNormals(quad, normal);
	return Value::Nil;
}

// glu.gluQuadricOrientation
Gura_DeclareFunctionAlias(__gluQuadricOrientation, "gluQuadricOrientation")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "orientation", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluQuadricOrientation)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLenum orientation = static_cast<GLenum>(arg.GetInt(1));
	gluQuadricOrientation(quad, orientation);
	return Value::Nil;
}

// glu.gluQuadricTexture
Gura_DeclareFunctionAlias(__gluQuadricTexture, "gluQuadricTexture")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "texture", VTYPE_boolean, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluQuadricTexture)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLboolean texture = (arg.GetBoolean(1)? GL_TRUE : GL_FALSE);
	gluQuadricTexture(quad, texture);
	return Value::Nil;
}

// glu.gluScaleImage
Gura_DeclareFunctionAlias(__gluScaleImage, "gluScaleImage")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "imageIn", VTYPE_image, OCCUR_Once, FLAG_None);
	DeclareArg(env, "wOut", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "hOut", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluScaleImage)
{
	Image *imageIn = Object_image::GetObject(arg, 0)->GetImage();
	GLsizei wOut = arg.GetInt(1);
	GLsizei hOut = arg.GetInt(2);
	GLenum format = GetImageFormat(env, imageIn);
	if (env.IsSignalled()) return Value::Nil;
	GLsizei wIn = static_cast<GLsizei>(imageIn->GetWidth());
	GLsizei hIn = static_cast<GLsizei>(imageIn->GetHeight());
	GLenum typeIn = GL_UNSIGNED_BYTE;
	const void *dataIn = imageIn->GetBuffer();
	GLenum typeOut = GL_UNSIGNED_BYTE;
	if (env.IsSignalled()) return Value::Nil;
	AutoPtr<Image> imageOut(new Image(imageIn->GetFormat()));
	if (!imageOut->AllocBuffer(env.GetSignal(), wOut, hOut, 0xff)) {
		return Value::Nil;
	}
	GLvoid *dataOut = imageOut->GetBuffer();
	GLint rtn = gluScaleImage(format, wIn, hIn, typeIn, dataIn,
										 	wOut, hOut, typeOut, dataOut);
	if (rtn != 0) {
		env.SetError(ERR_LibraryError, "gluScaleImage error");
		return Value::Nil;
	}
	return Value(new Object_image(env, imageOut.release()));
}

// glu.gluSphere
Gura_DeclareFunctionAlias(__gluSphere, "gluSphere")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "quad", VTYPE_Quadric, OCCUR_Once, FLAG_None);
	DeclareArg(env, "radius", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "slices", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "stacks", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluSphere)
{
	GLUquadric *quad = Object_Quadric::GetObject(arg, 0)->GetQuadric();
	GLdouble radius = arg.GetDouble(1);
	GLint slices = arg.GetInt(2);
	GLint stacks = arg.GetInt(3);
	gluSphere(quad, radius, slices, stacks);
	return Value::Nil;
}

// glu.gluTessBeginContour
Gura_DeclareFunctionAlias(__gluTessBeginContour, "gluTessBeginContour")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessBeginContour)
{
	GLUtesselator *tess = Object_Tesselator::GetObject(arg, 0)->GetTesselator();
	gluTessBeginContour(tess);
	if (arg.IsBlockSpecified()) {
		const Expr_Block *pExprBlock = arg.GetBlockCooked(env);
		if (env.IsSignalled()) return Value::Nil;
		pExprBlock->Exec(env);
		gluTessEndContour(tess);
	}
	return Value::Nil;
}

// glu.gluTessBeginPolygon
Gura_DeclareFunctionAlias(__gluTessBeginPolygon, "gluTessBeginPolygon")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareBlock(OCCUR_ZeroOrOnce);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	DeclareArg(env, "polygon_data", VTYPE_any, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessBeginPolygon)
{
	Object_Tesselator *tess = Object_Tesselator::GetObject(arg, 0);
	Value polygon_data = arg.GetValue(1);
	PolygonPack *pPolygonPack = tess->CreatePolygonPack(polygon_data);
	gluTessBeginPolygon(tess->GetTesselator(), pPolygonPack);
	if (arg.IsBlockSpecified()) {
		const Expr_Block *pExprBlock = arg.GetBlockCooked(env);
		if (env.IsSignalled()) return Value::Nil;
		pExprBlock->Exec(env);
		gluTessEndPolygon(tess->GetTesselator());
		tess->DeletePolygonPack();
	}
	return Value::Nil;
}

// glu.gluTessCallback
Gura_DeclareFunctionAlias(__gluTessCallback, "gluTessCallback")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	DeclareArg(env, "which", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "func", VTYPE_function, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessCallback)
{
	Object_Tesselator *tess = Object_Tesselator::GetObject(arg, 0);
	GLenum which = static_cast<GLenum>(arg.GetInt(1));
	const Function *func = Object_function::GetObject(arg, 2)->GetFunction();
	tess->SetCallback(env, which, func);
	return Value::Nil;
}

// glu.gluTessEndContour
Gura_DeclareFunctionAlias(__gluTessEndContour, "gluTessEndContour")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessEndContour)
{
	GLUtesselator *tess = Object_Tesselator::GetObject(arg, 0)->GetTesselator();
	gluTessEndContour(tess);
	return Value::Nil;
}

// glu.gluTessEndPolygon
Gura_DeclareFunctionAlias(__gluTessEndPolygon, "gluTessEndPolygon")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessEndPolygon)
{
	Object_Tesselator *tess = Object_Tesselator::GetObject(arg, 0);
	gluTessEndPolygon(tess->GetTesselator());
	tess->DeletePolygonPack();
	return Value::Nil;
}

// glu.gluTessNormal
Gura_DeclareFunctionAlias(__gluTessNormal, "gluTessNormal")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	DeclareArg(env, "valueX", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "valueY", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "valueZ", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessNormal)
{
	GLUtesselator *tess = Object_Tesselator::GetObject(arg, 0)->GetTesselator();
	GLdouble valueX = arg.GetDouble(1);
	GLdouble valueY = arg.GetDouble(2);
	GLdouble valueZ = arg.GetDouble(3);
	gluTessNormal(tess, valueX, valueY, valueZ);
	return Value::Nil;
}

// glu.gluTessProperty
Gura_DeclareFunctionAlias(__gluTessProperty, "gluTessProperty")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	DeclareArg(env, "which", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "data", VTYPE_number, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessProperty)
{
	GLUtesselator *tess = Object_Tesselator::GetObject(arg, 0)->GetTesselator();
	GLenum which = static_cast<GLenum>(arg.GetInt(1));
	GLdouble data = arg.GetDouble(2);
	gluTessProperty(tess, which, data);
	return Value::Nil;
}

// glu.gluTessVertex
Gura_DeclareFunctionAlias(__gluTessVertex, "gluTessVertex")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Void, FLAG_None);
	DeclareArg(env, "tess", VTYPE_Tesselator, OCCUR_Once, FLAG_None);
	DeclareArg(env, "location", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "vertex_data", VTYPE_any, OCCUR_Once, FLAG_None);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluTessVertex)
{
	Object_Tesselator *tess = Object_Tesselator::GetObject(arg, 0);
	ArrayT<double> *_location = Object_arrayT<double>::GetObject(arg, 1)->GetArrayT();
	GLdouble *location = reinterpret_cast<GLdouble *>(_location->GetPointer());
	Value vertex_data = arg.GetValue(2);
	PolygonPack *pPolygonPack = tess->GetPolygonPack();
	if (pPolygonPack == nullptr) {
		env.SetError(ERR_SyntaxError, "gluTessBeginPolygon has not been called");
		return Value::Nil;
	}
	VertexPack *pVertexPack = pPolygonPack->CreateVertexPack(vertex_data);
	gluTessVertex(tess->GetTesselator(), location, pVertexPack);
	return Value::Nil;
}

// glu.gluUnProject
Gura_DeclareFunctionAlias(__gluUnProject, "gluUnProject")
{
	SetFuncAttr(VTYPE_any, RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "winX", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "winY", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "winZ", VTYPE_number, OCCUR_Once, FLAG_None);
	DeclareArg(env, "model", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "proj", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "view", VTYPE_array_at_int32, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "objX", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "objY", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	DeclareArg(env, "objZ", VTYPE_array_at_double, OCCUR_Once, FLAG_NoMap);
	AddHelp(
		Gura_Symbol(en),
		"");
}

Gura_ImplementFunction(__gluUnProject)
{
	GLdouble winX = arg.GetDouble(0);
	GLdouble winY = arg.GetDouble(1);
	GLdouble winZ = arg.GetDouble(2);
	ArrayT<double> *_model = Object_arrayT<double>::GetObject(arg, 3)->GetArrayT();
	GLdouble *model = reinterpret_cast<GLdouble *>(_model->GetPointer());
	ArrayT<double> *_proj = Object_arrayT<double>::GetObject(arg, 4)->GetArrayT();
	GLdouble *proj = reinterpret_cast<GLdouble *>(_proj->GetPointer());
	ArrayT<int> *_view = Object_arrayT<int>::GetObject(arg, 5)->GetArrayT();
	GLint *view = reinterpret_cast<GLint *>(_view->GetPointer());
	ArrayT<double> *_objX = Object_arrayT<double>::GetObject(arg, 6)->GetArrayT();
	GLdouble *objX = reinterpret_cast<GLdouble *>(_objX->GetPointer());
	ArrayT<double> *_objY = Object_arrayT<double>::GetObject(arg, 7)->GetArrayT();
	GLdouble *objY = reinterpret_cast<GLdouble *>(_objY->GetPointer());
	ArrayT<double> *_objZ = Object_arrayT<double>::GetObject(arg, 8)->GetArrayT();
	GLdouble *objZ = reinterpret_cast<GLdouble *>(_objZ->GetPointer());
	GLint _rtn = gluUnProject(winX, winY, winZ, model, proj, view, objX, objY, objZ);
	return ReturnValue(env, arg, Value(_rtn));
}


void AssignFunctions(Environment &env)
{
	Gura_AssignFunction(__gluBeginCurve);
	Gura_AssignFunction(__gluBeginPolygon);
	Gura_AssignFunction(__gluBeginSurface);
	Gura_AssignFunction(__gluBeginTrim);
	Gura_AssignFunction(__gluBuild1DMipmaps);
	Gura_AssignFunction(__gluBuild1DMipmapsFromImage);
	Gura_AssignFunction(__gluBuild2DMipmaps);
	Gura_AssignFunction(__gluBuild2DMipmapsFromImage);
	Gura_AssignFunction(__gluCylinder);
	Gura_AssignFunction(__gluDeleteNurbsRenderer);
	Gura_AssignFunction(__gluDeleteQuadric);
	Gura_AssignFunction(__gluDeleteTess);
	Gura_AssignFunction(__gluDisk);
	Gura_AssignFunction(__gluEndCurve);
	Gura_AssignFunction(__gluEndPolygon);
	Gura_AssignFunction(__gluEndSurface);
	Gura_AssignFunction(__gluEndTrim);
	Gura_AssignFunction(__gluErrorString);
	Gura_AssignFunction(__gluGetNurbsProperty);
	Gura_AssignFunction(__gluGetString);
	Gura_AssignFunction(__gluGetTessProperty);
	Gura_AssignFunction(__gluLoadSamplingMatrices);
	Gura_AssignFunction(__gluLookAt);
	Gura_AssignFunction(__gluNewNurbsRenderer);
	Gura_AssignFunction(__gluNewQuadric);
	Gura_AssignFunction(__gluNewTess);
	Gura_AssignFunction(__gluNextContour);
	Gura_AssignFunction(__gluNurbsCallback);
	Gura_AssignFunction(__gluNurbsCallbackData);
	Gura_AssignFunction(__gluNurbsCallbackDataEXT);
	Gura_AssignFunction(__gluNurbsCurve);
	Gura_AssignFunction(__gluNurbsProperty);
	Gura_AssignFunction(__gluNurbsSurface);
	Gura_AssignFunction(__gluOrtho2D);
	Gura_AssignFunction(__gluPartialDisk);
	Gura_AssignFunction(__gluPerspective);
	Gura_AssignFunction(__gluPickMatrix);
	Gura_AssignFunction(__gluProject);
	Gura_AssignFunction(__gluPwlCurve);
	Gura_AssignFunction(__gluQuadricCallback);
	Gura_AssignFunction(__gluQuadricDrawStyle);
	Gura_AssignFunction(__gluQuadricNormals);
	Gura_AssignFunction(__gluQuadricOrientation);
	Gura_AssignFunction(__gluQuadricTexture);
	Gura_AssignFunction(__gluScaleImage);
	Gura_AssignFunction(__gluSphere);
	Gura_AssignFunction(__gluTessBeginContour);
	Gura_AssignFunction(__gluTessBeginPolygon);
	Gura_AssignFunction(__gluTessCallback);
	Gura_AssignFunction(__gluTessEndContour);
	Gura_AssignFunction(__gluTessEndPolygon);
	Gura_AssignFunction(__gluTessNormal);
	Gura_AssignFunction(__gluTessProperty);
	Gura_AssignFunction(__gluTessVertex);
	Gura_AssignFunction(__gluUnProject);
}

Gura_EndModuleScope(glu)

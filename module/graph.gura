#!/usr/bin/env gura
import(cairo)
import(wx.show)

//-----------------------------------------------------------------------------
// Coord
//-----------------------------------------------------------------------------
Coord = struct(x:number, y:number):map

//-----------------------------------------------------------------------------
// Plot
//-----------------------------------------------------------------------------
Plot = struct(coords[]:Coord, markerStyle?:symbol, markerSize?:number, lineStyle?:symbol)

//-----------------------------------------------------------------------------
// Graph
//-----------------------------------------------------------------------------
Graph = class {
	public {
		xMin, xMax
		yMin, yMax
		cntSamples,
		markerStyleDefault,
		markerSizeDefault,
		lineStyleDefault,
	}
	__init__() = {
		this.funcs = []
		this.plots = []
		[this.xMin, this.xMax] = [-10, 10]
		[this.yMin, this.yMax] = [-10, 10]
		this.cntSamples = 100
		this.markerStyleDefault = `square
		this.markerSizeDefault = 10
		this.lineStyleDefault = `none
		this.dict@drawMarker = %{
			`pixel			=> this.drawMarker_pixel
			`square			=> this.drawMarker_square
			`point			=> this.drawMarker_point
			`circle			=> this.drawMarker_circle
			`triangle_down	=> this.drawMarker_triangle_down
			`triangle_up	=> this.drawMarker_triangle_up
			`triangle_left	=> this.drawMarker_triangle_left
			`triangle_right	=> this.drawMarker_triangle_right
			`tri_down		=> this.drawMarker_tri_down
			`tri_up			=> this.drawMarker_tri_up
			`tri_left		=> this.drawMarker_tri_left
			`tri_right		=> this.drawMarker_tri_right
			`x				=> this.drawMarker_x
		}
	}
	coordX(x:number):map = {
		this.xAxis + (x - this.xMin) * this.wdAxis / (this.xMax - this.xMin)
	}
	coordY(y:number):map = {
		this.yAxis + this.htAxis - (y - this.yMin) * this.htAxis / (this.yMax - this.yMin)
	}
	coord(x:number, y:number) = [coordX(x), coordY(y)]
	calcStep(tMin:number, tMax:number) = {
		tRange = tMax - tMin
		nScales = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000]
		tStepBase = 10 ** (int(math.log10(tRange)) - 2)
		tSteps = tStepBase * nScales
		(tSteps.filter(tRange / tSteps >= 10):list).last()
	}
	drawHline(cr:cairo.context, x:number, y:number, width:number):map:void = {
		cr.move_to(x, y).rel_line_to(width, 0)
	}
	drawVline(cr:cairo.context, x:number, y:number, height:number):map:void = {
		cr.move_to(x, y).rel_line_to(0, height)
	}
	drawMarker(cr:cairo.context, x:number, y:number, markerStyle?:symbol, markerSize?:number):map:void = {
		markerStyle = markerStyle || this.markerStyleDefault
		markerSize = markerSize || this.markerSizeDefault
		this.dict@drawMarker[markerStyle](cr, x, y, markerSize)
	}
	drawMarker_pixel(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.rectangle(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize)
			cr.fill()
		}
	}
	drawMarker_square(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.rectangle(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize)
			cr.set_source_rgb(1, 1, 1)
			cr.fill_preserve()
			cr.set_source_rgb(0, 0, 0)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_point(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.arc(x, y, markerSize / 2, 0, math.pi * 2)
			cr.fill()
		}
	}
	drawMarker_circle(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.arc(x, y, markerSize / 2, 0, math.pi * 2)
			cr.set_source_rgb(1, 1, 1)
			cr.fill_preserve()
			cr.set_source_rgb(0, 0, 0)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	makePath_triangle_down(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x, y + markerSizeHalf)
		cr.line_to(x - markerSizeTan, y - markerSizeHalf)
		cr.line_to(x + markerSizeTan, y - markerSizeHalf)
		cr.line_to(x, y + markerSizeHalf)
	}
	makePath_triangle_up(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x, y - markerSizeHalf)
		cr.line_to(x - markerSizeTan, y + markerSizeHalf)
		cr.line_to(x + markerSizeTan, y + markerSizeHalf)
		cr.line_to(x, y - markerSizeHalf)
	}
	makePath_triangle_left(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x - markerSizeHalf, y)
		cr.line_to(x + markerSizeHalf, y - markerSizeTan)
		cr.line_to(x + markerSizeHalf, y + markerSizeTan)
		cr.line_to(x - markerSizeHalf, y)
	}
	makePath_triangle_right(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x + markerSizeHalf, y)
		cr.line_to(x - markerSizeHalf, y - markerSizeTan)
		cr.line_to(x - markerSizeHalf, y + markerSizeTan)
		cr.line_to(x + markerSizeHalf, y)
	}
	drawMarker_triangle_down(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_down(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_triangle_up(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_up(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_triangle_left(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_left(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_triangle_right(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_right(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_tri_down(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_down(cr, x, y, markerSize)
			cr.set_source_rgb(1, 1, 1)
			cr.fill_preserve()
			cr.set_source_rgb(0, 0, 0)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_tri_up(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_up(cr, x, y, markerSize)
			cr.set_source_rgb(1, 1, 1)
			cr.fill_preserve()
			cr.set_source_rgb(0, 0, 0)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_tri_left(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_left(cr, x, y, markerSize)
			cr.set_source_rgb(1, 1, 1)
			cr.fill_preserve()
			cr.set_source_rgb(0, 0, 0)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_tri_right(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_right(cr, x, y, markerSize)
			cr.set_source_rgb(1, 1, 1)
			cr.fill_preserve()
			cr.set_source_rgb(0, 0, 0)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_x(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		cr.save {
			cr.move_to(x - markerSizeHalf, y - markerSizeHalf)
			cr.line_to(x + markerSizeHalf, y + markerSizeHalf)
			cr.move_to(x + markerSizeHalf, y - markerSizeHalf)
			cr.line_to(x - markerSizeHalf, y + markerSizeHalf)
			cr.set_source_rgb(0, 0, 0)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	draw(cr:cairo.context, xAxis:number, yAxis:number, wdAxis:number, htAxis:number) = {
		[this.wdAxis, this.htAxis] = [wdAxis, htAxis]
		[this.xAxis, this.yAxis] = [xAxis, yAxis]
		this.markerSizeDefault = 10
		x = 60, y = 60, wdSkip = 40
		this.drawMarker(cr, x, y, `pixel), x += wdSkip
		this.drawMarker(cr, x, y, `square), x += wdSkip
		this.drawMarker(cr, x, y, `point), x += wdSkip
		this.drawMarker(cr, x, y, `circle), x += wdSkip
		this.drawMarker(cr, x, y, `triangle_down), x += wdSkip
		this.drawMarker(cr, x, y, `triangle_up), x += wdSkip
		this.drawMarker(cr, x, y, `triangle_left), x += wdSkip
		this.drawMarker(cr, x, y, `triangle_right), x += wdSkip
		x = 60, y = 100, wdSkip = 40
		this.drawMarker(cr, x, y, `tri_down), x += wdSkip
		this.drawMarker(cr, x, y, `tri_up), x += wdSkip
		this.drawMarker(cr, x, y, `tri_left), x += wdSkip
		this.drawMarker(cr, x, y, `tri_right), x += wdSkip
		this.drawMarker(cr, x, y, `x), x += wdSkip
		cr.set_line_width(1)
		cr.save {
			cr.set_antialias(cairo.ANTIALIAS_NONE)
			cr.rectangle(this.xAxis, this.yAxis, this.wdAxis, this.htAxis)
			cr.stroke()
		}
		cr.rectangle(this.xAxis, this.yAxis, this.wdAxis, this.htAxis)
		cr.clip()
		cr.save {
			cr.set_antialias(cairo.ANTIALIAS_NONE)
			cr.set_dash([], 0)
			this.drawVline(cr, this.coordX(0), this.yAxis, this.htAxis)
			this.drawHline(cr, this.xAxis, this.coordY(0), this.wdAxis)
			cr.stroke()
			cr.set_dash([2, 2], 0)
			scope {
				tStep = this.calcStep(this.xMin, this.xMax)
				xs = (int(this.xMin / tStep) + \
						(0 .. int((this.xMax - this.xMin) / tStep))) * tStep
				this.drawVline(cr, this.coordX(xs), this.yAxis, this.htAxis)
			}
			scope {
				tStep = this.calcStep(this.yMin, this.yMax)
				ys = (int(this.yMin / tStep) + \
						(0 .. int((this.yMax - this.yMin) / tStep))) * tStep
				this.drawHline(cr, this.xAxis, this.coordY(ys), this.wdAxis)
			}
			cr.stroke()
		}
		cr.save {
			x = interval(this.xMin, this.xMax, this.cntSamples)
			y = interval(this.yMin, this.yMax, this.cntSamples)
			cr.set_antialias(cairo.ANTIALIAS_DEFAULT)
			for (func in this.funcs) {
				syms = [func.decls:*symbol]
				if (syms.len() != 1) {
					raise(error.ValueError, 'wrong number of arguments')
				}
				sym = syms.first()
				if (sym == `y) {
					cr.line_to(this.coordX(func(y)), this.coordY(y))
				} else {
					cr.line_to(this.coordX(x), this.coordY(func(x)))
				}
				cr.stroke()
			}
		}
		cr.save {
			this.plots.each {|plot, i|
				lineStyle = plot.lineStyle || this.lineStyleDefault
				if (lineStyle != `none) {
					plot.coords.each {|coord, i|
						[x, y] = [this.coordX(coord.x), this.coordY(coord.y)]
						if (i == 0) {
							cr.move_to(x, y)
						} else {
							cr.line_to(x, y)
						}
					}
					cr.stroke()
				}
				plot.coords.each {|coord|
					[x, y] = [this.coordX(coord.x), this.coordY(coord.y)]
					this.drawMarker(cr, x, y, plot.markerStyle, plot.markerSize)
				}
			}
		}
	}
	plot(coords[]:Coord, markerStyle?:symbol, markerSize?:number, lineStyle?:symbol) = {
		this.plots.add(Plot(coords, markerStyle, markerSize, lineStyle))
	}
	addFunc(func:function) = {
		idx = (this.funcs::name == func.name).find():index
		idx && this.funcs.erase(idx)
		this.funcs.add(func)
	}
}

MakeRandCoords(xCenter:number, yCenter:number, xRange:number, yRange:number) = {
	Coord(xCenter + rands(nil, 10) * xRange - xRange / 2, yCenter + rands(nil, 10) * yRange - yRange / 2)
}

img = image(`rgba, 600, 600, `white)
img.cairo {|cr|
	dir(cr.surface)
	g = Graph()
	g.addFunc(function(x) {math.sin(x)})
	//g.addFunc(function(x) {math.cos(x)})
	g.addFunc(math.cos)
	g.plot(MakeRandCoords(5, 5, 5, 5), `circle, 10, `solid)
	g.plot(MakeRandCoords(5, -5, 5, 5), `point, 10)
	g.draw(cr, 10, 10, 580, 580)
}
img.show(680, 680)

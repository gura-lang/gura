#!/usr/bin/env gura
import(cairo)
import(wx.show)

classref(`cairo.context) {|ref|
	ref.hline(x:number, y:number, width:number):map:reduce = {
		this.move_to(x, y).rel_line_to(width, 0)
	}
	ref.vline(x:number, y:number, height:number):map:reduce = {
		this.move_to(x, y).rel_line_to(0, height)
	}
}

//-----------------------------------------------------------------------------
// Graph
//-----------------------------------------------------------------------------
Graph = class {
	public {
		xMin, xMax
		yMin, yMax
		cntSamples,
	}
	__init__() = {
		this.funcs = []
		this.plots = []
		[this.xMin, this.xMax] = [-10, 10]
		[this.yMin, this.yMax] = [-10, 10]
		this.cntSamples = 100
	}
	coordX(x:number):map = {
		this.xAxis + (x - this.xMin) * this.wdAxis / (this.xMax - this.xMin)
	}
	coordY(y:number):map = {
		this.yAxis + this.htAxis - (y - this.yMin) * this.htAxis / (this.yMax - this.yMin)
	}
	coord(x:number, y:number) = [coordX(x), coordY(y)]
	calcStep(tMin:number, tMax:number) = {
		tRange = tMax - tMin
		nScales = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000]
		tStepBase = 10 ** (int(math.log10(tRange)) - 2)
		tSteps = tStepBase * nScales
		(tSteps.filter(tRange / tSteps >= 10):list).last()
	}
	draw(cr:cairo.context) = {
		[this.wdAxis, this.htAxis] = [cr.width * .9, cr.height * .9]
		[this.xAxis, this.yAxis] = [(cr.width - this.wdAxis) / 2, (cr.height - this.htAxis) / 2]
		cr.set_line_width(1)
		cr.save {
			cr.set_antialias(cairo.ANTIALIAS_NONE)
			cr.rectangle(this.xAxis, this.yAxis, this.wdAxis, this.htAxis)
			cr.stroke()
		}
		cr.rectangle(this.xAxis, this.yAxis, this.wdAxis, this.htAxis)
		cr.clip()
		cr.save {
			cr.set_antialias(cairo.ANTIALIAS_NONE)
			cr.set_dash([], 0)
			cr.vline(this.coordX(0), this.yAxis, this.htAxis)
			cr.hline(this.xAxis, this.coordY(0), this.wdAxis)
			cr.stroke()
			cr.set_dash([2, 2], 0)
			scope {
				tStep = this.calcStep(this.xMin, this.xMax)
				xs = (int(this.xMin / tStep) + \
						(0 .. int((this.xMax - this.xMin) / tStep))) * tStep
				cr.vline(this.coordX(xs), this.yAxis, this.htAxis)
			}
			scope {
				tStep = this.calcStep(this.yMin, this.yMax)
				ys = (int(this.yMin / tStep) + \
						(0 .. int((this.yMax - this.yMin) / tStep))) * tStep
				cr.hline(this.xAxis, this.coordY(ys), this.wdAxis)
			}
			cr.stroke()
		}
		cr.save {
			x = interval(this.xMin, this.xMax, this.cntSamples)
			y = interval(this.yMin, this.yMax, this.cntSamples)
			cr.set_antialias(cairo.ANTIALIAS_DEFAULT)
			for (func in this.funcs) {
				syms = [func.decls:*symbol]
				if (syms.len() != 1) {
					raise(error.ValueError, 'wrong number of arguments')
				}
				sym = syms.first()
				if (sym == `y) {
					cr.line_to(this.coordX(func(y)), this.coordY(y))
				} else {
					cr.line_to(this.coordX(x), this.coordY(func(x)))
				}
				cr.stroke()
			}
		}
		cr.save {
			for (plot in this.plots) {
				t = interval(plot.tMin, plot.tMax, this.cntSamples)
				cr.line_to(this.coordX(plot.x.eval()), this.coordY(plot.y.eval()))
				cr.stroke()
			}
		}
	}
	addFunc(func:function) = {
		idx = (this.funcs::name == func.name).find():index
		idx && this.funcs.erase(idx)
		this.funcs.add(func)
	}
}

img = image(`rgba, 300, 300, `white)
img.cairo {|cr|
	dir(cr.surface)
	g = Graph()
	g.addFunc(math.sin)
	g.addFunc(math.cos)
	g.draw(cr)
}
img.show()

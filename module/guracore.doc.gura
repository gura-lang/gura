#!/usr/bin/env gura
import(markdown)
import(arrayt)

Entry = struct(label:string, symbol:symbol)

entries = @(Entry) {
	{ 'argument',			`argument			}
	{ 'array',				`array				}
	{ 'audio',				`audio				}
	{ 'binary',				`binary				}
	{ 'boolean',			`boolean			}
	{ 'codec',				`codec				}
	{ 'color',				`color				}
	{ 'complex',			`complex			}
	{ 'datetime',			`datetime			}
	{ 'declaration',		`declaration		}
	{ 'dict',				`dict				}
	{ 'directory',			`directory			}
	{ 'environment',		`environment		}
	{ 'error',				`error				}
	{ 'expr',				`expr				}
	{ 'formatter',			`formatter			}
	{ 'function',			`function			}
	{ 'gear@averagepool1d',	`gear@averagepool1d	}
	{ 'gear@averagepool2d',	`gear@averagepool2d	}
	{ 'gear@averagepool3d',	`gear@averagepool3d	}
	{ 'gear@conv1d',		`gear@conv1d		}
	{ 'gear@conv2d',		`gear@conv2d		}
	{ 'gear@conv3d',		`gear@conv3d		}
	{ 'gear@maxpool1d',		`gear@maxpool1d		}
	{ 'gear@maxpool2d',		`gear@maxpool2d		}
	{ 'gear@maxpool3d',		`gear@maxpool3d		}
	{ 'gear@relu',			`gear@relu			}
	{ 'gear@sigmoid',		`gear@sigmoid		}
	{ 'gear@softmax',		`gear@softmax		}
	{ 'gear@tanh',			`gear@tanh			}
	{ 'help',				`help				}
	{ 'image',				`image				}
	{ 'iterator/list',		`iterator			}
	{ 'memory',				`memory				}
	{ 'nil',				`nil				}
	{ 'number',				`number				}
	{ 'operator',			`operator			}
	{ 'optimizer',			`optimizer			}
	{ 'palette',			`palette			}
	{ 'pointer',			`pointer			}
	{ 'rational',			`rational			}
	{ 'semaphore',			`semaphore			}
	{ 'stream',				`stream				}
	{ 'string',				`string				}
	{ 'suffixmgr',			`suffixmgr			}
	{ 'symbol',				`symbol				}
	{ 'template',			`template			}
	{ 'timedelta',			`timedelta			}
	{ 'uri',				`uri				}
	{ 'vertex',				`vertex				}
}

text@en = '# Built-in Class\n'

entries.each {|entry|
	text@en += e'\n\n## ${entry.label} Class\n\n'
	text@en += markdown.makedoc@class(`en, classref(entry.symbol), headeroff => 2)
}

markdown.document_server(locals(), %{`en => text@en})

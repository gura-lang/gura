#!/usr/bin/env gura

calendar(year:number, weekoffset:number => 0, ncols:number => 3) = {
	calOfMonth(year:number, month:number) = {
		offsetFirst = (datetime.weekday(year, month, 1) + 7 - weekoffset) % 7
		days = [consts('  ', offsetFirst),
				(1..datetime.monthdays(year, month)).format('%2d')]
		days.fold(7).align(6, []):*align(7, '  '):*join(' ')
	}
	monthNames = [
		'', 'January', 'February', 'March', 'April', 'May', 'June',
		'July', 'August', 'September', 'October', 'November', 'December',
	]
	weekAbbrs = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
	weekAbbrs = weekAbbrs.cycle(7 + weekoffset).offset(weekoffset):list
	weekLine = weekAbbrs.join(' ')
	wdPerMonth = 3 * 7 - 1
	wdSep = 6
	sep = ' ' * wdSep
	rtn = []
	rtn.add(format('%04d', year).align((wdPerMonth + wdSep) * ncols - wdSep):center)
	rtn.add('')
	repeat (math.ceil(12 / ncols)) {|iRow|
		month = iRow * ncols + 1
		ncolsCur = min(ncols, 12 - month + 1)
		months = month..(month + ncolsCur - 1)
		rtn.add((monthNames[months]:*align(wdPerMonth):center).join(sep))
		rtn.add(repeat(ncolsCur):list { weekLine }.join(sep))
		lines = dim(6) {''}
		repeat (ncolsCur) {|iCol|
			if (iCol > 0) { lines += sep }
			lines += calOfMonth(year, month + iCol)
		}
		rtn.append(lines)
	}
} %% {`en, 'markdown', R'''
Prints calendars of a specified year.
The argument `weekoffset` specifies from which week the calendar starts,
`0` from Sunday, `1` from Monday, and so on.
The argument `ncols` specifies how many months are printed in one row.
'''
}

if (__name__ == '__main__') {
	import(argopt)
	argopt.Parser {|p|
		p.addParam('weekoffset',	'w', 'specify which week to print on the left', 'NUM', '0')
		p.addParam('ncols',			'n', 'specify number of columns', 'NUM', '3')
		p.addFlag('help',			'h', 'print help')
		try {
			[cfg, argv] = p.parse(sys.argv)
		} catch {|e|
			sys.stderr.println(e.text)
			sys.exit(1)
		}
		if (cfg['help']) {
			sys.stderr.printf('usage: calendar [options] [year]\n')
			sys.stderr.printf('options:\n')
			sys.stderr.println(' ', p.formatHelp())
			sys.exit(0)
		}
		year = if (argv.len() < 1) {
			datetime.today().year
		} else {
			argv[0].tonumber()
		}
		weekoffset = cfg['weekoffset'].tonumber()
		ncols = cfg['ncols'].tonumber()
	}
	println(calendar(year, weekoffset, ncols))
}

#!/bin/usr/env gura

if (sys.argv.len() < 1) {
	sys.stderr.println('module name needs to be specified')
	sys.exit(1)
}
fields = path.filename(sys.argv[0]).split('.'):list
dotName = fields.join('.')
ubarName = fields.join('_')
slashName = fields.join('/')
localName = fields[-1]
fileBuild = 'build.gura'
fileTest = 'test-' + ubarName + '.gura'
fileHdr = 'module-' + ubarName + '.h'
fileSrc = 'module-' + ubarName + '.cpp'
incOnceMacroName = '__MODULE_' + ubarName.upper()  + '_H__'
if (path.exists(fileBuild) || path.exists(fileHdr) || path.exists(fileSrc)) {
	println('file already exists')
	sys.exit(1)
}
R'''
#!/usr/bin/env gura
import(modbuild)

builder = modbuild.Builder()
builder.build('${slashName}', ['module-${ubarName}.cpp'])
'''.template(open(fileBuild, 'w').addcr(false))
fs.chmod('a+x', fileBuild)
R'''
#!/usr/bin/env gura
import(${dotName})

println(${dotName}.test(3, 4))
'''.template(open(fileTest, 'w').addcr(false))
fs.chmod('a+x', fileTest)
R'''
//-----------------------------------------------------------------------------
// Gura ${dotName} module
//-----------------------------------------------------------------------------
#ifndef ${incOnceMacroName}
#define ${incOnceMacroName}
#include <gura.h>

Gura_BeginModule(${ubarName})
}}

#endif
'''.template(open(fileHdr, 'w').addcr(false))
R'''
//-----------------------------------------------------------------------------
// Gura ${dotName} module
//-----------------------------------------------------------------------------
#include "${fileHdr}"

Gura_BeginModule(${ubarName})

//-----------------------------------------------------------------------------
// Gura module functions: ${dotName}
//-----------------------------------------------------------------------------
// ${dotName}.test(num1:number, num2:number)
Gura_DeclareFunction(test)
{
	SetMode(RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "num1", VTYPE_number);
	DeclareArg(env, "num2", VTYPE_number);
	AddHelp(Gura_Symbol(en), Help::FMT_markdown,
	"This function adds two numbers and returns the result."
	);
}

Gura_ImplementFunction(test)
{
	return Value(args.GetNumber(0) + args.GetNumber(1));
}

//-----------------------------------------------------------------------------
// Module entry
//-----------------------------------------------------------------------------
Gura_ModuleEntry()
{
	// function assignment
	Gura_AssignFunction(test);
}

Gura_ModuleTerminate()
{
}

Gura_EndModule(${ubarName}, ${localName})

Gura_RegisterModule(${ubarName})
'''.template(open(fileSrc, 'w').addcr(false))

println(fileBuild, ', ', fileTest, ', ', fileHdr, ' and ', fileSrc, ' were created')
/*
R'''
To create a module binary file, execute the following command:
  gura build.gura --here
This would create the file in the current directory.
'''.template(sys.stdout)
*/
sys.exit(0)

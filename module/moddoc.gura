#!/usr/bin/env gura
//==============================================================================
// helper.makedoc.gura
// Helper module to create a makedoc@foo module that provides document for
// a module.
//==============================================================================
import(markdown)

suffixmgr(`string).assign(`moddoc) {|str| str.template().render()}

_funcdoc(func:function, fullname:string, fmt:string):map = {
	str = '**' + fullname.replace('_', '\\_').replace('`', '\\`') + '**\n\n'
	if (fmt.find('`')) {
		str += '`` ' + fmt + '``\n\n'
	} else {
		str += '`' + fmt + '`\n\n'
	}
	if (help = function.gethelp(func, `en)) {
		str +=  help.text
		if (!str.endswith('\n')) { str += '\n' }
		str += '\n'
	}
	str
}

funcdoc(funcs*:function) = {
	funcs = funcs.each()
	_funcdoc(funcs, function.getfullname(funcs), function.getformat(funcs))
}

register(mod:environment, d:dict) = {
	mod.write(doc:markdown.document, lang:symbol) = {
		doc << d.get(lang, d[d.keys().next()])
	}
	if (mod.__name__ == '__main__') {
		mod.write(markdown.document(), `en).render@html(sys.stdout)
	}
} % {`en, 'markdown', R'''
Registers a dictionary of document texts written in Markdown format
that are associated with language symbols as their keys.

The argument `mod` takes an `environment` instance referring to the module
envioronemnt in which the documents are provided.
You should usually specify `locals()` for that argument.

Below is an example to call this function:

    text@en = '..'
    text@ja = '..'
    text@fr = '..'
    register(locals(), %{
        `en => text@en
        `ja => text@ja
        `fr => text@fr
	})

It creates a module function that has the following format:

    write(doc:markdown.document, lang:symbol)

The argument `doc` is a `markdown.document` instance into which the document is poured.

The argument `lang` is a symbol that specifies the language.
'''}

#!/usr/bin/env gura
//==============================================================================
// helper.makedoc.gura
// Helper module to create a makedoc@foo module that provides document for
// a module.
//==============================================================================
import(markdown)

funcdoc = markdown.funcdoc

register(mod:environment) {`block} = {
	d = dict {|block|}
	mod.write(doc:markdown.document, lang:symbol) = {
		doc << d.get(lang, d[d.keys().next()])
	}
	if (mod.__name__ == '__main__') {
		mod.write(markdown.document(), `en).render@html(sys.stdout)
	}
} % {`en, 'markdown', R'''
Registers a list of documents that appear in the block as dictionary pairs
of a language symbol and a document text described in Markdown format.

The argument `mod` takes an `environment` instance referring to the module
envioronemnt in which the documents are provided.
You should usually specify `locals()` for that argument.

Below is an example to call this function:

    text@en = '..'
    text@ja = '..'
    text@fr = '..'
    register(locals()) {
        `en => text@en
        `ja => text@ja
        `fr => text@fr
    }

It creates a module function that has the following format:

    write(doc:markdown.document, lang:symbol)

The argument `doc` is a `markdown.document` instance into which the document is poured.

The argument `lang` is a symbol that specifies the language.
'''}

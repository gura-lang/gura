#!/usr/bin/env gura
# -*- coding: utf-8 -*-
import(mswin)
import(wx)
import(zip)

//-----------------------------------------------------------------------------
// transalation
//-----------------------------------------------------------------------------
transTbl_ja = %{
	'Gura Application Setup'				=> 'Gura アプリケーションセットアップ'
	'Copy files to the directory:'			=> 'ファイルを以下のディレクトリにコピーする:'
	'Create a desktop icon'					=> 'デスクトップアイコンを作成する'
	'Create a start menu icon (Gura\\Application\\%s)' => \
		'スタートメニューアイコンを作成する (Gura\\Application\\%s)'
	'Setup has been done successfully.'		=> 'セットアップを完了しました'
	'Setup'									=> 'セットアップ'
	'Cancel'								=> 'キャンセル'
}

if (mswin.GetACP() == 932) {
	string.translator {|x| transTbl_ja.get(x, x)}
}

//-----------------------------------------------------------------------------
// global variables
//-----------------------------------------------------------------------------
caption = 'Gura Application Setup'$

//-----------------------------------------------------------------------------
// execute
//-----------------------------------------------------------------------------
execute(launcherName:string, dirNameDst:string:nil,
		fileNameScript:string, fileNameIcon:string, fileNamesExtra[]:string) = {
	dirNameDst = dirNameDst || path.join(sys.appdir,
								path.basename(path.filename(fileNameScript)))
	Dialog.launcherName = launcherName
	Dialog.dirNameDst = dirNameDst
	Dialog.fileNameScript = fileNameScript
	Dialog.fileNameIcon = fileNameIcon
	Dialog.fileNamesExtra = fileNamesExtra
	Dialog.errorMsg = nil
	wx.IMPLEMENT_APP(App)
}

//-----------------------------------------------------------------------------
// Dialog
//-----------------------------------------------------------------------------
Dialog = class(wx.Dialog) {
	__init__(title:string => caption, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.Size(480, 220)) = {|nil, wx.ID_ANY, title, pos, size|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 4))
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			if (fileNameIcon) {
				wx.StaticBitmap(this, wx.ID_ANY, wx.NullBitmap) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags().Expand())
					ctrl.SetIcon(wx.Icon(fileNameIcon, wx.BITMAP_TYPE_ICO))
				}
			}
			wx.StaticText(this, wx.ID_ANY, launcherName) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Centre().Border(wx.LEFT, 8))
				font = ctrl.GetFont()
				font.SetPointSize(12)
				font.SetWeight(wx.FONTWEIGHT_BOLD)
				ctrl.SetFont(font)
			}
		}
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 4))
		}
		wx.BoxSizer(wx.VERTICAL) {|vboxIn|
			vbox.Add(vboxIn, wx.SizerFlags(1).Expand().Border(wx.LEFT | wx.RIGHT, 8))
			vbox:local = vboxIn
			wx.BoxSizer(wx.VERTICAL) {|vboxIn|
				vbox.Add(vboxIn, wx.SizerFlags(1).Expand().Border(wx.TOP, 16))
				vbox:local = vboxIn
				wx.CheckBox(this, wx.ID_ANY, 'Copy files to the directory:'$) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Expand())
					ctrl.SetValue(true)
					ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
					this.chkboxCopyFiles = ctrl
				}
				wx.StaticText(this, wx.ID_ANY, dirNameDst) {|ctrl|
					vbox.AddSpacer(8)
					vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 16))
				}
			}
			wx.CheckBox(this, wx.ID_ANY, 'Create a desktop icon'$) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 8))
				ctrl.SetValue(true)
				ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
				this.chkboxDesktopIcon = ctrl
			}
			wx.CheckBox(this, wx.ID_ANY,
					'Create a start menu icon (Gura\\Application\\%s)'$ % launcherName) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 8))
				ctrl.SetValue(false)
				ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
				this.chkboxStartMenuIcon = ctrl
			}
		}
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 16))
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Center().Border(wx.TOP, 8))
			wx.Button(this, wx.ID_OK, 'Setup'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
				this.btnSetup = ctrl
			}
			wx.Button(this, wx.ID_CANCEL, 'Cancel'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 16))
				ctrl.SetDefault()
				ctrl.SetFocus()
				this.btnCancel = ctrl
			}
		}
		this.UpdateStatus()
		this.Bind(wx.EVT_BUTTON, wx.ID_OK) {|event| this.OnButton_Setup(event)}
	}
	UpdateStatus() = {
		this.btnSetup.Enable(
			this.chkboxCopyFiles.GetValue() || \
			this.chkboxDesktopIcon.GetValue() || \
			this.chkboxStartMenuIcon.GetValue())
	}
	OnButton_Setup(event:wx.CommandEvent) = {
		frame = wx.App.GetInstance().GetTopWindow()
		dlg = nil
		try {
			wsh = mswin.ole('Wscript.shell')
			fs.mkdir(dirNameDst):tree
			fileNamesToCopy = [fileNameScript, fileNameIcon]
			fileNamesToCopy.append(fileNamesExtra)
			if (this.chkboxCopyFiles.GetValue()) {
				stream.copy(path.join(sys.maindir, fileNamesToCopy),
							path.join(dirNameDst, fileNamesToCopy)):finalize
			} else {
				dirNameDst = fs.getcwd()
			}
			dirNames = []
			if (this.chkboxDesktopIcon.GetValue()) {
				dirNames.add(wsh.SpecialFolders('Desktop'))
			}
			if (this.chkboxStartMenuIcon.GetValue()) {
				dirName = path.join(wsh.SpecialFolders('StartMenu'), 'Gura/Application')
				!path.exists(dirName) && fs.mkdir(dirName):tree
				dirNames.add(dirName)
			}
			dirNames.each {|dirName|
				shortCut = wsh.CreateShortcut(path.join(dirName, launcherName + '.lnk'))
				shortCut.WindowStyle = 4 // 3:Maximized, 4:Normal, 7:Minimized
				shortCut.IconLocation = path.join(dirNameDst, fileNameIcon)
				shortCut.TargetPath = path.join(path.dirname(sys.executable),
					cond(fileNameScript.endswith('.gura'):icase, 'gura.exe', 'guraw.exe'))
				shortCut.Arguments = path.join(dirNameDst, fileNameScript)
				shortCut.WorkingDirectory = dirNameDst
				shortCut.Save()
			}
			dlg = wx.MessageDialog(frame, 'Setup has been done successfully.'$, caption,
							wx.OK | wx.CENTRE | wx.ICON_INFORMATION)
			wsh = nil
		} catch {|e|
			dlg = wx.MessageDialog(frame, e.text, caption,
							wx.OK | wx.CENTRE | wx.ICON_ERROR)
		}
		dlg.ShowModal()
		this.Close()
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		Dialog().ShowModal()
		false
	}
}

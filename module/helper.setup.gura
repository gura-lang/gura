#!/usr/bin/env gura
# -*- coding: utf-8 -*-
import(wx)
import(zip)
import(msico)

//-----------------------------------------------------------------------------
// global variables
//-----------------------------------------------------------------------------
caption = nil

//-----------------------------------------------------------------------------
// execute
//-----------------------------------------------------------------------------
execute(launcherName:string, version:string, shortName:string,
		fileNameScript:string, fileNameIcon:string,
		fileNamesExtra[]:string, fileNamesClean[]:string) = {
	caption:extern = 'Gura Application Setup'$
	Dialog.launcherName		= launcherName
	Dialog.version			= version
	Dialog.shortName		= shortName
	Dialog.dirNameDst		= path.join(sys.appdir, shortName)
	Dialog.fileNameScript	= fileNameScript
	Dialog.fileNameIcon		= fileNameIcon
	Dialog.fileNamesExtra	= fileNamesExtra
	Dialog.fileNamesClean	= fileNamesClean
	Dialog.errorMsg = nil
	wx.IMPLEMENT_APP(App)
}

//-----------------------------------------------------------------------------
// Dialog
//-----------------------------------------------------------------------------
Dialog = class(wx.Dialog) {
	[ID_CreateZIP] = wx.ID_HIGHEST..
	__init__(title:string => caption, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.Size(480, 300)) = {|nil, wx.ID_ANY, title, pos, size|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 4))
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			if (fileNameIcon) {
				wx.StaticBitmap(this, wx.ID_ANY, wx.NullBitmap) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags().Expand())
					ctrl.SetBitmap(image(path.join(sys.maindir, fileNameIcon)).resize(32))
					//ctrl.SetIcon(wx.Icon(fileNameIcon, wx.BITMAP_TYPE_ICO))
					ctrl.Bind(wx.EVT_RIGHT_DOWN) {|event|
						wx.Menu {|m|
							m.Append(ID_CreateZIP, 'Create &ZIP')
							this.PopupMenu(m)
						}
					}
				}
			}
			wx.BoxSizer(wx.HORIZONTAL) {|hboxIn|
				hbox.Add(hboxIn, wx.SizerFlags().Centre().Border(wx.LEFT, 8))
				hbox:local = hboxIn
				wx.StaticText(this, wx.ID_ANY, launcherName) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags())
					font = ctrl.GetFont()
					font.SetPointSize(12)
					font.SetWeight(wx.FONTWEIGHT_BOLD)
					ctrl.SetFont(font)
				}
				wx.StaticText(this, wx.ID_ANY, 'version ' + version) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_BOTTOM).Border(wx.LEFT, 8))
				}
			}
		}
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 4))
		}
		vbox.AddStretchSpacer(1)
		wx.BoxSizer(wx.VERTICAL) {|vboxIn|
			vbox.Add(vboxIn, wx.SizerFlags(1).Expand().Border(wx.LEFT | wx.RIGHT, 8))
			vbox:local = vboxIn
			wx.BoxSizer(wx.VERTICAL) {|vboxIn|
				vbox.Add(vboxIn, wx.SizerFlags(1).Expand())
				vbox:local = vboxIn
				wx.CheckBox(this, wx.ID_ANY, 'Copy files to the directory:'$) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Expand())
					ctrl.SetValue(true)
					ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
					this.chkboxCopyFiles = ctrl
				}
				wx.StaticText(this, wx.ID_ANY, dirNameDst) {|ctrl|
					vbox.AddSpacer(8)
					vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 16))
				}
			}
			wx.CheckBox(this, wx.ID_ANY, 'Create a desktop icon'$) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 8))
				ctrl.SetValue(true)
				ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
				this.chkboxDesktopIcon = ctrl
			}
			wx.CheckBox(this, wx.ID_ANY, 'Clean old configuration files etc.'$) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 8))
				ctrl.Enable(!fileNamesClean.isempty())
				ctrl.SetValue(false)
				this.chkboxCleanFiles = ctrl
			}
			wx.CheckBox(this, wx.ID_ANY,
					'Create a start menu icon (Gura\\Application\\%s)'$ % launcherName) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 8))
				ctrl.Enable(false)
				ctrl.SetValue(false)
				ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
				this.chkboxStartMenuIcon = ctrl
			}
		}
		vbox.AddStretchSpacer(1)
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand())
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Center().Border(wx.TOP, 8))
			wx.Button(this, wx.ID_OK, 'Setup'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
				this.btnSetup = ctrl
			}
			wx.Button(this, wx.ID_CANCEL, 'Cancel'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 16))
				ctrl.SetDefault()
				ctrl.SetFocus()
				this.btnCancel = ctrl
			}
		}
		this.UpdateStatus()
		this.Bind(wx.EVT_BUTTON, wx.ID_OK) {|event| this.OnButton_Setup(event)}
		this.Bind(wx.EVT_MENU, ID_CreateZIP) {|event| this.OnMenu_CreateZIP(event)}
	}
	UpdateStatus() = {
		this.btnSetup.Enable(
			this.chkboxCopyFiles.GetValue() || \
			this.chkboxDesktopIcon.GetValue() || \
			this.chkboxStartMenuIcon.GetValue())
	}
	GetFileNamesToCopy() = {
		fileNamesToCopy = [fileNameScript, fileNameIcon]
		fileNamesToCopy.append(fileNamesExtra)
		fileNamesToCopy
	}
	OnButton_Setup(event:wx.CommandEvent) = {
		import(mswin)
		dlg = nil
		try {
			wsh = mswin.ole('Wscript.shell')
			fs.mkdir(dirNameDst):tree
			fileNamesToCopy = this.GetFileNamesToCopy()
			if (this.chkboxCopyFiles.GetValue()) {
				stream.copy(path.join(sys.maindir, fileNamesToCopy),
							path.join(dirNameDst, fileNamesToCopy)):finalize
			} else {
				dirNameDst = fs.getcwd()
			}
			dirNames = []
			if (this.chkboxDesktopIcon.GetValue()) {
				dirNames.add(wsh.SpecialFolders('Desktop'))
			}
			if (this.chkboxStartMenuIcon.GetValue()) {
				dirName = path.join(wsh.SpecialFolders('StartMenu'), 'Gura/Application')
				!path.exists(dirName) && fs.mkdir(dirName):tree
				dirNames.add(dirName)
			}
			dirNames.each {|dirName|
				shortCut = wsh.CreateShortcut(path.join(dirName, launcherName + '.lnk'))
				shortCut.WindowStyle = 4 // 3:Maximized, 4:Normal, 7:Minimized
				shortCut.IconLocation = path.join(dirNameDst, fileNameIcon)
				shortCut.TargetPath = path.join(path.dirname(sys.executable),
					cond(fileNameScript.endswith('.gura'):icase, 'gura.exe', 'guraw.exe'))
				shortCut.Arguments = path.join(dirNameDst, fileNameScript)
				shortCut.WorkingDirectory = dirNameDst
				shortCut.Save()
			}
			if (this.chkboxCleanFiles.GetValue()) {
				fs.remove(fileNamesClean)
			}
			dlg = wx.MessageDialog(this, 'Setup has been done successfully.'$, caption,
							wx.OK | wx.CENTRE | wx.ICON_INFORMATION)
			wsh = nil
		} catch {|e|
			dlg = wx.MessageDialog(this, e.text, caption,
							wx.OK | wx.CENTRE | wx.ICON_ERROR)
		}
		dlg.ShowModal()
		this.Close()
	}
	OnMenu_CreateZIP(event:wx.CommandEvent) = {
		baseName = format('%s-%s', shortName, version)
		fileNameZIP = baseName + '.zip'
		fileNamesToCopy = this.GetFileNamesToCopy()
		fileNamesToCopy.append(path.filename(sys.argv[0]))
		writer = zip.writer(fileNameZIP)
		writer.add(fileNamesToCopy, baseName + '\\' + fileNamesToCopy):void
		writer.close()
		dlg = wx.MessageDialog(this, 'ZIP file %s was created.'$ % fileNameZIP, caption,
						wx.OK | wx.CENTRE | wx.ICON_INFORMATION)
		dlg.ShowModal()
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		Dialog().ShowModal()
		false
	}
}

//-----------------------------------------------------------------------------
// transalation
//-----------------------------------------------------------------------------
transDicts = %{
`ja => %{
'Gura Application Setup'				=> 'Gura アプリケーション セットアップ'
'Copy files to the directory:'			=> 'ファイルを以下のディレクトリにコピーする:'
'Create a desktop icon'					=> 'デスクトップアイコンを作成する'
'Clean old configuration files etc.'	=> '古いコンフィグレーションファイルなどを消去する'
'Create a start menu icon (Gura\\Application\\%s)' => \
	'スタートメニューアイコンを作成する (Gura\\Application\\%s)'
'Setup has been done successfully.'		=> 'セットアップを完了しました'
'Setup'									=> 'セットアップ'
'Cancel'								=> 'キャンセル'
'ZIP file %s was created.'				=> 'ZIP ファイル %s を作成しました'
}
}

(transDict = transDicts.get(sys.langcode)) && string.translator {|x| transDict.get(x, x)}

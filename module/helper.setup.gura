#!/usr/bin/env gura
# -*- coding: utf-8 -*-
import(wx)
import(zip)
import(msico)

//-----------------------------------------------------------------------------
// global variables
//-----------------------------------------------------------------------------
caption = nil

//-----------------------------------------------------------------------------
// execute
//-----------------------------------------------------------------------------
execute(launcherName:string, version:string, shortName:string,
		fileNameScript:string, fileNameIcon:string,
		fileNamesExtra[]:string, fileNamesClean[]:string,
		versionGura:string => '0.0.0', fileNameMacIcon?:string) = {
	caption:extern = 'Gura Application Setup'$
	Dialog.launcherName		= launcherName
	Dialog.version			= version
	Dialog.versionGura		= versionGura
	Dialog.shortName		= shortName
	Dialog.dirNameDst		= path.join(sys.appdir, shortName)
	Dialog.fileNameScript	= fileNameScript
	Dialog.fileNameIcon		= fileNameIcon
	Dialog.fileNameMacIcon	= fileNameMacIcon
	Dialog.fileNamesExtra	= fileNamesExtra
	Dialog.fileNamesClean	= fileNamesClean
	Dialog.errorMsg = nil
	wx.IMPLEMENT_APP(App)
}

//-----------------------------------------------------------------------------
// Dialog
//-----------------------------------------------------------------------------
Dialog = class(wx.Dialog) {
	public {
		versionGura
	}
	[ID_CreateZIP, ID_CreateDMG] = wx.ID_HIGHEST..
	__init__(title:string => caption) = {|nil, wx.ID_ANY, title|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		outerBox.SetMinSize(480, -1)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags().Expand())
		vbox.AddSpacer(8)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.LEFT | wx.RIGHT, 8))
			if (fileNameIcon) {
				wx.StaticBitmap(this, wx.ID_ANY, wx.NullBitmap) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags().Expand())
					ctrl.SetBitmap(image(path.join(sys.maindir, fileNameIcon)).resize(32))
				}
			}
			wx.BoxSizer(wx.HORIZONTAL) {|hboxIn|
				hbox.Add(hboxIn, wx.SizerFlags().Centre().Border(wx.LEFT, 8))
				hbox:local = hboxIn
				wx.StaticText(this, wx.ID_ANY, launcherName) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags())
					font = ctrl.GetFont()
					font.SetPointSize(12)
					font.SetWeight(wx.FONTWEIGHT_BOLD)
					ctrl.SetFont(font)
					ctrl.Bind(wx.EVT_RIGHT_DOWN) {|event| this.OnRightDown(event)}
				}
				wx.StaticText(this, wx.ID_ANY, 'version ' + version) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_BOTTOM).Border(wx.LEFT, 8))
				}
			}
		}
		vbox.AddSpacer(4)
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand())
		}
		vbox.AddSpacer(20)
		wx.BoxSizer(wx.VERTICAL) {|vboxIn|
			vbox.Add(vboxIn, wx.SizerFlags().Expand().Border(wx.LEFT | wx.RIGHT, 16))
			vbox:local = vboxIn
			wx.BoxSizer(wx.VERTICAL) {|vboxIn|
				vbox.Add(vboxIn, wx.SizerFlags().Expand())
				vbox:local = vboxIn
				wx.CheckBox(this, wx.ID_ANY, 'Copy files to the directory:'$) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Expand())
					ctrl.SetValue(true)
					ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
					this.chkboxCopyFiles = ctrl
				}
				vbox.AddSpacer(8)
				wx.TextCtrl(this, wx.ID_ANY, dirNameDst,
							style => wx.TE_READONLY | wx.BORDER_NONE) {|ctrl|
					vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT | wx.RIGHT, 16))
					ctrl.SetBackgroundColour(this.GetBackgroundColour())
				}
			}
			vbox.AddSpacer(12)
			wx.CheckBox(this, wx.ID_ANY, 'Create a desktop icon'$) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 8))
				ctrl.Enable(sys.platform == `mswin)
				ctrl.SetValue(sys.platform == `mswin)
				ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
				this.chkboxDesktopIcon = ctrl
			}
			vbox.AddSpacer(12)
			wx.CheckBox(this, wx.ID_ANY, 'Clean old configuration files etc.'$) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 8))
				ctrl.Enable(!fileNamesClean.isempty())
				ctrl.SetValue(false)
				ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
				this.chkboxCleanFiles = ctrl
			}
			vbox.AddSpacer(12)
			wx.CheckBox(this, wx.ID_ANY,
					'Create a start menu icon (Gura\\Application\\%s)'$ % launcherName) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 8))
				ctrl.Enable(false)
				ctrl.SetValue(false)
				ctrl.Bind(wx.EVT_CHECKBOX) {|even| this.UpdateStatus()}
				this.chkboxStartMenuIcon = ctrl
			}
		}
		vbox.AddSpacer(20)
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand())
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Center().Border(wx.TOP, 12))
			wx.Button(this, wx.ID_OK, 'Setup'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
				this.btnSetup = ctrl
			}
			wx.Button(this, wx.ID_CANCEL, 'Cancel'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 16))
				ctrl.SetDefault()
				ctrl.SetFocus()
				this.btnCancel = ctrl
			}
		}
		vbox.AddSpacer(12)
		this.SetSizerAndFit(outerBox)
		this.UpdateStatus()
		this.Bind(wx.EVT_BUTTON, wx.ID_OK) {|event| this.OnButton_Setup(event)}
		this.Bind(wx.EVT_MENU, ID_CreateZIP) {|event| this.OnMenu_CreateZIP(event)}
		this.Bind(wx.EVT_MENU, ID_CreateDMG) {|event| this.OnMenu_CreateDMG(event)}
	}
	UpdateStatus() = {
		this.btnSetup.Enable(
			this.chkboxCopyFiles.GetValue() || \
			this.chkboxDesktopIcon.GetValue() || \
			this.chkboxCleanFiles.GetValue() || \
			this.chkboxStartMenuIcon.GetValue())
	}
	GetFileNamesToCopy() = {
		fileNamesToCopy = [fileNameScript]
		fileNameIcon && fileNamesToCopy.append(fileNameIcon)
		fileNameMacIcon && fileNamesToCopy.append(fileNameMacIcon)
		fileNamesToCopy.append(fileNamesExtra)
		fileNamesToCopy
	}
	OnRightDown(event:wx.MouseEvent) = {
		wx.Menu {|m|
			m.Append(ID_CreateZIP, 'Create &ZIP file'$)
			m.Append(ID_CreateDMG, 'Create &DMG file'$)
			m.Enable(ID_CreateDMG, sys.platform == `darwin)
			this.PopupMenu(m)
		}
	}
	OnButton_Setup(event:wx.CommandEvent) = {
		dlg = nil
		try {
			fs.mkdir(dirNameDst):tree
			fileNamesToCopy = this.GetFileNamesToCopy()
			if (this.chkboxCopyFiles.GetValue()) {
				pathNamesSrc = path.join(sys.maindir, fileNamesToCopy)
				pathNamesDst = path.join(dirNameDst, fileNamesToCopy)
				stream.copy(pathNamesSrc, pathNamesDst):finalize
				pathNamesExecutable = pathNamesDst.filter(
						(pathNamesDst:*endswith(['.gura', '.guraw']):icase):*or())
				fs.chmod('a+x', pathNamesExecutable)
			} else {
				dirNameDst = fs.getcwd()
			}
			if (this.chkboxCleanFiles.GetValue()) {
				try {
					fs.remove(fileNamesClean)
				} catch {}
			}
			if (sys.platform == `mswin) {
				this.CreateShortcut_MSWin(dirNameDst)
			}
			dlg = wx.MessageDialog(this, 'Setup has been done successfully.'$, caption,
							wx.OK | wx.CENTRE | wx.ICON_INFORMATION)
		} catch {|e|
			dlg = wx.MessageDialog(this, e.text, caption,
							wx.OK | wx.CENTRE | wx.ICON_ERROR)
		}
		dlg.ShowModal()
		this.Close()
	}
	OnMenu_CreateZIP(event:wx.CommandEvent) = {
		baseName = format('%s-%s', shortName, version)
		fileNameZIP = baseName + '.zip'
		fileNamesToCopy = this.GetFileNamesToCopy()
		fileNamesToCopy.append(path.filename(sys.argv[0]))
		writer = zip.writer(fileNameZIP)
		writer.add(fileNamesToCopy, baseName + '\\' + fileNamesToCopy):void
		writer.close()
		dlg = wx.MessageDialog(this, 'ZIP file %s was created.'$ % fileNameZIP, caption,
						wx.OK | wx.CENTRE | wx.ICON_INFORMATION)
		dlg.ShowModal()
	}
	OnMenu_CreateDMG(event:wx.CommandEvent) = {
		baseName = format('%s-%s', shortName, version)
		fileNameDMG = baseName + '.dmg'
		fileNamesToCopy = this.GetFileNamesToCopy()
		//dirNameWork = path.join(sys.workdir, 'helper_setup_work')
		dirNameWork = 'helper_setup_work'
		path.exists(dirNameWork) && fs.rmdir(dirNameWork):tree
		fs.mkdir(dirNameWork)
		os.symlink('/Applications', path.join(dirNameWork, 'Applications'))
		dirNameContents = path.join(dirNameWork, launcherName + '.app', 'Contents')
		fs.mkdir(dirNameContents):tree
		dirNameMacOS = path.join(dirNameContents, 'MacOS')
		dirNameResources = path.join(dirNameContents, 'Resources')
		fs.mkdir(dirNameMacOS)
		fs.mkdir(dirNameResources)
		tmplInfoPlist = R'''
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
		<plist version="1.0">
		<dict>
		<key>CFBundleExecutable</key>
		<string>${launcherName}</string>
		<key>CFBundleIconFile</key>
		<string>${fileNameMacIcon}</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>APPL</string>
		</dict>
		</plist>
		'''.template()
		tmplLauncher = R'''
		#!/bin/sh
		dirNameCur=`dirname "$0"`
		pathNameGura="$dirNameCur/../../../Gura.app/Contents/Resources/bin/gura"
		if [ ! -e $pathNameGura ] ; then
			pathNameGura="/Applications/Gura.app/Contents/Resources/bin/gura"
			if [ ! -e $pathNameGura ] ; then
				pathNameGura=gura
			fi
		fi
		"$pathNameGura" "$dirNameCur/../Resources/${fileNameScript}"
		'''.template()
		open(path.join(dirNameContents, 'Info.plist'), 'w') {|f|
			tmplInfoPlist.render(f)
		}
		pathNameLauncher = path.join(dirNameMacOS, launcherName)
		open(pathNameLauncher, 'w') {|f|
			tmplLauncher.render(f)
		}
		fs.chmod('a+x', pathNameLauncher)
		fs.copy(fileNamesToCopy, dirNameResources)
		path.exists(fileNameDMG) && fs.remove(fileNameDMG)
		os.exec('hdiutil', 'create', '-quiet', '-srcfolder', dirNameWork,
				'-volname', baseName, fileNameDMG)
		dlg = wx.MessageDialog(this, 'DMG file %s was created.'$ % fileNameDMG, caption,
						wx.OK | wx.CENTRE | wx.ICON_INFORMATION)
		dlg.ShowModal()
	}
	CreateShortcut_MSWin(dirNameDst:string) = {
		import(mswin)
		wsh = mswin.ole('Wscript.shell')
		dirNames = []
		if (this.chkboxDesktopIcon.GetValue()) {
			dirNames.add(wsh.SpecialFolders('Desktop'))
		}
		if (this.chkboxStartMenuIcon.GetValue()) {
			dirName = path.join(wsh.SpecialFolders('StartMenu'), 'Gura/Application')
			!path.exists(dirName) && fs.mkdir(dirName):tree
			dirNames.add(dirName)
		}
		dirNames.each {|dirName|
			shortCut = wsh.CreateShortcut(path.join(dirName, launcherName + '.lnk'))
			shortCut.WindowStyle = 4 // 3:Maximized, 4:Normal, 7:Minimized
			if (fileNameIcon) {
				shortCut.IconLocation = path.join(dirNameDst, fileNameIcon)
			}
			shortCut.TargetPath = path.join(path.dirname(sys.executable),
				cond(fileNameScript.endswith('.gura'):icase, 'gura.exe', 'guraw.exe'))
			shortCut.Arguments = path.join(dirNameDst, fileNameScript)
			shortCut.WorkingDirectory = dirNameDst
			shortCut.Save()
		}
		wsh = nil
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		parent = nil
		[major, minor, patch] = Dialog.versionGura.split('.')::tonumber()
		try {
			sys.required_version(major, minor, patch)
		} catch {
			msg = R'''
			Gura %d.%d.%d or later is required.
			Latest version is available at the official site http://www.gura-lang.org/.
			'''$ % [major, minor, patch]
			wx.MessageDialog(parent, msg
							 'Error', wx.OK | wx.ICON_ERROR | wx.CENTRE) {|dlg|
							 dlg.ShowModal()
			}
			return(false)
		}
		dlg = Dialog()
		dlg.CentreOnScreen()
		dlg.ShowModal()
		false
	}
}

//-----------------------------------------------------------------------------
// transalation
//-----------------------------------------------------------------------------
transDicts = %{
`ja => %{
'Gura Application Setup'				=> 'Gura アプリケーション セットアップ'
'Copy files to the directory:'			=> 'ファイルを以下のディレクトリにコピーする:'
'Create a desktop icon'					=> 'デスクトップアイコンを作成する'
'Clean old configuration files etc.'	=> '古いコンフィグレーションファイルなどを消去する'
'Create a start menu icon (Gura\\Application\\%s)' \
										=> 'スタートメニューアイコンを作成する (Gura\\Application\\%s)'
'Setup has been done successfully.'		=> 'セットアップを完了しました'
'Setup'									=> 'セットアップ'
'Cancel'								=> 'キャンセル'
'Create &ZIP file'						=> 'ZIP ファイル作成'
'Create &DMG file'						=> 'DMG ファイル作成'
'ZIP file %s was created.'				=> 'ZIP ファイル %s を作成しました'
'DMG file %s was created.'				=> 'DMG ファイル %s を作成しました'
R'''
Gura %d.%d.%d or later is required.
Latest version is available at the official site http://www.gura-lang.org/.
''' => R'''
Gura %d.%d.%d またはそれ以降のバージョンが必要です。
最新版はオフィシャルサイト http://www.gura-lang.org/ で入手できます。
'''
}
}

(transDict = transDicts.get(sys.langcode)) && string.translator {|x| transDict.get(x, x)}

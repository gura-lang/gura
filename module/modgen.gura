#!/bin/usr/env gura

//======== Template of Build Script ========
tmpl_fileBuild = R'''
#!/usr/bin/env gura
import(modbuild)

builder = modbuild.Builder()
builder.build('${dotName}', ['module-${ubarName}.cpp'])
'''.template()

//======== Template of Test Script ========
tmpl_fileTest = R'''
#!/usr/bin/env gura
import(helper.test) {*}
import(${dotName})

testcase {
	println(${dotName}.test(3, 4))
}
'''.template()

//======== Template of Precompiled Header File ========
tmpl_Afx = R'''
#ifndef ${incOnceMacroNameAfx}
#define ${incOnceMacroNameAfx}
#include "${fileHdr}"
#endif
'''.template()

//======== Generate Header File ========
tmpl_fileHdr = R'''
//=============================================================================
// Gura module: ${dotName}
//=============================================================================
#ifndef ${incOnceMacroName}
#define ${incOnceMacroName}
#include <gura.h>

Gura_BeginModuleHeader(${ubarName})
Gura_EndModuleHeader(${ubarName})

#endif
'''.template()

//======== Generate Source File ========
tmpl_fileSrc = R'''
//=============================================================================
// Gura module: ${dotName}
//=============================================================================
#include "${fileAfx}"

Gura_BeginModuleBody(${ubarName})

//-----------------------------------------------------------------------------
// Module functions
//-----------------------------------------------------------------------------
// ${dotName}.test(num1:number, num2:number)
Gura_DeclareFunction(test)
{
	SetMode(RSLTMODE_Normal, FLAG_None);
	DeclareArg(env, "num1", VTYPE_number);
	DeclareArg(env, "num2", VTYPE_number);
	AddHelp(Gura_Symbol(en), Help::FMT_markdown,
	"This function adds two numbers and returns the result."
	);
}

Gura_ImplementFunction(test)
{
	return Value(args.GetNumber(0) + args.GetNumber(1));
}

//-----------------------------------------------------------------------------
// Module entry
//-----------------------------------------------------------------------------
Gura_ModuleEntry()
{
	// function assignment
	Gura_AssignFunction(test);
	return true;
}

Gura_ModuleTerminate()
{
}

Gura_EndModuleBody(${ubarName}, ${baseName})

Gura_RegisterModule(${ubarName})
'''.template()

//======== main function ========
main() = {
	if (sys.argv.len() < 1) {
		sys.stderr.println('module name needs to be specified')
		sys.exit(1)
	}
	fields = path.filename(sys.argv[0]).split('.'):list
	dotName = fields.join('.')
	ubarName = fields.join('_')
	baseName = fields[-1]
	fileBuild = 'build.gura'
	fileTest = 'test-' + ubarName + '.gura'
	fileAfx = 'stdafx.h'
	fileHdr = 'module-' + ubarName + '.h'
	fileSrc = 'module-' + ubarName + '.cpp'
	incOnceMacroName = '__GURA_MODULE_' + ubarName.upper()  + '_H__'
	incOnceMacroNameAfx = '__GURA_MODULE_' + ubarName.upper()  + '_STDAFX_H__'
	if (path.exists([fileBuild, fileTest, fileAfx, fileHdr, fileSrc]).or()) {
		println('file already exists')
		sys.exit(1)
	}
	tmpl_fileBuild.render(open(fileBuild, 'w').addcr(false))
	tmpl_fileTest.render(open(fileTest, 'w').addcr(false))
	tmpl_fileAfx.render(open(fileAfx, 'w').addcr(false))
	tmpl_fileHdr.render(open(fileHdr, 'w').addcr(false))
	tmpl_fileSrc.render(open(fileSrc, 'w').addcr(false))
	fs.chmod('a+x', fileBuild)
	fs.chmod('a+x', fileTest)
	R'''
	Following files were generated.
	- Build Script: ${fileBuild}
	- Test Script:  ${fileTest}
	- Source Files: ${fileAfx}, ${fileHdr}, ${fileSrc}
	'''.template().render(sys.stdout)
	sys.exit(0)
}

main()

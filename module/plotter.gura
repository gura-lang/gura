#!/usr/bin/env gura
import(cairo)

//-----------------------------------------------------------------------------
// Coord
//-----------------------------------------------------------------------------
Coord = struct(x:number, y:number):map

//-----------------------------------------------------------------------------
// FuncInfo
//-----------------------------------------------------------------------------
FuncInfo = struct(func:function, lineStyle?:symbol)

//-----------------------------------------------------------------------------
// PlotInfo
//-----------------------------------------------------------------------------
PlotInfo = struct(coords[]:Coord, markerStyle?:symbol, markerSize?:number, lineStyle?:symbol)

//-----------------------------------------------------------------------------
// Canvas
//-----------------------------------------------------------------------------
Canvas = class {
	public {
		margine,
	}
	__init__() = {
		this.mgnLeft = 10
		this.mgnRight = 10
		this.mgnTop = 10
		this.mgnBottom = 10
		this.wdSkip = 10
		this.htSkip = 10
		this.graphs = []
	}
	graph() {block?} = {
		g = Graph()
		this.graphs.add(g)
		if (block) {block(g)} else {g}
	}
	render(cr:cairo.context, nCols?:number):void = {
		nGraphs = this.graphs.len()
		if (nCols) {
			nGraphsHorz = min(nCols, nGraphs)
			nGraphsVert = int((nGraphs + nCols - 1) / nCols)
		} else {
			nGraphsHorz = nGraphs
			nGraphsVert = 1
		}
		width = (cr.width - this.mgnLeft - this.mgnRight - this.wdSkip * (nGraphsHorz - 1)) / nGraphsHorz
		height = (cr.height - this.mgnTop - this.mgnBottom - this.htSkip * (nGraphsVert - 1)) / nGraphsVert
		gIter = this.graphs.each()
		cross (iGraphVert in range(nGraphsVert), iGraphHorz in range(nGraphsHorz)) {
			g = gIter.next()
			!g && break
			x = this.mgnLeft + iGraphHorz * (width + this.wdSkip)
			y = this.mgnTop + iGraphVert * (height + this.htSkip)
			g.render(cr, x, y, width, height)
		}
	}
}

//-----------------------------------------------------------------------------
// Graph
//-----------------------------------------------------------------------------
Graph = class {
	public {
		xMin, xMax
		yMin, yMax
		cntSamples,
		markerStyleDefault,
		markerSizeDefault,
		lineStyleDefault,
	}
	__init__() = {
		this.fontName = if (sys.platform == `mswin) {
			'Sans'
		} elsif (sys.platform == `linux) {
			'Sans'
		} elsif (sys.platform == `darwin) {
			'Hiragino Kaku Gothic Pro'
		} else {
			'Sans'
		}
		this.funcInfos = []
		this.plotInfos = []
		[this.xMin, this.xMax] = [-10, 10]
		[this.yMin, this.yMax] = [-10, 10]
		this.cntSamples = 100
		this.markerStyleDefault = `square
		this.markerSizeDefault = 10
		this.lineStyleDefault = `none
		this.dict@drawMarker = %{
			`pixel			=> this.drawMarker_pixel
			`square			=> this.drawMarker_square
			`point			=> this.drawMarker_point
			`circle			=> this.drawMarker_circle
			`triangle_down	=> this.drawMarker_triangle_down
			`triangle_up	=> this.drawMarker_triangle_up
			`triangle_left	=> this.drawMarker_triangle_left
			`triangle_right	=> this.drawMarker_triangle_right
			`tri_down		=> this.drawMarker_tri_down
			`tri_up			=> this.drawMarker_tri_up
			`tri_left		=> this.drawMarker_tri_left
			`tri_right		=> this.drawMarker_tri_right
			`x				=> this.drawMarker_x
			`plus			=> this.drawMarker_plus
			`diamond		=> this.drawMarker_diamond
			`dia			=> this.drawMarker_dia
		}
	}
	coordX(x:number):map = {
		this.xAxis + (x - this.xMin) * this.wdAxis / (this.xMax - this.xMin)
	}
	coordY(y:number):map = {
		this.yAxis + this.htAxis - (y - this.yMin) * this.htAxis / (this.yMax - this.yMin)
	}
	coord(x:number, y:number) = [coordX(x), coordY(y)]
	calcStep(tMin:number, tMax:number) = {
		tRange = tMax - tMin
		nScales = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000]
		tStepBase = 10 ** (int(math.log10(tRange)) - 2)
		tSteps = tStepBase * nScales
		(tSteps.filter(tRange / tSteps >= 10):list).last()
	}
	drawHline(cr:cairo.context, x:number, y:number, width:number):map:void = {
		cr.move_to(x, y).rel_line_to(width, 0)
	}
	drawVline(cr:cairo.context, x:number, y:number, height:number):map:void = {
		cr.move_to(x, y).rel_line_to(0, height)
	}
	drawMarker(cr:cairo.context, x:number, y:number, markerStyle?:symbol, markerSize?:number):map:void = {
		markerStyle = markerStyle || this.markerStyleDefault
		markerSize = markerSize || this.markerSizeDefault
		this.dict@drawMarker[markerStyle](cr, x, y, markerSize)
	}
	drawMarker_pixel(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.rectangle(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize)
			cr.fill()
		}
	}
	drawMarker_square(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.rectangle(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize)
			cr.set_source_color(`white)
			cr.fill_preserve()
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_point(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.arc(x, y, markerSize / 2, 0, math.pi * 2)
			cr.fill()
		}
	}
	drawMarker_circle(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			cr.arc(x, y, markerSize / 2, 0, math.pi * 2)
			cr.set_source_color(`white)
			cr.fill_preserve()
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	makePath_triangle_down(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x, y + markerSizeHalf)
		cr.line_to(x - markerSizeTan, y - markerSizeHalf)
		cr.line_to(x + markerSizeTan, y - markerSizeHalf)
		cr.line_to(x, y + markerSizeHalf)
	}
	makePath_triangle_up(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x, y - markerSizeHalf)
		cr.line_to(x - markerSizeTan, y + markerSizeHalf)
		cr.line_to(x + markerSizeTan, y + markerSizeHalf)
		cr.line_to(x, y - markerSizeHalf)
	}
	makePath_triangle_left(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x - markerSizeHalf, y)
		cr.line_to(x + markerSizeHalf, y - markerSizeTan)
		cr.line_to(x + markerSizeHalf, y + markerSizeTan)
		cr.line_to(x - markerSizeHalf, y)
	}
	makePath_triangle_right(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		markerSizeTan = markerSize * 0.577	// 1 / sqrt(3)
		cr.move_to(x + markerSizeHalf, y)
		cr.line_to(x - markerSizeHalf, y - markerSizeTan)
		cr.line_to(x - markerSizeHalf, y + markerSizeTan)
		cr.line_to(x + markerSizeHalf, y)
	}
	drawMarker_triangle_down(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_down(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_triangle_up(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_up(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_triangle_left(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_left(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_triangle_right(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_right(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_tri_down(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_down(cr, x, y, markerSize)
			cr.set_source_color(`white)
			cr.fill_preserve()
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_tri_up(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_up(cr, x, y, markerSize)
			cr.set_source_color(`white)
			cr.fill_preserve()
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_tri_left(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_left(cr, x, y, markerSize)
			cr.set_source_color(`white)
			cr.fill_preserve()
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_tri_right(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_triangle_right(cr, x, y, markerSize)
			cr.set_source_color(`white)
			cr.fill_preserve()
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_x(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeHalf = markerSize / 2
		cr.save {
			cr.move_to(x - markerSizeHalf, y - markerSizeHalf)
			cr.line_to(x + markerSizeHalf, y + markerSizeHalf)
			cr.move_to(x + markerSizeHalf, y - markerSizeHalf)
			cr.line_to(x - markerSizeHalf, y + markerSizeHalf)
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawMarker_plus(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeSqrt = markerSize * 0.705
		cr.save {
			cr.move_to(x - markerSizeSqrt, y)
			cr.line_to(x + markerSizeSqrt, y)
			cr.move_to(x, y - markerSizeSqrt)
			cr.line_to(x, y + markerSizeSqrt)
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	makePath_diamond(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		markerSizeSqrt = markerSize * 0.707	// 1 / sqrt(2)
		cr.move_to(x + markerSizeSqrt, y)
		cr.line_to(x, y - markerSizeSqrt)
		cr.line_to(x - markerSizeSqrt, y)
		cr.line_to(x, y + markerSizeSqrt)
		cr.line_to(x + markerSizeSqrt, y)
	}
	drawMarker_diamond(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_diamond(cr, x, y, markerSize)
			cr.fill()
		}
	}
	drawMarker_dia(cr:cairo.context, x:number, y:number, markerSize:number):map:void = {
		cr.save {
			makePath_diamond(cr, x, y, markerSize)
			cr.set_source_color(`black)
			cr.set_line_width(1)
			cr.stroke()
		}
	}
	drawTextOnN(cr:cairo.context, x:number, y:number, text:string):map:void = {
		extText = cr.text_extents(text)
		cr.move_to(x - extText.x_advance / 2, y + extText.height)
		cr.show_text(text)
	}
	drawTextOnE(cr:cairo.context, x:number, y:number, text:string):map:void = {
		extText = cr.text_extents(text)
		cr.move_to(x - extText.x_advance, y + extText.height / 2)
		cr.show_text(text)
	}
	render(cr:cairo.context, x:number, y:number, width:number, height:number):void = {
		[this.xAxis, this.yAxis] = [x, y]
		[this.wdAxis, this.htAxis] = [width, height]
		this.drawAxis(cr)
		cr.save {
			this.clipAxis(cr)
			this.drawFuncs(cr)
			this.drawPlots(cr)
		}
	}
	clipAxis(cr:cairo.context) = {
		cr.rectangle(this.xAxis, this.yAxis, this.wdAxis, this.htAxis)
		cr.clip()
	}
	drawAxis(cr:cairo.context) = {
		tStep = this.calcStep(this.xMin, this.xMax)
		xCoords = (int(this.xMin / tStep) + (0 .. int((this.xMax - this.xMin) / tStep))) * tStep
		tStep = this.calcStep(this.yMin, this.yMax)
		yCoords = (int(this.yMin / tStep) + (0 .. int((this.yMax - this.yMin) / tStep))) * tStep
		cr.set_line_width(1)
		cr.save {
			cr.set_antialias(cairo.ANTIALIAS_NONE)
			cr.rectangle(this.xAxis, this.yAxis, this.wdAxis, this.htAxis)
			cr.stroke()
			this.clipAxis(cr)
			cr.set_antialias(cairo.ANTIALIAS_NONE)
			this.drawVline(cr, this.coordX(0), this.yAxis, this.htAxis)
			this.drawHline(cr, this.xAxis, this.coordY(0), this.wdAxis)
			cr.set_dash([], 0)
			cr.stroke()
			this.drawVline(cr, this.coordX(xCoords), this.yAxis, this.htAxis)
			this.drawHline(cr, this.xAxis, this.coordY(yCoords), this.wdAxis)
			cr.set_dash([2, 2], 0)
			cr.stroke()
		}
		cr.save {
			cr.select_font_face(this.fontName, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
			cr.set_font_size(15)
			this.drawTextOnN(cr, this.coordX(xCoords), this.coordY(0) + 4, format('%.1f', xCoords))
			this.drawTextOnE(cr, this.coordX(0) - 4, this.coordY(yCoords), format('%.1f', yCoords))
		}
	}
	drawFuncs(cr:cairo.context) = {
		cr.save {
			x = interval(this.xMin, this.xMax, this.cntSamples)
			y = interval(this.yMin, this.yMax, this.cntSamples)
			cr.set_antialias(cairo.ANTIALIAS_DEFAULT)
			this.funcInfos.each {|funcInfo|
				lineStyle = funcInfo.lineStyle || `solid
				syms = [funcInfo.func.decls:*symbol]
				if (syms.len() != 1) {
					raise(error.ValueError, 'wrong number of arguments')
				}
				(lineStyle == `none) && continue
				sym = syms.first()
				if (sym == `y) {
					cr.line_to(this.coordX(funcInfo.func(y)), this.coordY(y))
				} else {
					cr.line_to(this.coordX(x), this.coordY(funcInfo.func(x)))
				}
				applyLineStyle(cr, lineStyle)
				cr.stroke()
			}
		}
	}
	applyLineStyle(cr:cairo.context, lineStyle:symbol) = {
		if (lineStyle == `solid) {
			cr.set_dash(nil, 0)
		} elsif (lineStyle == `dot) {
			cr.set_dash([2, 2], 0)
		} elsif (lineStyle == `dash) {
			cr.set_dash([4, 2], 0)
		} elsif (lineStyle == `dashdot) {
			cr.set_dash([2, 2, 8, 2], 0)
		} else {
			raise(error.ValueError, 'invalid symbol')
		}
	}
	drawPlots(cr:cairo.context) = {
		cr.save {
			this.plotInfos.each {|plotInfo|
				lineStyle = plotInfo.lineStyle || this.lineStyleDefault
				if (lineStyle != `none) {
					cr.save {
						applyLineStyle(cr, lineStyle)
						cr.line_to(this.coordX(plotInfo.coords:*x), this.coordY(plotInfo.coords:*y))
						cr.stroke()
					}
				}
				plotInfo.coords.each {|coord|
					[x, y] = [this.coordX(coord.x), this.coordY(coord.y)]
					this.drawMarker(cr, x, y, plotInfo.markerStyle, plotInfo.markerSize)
				}
			}
		}
	}
	plot(coords[]:Coord, markerStyle?:symbol, markerSize?:number, lineStyle?:symbol) = {
		this.plotInfos.add(PlotInfo(coords, markerStyle, markerSize, lineStyle))
	}
	func(func:function, lineStyle?:symbol) = {
		this.funcInfos.add(FuncInfo(func, lineStyle))
	}
}


main() = {
	MakeRandCoords(xCenter:number, yCenter:number, xRange:number, yRange:number) = {
		Coord(xCenter + rands(nil, 10) * xRange - xRange / 2, yCenter + rands(nil, 10) * yRange - yRange / 2)
	}
	Canvas {|canvas|
		canvas.graph {|g|
			g.func(function(x):map {3 * math.sin(x)}, `solid)
			g.func(function(x):map {3 * math.cos(x)}, `dot)
			g.func(function(y):map {3 * math.sin(y)})
			g.func(function(y):map {3 * math.cos(y)})
		}
		canvas.graph {|g|
			symbols = [
				`pixel, `square, `point, `circle
				`triangle_down, `triangle_up, `triangle_left, `triangle_right
				`tri_down, `tri_up, `tri_left, `tri_right
				`x, `plus, `diamond, `dia
			]
			for (x in interval(g.xMin, g.xMax, symbols.len()):open, symbol in symbols) {
				g.plot([Coord(x, 9)], symbol)
			}
			g.plot(MakeRandCoords(5, 4, 8, 8), `circle, 10, `solid)
			g.plot(MakeRandCoords(5, -5, 8, 8), `point, 10, `dot)
			g.plot(MakeRandCoords(-5, -5, 8, 8), `point, 10, `dash)
			g.plot(MakeRandCoords(-5, 4, 8, 8), `point, 10, `dashdot)
		}
		canvas.graph()
		canvas.graph()
		canvas.graph()
		image(`rgba, 600, 800, `white) {|img|
			canvas.render(img, 2)
			img.show(680, 680)
		}
	}
}

if (__name__ == '__main__') {
	import(wx.show)
	main()
}

#!/usr/bin/env gura
import(conio)
import(markdown):binary:mixin_type {*}

MakeCaptionId(indices[]:number) = 'caption-' + format('%d', indices).join('-')

Renderer@html = class {
	__init__(out:stream:w, captionIndex:boolean) = {
		this.out = out
		this.indices = dim(6) {0}
		this.captionIndex = captionIndex
	}
	Render(doc:document):void = {
		this.RenderItem(doc.root)
	}
	RenderItem(item:item):map:void = {
		if (item.type == `root) {
			this.RenderItem(item.children)
		} elsif (item.type == `h1) {
			this.out.print('<h1>')
			if (this.captionIndex) {
				this.indices[0] += 1
				this.indices[1..5] = 0
				this.out.printf('<span class="caption-index-1">%d</span>',
								this.indices[0])
			}
			this.out.printf('<a name="%s">', MakeCaptionId([this.indices[0]]))
			this.out.print('</a>')
			this.RenderItem(item.children)
			this.out.print('</h1>\n')
		} elsif (item.type == `h2) {
			this.out.print('<h2>')
			if (this.captionIndex) {
				this.indices[1] += 1
				this.indices[2..5] = 0
				this.out.printf('<span class="caption-index-2">%d.%d</span>',
								this.indices[0..1]*)
			}
			this.out.printf('<a name="%s">', MakeCaptionId(this.indices[0..1]))
			this.out.print('</a>')
			this.RenderItem(item.children)
			this.out.print('</h2>\n')
		} elsif (item.type == `h3) {
			this.out.print('<h3>')
			if (this.captionIndex) {
				this.indices[2] += 1
				this.indices[3..5] = 0
				this.out.printf('<span class="caption-index-3">%d.%d.%d</span>',
								this.indices[0..2]*)
			}
			this.out.printf('<a name="%s">', MakeCaptionId(this.indices[0..2]))
			this.out.print('</a>')
			this.RenderItem(item.children)
			this.out.print('</h3>\n')
		} elsif (item.type == `h4) {
			this.out.print('<h4>')
			if (this.captionIndex) {
				this.indices[3] += 1
				this.indices[4..5] = 0
				this.out.printf('<span class="caption-index-4">%d.%d.%d.%d</span>',
								this.indices[0..3]*)
			}
			this.out.printf('<a name="%s">', MakeCaptionId(this.indices[0..3]))
			this.out.print('</a>')
			this.RenderItem(item.children)
			this.out.print('</h4>\n')
		} elsif (item.type == `h5) {
			this.out.print('<h5>')
			if (this.captionIndex) {
				this.indices[4] += 1
				this.indices[5] = 0
				this.out.printf('<span class="caption-index-5">%d.%d.%d.%d.%d</span>',
								this.indices[0..4]*)
			}
			this.out.printf('<a name="%s">', MakeCaptionId(this.indices[0..4]))
			this.out.print('</a>')
			this.RenderItem(item.children)
			this.out.print('</h5>\n')
		} elsif (item.type == `h6) {
			this.out.print('<h6>')
			if (this.captionIndex) {
				this.indices[5] += 1
				this.out.printf('<span class="caption-index-6">%d.%d.%d.%d.%d.%d</span>',
								this.indices[0..5]*)
			}
			this.out.printf('<a name="%s">', MakeCaptionId(this.indices[0..5]))
			this.out.print('</a>')
			this.RenderItem(item.children)
			this.out.print('</h6>\n')
		} elsif (item.type == `p) {
			this.out.print('<p>\n')
			this.RenderItem(item.children)
			this.out.println()
			this.out.print('</p>\n')
		} elsif (item.type == `blockquote) {
			this.out.print('<blockquote>\n')
			this.RenderItem(item.children)
			this.out.println()
			this.out.print('</blockquote>\n')
		} elsif (item.type == `em) {
			this.out.print('<em>')
			this.RenderItem(item.children)
			this.out.print('</em>')
		} elsif (item.type == `strong) {
			this.out.print('<strong>')
			this.RenderItem(item.children)
			this.out.print('</strong>')
		} elsif (item.type == `codeblock) {
			this.out.print('<pre><code>')
			this.RenderItem(item.children)
			this.out.print('</code></pre>\n')
		} elsif (item.type == `ol) {
			this.out.print('<ol>\n')
			this.RenderItem(item.children)
			this.out.print('</ol>\n')
		} elsif (item.type == `ul) {
			this.out.print('<ul>\n')
			this.RenderItem(item.children)
			this.out.print('</ul>\n')
		} elsif (item.type == `li) {
			this.out.print('<li>')
			this.RenderItem(item.children)
			this.out.print('</li>\n')
		} elsif (item.type == `line) {
			this.RenderItem(item.children)
			this.out.print('\n')
		} elsif (item.type == `a) {
			this.out.print('<a')
			item.url && this.out.print(' href="', item.url.encodeuri(), '"')
			item.title && this.out.print(' title="', item.title.escapehtml(), '"')
			this.out.print('>')
			this.RenderItem(item.children)
			this.out.print('</a>')
		} elsif (item.type == `img) {
			this.out.print('<img')
			item.url && this.out.print(' src="', item.url.encodeuri(), '"')
			item.text && this.out.print(' alt="', item.text.escapehtml(), '"')
			item.title && this.out.print(' title="', item.title.escapehtml(), '"')
			this.out.print('>')
		} elsif (item.type == `text) {
			this.out.print(item.text.escapehtml())
		} elsif (item.type == `code) {
			this.out.print('<code>')
			this.out.print(item.text.escapehtml())
			this.out.print('</code>')
		} elsif (item.type == `entity) {
			this.out.print('&', item.text.escapehtml(), ';')
		} elsif (item.type == `tag) {
			this.out.print('<')
			this.out.print(item.text)
			item.attrs && this.out.print(' ', item.attrs)
			if (item.children) {
				this.out.println('>')
				item.children && this.RenderItem(item.children)
				this.out.print('</')
				this.out.print(item.text)
				this.out.println('>')
			} else {
				this.out.println(' />')
			}
		} elsif (item.type == `hr) {
			this.out.print('<hr />\n')
		} elsif (item.type == `br) {
			this.out.print('<br />\n')
		}
	}
}

Renderer@rtf = class {
	__init__(out:stream:w) = {
		this.out = out
		this.quoteLevel = 0
		this.listLevel = 0
		this.indentPerQuote = 720
		this.indentPerList = 360
	}
	Render(doc:document):void = {
		this.RenderItem(doc.root)
	}
	RenderItem(item:item):map:void = {
		if (item.type == `root) {
			this.out.println(r'{\rtf')
			this.RenderItem(item.children)
			this.out.println('}')
		} elsif (item.type == `h1) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h2) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h3) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h4) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h5) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h6) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs16 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `p) {
			this.out.printf(r'{\pard \ql \f0 \sa180 \li%d \fi0 ',
									this.quoteLevel * this.indentPerQuote)
			this.RenderItem(item.children)
			this.out.println()
			this.out.println(r'\par}')
		} elsif (item.type == `blockquote) {
			this.quoteLevel += 1
			this.RenderItem(item.children)
			this.out.println()
			this.quoteLevel -= 1
		} elsif (item.type == `em) {
			this.out.print(r'{\i ')
			this.RenderItem(item.children)
			this.out.print(r'}')
		} elsif (item.type == `strong) {
			this.out.print(r'{\b ')
			this.RenderItem(item.children)
			this.out.print(r'}')
		} elsif (item.type == `codeblock) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ')
			item.children.each {|itemChild, i|
				(i > 0) && this.out.println(r'\line')
				this.RenderItem(itemChild.children)
			}
			this.out.println(r'\par}')
		} elsif (item.type == `ol) {
			this.RenderListItem(item)
		} elsif (item.type == `ul) {
			this.RenderListItem(item)
		} elsif (item.type == `li) {
			// nothing to do here
		} elsif (item.type == `line) {
			this.RenderItem(item.children)
			this.out.println(r'\line')
		} elsif (item.type == `a) {
			this.out.println(r'{\field{\*\fldinst{HYPERLINK "%s"}}{\fldrslt{\ul' % this.EscapeText(item.url))
			this.RenderItem(item.children)
			this.out.println(r'}}}')
		} elsif (item.type == `img) {
			//this.out.print('<img')
			//item.url && this.out.print(' src="', item.url.encodeuri(), '"')
			//item.text && this.out.print(' alt="', item.text.escapehtml(), '"')
			//item.title && this.out.print(' title="', item.title.escapehtml(), '"')
			//this.out.print('>')
		} elsif (item.type == `text) {
			this.out.print(this.EscapeText(item.text))
		} elsif (item.type == `code) {
			this.out.print(r'{\f1 ')
			this.out.print(this.EscapeText(item.text))
			this.out.print(r'}')
		} elsif (item.type == `entity) {
			this.out.print(r'\u%d?', 169)
		} elsif (item.type == `tag) {
			
		} elsif (item.type == `hr) {
			this.out.println(r'{\pard \qc \f0 \sa180 \li0 \fi0 \emdash\emdash\emdash\emdash\emdash\par}')
		} elsif (item.type == `br) {
			this.out.println(r'\line')
		}
	}
	EscapeText(text:string):static = {
		text.replace('\\', '\\\\').replace('{', r'\{').replace('}', r'\}')
	}
	RenderListItem(item:item) = {
		parRenderFlag = false
		this.listLevel += 1
		item.children.each {|itemChild, i|
			(i > 0 && !parRenderFlag) && this.out.println(r'\par}')
			if (item.type == `ul) {
				this.out.print(r'{\pard \ql \f0 \sa0 \li%d \fi-360 \bullet \tx360\tab ' % \
							[this.indentPerList * this.listLevel])
			} else { // item.type == `ol
				this.out.print(r'{\pard \ql \f0 \sa0 \li%d \fi-360 %d. \tx360\tab ' % \
							[this.indentPerList * this.listLevel, i + 1])
			}
			parRenderFlag = false
			itemChild.children.each {|itemDescend, i|
				if (itemDescend.type == `ol || itemDescend.type == `ul) {
					this.out.println(r'\sa180\par}')
					parRenderFlag = true
				}
				this.RenderItem(itemDescend)
			}
			
		}
		!parRenderFlag && this.out.println(r'\sa180\par}')
		this.listLevel -= 1
	}
}

Renderer@console = class {
	__init__() = {
		[this.wdScreen, this.htScreen] = conio.getwinsize()
		if (this.wdScreen == 0) {
			this.wdScreen = 80
		}
		this.wdScreen -= 1
		if (this.htScreen == 0) {
			this.htScreen = 25
		}
		this.indexStack = []
	}
	Render(doc:document):void = {
		this.RenderItem(doc.root)
	}
	RenderItem(item:item):map:void = {
		if (item.type == `root) {
			this.RenderItem(item.children)
		} elsif (item.type == `h1) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h2) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h3) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h4) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h5) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h6) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `p) {
			println()
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `blockquote) {
			println()
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `em) {
			conio.setcolor(`red) {
				this.RenderItem(item.children)
			}
		} elsif (item.type == `strong) {
			conio.setcolor(`red) {
				this.RenderItem(item.children)
			}
		} elsif (item.type == `codeblock) {
			println()
			conio.setcolor(`blue) {
				this.RenderItem(item.children)
			}
		} elsif (item.type == `ol) {
			println()
			this.indexStack.add(0)
			this.RenderItem(item.children)
			this.indexStack.erase(-1)
		} elsif (item.type == `ul) {
			println()
			this.indexStack.add(nil)
			this.RenderItem(item.children)
			this.indexStack.erase(-1)
		} elsif (item.type == `li) {
			(this.indexStack.len() > 0) && print('  ' * (this.indexStack.len() - 1))
			index = this.indexStack[-1]
			if (index) {
				printf('%d. ', index + 1)
				this.indexStack[-1] += 1
			} else {
				print('- ')
			}
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `line) {
			print('|   ')
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `a) {
			this.RenderItem(item.children)
		} elsif (item.type == `img) {
			print('[', item.text, ']')
		} elsif (item.type == `text) {
			print(item.text)
		} elsif (item.type == `code) {
			conio.setcolor(`blue) {
				print(item.text)
			}
		} elsif (item.type == `entity) {
			conio.setcolor(`black, `white) {
				print(item.text.escapehtml())
			}
		} elsif (item.type == `tag) {
			if (item.text == 'table') {
				this.RenderTable(item)
			} else {
				item.children && this.RenderItem(item.children)
			}
		} elsif (item.type == `hr) {
			println('--------')
		} elsif (item.type == `br) {
			println()
		}
	}
	RenderTable(item:item) = {
		rows = item.children.each():xlist {|item|
			(item.type != `tag || item.text.lower() != 'tr') && continue
			headerFlag = false
			cols = item.children.each():xlist {|item|
				(item.type != `tag) && continue
				tagName = item.text.lower()
				if (tagName == 'th') {
					headerFlag = true
				} elsif (tagName == 'td') {
					// nothing to do
				} else {
					continue
				}
				TableCol(JoinText(item))
			}
			TableRow(headerFlag, cols)
		}
		nCols = rows:*cols:*len().max()
		rows::cols = rows:*cols::align(nCols, TableCol('')):list
		widths = repeat(nCols):list {|iCol|
			rows:*cols:*get(iCol):*text:*len().max()
		}
		wdAvailable = this.wdScreen + 1 - nCols // subtract width for vertical bar
		wdThreshold = int(wdAvailable / nCols)
		wdSum = widths.sum()
		if (wdSum > wdAvailable) {
			widthsShort = widths.filter(widths < wdThreshold)
			widthsShortSum = widthsShort.sum() || 0
			widthsLongSum = wdSum - widthsShortSum
			wdRest = wdAvailable - widthsShortSum
			if (wdRest < 0) {
				widthsWk = int(widths * wdAvailable / wdSum)
			} else {
				widthsWk = widths.each():list {|width|
					if (width < wdThreshold) {
						width
					} else {
						width * wdRest / widthsLongSum
					}
				}
			}
			if ((widthsWk > 0).and()) {
				widths = widthsWk
			}
		}
		separator = ('-' * widths).join('+')
		rows.each {|row|
			textsFolded = row.cols:*text.each():list {|text, i|
				text.split('\n'):*foldw(widths[i]).flat().each()
			}
			while ((texts = textsFolded:*next()).or()) {
				println(format('%-*s', widths, texts || '').join('|'))
			}
			row.headerFlag && println(separator)
		}
	}
}

TableCol = struct(text:string)
TableRow = struct(headerFlag:boolean, cols[]:TableCol)

JoinText(item:item):map = {
	if (item.children) {
		JoinText(item.children).join()
	} else {
		item.text
	}
}

Renderer@toc = class {
	__init__(handler:function) = {
		this.handler = handler
		this.text = nil
		this.indices = dim(6) {0}
	}
	Render(doc:document):void = {
		this.RenderItem(doc.root)
	}
	RenderItem(item:item):map:void = {
		if (item.type == `root) {
			this.RenderItem(item.children)
		} elsif (item.type == `h1) {
			this.indices[0] += 1
			this.indices[1..5] = 0
			this.text = ''
			this.RenderItem(item.children)
			this.handler(0, this.indices, MakeCaptionId([this.indices[0]]), this.text)
			this.text = nil
		} elsif (item.type == `h2) {
			this.indices[1] += 1
			this.indices[2..5] = 0
			this.text = ''
			this.RenderItem(item.children)
			this.handler(1, this.indices, MakeCaptionId(this.indices[0..1]), this.text)
			this.text = nil
		} elsif (item.type == `h3) {
			this.indices[2] += 1
			this.indices[3..5] = 0
			this.text = ''
			this.RenderItem(item.children)
			this.handler(2, this.indices, MakeCaptionId(this.indices[0..2]), this.text)
			this.text = nil
		} elsif (item.type == `h4) {
			this.indices[3] += 1
			this.indices[4..5] = 0
			this.text = ''
			this.RenderItem(item.children)
			this.handler(3, this.indices, MakeCaptionId(this.indices[0..3]), this.text)
			this.text = nil
		} elsif (item.type == `h5) {
			this.indices[4] += 1
			this.indices[5] = 0
			this.text = ''
			this.RenderItem(item.children)
			this.handler(4, this.indices, MakeCaptionId(this.indices[0..4]), this.text)
			this.text = nil
		} elsif (item.type == `h6) {
			this.indices[5] += 1
			this.text = ''
			this.RenderItem(item.children)
			this.handler(5, this.indices, MakeCaptionId(this.indices[0..5]), this.text)
			this.text = nil
		} elsif (item.type == `p) {
			// nothing to do
		} elsif (item.type == `blockquote) {
			// nothing to do
		} elsif (item.type == `em) {
			this.RenderItem(item.children)
		} elsif (item.type == `strong) {
			this.RenderItem(item.children)
		} elsif (item.type == `codeblock) {
			// nothing to do
		} elsif (item.type == `ol) {
			// nothing to do
		} elsif (item.type == `ul) {
			// nothing to do
		} elsif (item.type == `li) {
			// nothing to do
		} elsif (item.type == `line) {
			// nothing to do
		} elsif (item.type == `a) {
			this.RenderItem(item.children)
		} elsif (item.type == `img) {
			// nothing to do
		} elsif (item.type == `text) {
			if (this.text) {
				this.text += item.text
			}
		} elsif (item.type == `code) {
			if (this.text) {
				this.text += item.text
			}
		} elsif (item.type == `entity) {
			// nothing to do
		} elsif (item.type == `tag) {
			// nothing to do
		} elsif (item.type == `hr) {
			// nothing to do
		} elsif (item.type == `br) {
			// nothing to do
		}
	}
}

_funcdoc(func:function, fullname:string, fmt:string):map = {
	str = '**' + fullname.replace('_', '\\_').replace('`', '\\`') + '**\n\n'
	if (fmt.find('`')) {
		str += '`` ' + fmt + '``\n\n'
	} else {
		str += '`' + fmt + '`\n\n'
	}
	if (help = function.gethelp(func, `en)) {
		str +=  help.text
		if (!str.endswith('\n')) { str += '\n' }
		str += '\n'
	}
	str
}

funcdoc(funcs+:function) = {
	funcs = funcs.each()
	_funcdoc(funcs, function.getfullname(funcs), function.getformat(funcs))
}

classref(`document).writefunc(func:function, fullname:string, fmt:string) = {
	this << _funcdoc(func, fullname, fmt)
}

operator(`<<).assign(`document, `function) {|doc, func|
	doc.writefunc(func, function.getfullname(func), function.getformat(func))
}

classref(`document).render@html(
		out?:stream:w, easyFormatFlag:boolean => true, captionIndex:boolean => false) = {
	out = out || sys.stdout
	easyFormatFlag && out.print(R'''
	<html>
	<head>
	</head>
	<body>
	''')
	Renderer@html(out, captionIndex).Render(this)
	easyFormatFlag && out.print(R'''
	</body>
	</html>
	''')
}

classref(`document).render@rtf(out?:stream:w) = {
	out = out || sys.stdout
	Renderer@rtf(out).Render(this)
}

classref(`document).render@console() = {
	Renderer@console().Render(this)
}

classref(`document).render@toc() {block} = {
	Renderer@toc(block).Render(this)
}

setpresenter {|title:string:nil, doc:document:nil|
	title && conio.setcolor(`green) {
		println(title)
	}
	doc && Renderer@console().Render(doc)
}

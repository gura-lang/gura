#!/usr/bin/env gura
import(conio)
import(markdown):binary:mixin_type {*}

Renderer@html = class {
	__init__(out:stream:w) = {
		this.out = out
	}
	Render(doc:document):void = {
		this.RenderItem(doc.root)
	}
	RenderHead():void = {
		R'''
		<head>
		</head>
		'''.template().render(this.out)
	}
	RenderItem(item:item):map:void = {
		if (item.type == `root) {
			this.out.print('<html>\n')
			this.RenderHead()
			this.out.print('<body>\n')
			this.RenderItem(item.children)
			this.out.print('</body>\n')
			this.out.print('</html>\n')
		} elsif (item.type == `h1) {
			this.out.print('<h1>')
			this.RenderItem(item.children)
			this.out.print('</h1>\n')
		} elsif (item.type == `h2) {
			this.out.print('<h2>')
			this.RenderItem(item.children)
			this.out.print('</h2>\n')
		} elsif (item.type == `h3) {
			this.out.print('<h3>')
			this.RenderItem(item.children)
			this.out.print('</h3>\n')
		} elsif (item.type == `h4) {
			this.out.print('<h4>')
			this.RenderItem(item.children)
			this.out.print('</h4>\n')
		} elsif (item.type == `h5) {
			this.out.print('<h5>')
			this.RenderItem(item.children)
			this.out.print('</h5>\n')
		} elsif (item.type == `h6) {
			this.out.print('<h6>')
			this.RenderItem(item.children)
			this.out.print('</h6>\n')
		} elsif (item.type == `p) {
			this.out.print('<p>\n')
			this.RenderItem(item.children)
			this.out.println()
			this.out.print('</p>\n')
		} elsif (item.type == `blockquote) {
			this.out.print('<blockquote>\n')
			this.RenderItem(item.children)
			this.out.println()
			this.out.print('</blockquote>\n')
		} elsif (item.type == `em) {
			this.out.print('<em>')
			this.RenderItem(item.children)
			this.out.print('</em>')
		} elsif (item.type == `strong) {
			this.out.print('<strong>')
			this.RenderItem(item.children)
			this.out.print('</strong>')
		} elsif (item.type == `codeblock) {
			this.out.print('<pre><code>')
			this.RenderItem(item.children)
			this.out.print('</code></pre>\n')
		} elsif (item.type == `ol) {
			this.out.print('<ol>\n')
			this.RenderItem(item.children)
			this.out.print('</ol>\n')
		} elsif (item.type == `ul) {
			this.out.print('<ul>\n')
			this.RenderItem(item.children)
			this.out.print('</ul>\n')
		} elsif (item.type == `li) {
			this.out.print('<li>')
			this.RenderItem(item.children)
			this.out.print('</li>\n')
		} elsif (item.type == `line) {
			this.RenderItem(item.children)
			this.out.print('\n')
		} elsif (item.type == `a) {
			this.out.print('<a')
			item.url && this.out.print(' href="', item.url.encodeuri(), '"')
			item.title && this.out.print(' title="', item.title.escapehtml(), '"')
			this.out.print('>')
			this.RenderItem(item.children)
			this.out.print('</a>')
		} elsif (item.type == `img) {
			this.out.print('<img')
			item.url && this.out.print(' src="', item.url.encodeuri(), '"')
			item.text && this.out.print(' alt="', item.text.escapehtml(), '"')
			item.title && this.out.print(' title="', item.title.escapehtml(), '"')
			this.out.print('>')
		} elsif (item.type == `text) {
			this.out.print(item.text.escapehtml())
		} elsif (item.type == `code) {
			this.out.print('<code>')
			this.out.print(item.text.escapehtml())
			this.out.print('</code>')
		} elsif (item.type == `entity) {
			this.out.print('&', item.text.escapehtml(), ';')
		} elsif (item.type == `tag) {
			this.out.print('<')
			this.out.print(item.text)
			item.attrs && this.out.print(' ', item.attrs)
			if (item.children) {
				this.out.println('>')
				item.children && this.RenderItem(item.children)
				this.out.print('</')
				this.out.print(item.text)
				this.out.println('>')
			} else {
				this.out.println(' />')
			}
		} elsif (item.type == `hr) {
			this.out.print('<hr />\n')
		} elsif (item.type == `br) {
			this.out.print('<br />\n')
		}
	}
}

Renderer@rtf = class {
	__init__(out:stream:w) = {
		this.out = out
		this.quoteLevel = 0
		this.listLevel = 0
		this.indentPerQuote = 720
		this.indentPerList = 360
	}
	Render(doc:document):void = {
		this.RenderItem(doc.root)
	}
	RenderItem(item:item):map:void = {
		if (item.type == `root) {
			this.out.println(r'{\rtf')
			this.RenderItem(item.children)
			this.out.println('}')
		} elsif (item.type == `h1) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h2) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h3) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h4) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h5) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `h6) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs16 ')
			this.RenderItem(item.children)
			this.out.println(r'\par}')
		} elsif (item.type == `p) {
			this.out.printf(r'{\pard \ql \f0 \sa180 \li%d \fi0 ',
									this.quoteLevel * this.indentPerQuote)
			this.RenderItem(item.children)
			this.out.println()
			this.out.println(r'\par}')
		} elsif (item.type == `blockquote) {
			this.quoteLevel += 1
			this.RenderItem(item.children)
			this.out.println()
			this.quoteLevel -= 1
		} elsif (item.type == `em) {
			this.out.print(r'{\i ')
			this.RenderItem(item.children)
			this.out.print(r'}')
		} elsif (item.type == `strong) {
			this.out.print(r'{\b ')
			this.RenderItem(item.children)
			this.out.print(r'}')
		} elsif (item.type == `codeblock) {
			this.out.print(r'{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ')
			item.children.each {|itemChild, i|
				(i > 0) && this.out.println(r'\line')
				this.RenderItem(itemChild.children)
			}
			this.out.println(r'\par}')
		} elsif (item.type == `ol) {
			this.RenderListItem(item)
		} elsif (item.type == `ul) {
			this.RenderListItem(item)
		} elsif (item.type == `li) {
			// nothing to do here
		} elsif (item.type == `line) {
			this.RenderItem(item.children)
			this.out.println(r'\line')
		} elsif (item.type == `a) {
			this.out.println(r'{\field{\*\fldinst{HYPERLINK "%s"}}{\fldrslt{\ul' % this.EscapeText(item.url))
			this.RenderItem(item.children)
			this.out.println(r'}}}')
		} elsif (item.type == `img) {
			//this.out.print('<img')
			//item.url && this.out.print(' src="', item.url.encodeuri(), '"')
			//item.text && this.out.print(' alt="', item.text.escapehtml(), '"')
			//item.title && this.out.print(' title="', item.title.escapehtml(), '"')
			//this.out.print('>')
		} elsif (item.type == `text) {
			this.out.print(this.EscapeText(item.text))
		} elsif (item.type == `code) {
			this.out.print(r'{\f1 ')
			this.out.print(this.EscapeText(item.text))
			this.out.print(r'}')
		} elsif (item.type == `entity) {
			this.out.print(r'\u%d?', 169)
		} elsif (item.type == `tag) {
			
		} elsif (item.type == `hr) {
			this.out.println(r'{\pard \qc \f0 \sa180 \li0 \fi0 \emdash\emdash\emdash\emdash\emdash\par}')
		} elsif (item.type == `br) {
			this.out.println(r'\line')
		}
	}
	EscapeText(text:string):static = {
		text.replace('\\', '\\\\').replace('{', r'\{').replace('}', r'\}')
	}
	RenderListItem(item:item) = {
		parRenderFlag = false
		this.listLevel += 1
		item.children.each {|itemChild, i|
			(i > 0 && !parRenderFlag) && this.out.println(r'\par}')
			if (item.type == `ul) {
				this.out.print(r'{\pard \ql \f0 \sa0 \li%d \fi-360 \bullet \tx360\tab ' % \
							[this.indentPerList * this.listLevel])
			} else { // item.type == `ol
				this.out.print(r'{\pard \ql \f0 \sa0 \li%d \fi-360 %d. \tx360\tab ' % \
							[this.indentPerList * this.listLevel, i + 1])
			}
			parRenderFlag = false
			itemChild.children.each {|itemDescend, i|
				if (itemDescend.type == `ol || itemDescend.type == `ul) {
					this.out.println(r'\sa180\par}')
					parRenderFlag = true
				}
				this.RenderItem(itemDescend)
			}
			
		}
		!parRenderFlag && this.out.println(r'\sa180\par}')
		this.listLevel -= 1
	}
}

Renderer@console = class {
	__init__() = {
	}
	Render(doc:document):void = {
		this.RenderItem(doc.root)
	}
	RenderItem(item:item):map:void = {
		if (item.type == `root) {
			this.RenderItem(item.children)
		} elsif (item.type == `h1) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h2) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h3) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h4) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h5) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `h6) {
			println()
			conio.setcolor(`green) {
				this.RenderItem(item.children)
			}
			println()
		} elsif (item.type == `p) {
			println()
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `blockquote) {
			println()
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `em) {
			conio.setcolor(`red) {
				this.RenderItem(item.children)
			}
		} elsif (item.type == `strong) {
			conio.setcolor(`red) {
				this.RenderItem(item.children)
			}
		} elsif (item.type == `codeblock) {
			println()
			conio.setcolor(`blue) {
				this.RenderItem(item.children)
			}
		} elsif (item.type == `ol) {
			println()
			this.RenderItem(item.children)
		} elsif (item.type == `ul) {
			println()
			this.RenderItem(item.children)
		} elsif (item.type == `li) {
			print('- ')
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `line) {
			print('|   ')
			this.RenderItem(item.children)
			println()
		} elsif (item.type == `a) {
			this.RenderItem(item.children)
		} elsif (item.type == `img) {
			print('[', item.text, ']')
		} elsif (item.type == `text) {
			print(item.text)
		} elsif (item.type == `code) {
			conio.setcolor(`blue) {
				print(item.text)
			}
		} elsif (item.type == `entity) {
			conio.setcolor(`black, `white) {
				print(item.text.escapehtml())
			}
		} elsif (item.type == `tag) {
			item.children && this.RenderItem(item.children)
		} elsif (item.type == `hr) {
			println('--------')
		} elsif (item.type == `br) {
			println()
		}
	}
}

operator(`<<).assign(`document, `function) {|doc, func|
	doc << '**' + function.getfullname(func).replace('_', '\\_') + '**'
	doc << '\n'
	doc << '`' + function.getformat(func) + '`'
	doc << '\n'
	if (help = function.gethelp(func, `en)) { doc << help.text }
}

classref(`document).render@html(out?:stream:w) = {
	if (out) {
		Renderer@html(out).Render(this)
	} else {
		buff = binary()
		Renderer@html(buff).Render(this)
		buff.decode('utf-8')
	}
}

classref(`document).render@rtf(out?:stream:w) = {
	if (out) {
		Renderer@rtf(out).Render(this)
	} else {
		buff = binary()
		Renderer@rtf(buff).Render(this)
		buff.decode('utf-8')
	}
}

classref(`document).render@console() = {
	Renderer@console().Render(this)
}

setpresenter {|title:string:nil, doc:document:nil|
	title && conio.setcolor(`green) {
		println(title)
	}
	doc && Renderer@console().Render(doc)
}

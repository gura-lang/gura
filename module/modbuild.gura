#!/usr/bin/env gura
import(argopt)

//-----------------------------------------------------------------------------
// Rule
//-----------------------------------------------------------------------------
Rule = struct(fileNameTgt:string, fileNamesSrc[]:string, func:function) {
	execute() = {
		if (!path.exists(this.fileNameTgt) || \
				(path.stat(this.fileNameTgt).mtime < path.stat(this.fileNamesSrc):*mtime).or()) {
			this.func()
		} else {
			true
		}
	}
}

//-----------------------------------------------------------------------------
// BuilderBase
//-----------------------------------------------------------------------------
BuilderBase = class {
	public {
		guestDir
		errorFlag
		debFiles
		rpmFiles
		debFilesDevel
		rpmFilesDevel
		incDirs
		libDirs
		cflags
		ldflags
		libs
		dlls
		precompile
	}
	__init__(outDir:string) = {
		argopt.Parser {|p|
			p.addFlag('verbose',	'v', 'verbose mode')
			p.addFlag('noopt',		'n', 'inhibit optimization')
			p.addFlag('quiet',		'q', 'suppress warning messages')
			p.addFlag('debug',		'd', 'build module with debug information')
			p.addFlag('progress',	'p', 'print building progress')
			p.addFlag('here',		'h', 'output files in the current directory')
			p.addFlag('hint',		'H', 'print hint')
			p.addFlag('rebuild',	'r', 'clean output files before building')
			p.addParam('basedir',	'b', 'specify basement output directory', 'DIR', '')
			p.addParam('incdir',	'I', 'specify include directory', 'DIR')
			p.addParam('libdir',	'L', 'specify library directory', 'DIR')
			p.addParam('moddir',	'M', 'specify directory to which module is installed', 'DIR')
			try {
				[this.cfg, argv] = p.parse(sys.argv)
			} catch {|e|
				sys.stderr.println(e.text)
				sys.exit(1)
			}
			this.command = if (argv.len() == 0) {
				`build
			} elsif (argv[0] == 'help') {
				printHelp(p)
				sys.exit(1)
			} elsif (argv[0] == 'clean') {
				`clean
			} elsif (argv[0] == 'build-install') {
				`build_install
			} elsif (argv[0] == 'install') {
				`install
			} elsif (argv[0] == 'nothing') {
				`nothing
			} else {
				sys.stderr.println('unknown command: ', argv[0])
				sys.exit(1)
			}
		}
		this.rules = []
		this.errorFlag = false
		this.debFiles = nil
		this.rpmFiles = nil
		this.debFilesDevel = nil
		this.rpmFilesDevel = nil
		this.incDirs = []
		this.libDirs = []
		this.cfg['incdir'] && this.incDirs.append(this.cfg['incdir'])
		this.cfg['libdir'] && this.libDirs.append(this.cfg['libdir'])
		this.modDir = this.cfg['moddir'] || sys.moddir
		this.hint = nil
		this.skipErrorFlag = false
		this.verboseFlag = this.cfg['verbose']
		this.quietFlag = this.cfg['quiet']
		this.debugFlag = this.cfg['debug']
		this.nooptFlag = this.cfg['noopt']
		this.progressFlag = this.cfg['progress']
		baseDir = this.cfg['basedir']
		this.outDir = (this.cfg['here'] && baseDir) || path.join(baseDir, outDir)
	}
	build(fileNameTgt:string, fileNamesSrc[]:string, fileNamesScript[]:string => []) = {
		if (this.cfg['hint']) {
			this.printHint()
			return(this)
		}
		fileNameTgt = fileNameTgt.replace('/', path.sep_file)
		if (!fileNameTgt.endswith('.gurd')) {
			fileNameTgt = fileNameTgt + '.gurd'
		}
		fileNameDoc = fileNameTgt.replace('.gurd', '.doc.gura')
		if (this.command == `clean) {
			this.doClean(fileNameTgt)
			return(this)
		}
		if (this.command == `install) {
			this.doInstall(path.join(this.outDir, fileNameTgt), 'site')
			this.doInstall(fileNameDoc, 'site')
			this.doInstall(fileNamesScript, 'site')
			return(this)
		}
		if (this.command == `nothing) {
			return(this)
		}
		if (this.cfg['rebuild']) {
			this.doClean(fileNameTgt)
		}
		outDir = path.join(this.outDir, path.dirname(fileNameTgt))
		!path.exists(outDir) && fs.mkdir(outDir):tree
		(this.precompile && !this.doPrecompile()) && this.printHint() && return(this)
		this.rules.each {|rule|
			!rule.execute() && \
				(this.skipErrorFlag || this.printHint() && return(this))
		}
		fileNamesSrc.each {|fileNameSrc, idx|
			!this.doCompile(fileNameSrc, idx, fileNamesSrc.len()) && \
				(this.skipErrorFlag || this.printHint() && return(this))
		}
		fileNamesObj = this.makeFileNameObj(fileNamesSrc)
		!this.doLink(fileNameTgt, fileNamesObj) && this.printHint() && return(this)
		if (this.command == `build_install) {
			this.doInstall(path.join(this.outDir, fileNameTgt), 'site')
			this.doInstall(fileNameDoc, 'site')
			this.doInstall(fileNamesScript, 'site')
		}
		this
	}
	execute(pathname:string, args*:string) = {
		this.verboseFlag && println(pathname, ' ', args.join(' '))
		buff = binary()
		os.redirect(nil, buff) {
			result = (os.exec(pathname, args*) == 0)
			(!result || !this.quietFlag) && sys.stderr.print(os.fromnative(buff))
			result
		}
	}
	printHint() = {
		this.hint && print(this.hint)
		if (this.debFilesDevel || this.rpmFilesDevel) {
			println('See the following steps to install necessary packages.')
			if (this.debFilesDevel) {
				println('- Install Debian packages:')
				println('  $ sudo apt-get install -y ', this.debFilesDevel.join(' '))
			}
			if (this.rpmFilesDevel) {
				println('- Install RPM packages:')
				println('  $ sudo yum install -y ', this.rpmFilesDevel.join(' '))
			}
		}
		true
	}
	doInstall(pathNameSrc:string, dirNameSub:string:nil):map = {
		//pathNameSrc = path.join(dirNameSrc, fileName)
		fileName = path.filename(pathNameSrc)
		!path.exists(pathNameSrc) && return
		if (dirNameSub) {
			pathNameDst = path.join(this.modDir, dirNameSub, fileName)
		} else {
			pathNameDst = path.join(this.modDir, fileName)
		}
		dirNameDst = path.dirname(pathNameDst)
		!path.exists(dirNameDst) && fs.mkdir(dirNameDst):tree
		try {
			stream.copy(pathNameSrc, pathNameDst):finalize
		} catch {
			println('-- failed to install: ', pathNameDst)
			return
		}
		println('-- installed: ', pathNameDst)
	}
	addRule(fileNameTgt:string, fileNamesSrc[]:string) {block} = {
		this.rules.add(Rule(fileNameTgt, fileNamesSrc, block))
	}
}

//-----------------------------------------------------------------------------
// Help
//-----------------------------------------------------------------------------
printHelp(p:argopt.Parser) = sys.stderr.print(eR'''
usage: ${path.filename(sys.argv[0])} [options] command
command:
 clean              clean output files
 install            install built files
 build-install      build and install files
 help               print this help
options:
 ${p.formatHelp():linefeed}
''')

//-----------------------------------------------------------------------------
// Builder
//-----------------------------------------------------------------------------
if (sys.build == `msc) {
	Builder = class(BuilderBase) {
		__init__() = {|'msc'|
			this.guestDir = path.join(sys.datadir, 'guest')
			this.cflags = [
				'/nologo', '/DGURA_MODULE_SEPARATED'
				'/EHsc', '/MD'
				'/I' + sys.incdir
			]
			this.ldflags = [
				'/INCREMENTAL:NO', '/NOLOGO', '/DLL',
				'/SUBSYSTEM:WINDOWS', '/OPT:REF', '/OPT:ICF', '/DYNAMICBASE:NO',
				'/MACHINE:X86', '/ERRORREPORT:PROMPT'
			]
			this.libs = [
				path.join(sys.libdir,
					cond(this.debugFlag, 'libguracored-x86.lib', 'libguracore-x86.lib')),
				'kernel32.lib', 'user32.lib', 'gdi32.lib', 'winspool.lib', 'comdlg32.lib',
				'advapi32.lib', 'shell32.lib', 'ole32.lib', 'oleaut32.lib', 'uuid.lib',
				'odbc32.lib', 'odbccp32.lib', 'ws2_32.lib', 'opengl32.lib', 'glu32.lib',
				'comctl32.lib', 'winmm.lib', 'rpcrt4.lib'
			]
			this.dlls = []
			this.precompile = nil
		}
		makeFileNameObj(fileNameSrc:string):map = {
			path.join(this.outDir, path.filename(fileNameSrc).\
				replace('.cpp', '.obj').replace('.c', '.obj').replace('.h', '.obj').replace('.rc', '.res'))
		}
		makeLibPath(lib:string):map = {
			if (lib.find('/') || lib.find('\\')) {
				libPath = lib
			} else {
				candList = path.join(os.getenv('PATH').split(';'), lib)
				candList = candList.filter(path.exists(candList)):list
				if (candList.isempty()) {
					sys.stderr.println(lib, ' has not been found in search paths\n')
					sys.exit(1)
				}
				libPath = candList.first()
			}
			libPath
		}
		doPrecompile() = {
			fileNameSrc = this.precompile.replace('.h', '.cpp')
			fileNameObj = this.makeFileNameObj(fileNameSrc)
			cflags = []
			cflags.append('/I' + this.incDirs)
			cflags.append(this.cflags)
			this.debugFlag && cflags.append('/ZI')
			cflags.append('/Yc' + this.precompile)
			if (!path.exists(fileNameObj) || path.stat(fileNameObj).mtime < path.stat(fileNameSrc).mtime) {
				this.progressFlag && println('-- compiling: ', fileNameSrc)
				if (!this.execute('cl', cflags*, '/Fo' + fileNameObj, '/c', fileNameSrc)) {
					this.errorFlag = true
					return(false)
				}
			}
			true
		}
		doCompile(fileNameSrc:string, idx:number, cnt:number):map = {
			if (fileNameSrc.endswith('.rc'):icase) {
				fileNameObj = this.makeFileNameObj(fileNameSrc)
				rcflags = []
				rcflags.append('/I' + this.incDirs)
				if (!path.exists(fileNameObj) || path.stat(fileNameObj).mtime < path.stat(fileNameSrc).mtime) {
					this.progressFlag && printf('-- compiling: %*d/%d %s\n',
										format('%d', cnt).len(), idx + 1, cnt, fileNameSrc)
					if (!this.execute('rc', rcflags*, '/fo' + fileNameObj, fileNameSrc)) {
						this.errorFlag = true
						return(false)
					}
				}
			} else {
				firstFlag = (idx == 0)
				fileNameObj = this.makeFileNameObj(fileNameSrc)
				cflags = []
				cflags.append('/I' + this.incDirs)
				cflags.append(this.cflags)
				this.debugFlag && cflags.append('/ZI')
				if (firstFlag) {
					cflags.append('/DGURA_MODULE_MAIN')
				} else {
					this.precompile && cflags.append('/Yu' + this.precompile)
				}
				if (!path.exists(fileNameObj) || path.stat(fileNameObj).mtime < path.stat(fileNameSrc).mtime) {
					this.progressFlag && printf('-- compiling: %*d/%d %s\n',
										format('%d', cnt).len(), idx + 1, cnt, fileNameSrc)
					if (!this.execute('cl', cflags*, '/Fo' + fileNameObj, '/c', fileNameSrc)) {
						this.errorFlag = true
						return(false)
					}
				}
			}
			true
		}
		doLink(fileNameTgt:string, fileNamesObj[]:string) = {
			fileNameTgt = path.join(this.outDir, fileNameTgt)
			ldflags = this.ldflags.clone()
			ldflags.append('/LIBPATH:' + this.libDirs)
			libs = this.libs.clone()
			fileNamesObjEx = []
			this.precompile && fileNamesObjEx.append(this.makeFileNameObj(this.precompile))
			libs.append(this.makeLibPath(this.dlls::replace('.dll', '.lib'):icase))
			this.debugFlag && ldflags.append(['/DEBUG'])
			if (!path.exists(fileNameTgt) || (path.stat(fileNameTgt).mtime < path.stat(fileNamesObj):*mtime).or()) {
				fileNameCmd = path.join(this.outDir, 'linker.cmd')
				open(fileNameCmd, 'w').println(fileNamesObj)
				if (!this.execute('link', ldflags*,
							'/OUT:' + fileNameTgt, '@' + fileNameCmd, fileNamesObjEx*, libs*)) {
					this.errorFlag = true
					return(false)
				}
				println('-- generated: ', fileNameTgt)
			}
			true
		}
		doClean(fileNameTgt:string) = {
			!path.exists(this.outDir) && return
			fileNames = path.dir(this.outDir, fileNameTgt, '*.obj', '*.exp', '*.lib', '*.cmd'):list
			fileNames.isempty() && return
			fileNames.each {|fileName|
				fs.remove(fileName)
				this.verboseFlag && println('-- deleted: ', fileName)
			}
			println('-- cleaned')
		}
	}
} elsif (sys.build == `gnuc) {
	Builder = class(BuilderBase) {
		__init__() = {|'gnuc'|
			this.cflags = [
				'-DGURA_MODULE_SEPARATED', '-fPIC'
			]
			//!this.nooptFlag && this.cflags.append('-O2') // disabled to improve compiling speed
			// It seems that Mac's clang supports -shared option.
			this.ldflags = ['-shared']
			this.libs = []
			this.precompile = nil
		}
		makeFileNameObj(fileNameSrc:string):map = {
			path.join(this.outDir, path.filename(fileNameSrc). \
					  replace('.cpp', '.o').replace('.c', '.o'))
		}
		doPrecompile() = {
			fileNameSrc = this.precompile
			cflags = this.cflags.clone()
			cflags.append('-std=c++11')
			cflags.append('-I' + this.incDirs)
			cflags.append('-I' + sys.incdir)
			this.debugFlag && cflags.append('-g')
			fileNameObj = fileNameSrc + '.gch'
			if (!path.exists(fileNameObj) || path.stat(fileNameObj).mtime < path.stat(fileNameSrc).mtime) {
				this.progressFlag && println('-- compiling: ', fileNameSrc)
				if (!this.execute('gcc', cflags*, '-x', 'c++-header', fileNameSrc)) {
					this.errorFlag = true
					return(false)
				}
			}
			true
		}
		doCompile(fileNameSrc:string, idx:number, cnt:number):map = {
			firstFlag = (idx == 0)
			fileNameObj = this.makeFileNameObj(fileNameSrc)
			cflags = this.cflags.clone()
			if (!fileNameSrc.endswith('.c'):icase) {
				cflags.append('-std=c++11')
			}
			cflags.append('-I' + this.incDirs)
			cflags.append('-I' + sys.incdir)
			this.debugFlag && cflags.append('-g')
			if (firstFlag) {
				cflags.append('-DGURA_MODULE_MAIN')
			} elsif (sys.platform == `darwin && this.precompile) {
				cflags.append('-include', this.precompile)
			}
			if (!path.exists(fileNameObj) || path.stat(fileNameObj).mtime < path.stat(fileNameSrc).mtime) {
				this.progressFlag && printf('-- compiling: %*d/%d %s\n',
									format('%d', cnt).len(), idx + 1, cnt, fileNameSrc)
				if (!this.execute('gcc', cflags*, '-o', fileNameObj, '-c', fileNameSrc)) {
					this.errorFlag = true
					return(false)
				}
			}
			true
		}
		doLink(fileNameTgt:string, fileNamesObj[]:string) = {
			fileNameTgt = path.join(this.outDir, fileNameTgt)
			ldflags = this.ldflags.clone()
			if (sys.platform == `darwin) {
				ldflags.append('-install_name', path.filename(fileNameTgt))
			}
			ldflags.append('-L' + this.libDirs)
			if (!(sys.libdir in ['/lib', '/usr/lib', '/usr/local/lib'])) {
				ldflags.append('-L' + sys.libdir)
			}
			libs = '-l' + this.libs.clone()
			fileNamesObjEx = []
			this.precompile && fileNamesObjEx.append(this.makeFileNameObj(this.precompile))
			this.debugFlag && ldflags.append('-g')
			if (!path.exists(fileNameTgt) || (path.stat(fileNameTgt).mtime < path.stat(fileNamesObj):*mtime).or()) {
				fileNameCmd = path.join(this.outDir, 'linker.cmd')
				open(fileNameCmd, 'w').println(fileNamesObj)
				if (!this.execute('gcc', '-o' + fileNameTgt, '@' + fileNameCmd, libs*,
								  '-lstdc++', '-lguracore', ldflags*)) {
					this.errorFlag = true
					return(false)
				}
				println('-- generated: ', fileNameTgt)
			}
			true
		}
		doClean(fileNameTgt:string) = {
			if (path.exists(this.outDir)) {
				fileNames = path.dir(this.outDir, fileNameTgt, '*.o', '*.cmd'):list
			} else {
				fileNames = []
			}
			fileNames.append(this.rules:*fileNameTgt)
			fileNames.append(path.dir('.', '*.gch', '*.pch'))
			fileNames.isempty() && return
			fileNames.each {|fileName|
				try {
					fs.remove(fileName)
					this.verboseFlag && println('-- deleted: ', fileName)
				} catch {}
			}
			println('-- cleaned')
		}
	}
} else {
	sys.stderr.println('unsupported build system')
	sys.exit(1)
}

#!/usr/bin/env gura
import(re)

tmplImplementation = R'''
// ${fi.moduleName}.${fi.funcNameGura}
Gura_DeclareFunction(${fi.funcNameGura})
{
	SetFuncAttr(VTYPE_any, RSLTMODE_${fi.resultMode}, ${('FLAG_' + fi.flags).join(' | ')});
	${if (fi.blockDeclared)}
	DeclareBlock(OCCUR_${fi.blockDeclared});
	${end}
	${for (arg in fi.args)}
	DeclareArg(env, "${arg.name}", VTYPE_${arg.valType}, OCCUR_${
							arg.occurPattern}, ${('FLAG_' + arg.flags).join(' | ')});
	${end}
	${fi.helps.each {|help|}}
	${help.ToString()}
	${end}
}

Gura_ImplementFunction(${fi.funcNameGura})
{
	${if (!fi.validFlag)}
#if 0
	${end}
	${for (arg in fi.args) {|idx|}}
	${arg.tmplGetter.render()}
	${end}
	${if (fi.body)}
${fi.body}
	${else}
	${fi.tmplCaller.render()}
	${end}
	${if (!fi.validFlag)}
#endif
	SetError_NotImpFunction(sig, "${fi.funcNameGura}");
	return Value::Null;
	${end}
}
'''.template()

tmplAssignment = R'''
Gura_AssignFunction(${fi.funcNameGura});
'''.template()

ArgInfo = struct(name:string, valType:string:nil, occurPattern:string:nil,
				 tmplGetter:template, flags[]:string)

TypeConv = struct(
		valType:string:nil, occurPattern:string:nil, flags[]:string,
		tmplGetter:string:nil, tmplGetterOpt:string:nil,
		tmplCaller:string:nil, voidFlag?:boolean)

Help = struct(lang:symbol, format:string, help:string) {
	ToString() = {
		str = 'AddHelp(\n'
		str += format('\tGura_Symbol(%s), Help::FMT_%s,\n', this.lang, this.format)
		text = this.help.replace('"', '\\"')
		if (text.isempty()) {
			str += '\t""'
		} else {
			str += ('\t"' + text.eachline():chop + '\\n"').join('\n')
		}
		str += ');\n'
	}
}

FuncInfo = class {
	public {
		funcNameC, funcNameGura, args, tmplCaller, resultMode, flags, body, helps
	}
	__init__(moduleName:string, decl:expr, typeConvDict:dict, funcNameTranslator:function:nil):map = {
		if (!decl.isassign()) {
			this.PrintError(decl, 'must be an assignment expression')
			sys.exit(1)
		}
		if (!decl.left.iscaller()) {
			this.PrintError(decl, "assinged target must be a caller")
			sys.exit(1)
		}
		caller = decl.left
		this.body = nil
		this.validFlag = true
		this.helps = []
		exprAssigned = decl.right
		while (exprAssigned.isbinaryop() && exprAssigned.operator.symbol == `% && \
												exprAssigned.right.isblock()) {
			args = exprAssigned.right.children::eval()
			if (!(args.len() == 3 && args[0].istype(`symbol) && \
						  args[1].istype(`string) && args[2].istype(`string))) {
				this.PrintError(decl, 'invalid format for help')
				sys.exit(1)
			}
			this.helps.add(Help(args*))
			exprAssigned = exprAssigned.left
		}
		if (exprAssigned.isvalue() && isstring(exprAssigned.value)) {
			this.body = exprAssigned.value
		} elsif (exprAssigned.isquote() && exprAssigned.child.isidentifier()) {
			sym = exprAssigned.child.symbol
			if (sym == `auto) {
				// nothing to do
			} elsif (sym == `unsupport) {
				this.validFlag = false
			} else {
				this.PrintError(decl, 'invalid symbol for assignment')
				sys.exit(1)
			}
		} else {
			this.PrintError(decl, 'assigned value must be a string')
			sys.exit(1)
		}
		this.blockDeclared = nil
		if (caller.block) {
			children = [caller.block.children]
			if (children.len() != 1) {
				this.PrintError(decl, 'block must contain a single expression')
				sys.exit(1)
			}
			child = children[0]
			if (child.isidentifier()) {
				this.blockDeclared = 'Once'
			} elsif (child.isunaryop()) {
				if (child.operator.symbol == `?) {
					this.blockDeclared = 'ZeroOrOnce'
				} else {
					this.PrintError(decl, 'suffixed operator must be ?')
					sys.exit(1)
				}
			} else {
				this.PrintError(decl, 'syntax error')
				sys.exit(1)
			}
		}
		this.moduleName = moduleName
		this.funcNameC:string = caller.car.symbol
		if (funcNameTranslator) {
			this.funcNameGura = funcNameTranslator(this.funcNameC)
		} else {
			this.funcNameGura = this.funcNameC
		}
		rtnTypeRaw = caller.attrfront.join('.')
		if (rtnTypeRaw.isempty() && !this.validFlag) {
			rtnTypeRaw = 'void'
		}
		if (caller.attrs.find(`const)) {
			rtnTypeRaw += ':const'
		}
		typeConv = typeConvDict.get(rtnTypeRaw)
		if (typeConv && typeConv.tmplCaller) {
			// nothing to do
		} elsif (!this.validFlag) {
			typeConv = typeConvDict.get('void')
		} else {
			this.PrintError(decl,
							'failed to convert return information "%s"', rtnTypeRaw)
			sys.exit(1)
		}
		this.tmplCaller = typeConv.tmplCaller.template()
		this.resultMode = 'Normal'
		this.flags = []
		if (typeConv.voidFlag) {
			this.resultMode = 'Void'
		}
		caller.attrs.find(`map) && this.flags.append('Map')
		this.flags.isempty() && this.flags.append('None')
		this.args = caller.cdr.each():list {|arg|
			if (arg.isindexer()) {
				identifier = arg.car
				argTypeRaw = identifier.attrfront.join('.') + '[]'
			} else {
				identifier = arg
				argTypeRaw = identifier.attrfront.join('.')
			}
			if (identifier.attrs.find(`const)) {
				argTypeRaw += ':const'
			}
			typeConv = typeConvDict.get(argTypeRaw)
			if (!typeConv) {
				this.PrintError(decl, 'failed to convert argument information %s', argTypeRaw)
				sys.exit(1)
			}
			flags = []
			flags.append(typeConv.flags)
			tmplGetter = typeConv.tmplGetter
			if (identifier.attrs.find(`nil)) {
				flags.append('Nil')
				tmplGetter = typeConv.tmplGetterOpt
			}
			flags.isempty() && flags.append('None')
			if (!tmplGetter) {
				this.PrintError(decl, 'failed to convert argument information %s', argTypeRaw)
				sys.exit(1)
			}
			name = identifier.symbol
			ArgInfo(name, typeConv.valType, typeConv.occurPattern,
					tmplGetter.template(), flags)
		}
	}
	MakeCaller() = ('%s(%s)' % [this.funcNameC, this.args:*name.join(', ')])
	PrintError(decl:expr, fmt:string, args*) = {
		sys.stderr.printf('%s:%d: %s\n',
				  path.filename(decl.source), decl.lineno, format(fmt, args*))
	}
	RenderImplementation() = {
		fi = this
		tmplImplementation.render()
	}
	RenderAssignment() = {
		fi = this
		tmplAssignment.render()
	}
}

typeConvDict_BuiltIn = %{
	'' => TypeConv(
			nil, nil, [],
			nil,
			nil,
			'')
	'void' => TypeConv(
			nil, nil, [],
			nil,
			nil,
			R'''
			${fi.MakeCaller()};
			return Value::Null;''', true)
	'bool' => TypeConv(
			'boolean', 'Once', [],
			'bool ${arg.name} = args.GetBoolean(${idx});',
			nil,
			R'''
			bool _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'char' => TypeConv(
			'number', 'Once', [],
			'char ${arg.name} = args.GetChar(${idx});',
			nil,
			R'''
			bool _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'short' => TypeConv(
			'number', 'Once', [],
			'short ${arg.name} = args.GetShort(${idx});',
			nil,
			R'''
			short _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'int' => TypeConv(
			'number', 'Once', [],
			'int ${arg.name} = args.GetInt(${idx});',
			nil,
			R'''
			int _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'long' => TypeConv(
			'number', 'Once', [],
			'long ${arg.name} = args.GetLong(${idx});',
			nil,
			R'''
			long _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'unsigned_char' => TypeConv(
			'number', 'Once', [],
			'unsigned char ${arg.name} = args.GetUChar(${idx});',
			nil,
			R'''
			unsigned char _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'unsigned_short' => TypeConv(
			'number', 'Once', [],
			'unsigned short ${arg.name} = args.GetUShort(${idx});',
			nil,
			R'''
			unsigned short _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'unsigned_int' => TypeConv(
			'number', 'Once', [],
			'unsigned int ${arg.name} = args.GetUInt(${idx});',
			nil,
			R'''
			unsigned int _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'unsigned_long' => TypeConv(
			'number', 'Once', [],
			'unsigned long ${arg.name} = args.GetULong(${idx});',
			nil,
			R'''
			unsigned long _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'UChar' => TypeConv(
			'number', 'Once', [],
			'UChar ${arg.name} = args.GetUChar(${idx});',
			nil,
			R'''
			UChar _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'UShort' => TypeConv(
			'number', 'Once', [],
			'UShort ${arg.name} = args.GetUShort(${idx});',
			nil,
			R'''
			UShort _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'UInt' => TypeConv(
			'number', 'Once', [],
			'UInt ${arg.name} = args.GetUInt(${idx});',
			nil,
			R'''
			UInt _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'ULong' => TypeConv(
			'number', 'Once', [],
			'ULong ${arg.name} = args.GetULong(${idx});',
			nil,
			R'''
			ULong _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'Int64' => TypeConv(
			'number', 'Once', [],
			'Int64 ${arg.name} = static_cast<Int64>(args.GetDouble(${idx}));',
			nil,
			R'''
			Int64 _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'UInt64' => TypeConv(
			'number', 'Once', [],
			'UInt64 ${arg.name} = static_cast<UInt64>(args.GetDouble(${idx}));',
			nil,
			R'''
			UInt64 _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'float' => TypeConv(
			'number', 'Once', [],
			'float ${arg.name} = args.GetFloat(${idx});',
			nil,
			R'''
			float _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'double' => TypeConv(
			'number', 'Once', [],
			'double ${arg.name} = args.GetDouble(${idx});',
			nil,
			R'''
			double _rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'char[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<char> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'short[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<short> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'int[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<int> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'long[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<long> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'unsigned_char[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<unsigned char> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'unsigned_short[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<unsigned short> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'unsigned_int[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<unsigned int> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'unsigned_long[]' => TypeConv(
			'number', 'Once', ['List'],
			'CArray<unsigned long> ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'number[]' => TypeConv(
			'number', 'Once', ['List'],
			'const ValueList & ${arg.name} = args.GetList(${idx});',
			nil,
			nil)
	'char@' => TypeConv(
			'string', 'Once', [],
			'char *${arg.name} = args.GetString(${idx});',
			nil,
			R'''
			char *_rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'char@:const' => TypeConv(
			'string', 'Once', [],
			'const char *${arg.name} = args.GetString(${idx});',
			nil,
			R'''
			const char *_rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'symbol' => TypeConv(
			'symbol', 'Once', [],
			'const Symbol *${arg.name} = args.GetSymbol(${idx});',
			nil,
			R'''
			const Symbol *_rtn = ${fi.MakeCaller()};
			return ReturnValue(env, sig, args, Value(_rtn));''')
	'binary' => TypeConv(
			'binary', 'Once', [],
			'const Binary &${arg.name} = Object_binary::GetObject(args, ${idx})->GetBinary();',
			nil,
			nil)
	'stream' => TypeConv(
			'stream', 'Once', [],
			'Stream &${arg.name} = Object_stream::GetObject(args, ${idx})->GetStream();',
			nil,
			nil)
	'image' => TypeConv(
			'image', 'Once', [],
			'Image *${arg.name} = Object_image::GetObject(args, ${idx})->GetImage();',
			nil,
			nil)
	'function' => TypeConv(
			'function', 'Once', [],
			'const Function *${arg.name} = Object_function::GetObject(args, ${idx})->GetFunction();',
			nil,
			nil)
}

Renderer = class {
	__init__(moduleName:string, decls:iterator,
			 typeConvDict:dict, funcNameTranslator:function:nil) = {
		typeConvDictWork = %{}
		typeConvDictWork.store(typeConvDict_BuiltIn)
		typeConvDictWork.store(typeConvDict)
		this.funcInfos = FuncInfo(moduleName, decls, typeConvDictWork, funcNameTranslator):list
	}
	Render(tmplSource:template, fileNameOut:string) = {
		renderer = this
		if (sys.argv.len() > 1 && sys.argv[1] == 'test') {
			tmplSource.render(sys.stdout)
		} else {
			tmplSource.render(fileNameOut)
			sys.stderr.println(fileNameOut, ' was created')
		}
	}
	RenderImplementation() = {
		this.funcInfos:*RenderImplementation() + '\n'
	}
	RenderAssignment() = {
		this.funcInfos:*RenderAssignment()
	}
}

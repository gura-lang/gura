#!/usr/bin/env gura
//
// make a ctype table
//
import(re)
import(utils)

funcTbl = [
	IsAlpha(ch) = {
		ord('a') <= ch && ch <= ord('z') || ord('A') <= ch && ch <= ord('Z')
	}
	IsDigit(ch) = {
		ord('0') <= ch && ch <= ord('9')
	}
	IsHexDigit(ch) = {
		ord('0') <= ch && ch <= ord('9') || \
		ord('A') <= ch && ch <= ord('F') || \
		ord('a') <= ch && ch <= ord('f')
	}
	IsOctDigit(ch) = {
		ord('0') <= ch && ch <= ord('7')
	}
	IsBinDigit(ch) = {
		ch in [ord('0'), ord('1')]
	}
	IsWhite(ch) = {
		ch == ord(' ') || ch == ord('\t')
	}
	IsSpace(ch) = {
		ch == ord(' ') || ch == ord('\t') || ch == ord('\r') || ch == ord('\n')
	}
	IsSJISFirst(ch) = {
		(0x81 <= ch && ch <= 0x9f) || \
		(0xe0 <= ch && ch <= 0xef) || \
		(0xfa <= ch && ch <= 0xfc)
	}
	IsSJISSecond(ch) = {
		(0x40 <= ch && ch <= 0x7e) || (0x80 <= ch && ch <= 0xfc)
	}
	IsUTF8First(ch) = {
		(ch & 0xc0) == 0xc0
	}
	IsUTF8Follower(ch) = {
		(ch & 0xc0) == 0x80
	}
	IsSymbolExtra(ch) = {
		ch == ord('_') || ch == ord('$') || ch == ord('@')
	}
	IsLower(ch) = {
		ord('a') <= ch && ch <= ord('z')
	}
	IsUpper(ch) = {
		ord('A') <= ch && ch <= ord('Z')
	}
	// RFC2396 URI Component
	IsURIC(ch) = {
		(ord('0') <= ch && ch <= ord('9')) || \
		(ord('A') <= ch && ch <= ord('Z')) || \
		(ord('a') <= ch && ch <= ord('z')) || \
		(ch in ord([';', '/', '?', ':', '@', '&', '=', '+', '$', ','])) || \
		(ch in ord(['-', '_', '.', '!', '~', '*', "'", '(', ')']))
	}
]

println('static const UInt32 __ctypeTbl[] = {')
for (ch in 0..255) {|i|
	(i % 4 == 0) && print('\t')
	bitPat = 0x00000000
	for (func in funcTbl) {|iBit|
		if (func(ch)) {
			bitPat |= (1 << iBit)
		}
	}
	printf('0x%08x', bitPat)
	print(if ((i + 1) % 4 == 0) { ',\n' } else { ', ' })
}
println('};')
varNames = 'CTYPE_' + re.sub('^Is', '', funcTbl:*name)
printf('enum {\n')
utils.Aligner(varNames) {|aligner|
	printf('\t%s%s= (1 << %d),\n', varNames, aligner.tab(varNames), 0..)
}
printf('};\n')
printf('inline bool %s(char ch) { return (GetCType(ch) & %s) != 0; }\n',
													funcTbl:*name, varNames)
